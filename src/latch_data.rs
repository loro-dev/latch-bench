pub const BYTES: &[u8] = b"loro\xc8\"\xb3k\xba\xee\xddY\x8d>\xd5\x80\x82?Y\xcb\x00\x02\x08\x05\xc4\x04\xd6\x08\x00\x01\x02$\x00\x01\x02\x86\x01\x00\x01\x02\xb0\x08\x00\x01\x02\x1e\x00\x04\x02\\\x00\x06\x02D\x00\x01\x02\x08\x00\x01\x02\xe2\x03\x00\x01\x02\xde\t\x00\n\x02\n\x00\x01\x02\xdeA\x00\x01\x02\x98\x01\x00\x04\x02\xca\x1c\x00\x04\x02\xa2\x08\x00\x01\x02\xea,\x00\x01\x02h\x00\x01\x02\xba\x05\x00\x01\x02\x0c\x00\x01\x02\x04\x00\x01\x02\xe0\x0c\x00\x01\x02\x18\x00\x01\x02\xe2\x04\x00\x01\x02\"\x00\x01\x02\xa0\x02\x00\x04\x02\x80\xa8\x01\x00\x04\x02\x9aO\x00\x04\x02\\\x00\x08\x02\x82\x01\x00\x01\x02\x92,\x00\x01\x02\xf4\x07\x00\x01\x02\x9a\x03\x00\x04\x02\xa2C\x00\x01\x02<\x00\x01\x02&\x00\x01\x02\x1c\x00\x01\x02\xda\x1e\x00\x01\x02\x9e\x01\x00\x01\x02\xd4\x02\x00\x01\x02\x9e\x01\x00\x01\x02P\x00\x01\x02\xea\x0b\x00\x01\x02\xea\x02\x00\x01\x02\n\x00\x01\x02 \x00\x01\x02\x08\x00\x01\x02\x06\x00\x01\x02\x14\x00\t\x02\x00\x02\x00\x02\x04\x00\x01\x02\x06\x00\x01\x02\x06\x00\x01\x02\x06\x00\x01\x02\x12\x00\x01\x02\x06\x00\r\x02\x00\x02\x00\x02\x00\x02\x18\x00\x01\x02\x04\x00\x01\x02\x0e\x00\x01\x02\x06\x00\x01\x02\x06\x00\x01\x02\x12\x00\x01\x02\x06\x00\x01\x02\n\x00\x05\x02\x00\x02\x06\x00\x01\x02\xc4\t\x00\x01\x02\x06\x00\x01\x02\x06\x00\x05\x02\x00\x02\x06\x00\x01\x02\x08\x00\r\x02\x00\x02\x00\x02\x00\x02\x06\x00\x01\x02\x14\x00\t\x02\x00\x02\x00\x02\x82\x04\x00\x01\x02\n\x00\x01\x020\x00\x11\x02\x00\x02\x00\x02\x00\x02\x00\x02 \x00\x01\x02\"\x00\x01\x02\x08\x00\x01\x02\x08\x00\x01\x02\x04\x00\x01\x02\x14\x00\x05\x02\x00\x02\x06\x00\x05\x02\x00\x02\x08\x00\x11\x02\x00\x02\x00\x02\x00\x02\x00\x02\n\x00\x01\x02\x04\x00\x01\x02\x08\x00\x01\x02\x08\x00\x01\x02\x06\x00\x01\x02\xa2\x1b\x00\x01\x02\x06\x00\x01\x02\xba\x04\x00\x01\x02\x06\x00\x05\x02\x00\x02\n\x00\x05\x02\x00\x02\x08\x00\x19\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02\x00\x02,\x00\x01\x02\x08\x00\x01\x02\xa8\t\x00\t\x02\x00\x02\x00\x02\x0c\x00\x01\x02.\x00\x01\x02\x0e\x00\x01\x02\x06\x00\x01\x02\x08\x00\t\x02\x00\x02\x00\x02\x06\x00\x01\x02\xa6\x03\x00\x05\x02\x00\x02\n\x00\x01\x02\x0e\x00\x05\x02\x00\x02\x06\x00\x01\x02\x06\x00\x01\x02\x06\x00\x01\x02\x10\x00\x01\x02\x04\x00\x05\x02\x00\x02\x08\x00\x01\x02\n\x00\x01\x02\x10\x00\x01\x02\x0c\x00\x01\x02\xa2\x01\x00\x05\x02\x00\x02\x14\x00\r\x02\x00\x02\x00\x02\x00\x02\xb4\x03\x00\xc5\x83\x03\x9f\x05\x00J\x02T(v\xef\x01\x01\x02\xb2\x01\x85\x01\"\x1b5<9h=\x00\x8c\x01DA\x1a\x02F\x0e\x02\x1a\t\x02EC\xe8\x01\x9f\x01\x0c\x00tH\x8d\x02\x94\x02\x91\x02\xd0\x02\x95\x02\xca\x02\x99\x02\x9e\x03\x9d\x02\xd4\x02\xa1\x02\xaa\x02\xa5\x02\xac\x02\xa9\x02\xe8\x02\xad\x02\xc6\x02\xb1\x02\xb8\x02\xb5\x02\x9c\x03\xb9\x02\xc0\x02\xbd\x02\xe2\x02\xc1\x02\xda\x02\x81\x01\x88\x01\x85\x01\x00\xbc\x01\x8b\x01\x0c\x92\x01\x87\x01\x14\xa8\x01\x7f\x0c\xa2\x01{\x14\x17(zsz\x9d\x01NZ\x02&UAj$\x02\x00\x066\x83\x05\xb4\x05\xb1\x05\xe0\x05\xb5\x05\xb6\x06\xb9\x05\xe8\x05\xbd\x05\xc6\x05\xc1\x05\xc8\x05\xc5\x05\xfa\x05\xc9\x05\xc2\x06\xcd\x05\xfc\x05\xd1\x05\xac\x05\x0265B?\x08\x82\x01? \x10,\x1ble\x82\x01=rm\xac\x01T\xff\x01\xde\x01\xdb\x01\xe6\x01\x06\xce\x01,\x14J(\xf3\x0b\xd8\x05\xd5\x05\xdc\x05\xd9\x05\x88\x06\xdd\x05\xbc\x06\xe1\x05\x90\x06\xe5\x05\xee\x05\xe9\x05\xf0\x05\xed\x05\xd6\t\xc4\x04\x88\x01\x81\x0e\xf6\x05\xf1\x05\x8a\x06\xf5\x05\xfc\x05\xf9\x05\xb4\x07\xfd\x05\xb8\x06\x81\x06\xf2\x06\x85\x06\xd8\x06\x89\x06\x90\x06\x8d\x06\xda\x07\x91\x06\xaa\x07\x95\x06\x84\x07\x99\x06\xa0\x06\x9d\x06\xdc\x07\xa1\x06\x84\x07\xa5\x06\xe6\x06\xa9\x06\xb0\x06\xad\x06\xfe\x07\xb1\x06\xbc\x07\xb5\x06\x94\x07\xb9\x06\xc0\x06\xbd\x06\xfc\x06\xc1\x06\xea\x07\xc5\x06\xa4\x08\xc9\x06\xe4\x07\xcd\x06\x9c\x08\xd1\x06\xda\x06\xd5\x06\xdc\x06\xd9\x06\x98\x07\xdd\x06\xbe\x07\xe1\x06\xc8\x07\xe5\x06\xf4\x07\xe9\x06\xf2\x06\xed\x06\xf4\x06\xf1\x06\xbc\x07\xf5\x06\x8e\x07\xf9\x06\x84\x07\xfd\x06\x82\x08\x81\x07\x88\x07\x85\x07\xd4\x07\x89\x07\xdc\x07\x8d\x07\xfe\x07\x91\x07\xb8\x08\x95\x07\xf2\x07\x99\x07\xd4\x07\x9d\x07\xe6\x07\xa1\x07\x86\x02\xe4\x05\xe1\x05\xe8\x05\xe5\x05\xc7\x01\xc0\x07\xbd\x07\xd0\x07\xc1\x07\x82\x08\xc5\x07\x86\x08\xc9\x07\x80\x08\xcd\x07\xf4\x07\xd1\x07\xf8\x07\xd5\x07\xbc\x08\xd9\x07\x8a\x08\xdd\x07\xf2\x07\xe1\x07\xe8\x07\xe5\x07\xee\x08\xe9\x07\xd4\x08\xed\x07\xe0\x08\xf1\x07\x84\x08\xf5\x07\xe2\x08\xf9\x07\xd6\t\xfd\x07\x90\x08\x81\x08\xb8\x08\x85\x08\x92\n\x89\x08\x9c\x08\x8d\x08\xd8\x08\x91\x08\x96\t\x95\x08\x9a\t\x99\x08\xb8\t\x9d\x08\xa4\x08\xa1\x08\xa4\t\xa5\x08\xd4\t\xa9\x08\xb0\t\xad\x08\xb4\x08\xb1\x08\x90\x0b\xb5\x08\xbc\x08\xb9\x08\xca\t\xbd\x08\xc4\x08\xc1\x08\xb6\x0b\x02\x16\x04\x00\x8b\x01*\n\x01\x1c\x10\x0f\xef\x0b\xc8\x08\xc5\x08\xcc\x08\xc9\x08\xb8\t\xcd\x08\xec\x08\xd1\x08\xfe\x08\xd5\x08\x82\t\xd9\x08\x94\t\xdd\x08\x9c\t\xe1\x08\xea\x08\xe5\x08\xec\x08\xe9\x08\xb2\t\xed\x08\xd4\t\xf1\x08\xf8\x08\xf5\x08\xe8\t\xf9\x08\xb1D\x00\x14\x13T,+(\xc7\x01\x00\x9e\x02\x02\x00\x02\x03\x00(\x04\x1e\xf6\x02h$\x8b\x01d \xc1\x04F\x16\x15\x00\x12\x01\x0e\x1d*\x04\x00)\xc1\x02\x000\x00\xbc\n+\x00\x02\x00\x04\x00Z\x003J\x01\x008\x01\x00\x02\x04\x00\x03\x02\x01\x04\x00!\x18\x10\x00\x02\x01\x0f\x01\x15\x01!\x13\x073\x0b\t\x1b\x03\x04\x01\x15\xd4\x03\x00\x06j:\xa3\x01\xec\x01\x002/\x01\x04\x00\x11\x06\x012\x00\xbb\x01\xe8\x01\xf29\x00\x16\x06\x00\x1f*\x00\n\x00\x06\xdf<\x02\x90\x03\x00\xae\x02\xe1\x03\xc4\x01\x01\r\t1\x04\x01\x05\xd8\x07\x00\x89\x05\x04\x00\x0b>;\x00\x01\x00F\x06\x00\x15\x02;\t\xe7\t\x196\x19\x8d\x07\x00\x01\x8e\x04\x06\x00W6\x1a86\x1a\n*2\"\xa3\x02\x1a06\x1c\x9f\x01\x16,2\x18yZ\x188\x154_\xa0\"\x00\xa1+\xbe\x0c\x0e\x18\x02\x14\x15\xe3\x0c\x00\xbe\x0c\x12\x11(\x00\x02\x01\x06\x00\x0f\xe5\x0c\x1a\x04v\n\x08\x06\x0e\x04\x02\t\x04V\x10\x85\x01\xa1\x01\x04\x00\x07\x04\x03@\"\x04\x00\x11\x02\x12\x08\x03\x06\x00\x10\x00O\x04\x00\x0b\x02\x0c`\x01\x0f\x03\n\x01?\r\x01!\r\x01\t\x01?\x1az\x0c\x83\x01x\x14\x02\x03\x1a\x01Z\x00.\x01\x83\x01\xbf\x01\x00\xe0\x10\x16\x00D\x0b,\x03\x04\x00\x01Z$\x03\x07\x01\x00\x16\x03\x04\x00\x01X\x06\x00\x01\x0c\x04\x0b-\x00\xc3\x03\x00&\x03\x16\x03\xa6\x01\n\x03\x80\x03\x97\x01\x03+\x1b\x05\x0b\x0f\x03#\x13#\x13\x04\x05\x0b\x01\x99\x01\t\x11!\xff\x0e\x04\x00\x17\x0c\x0b\x00\xda\x10\n\x03\x04\x03\"!\x05\xd9\x10\x04\x00\x0f\x08\xf8\x10\x0e\x00\xa0\x02j\x00\"\x04\x01\x04\x00\x07,\x03\x02\x01\x04\x00\x03b\x10\x04\x00;\x14\x13\x07\x01\x05\x16\x00\n\x03\x06\x05<\tK\x00\n\x03\x16\x01 \x00\x14\x01\x1e\t\x04\x00\x06\x00X\x04\x00\x0fb\xca\x05\x1f\x8f\x1d\xd0\x1e\x00\xdf\x07\x0b\x04\x00)\x1a\x00\x0c\x02\x01\"\x11\x0b\x00\n\t\x02\x03L \x0e\r\x00\x14\x00\x1c\x04\x00\x17\x02\x00\x01\x04\x18\x00\"\x0e\x07\x02\x01\x05\x04\x01\x03\x1d\x17\x04\x01\x0b\x1b\x13\x1f1\x05\x13\x04\x01)\t\x197\x05\x03\x13\x11\x1f\x13\x05\x01E\x1b\x03#\x11\x0b\x1bM\xdf\x011\x04\r\x01\xff\x10\x04\x00\x07\x02\xea\x18\x00\x1c\x08\x00\t\x1a\t\x10\x00\x01\x04\x00\r\x02\x00\x04\x00\x01\x1c\x02\x04\x00\x05\x02\n\x08\x04\x00\x03\x04\x03\x04\x00\x01\x1c\x04\x00\x01\x02\x04\x00\x0b\x08\x00\x02\x06\x00\x1c\x04\x003\x02\xf5\x13\x02\x00\x06\x03\x04\x03\x02\x01\x06\x05\x06\x05\x04\x03\x0c\x03\x12\x13\x00\x02\x00\x1c\x04\x00\x04\x06\x1b.^.\x08\x06.^.\x08\x066X.\x08\x04\x06\x7f\xaa\x01\x18\x062z\x06@h&\x06H\x9e\x01\x06x\xe2\x01\x06R\xc8\x01\x06T|\x06N8\xae\x02\x066\x84\x01\x06hfT\x91\x03\xbd\x03\xae\x04\x15\x031\x03\x01\xae\x02\x03O\x03a\x03c\x03\x01\x03\x01\x03\x00\x04\x01\x12\x00\x99\x10\x03\xa5\x01\x03\x01\x03\x01\x06\x03\r)\x03S\x031\x03\x01\x06\x03\r)\x03Y\x03)\x03\x01\x06\x03%)\x03Y\x03)\x03\x01\x03\x01\x00\xca\x16\x02\x00\x02\x00\x1c\x04\x00\xeb\x0c\n\x00\x13\xac\x0c\x02\n\x0b\x00\x08\x07\"\x03\x1b\x06\x01\x03\x19\x11\n\x01\x07\x05\x01\x1b\x05\x04\x01\x07\x05\x01\x1b\x07\x04\x01\x01\x05\x04\x01\x01\x19\x08\x01?\x0b\x0f\x1b_\x033\x03\x01oG\x03\x01\x03w\x03O\x03\x01\x03\xc3\x01\x03M\x03\x01\x03\xdd\x01\x03s\x03\x01\x03u\x04\x03\'C\x03\x01\x03!\x03c\x03;\x03\x01\x03u\x03-\x03\x01\x03\x01\xa7\x06\x04\x03\x05\x1b\x01\x05\x04\x01\x01\xb1\x06\x04\x00\x1d\x06\x8a\x1d\x8f\x1d\x08:(\nr\xe5\x01\x00\x08\x82\x01\x81\x01b\n\x04\x04\x0f\x00{\x00\x88\x08\x01\x85\x08\x00\x84\x08\x06\x02\x1d\x01\x02\x01\x04\x03\x02\x01\x06\x00P\x02\x00Y\x00\x0e\x04\x00\x05.-\x0b\x04\x01\x11@\x013J\x01\x11-\x07\x05\x04\x01\x04\x02\x07\x04\x05\x01\x83\x08\x04\x00\x07^\xc4\x01ls\x04\x02\t:\x02=v\x91\x03\x04\x00\x07\x02\x01\x1c\x03\x04\x00O\x06\x05\x00\x17^\x00\xb0\x01\x1c\x04\x01\x1d\x10\x028\x02\xd9\x02\xc6\x03\x00\xc5\x03\x00\x90\x01\x08\x02T \xaa\x02\x9d\x03\x80\x01\x02\x00\x0c\x08\x1c\x92\x02\xdd\x01\x01\xe4\n\x12\xe2\x01\xdd\x01\x04\x01W$\x0e\x00\xf0\x01\xdd\x01\x12#C\n\xca\x02\xcd\x01m\xe6\x01\xde\x01\xcd\x01[\x0c\xe2\x02&\x1e\x02\x87\x03\xdc\x03\xab\x03\x12\x02\x00\x18\x94\x02\x9e\x03\x9b\x03\xa6\x03\xa3\x03\x12,\x08>\xa4\x03\x87\x03\x06P\xbb\x04\x01\x16\x06\x007\x10\x0f\x1d\xe3\x0f\x00\xb0\x02\xb8\x0b\x84\x010\x1e (\x90\x01\xb8\x01Fr\x81\x14\x08\x88\x10\x0c\x0b\r\xc4\x024`\xe5\x05\x00\x02\x04\x00\xe3\x01>$\x0ez\x0e*\xd7\x01\x01\x07\xb7\x0b\x02O\xa2\x01\x00J\x00\'\x00\x16\x0c\x00\x0e\x07\"\x00\xaf\x03\x00\x8d\x01\x02\xea\x01\x02\x00\x01\xd2\x01Y\x00\x9e\x0f&\x00 \xd4\x01\x06\xa0\x01\x06\x80\x01\xa7\x02\n\xdd\x01\xd4\x01\x06\xa0\x01\x06\x80\x01\x83\x04\x9c\x05\"\x00\xa9\x03\x03\x01\x03\x01\xf1\x0f\x02\x96\x12\x00\xdd\x03\x00\x89\x0e-\x01\xe2\x11\x00\xd9\x03\x006\xaf\x11\x02\x002\x15\x1b\x01\x02\x00\x01\x0e\xe6\x11\x15\x1d\xe0\x03\x05\x15\x03\x01\xd5\x14\x00\x92\x02\t\x05!\x05\x0b\x01!\x03\x1dS\x01\xad\x01\x02\x9c\x04\x1b\x13\x04\x01\x05\x15\x0b\x01\x04\x02\x19T\x9b\x04\x00\xac\x01\x02\xc7\x02\xc8\x02Y\"!\"\x01\xbc\x01\x04\x01?\x06\x02\x01\xca\x0c\xa8\x01\xe7\x01`\xb5\x10\x02 \x1f\x01V\n\x10\x04\xe0\n\t\xaa\x02r}\xa2\x03\x87\x01\xa8\x01\x85\x01\xa2\x01\x83\x01\xb8\x02\x81\x01\xd2\x01\x7f\xfc\x01\x04\x00\x15\xbe\r\xac\x0bu\xae\x01\x01s\xd8\x01\x00,\x04\x00\x04\x0e\x13\x1b\xc0\x01\x02\n$\x04\xb2\x01\x9f\x03\x8a\x01\xa7\x0e\x04\x03+\x01\x81!\x06\x00\x17\x00x\x00\x08\x014!\xa0\n\xd1\x02_\xab\x01\x93\x01c\x93\x01=\xb5\x01\x03\x04\x01\x131\x07\x11\x05w\x13\x01\x0f\x1b\x01\x04\x00\x11\x0c\xd0\x018\x01 \x006\x00\xef\x01\x06\x00\t\n~\x01\x00\x02\x04\x01\x1b\x07\x17\x0c\x00\x10\x00f\x14\x00\n\x00 \t\x01\x04\x00\x17$\x08\xf6\x01=\x02*\x00\x8a\x04\x01\x00U`\x04\x00}\x02\x06\x02@\xbe\x06B\\\xdd\n;\x01\x02\x90\x01\xc2\x018\x90\x01\xa8\x01\\\x9d\x06b\x01\x02\x00d<\x94\x01\xac\x01`\xab\x04\x05\x01D\x05\x02\x01\x00\n\x00\xf3\x07\x024\x06\x10\x0f\x12\xaa\x04\xa5\x04\x00\x12\x00\n\x023\x16\xb8\x08\x05\x01\x03\x05\x07\x01\x8b\x01\x1d\x07\x04\x01#\x99\x02\x01\x03-\x01\x06\x03\x01\xba\t\x03l\xf0\x05\x01\xaf\x08@\x011<\x04\x01!\r\x00\x10\n\xbe\x01\xf8\x15\x02\x18\x06\x05\x0c\x00\x10\x02\x01\x00\x02\x04\x00\x15\x01\x0c\x00*\x01!\x01\x03\x0b\x0f\x0b\x0c\x03\x07\x01)\x02\x18\x0c\x03\r\x01\xcb\x02\x00\x1a\x00v\x1c\x06\x00O\x06\x03\x04\x01\x06\xa3\x01\x00\xa2\x01\x12\x01/<P\x00\x13\x16\x10\x9f\x02\x94\x01@\xdb\x01\xe0\x01?\x9f\x01\x16\x01\x05\x03\x01\x0f\x94\x02\x01\r\x01\x13\x017\x03\x07\x0f\x06\x01\x01\r\x08\x03!\x01\x86\t\x02\x10\x00\x0b\x03@\x00\x0e\x00\"\r\x13\x03\t/\x08\x03\x1b\x01\xf9\t\x00\x08 \x00\x1f\xec\x02\x02\x18\x0c\x00\x1c\xda\x07\x04\x03\x03\x00\x99\x18\x04\x00\x0b\xec\r\x01\x1f\x07\xd2\n\x10\x04\x00\r\x1c\x01\x0c@\x01\x0c\x08\x04\x00\x0f\x99\x19\x01@\x06\x03\x01\xdc\x0c8\x04\x00!\x0b\x00`\xda\x02\xf4\x08\x02\x08<\x03\x01\x17\x07\t\x03\x01\x05\x07\x04\x01)9\x03\x01\t\x01\x17\x0f\xbb\x07\x01\x13\x1b\x0b\x03\x13\x03\x01\xbd\x02\x01A\x1d+\x04\x03\x1d\x91\r\x01\xed\x05\x01\x0b[U\t\x01\t\x03\t\x1f\x0bu\x04\x03\x01W\x04\x03\x01\xa3\x01\x04\x03\x01\x8b\x01\x04\x03\x03\x011\x04\x03\x06\x01\x05\t=\x0b\x04\x01\x05U\x01\x05\x04\x01\x03\x99\x01)\x04\x01\t\t\xe7\x03\x01\t\x11\x06\x01\x01\x0f\x04\x01!\x053\x01V\xf2\n\x9e\x04\"\x1e\xb6\x01R\xaa\x0f\xc6\n8\x8c\x02\xe1.\x02\xf4.\x04\x00[\x12\x00\xd7.\x00\x02\x12r\x00\x80\x01\x0f\x07\x00b\x01\x00\xcd\x02\x04\xfe\x03#\x0f\x03\t\x13\x19\x013!=\x03%=\x13\r\x0f\t5\x01\x0f\x01\x07\xb0\x02\x02\x00\"\x03\x9e\x01\x04\x01\x1b\r\n\xb3\x01\x04\x01\x9e\x0b\xb1\x02\x14\xf0\x02\x00\xef\x02F\xb6\x02\xb3\x02\x04\x01\x1b9\t\x13\xd3\x0b \x00\xe8\x10 \x1c\xb4\x01P\xe6\x196\xc3-\x04\x00\x11\x9a0\x00\x04*\x80\x01}\x01\x00\x82\x01\x04\x00\'\xa9\x01\x01\xbf0\x00\x06\xb6\x01>\x94\x01d\x94\x01\xac\x01`\x8f\x07\x1c\x02\x01\xc8\n\x03\x00\xe1\n\x0c\x00M\xc8\x03\x02\x01\xc7\x03\x00\xb6\x05\xeb\x02\xac\x01G\xa2G\xd5F\x01C\x03\x8b\x01\x01\x02\xdc\x08&\x00\x83\t\x82\t%\x01\x8a\x06\xeb\x01\xee\x01\x01\xed\x01\x10\x07\x18\x00\x04\x00#\x95\x02\xb6\x02\x9a\x02\x04\x01!\x02D:\x12\x8a\x01,\xe1\x04\x9c\x08+\x89\x01\x119C\x01\x08\xb4\x01,\x14\x18\n\x1aa\x12\x04\n\x06x\xd0\x01\x16\x0e\xc6\x02L\xff\n\xda\x07\xca\x04\x00,\x04\x05\x00x\x01\x02\x0c\x07^\xee\x0c\xb0\x02\x01\xd2\x01\x01\xa4\x01F\x8c\x02FZ\x10BJ^\\\xaa\x014\xec\x01DZ\x80\x02V^\xe7\x0e\x10\x04\x00\'\x1e\xb71\xf8\x07\xb8\x1a\x8d\x13\x00\xfd\x01\x00\xea4\xb1<\xd6#.Vv\x10\xcd\x02\x00{.R\x04\x063R\x062V~\x10\xf5\x032b\\6Z\x82\x01\x14\xbb*\x00\x8c\x04\x98\x01\x00\x02\x01\x00*\'\x00\x02\x04\x01A\x00\x02\x00\x12\x02\x01\x10\x00\x12\x11\r\x1a-\x01\x00\xa3\x02\xa8\x04\x01\x02\xec\x01\x9c\x03\xa3\x0b\x02\x06\x00\xc9\x01*\x00&\x99\x06\x00\x98\x05\xac\x01\x04\x00\x04\x01\x01v\n\x00\x19\x9d\x02\x00\xe6\x02\x00\xec\t\x00\xfc\x02)\x05\x0f%\x00\xe4\x1a\x06\x03\x01\x0b\x04\x03\x01u\x06\x03\x01Q\x04\x03\x01-\x04\x03\x07\x01\x03/\x1d\x04\x03\t\x01\x03\x01\x03M\x04\x03\x01)\x04\x03\x0f\xbf\x12\x01\x17\x01\x8d\x01K\x01\x15\x04\x01\x0f\xd9\x01\x15\x89\x01#g\xed\x01\x01\xeb\x01\x04\x01\xad\x01K\x03\x01\x05\r\x03\x01\x0f\'\xa3\x02[\xfb\x04M\x17\x83\x04\x00\x8e\x14\x00\x12\x00\xdc\x02\x00\x04\x18\x00\xfc\x01\x00\x1c\x01\xb7\x01\x01\x00\x01\x82\x03\x02\x00\xd3\t\x02\xba\x0b\x00\x1e\x01\xe6\x04\x00\xd5\x02\x00\xd6\x02\x00\x97\x1f\x04\x10\x03\x0e\x00\x14\x15\r\x03\x06\x01\x02\x01\x02\x01\x04\x05\x14\x00\x96\x04!\x00\x08\x07\x00\xb2\x07\xa1\x05\x00\x02\x00\x1a\x00\x1e\x00\xc9\x02\x00\xb6\x02\x01\x04\x00M\x02\"2\x01\xc8\x01\x00\x11=H4\x00 \n\x02\x18A\x06\x00\x10\x00\x02\x00jE5\x00\x08\x00\xcc\x02\x01=J4\x00\x18\x00\x02\x00\x15\x06\x00\x07&\x00%\x0c\x04\x03\x056 \n\x04\x00U\x16\x03\x00\x02\x00\x13\x14V\x0e\x03\t\xad\x02\x01\xdc\x01\x01H\x9e\x03K>\x00\x01>=<\x00R\x068\x00,\x02\x00\x08\x05\xf9\x01\x00\x0c\x00\x08\x05\x92\x02TL\x04\x00\r\r\x10\x0f\x1e\x02\x08\x02\x04\x00A\x18\x06\x01E\x10\t\x05\x00\x10\x01\x12\x00\x1c\x00;\x10\x07\x00\x08\x00\xae\x02:\x015\x01\x02D_l4\x00 \n\x04\x00\x0b\'\x0e\x00\x02\x00\x08\x08\x00\x19$\x82\x01\xc5\x03\x07\xca\x03\xd9\n\x94\x14F8\x00\x1e\x01\x08\x06\x00\t#F\x08\n\t\x04\x00\x01\x18\x04\x00\x0f\"\xbd\x02\xf8\x03\x1c\xe3\x01\x02\x18\x04\x06\x00!\xcb\x07@b8\x00\n\xd8\x01\xe1\x01\xd0\x01\xe0\x0f\xcc\x01:ZrT\xaa\x01\xe5\x02\x04\x03\x11\x01\xdd\x02\x01\xa0\x06\x00~\xfa\x05\xc6\x01\xc3:\x04\x02)\x00\x01\x02\x00\x02\x00\x04\x00\x06 $\x00\x0c\x03\xd2\x01\x13\x01\xc5\x01\x9c\x01\xd2\x02\x99\x02\x04\x001\xd2\x02/\x01\x1f\x01\x1d\x19!\x11U\x01\xfb\x02\x0b\x1b\x03\x01\x84\x04\x00\xd1\x02\x02\x96=\x01\x17\t\x11\x04\x03\x04\x01e\r\x1b9\x05)\x15\x011\x13\'\x0b\x1b!\x11\x17\x05\x11\x1b\x05\x01\x05\x039!\x11\x17\x07\x0f\x1b\x01\x05\x03\xaf\x02\xbd\x01!wc\t\xd1\x01\x01\r\x9f\x01\tE\r\xb3\x01\t3\x05\x85\x03S\x06\x01-OM\x11\xd7\x02-\x05[\x01\x19\x01\xad\x01\x05\x01\x05\x01\t1\x03\x01\x15\x01\r\x17\x04\x03;\x1f\x07\x1b\x01-\t;\t7\x05\xe9\x01\x11\xb3\x01\x01\r\x05\x01\xc3\x01\t\x01-\tW\t9\x05\x95\x02\x13\x05\xc3\x01\x06\x01\r\x05\x01O\t\x1d\x01\x1b\x04\x07\x07\x01\r\x01-\x04\x05\x15\r\'\r\x01\x19\x051\x01\x1d\x01\x0f\x06\x01\r\x05\x01/\x03\x01\x15\x01\x04\x03\t\x01\x1d\x01\x1b\t\x04\x07\x11\x05\x017\x05M\x05=\x03\x07\x04\x01\r)\x017\x05\x01E\x05\x04\x01\x0b\x07\x01\x0b\x01;\xe7\x01\x06\x01\x05\x05Q\t\x04\x01\x01E\n\x01\x0f\x11\x01\t\x1f\x1b\x07\x01\x0f\x04\x03\x01-\x04\x05\x0b\x1b\x19\x053\x19\x05\x08\x01\x15\x053\x03\x01\x15\x01\t\x1d\x01#\x01\x04\x07\t\x05\x01\x15\x0f\x05\x04\x01\x0b=\x05)\x01\x11\x05\x06\x01\x047\x15/\x07\x01\x0b\x03\x01a!\x1b\x03\x01\x04\x03\x06\x01%\x1d\x13)\x05\xf9\x01\x01S\x017\x13\x01\x05\x03\x9d\x02\x01\'\x00\x96\x08\x0b\x06\x00y\x0c\x07\x00\"\x00\x06\x03\x06\xac\x01(\x00\',\x00#\x03\xca\x04\x00\x02\xce\x0b\x00\x02\x8a\x07\x00\x02*\xa0\x06\x00\xa4\x13\x00@\x01\xb5\x0e\xec\x01\x85\x01\x01\t\x01\x15\xb0\x01\x02\x00,\x00\x1e\x06\x00\x03\x08\x02\x06\x00\x0e\x02\x01\x04\x00\x02C\xc8\x01\n\x04\x00\r\xe7\x02\x00\x04\x03\xda\x03\x08\x03\x04\x00\x05\x06\x00\x02\x06\x00\x17&\x02\x00\n\t\x00)$\x00\xcb&\'\x9b\x01\x04\x01\x13\x05\x17\x1d\x01CQ\xaf\x08\x00\xac\n\x02\x06\x00!\x0e\x04\x00\xb9\x06\x00\x01\x1c\x00\x1e\x1d\x17\x01\x82\x11\x00\x02\x01\xa3\x11\x08\x00\x15Q\x00\xe6\x01\xe5\x01G\x01\x00\xce5\x01\x17\x05\x06\x01\x01\x1d\x04\x0f\x05\x01\x11\x87&\x06\x00\x1b\"\x00\x1e\x00?\x00\x06\x00:\xee$\x0b%!=\x04\x03\x04\x01\x05\x0b\x17\x13\x04\x03\x04\x01\x01O\x04\x01\x0f\x0f\x01\x0b\x15\x0f\x15/G\x04\x0b\x01\x07\x04\x03\'\x01\x13/\x03\x01\x03#!_\r\x03\r\x05\r\x07\x03\x01Q%c\x06\x03\x06\x01\x11\x05\x0b\r-\x03\x01\x03\x01\x0b\x06\x01\r\x13\x05\x01\x07\x01\x05\r\x04\x01\x0b\x15\x13\x15%\x13\x07\x04\x03-\x01%\x05\x03\x01\x03\x0f\t\x87\x01\x03\x01;\x05\x87\x1a\x02\xba\x0fDd\x1b\x01\x1b\x05\x1b\x04\x03\r\x017\x05\x03\x01S\xad\x01\x04\x01\x0b\x00\x88\x02@\xfe\x19+\x05\x04\x03\x1d-)7\x1d\r\x03?\x01\x03\x13\x01\x11\x01\xdb\x19\xb1\r\x06\x01\x0bA\x01\x13\xbb\x01\x03\xc7\x02\x04\x03)\x01\xdc\x19\xd4\x02\xab\x1a\x02\x98\x02\xe4\'\x03\xfa\x02\x01\x8b\x010\t\x01@\x9e\x03\x00\x0e\x01&\xfa\x06\x04\x00G\x08\xf8\x01R@\x8d\x03\xf4\x01N<\x81\x03\xf0\x01J8\xf1\x02\x00r\x00@\x18\x00,\x00\x10\x01\r\x10\n\x00^\x03\x04\x00\x10\x00\n\x0b\x03\x04\x00#\x04\x00\x12\x00\x024\x02\x00\x9e\x01\x8d\x01\x03\xd1\x03\x82\x02\x00t\x002\x12\x04\x00\x0b\x0f\x00\x16\x00\x17\x0c\x04\x00\x05\t\x00&\x04\x00?\x18\x01\x15%\x9fE\x00>\x17\xea\x0e2\x00\x02\xa6\x194\x00\x9c\x10\x02\x00\x08\x00t\x00\xf8\x01\n\x00t\x00\x96\x04\x06\x00\x9c\x08\x15\x04\x01\x05\t\x01#\x04\x01\r\x11\x03\t\x03\'#\x05\x04\x01A\r\x01#\x07\x17\x01=?#\xd3\x04\x07\x05\x99\x02\x0b%\x01\t\x95\x01\r\x19Y\x19\t\xcd\x01\x01\r\x19s\x07\x015\x01;\x04\x01\x05\x0b\x17\xb5\x01\x04\x01\r1\xef\x0c\r\x153C\xd3\x02\x04\x01\'/\x01\xb3\x01\x03\x01I\x03\xc5\x02\x03\x05\x03%\x03\xc7\x01\x03o\x03\t\x03\x01\x06\x03k\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\'\x03\xaf\x01\x03\x01\x03\xbb\x01\x03\'\x03\x8d\x01\x03\r\x039\x03?\x03\x01\x03\x01\xc7\x02\x06\x03+\x11\x03Q\x0b\x01\x0f+\x03\x01\x1d\x011\xa7\x01?\x01\x97\x02\x01\x83\x02\xb3\x01\x01\x13C\x04\x01\x13+O\xf3\x01=e%EM1I\x06\x01\x05%\x01\xc1\x01\x04\x00\x07\x04\x03\x00\x94C\x04\x0038\x08\x00.\x00\xae\x01\x02\x00\x90\x04\x06\x00\x06\x00l\x00\xca\x03\x01\x02\x03\x08 \x00!$N\x02\x04\x00\x01\x0b\x04\x00y\xb7\t\x05\x0e\x1c6\x03\xdf\r\x01\xe96\xe8\x08\xd5\x07\x00\x10\x1a\x00z\x00\x02\x03w\x00|`1\x1b\x11-\x01\x90\x02\x1c\x00.\x88\x02!\x00\xe6\x01\x16\x01\x0b\x01\x02\x01\x02\x12\x11\x01\x0e2\x11\xb2\x01\x06\x006\x003\x01\x00\x05\x00\x12\x05\x04\x00#z\x00\xd8\x05\x00\x1e\x00\xe4\x04@\x01\x18\x04\x01M\x00\xd0\x0b\x04\x00\x12\x04\x00\x01\x11\n\x00\x03\x1c\x02\x04\x00\x03|{\x04\x00\x17\x82\x01\x01u\x01\x07\x01\x1b\x03\x01\x19\x15\r\x06\x01-\x19\x0b\x01\xc9\x01\x05\x01%5#\x19/\x0b\x01!%\x03E\x01K\x03\x01\x07\x05\x04!\x1b\r\x05\r\x03\x05\x03\x1f\x0b\x19\x0f\x19g\x01#\x0e\x01)\x19\x0b\x01\x07\x03\x1d\x11\x03\x07\x0f\x1b\x17\x15\x11\r\x01\x17+\x13\t\xc3\x01\x04\x01#\xed\x02-\x1dA\t?A\r%\x01\x19\x01\x1d\r\x05\r\x05\xc9\x02\x06\x01\x01\x1d\x04\x019i\x01\x05\x07\x0bG71\x1f\r\x05O\x01o\x01\xcd\x01\x015\x01%\x07\x11\t\x11c\x013\x01Y\x08\x01\x17;\x0f\x01\x19\r\x11\x01\x0b\r\x03_\xbf\x01\x04\x00\x03\n\t\x04\x00+\xf2\x02\x02\x00\xfe\x02\x01\xfd\x02\x02\x00\xbe\x02\xce\x02\x06\x84\x02\x06D>\x12\x92\x01,\xc0\x01\x06\xb4\x01,\x14\x1c\x0c\x1e)\x08\x06J:NF*rB\x80\x02h>\x0et\xcc\x01*\n\xca\x02N\n>\x04$1\xa6\x01\xb8\x01\n\xcb\n\x03c\x03\xfb\x01\x03=\x03m\x03%\x03A\x03I\x035\x03E\x03\x01\x9d\x12\x04\x04AN6RJ*jB\xf8\x01T\xc5\x06J2NF&f>\xf4\x01P\xfc\x19\x03\x1f\x03\x1f\x039\x03\x05\x03\xfa\x015\xcb\x18\x04\x04\x00\x15\xf0\x19\x03\x00\x08\x01,\x04\x12\x00\x18\xa2\x01\x04\x00\x19\x06\x00&>\x00\x1c\x05*\x0c\x01\t\x00\x02\x04\x00\x04\x02\x05\x01\"\x06\x04\x00\x15\x1a\x02\x00\x02\x03\xbd\x01\x00\x0c\x03 \xae\x01\x04\x00\x012\x04\x00\t\x01\x00.\x05\x01\x04\x00\x1d\xea\x01\x02\x002\x00\x16\xbf\x1a\x03\x01\x03\x01\x8d\x05\xe8!\x00\x8b\x02\n\x00\x15`\x00^\x00\xff\x03\xf0\x01\x00\x08.\x00-\x04\x037\x0c\x00\x14\x00\x86\x03\x00B\x00\x13\x00,\x01\x0e\x00\x89\x03\n\x00\x14\x00\x12\x00n\x00\x9d\x01S\r\x05\r\x06\x03\x1f\x86\x05B\x00A\x01\x17\x01\x0b\x03\x15\x01\r+V\xc3&\x0e\x04\x00Ev\x00\x02\x01E\x01-\x0b\xc2\x06\xa4\x01\x97\x01\xc9\x04\x8d\x01\x17\x96\x1b\x00\xc4\x08&\x00z\x15\x01\x00E\x0b\x01\x00\x10\x00CN\x00\x01\r\x1a\x04\x00\t\xa2\x01\xb7\x01JG\x01\x04\x00YP=\x03\x01\xba\x01\x01\xe1\x06\x00\xe8\x06\x03\x00N\x00V\x00X\n\x00.\x18\x00$\x00\"\x01\x00\n\x1aS\x00\x012\x00\xf1.\x00\xe0/\x02\x01\x02\x18 \x1f\x01\x00@\x04\x01\x07\x1a\x01\x17\x11\n\x00\x17\x06b\x00\x06\x03)\x00\xbd\x1c\x00\x99\x02\xde\x02!\x04\x00\x03 \x06\x04\x00\x01\x12\x04\x00+\x01\x00\x0e\xfd\x02\x00\x14\x004\x00\x1e\x9e\x03\x01\t\x0f\x05\x1d\x01\x00\x8f\x03\n\'(\x04\x00\x01\x1d\x06\x00\x01r\x04\x1d\x1b\x15\x01\x1d\t\x13\x01\xba\x02\x00\xb9\x02\xbc\x024\x06\x00\x01\x04\x00\x8d\x01\n\x0c\x1e\x93\x03\x13\xf4!B\x88\x02BV\x0c>FZ\xcf\x05\xa4\x06\x8d\x03\xc4\x02^\xa6\x010\xe8\x01@P\x19Q\x19\x05\x03\x04\xfc\x01RZ\xa7\x03\x80\x02V^\xc5\t\x10BJ^U\xff\x01,\x00%L^\xc1\x01\x01\xe4\x07\x02\x00\x03\x02\x00\x02\xdc\x05A\x03#\x03\x01W\x03Q\x03\xfb\x01\x03\xbb\x01\x04\x00\x19\xfc\x01RZ\xab\x01V^p\x02\xb6\x01\"\x00\xd3\x01\x03\x04\x01\x01*\x06\x00\x05\x02h\"\x06\x00\x0f!\x00\x04\x01\x00\x01\x00P\x04\x00\x03\x8d\x11\x0e\x04\x00\r\xf4\x0f\xe0\x01\x89\x11c\x01\x11\x96\x08\x04\x00\x05\x83\x02\x039\x04\x03)\x01\xfc\x01D\xb1\x04\xf2\x03-\x9a\t\xdc\x01N\x01\x00\"!\x00H\x04J\x00&\x00Z\x04\x00\x0b(\n\x03\x00\xcc\x01\x0c\x04\x00\x03 .\x04\x01\x13\x1d\x01\t&%\x00\xef\x03&$\xb1\r\x08\x03\t\x01/\x01\x19\x07\x06\x03\x03\x01\t\x04\x03\x04\x01\x03\x1b-\x08\x03\x0f\x01\x1b%\x03\x05\x0b!\x05\x04\x035\x01\xcd\x02\x0b\x1b\x0f\x01\x1b\x0b\xf1\x02\x00\x8f\x01\x01\x990\x02v\x00\x86\x01\x01\xbf\x01\x00\x9c\x05\x02\xf4\x01L\xfa\x01\xbb\x04\x02\x04\x00!\x06\x00\x0e\x05&\x01\xba\"\tG\t\x05\xd3\x01\x01\x1d\x07\xdd\x06\x01\x04\x1d\x0b\xf7\x13\x03\xf5\x01\x03G\x03\x04\x01\x01\xef\x01\x04\x01\x1b\x05#\x07\x05\x01\xf1\x03\x01\tw\x03!9\x01\x9f\x02\x04\x00\t\x02\xae\x08R\x00D\x04\x00\x01\x02\x04\x00\'(\t\x18\x00\xa6\x01\x00\x8c\x10\x01\x11\x07\t\x03\x01\xb6\x04\x00:T\x1d\xa7\x05\xe8\t\x06\x00\x0f\x04\x0e\r\x03\x01)\x00\x04\n\x00C\x03\x00\xd9\r\x04\x03\xa8\n\xa7\n\xa0\x04\x01\x9f\x04\x00\xb5\x12\x02\x00\xfa\x054\x98\x02\x08\x00B\x014\x00\xea\x04\x0c\x00j\x00\xce\x06\x0c\x00J\x00.\x16\x00\x13\xd5\x16\x1d\x01\xc8\x0e\xb9\x04\x02\x1e\x00\n\x02\x04\x00\x0b\x0e\x01\x0b\x01\t\x1d\x04\x01\x07\x8b\x01\xca\x10\x00 \x04\x00\x05\x01\x00\xb6\x11\x06\x00\x1f\xd3\x0c\x00*\x00\xe9\x02\x01\xaf\x12\xd0\x1eLJN\x14L\xc3$\x05\x0c\x06\x00\'\x0e\x05\x01\x00\x0c\x00\n\x00\x03\x08\x1dB\x00D\x0007\xce\x028\x02\x04\x00#\xb5\x02\x01\xa2\x02\x8c\x03:\x00\xe6\x0b\x064\x00\x0e\x03\xfb\x12\"\x008\x11\x03\x04\x00\x1b\x08\x0c\x03\xf2\x12\x05\x07\t3\x05\xd3\x0b\x05\x0b9\x89\x03\x0c\x01\r7\xdf\x01\x19/\x05\x01\x07\x04\x03\x03\x01\x1f\x04!\x03\t\x17\x04\x03\x07\x01\x03\x0b\x03\x04\x01A\x0b\r\xbf\n\xc8\x02d\x04\xa2G\xbd>\x06\x01W\x14\x00\x02\x06\x05\x06\x05\x006\x00#\x11\x01\x0bB\x00C\x03\x01N\x008\x04\x0e\r\x04\x008#\x01\x11\x03\x04\r\x03\x03/\x04\x01!\x0b\x1f\xad\x01\x01\x8c\x02\x01\x00\x13\x01\x8c\x03\x01\xd6\x0b\x01\x06\x0c\x01\x08\x04\x005\x14\xda\n\xca\rLKH\xa3\x0c\x02\x00N\\\xee\x01\xea\x01\nR\x80\x02VH\xa5\x02\x03\x0f\x03I\x03E\x03G\x04\x03\x04\x01\x0f\xb0\x02&H\x004>\x014\n\x00\x114\x1c\xbb\x02\x00\xac\x01\x00\x06\x00n\x06\x00cm\x00\x87.\x02@\x005\t\x01d\x00J\xb4\x06\x8c\x02\x01\xf5\x01\xe8&\xf5\x01\xc4\x01\x89(\xde\t\xc4\x17\x00\x08\x00\xf3\x02\n\x00>\xa6\x01\x062\xdc\x01\x06Z\xea\x01\xe6\x01\x06N\x82\x024\x83\x014\x00\x10\x00\x10\x0b\x00\n\x04\x03/\x01P\x048\x8e\x01\x91\x01\xb7\x07\x01\x05\x0c\x00\xfb%\x0c\x00@\x00\xa2\x18\x00\x9e\x02\x01tM\x00$\x04J\x1bZ\x80\x01\x91\x03&\x02\x01\x1d\x07#\xcc\x04\x00Z\x00\x0c\x04\x00\x1f\xf1\x06\x02,\x072\x02\xbe\x07$\x06\xdb\x12\x03=\x03\x0b\x03\x85\x01\x04\x03#\x01\xae\n\x01\x1d\x07\t#\x01\xa1\x04\xb4\t\x03{\x03\x05\x01\x1b)\x07\x04\x03\x0f\x01\x19%\x03\x05\x11\'\x05\x04\x03\x0b\x01\x86\x02\x01\x1d\x0b\x03\x04\x00M\xf3\x08h\xe1\x16\xc0\x1c\x96\x03\x00\x01\x0e\x83\tc\x08\x92\x07\x06\x00\x03*\xa0\x01\x00\x06\x00\x16\x1c\x11\x08Rb\n\x03\x00B\x8c\x02F\xcd\x02\x03\x01\xa6\x01\x03\x00\xde\x02\x08\x01\x07\x19\t\x15\r\x04\x01\'\x19\r7\x1d\x7f\x0b\x01S\x03A\x03\x01?\x05]\x03Q\x01%\x05\x04\x03\x11\x97\x01)\x01\x03\xb9\x01\x01=\x1d\xbf\x03\x04\x01\x01Y\x04\x01\x03%-\x04\x03\x0f\x01?\x0b\x85\x04\x01\x1b1\x03\x04\x1b+\x0b\xc1\x04\r\x193%\x19\x07\xef\x01\x01%3\xb7\x047\t\x01\r\x05\r\x01\xbb\x02\x9f\x02\x04\x00\x05\x02\xd2$\x08\x04\x00\t\xf4\x01\x06\x00\xd7#\x02\x04\x00\x07\x04\x01\x02\x01\x04\x00\x01\x9a\x1d\x04\x01-\x15\xac\n\x01\xb0\x07\x01\xac\x03K\x0b\x01\t3\x13\x01\xfd\x01\xad\x07\xa9\n\xaf\x02\xd5\x0b\x83\x02\x01\xed\x01\x85\x01\xf7\x01\x04\x01\x15\x11\x03\r\x01\xfb\x06\x97\x01\x02\x0c\x02\x00\"\x04\x00\t\x12\x00\x01\x00\x08\x04\x01\r\x02\x08\x00\x01?\x00N\x08\x01\x04\x05\x06\x01\x07\x0f!\x01\x0b\x06\x01\x07\xc4\x17\x0e\r\x8b\x1a\x04\x001\x08\x90\x1a\x04\n\x00\"\x00\xe5\x15\x00\x01\x80\x01\x00\xf8\x18\x00\xe1\x18\x02\x04\x1b\x00\xfc\x18\x00\xa2\x0b\x01\xff\t\x14\x04\x00\x05\x13\x02\xb4\n\x04\x03\x0b\x01z\x12\x01\x00\r\x06\x00=\xcc\x04\x00\xc8\x03\x00\xd9\x05\x00\xd2\x08\x03\x02\x00\xc3\x1f\x01\xad\x03\x006\x002\x01\x00\xdc\x01\x02\x00\x04\x01\x1c\x12\xf2\x01\x02\x9d\x14\x1c\x03\x04\x00\x01\x86\x13\x04\x01=\t\x11\x1b\x00\x16\x00\xde\x01\x00\xdc\nt\x05\x02\x01m#\x01\xb1 \x08\x03\xe0\x1f21\xa1\x01K\xc5\x02\r\x11\xcb\x01w\x05\t\x04\x03a\x11\x07\x03\x11\x07\x03\x11\x07\x03\x11\x07\x03\x11\x07\x03\x11\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03\x0f\x07\x03#\x04\x03\x07\xaf\x01\x00\xb0\x01,\x14\x1c\x0c\x1e3\x95\x18\x19\x03;\x01\x00\x90\x12J:NF*rB\x80\x02h>\x0et\xcc\x01*\n\xca\x02N\n>\x04$#\xa6\x01\xb8\x01\xa1\x15\x03\x98\x06\x00\x84.\x02\x00\x01\x1e\"\xbe\x08\x01\x0e\x0b\x10\x00\x04\x07C\x01\x19\x00\x99\x08\x07!\x0f\x01\xc8\x08\xd1\x08\x01\xe2\x08\xa9\x05\x03Y\x03Q\x03\x01\xc7\x05\x8f\x01\x18\x11nm\x00\x14\x00,\x00\x02\x00\x01\x1c\x04\x00\x01\x01\x06\x00\x07\x02\x1b\xa2\t\x06\x06\x00\x15\x14\x002\x01\x00(\x00\x0c\x01\x040\x04\x00\x15\n\x01\x07-\x01y\xefD\x00\x0c:\x1a\x04\x00\x8d\x01\x17\x01\x00\x04\x01\x0c\x07\x08\x1c\'\x00G\xca2=\x01\xdd\x02\x11\xb5\x03\x11\x83\x02\x11\xa7\x02\x11\x01\x05\x19Y\xc5\x06\x19\x0f\x19\xf3\x02+\x87\x01\x19\xe3\x01\x15\x05\xb5\x01\x17\x01\xe1\x01\r\x0b\x85\x01S\x05\x17\x03\xb7\x02#\x11\xeb\x02\x01\x15\x01\xa5\x0b\x19+\x07\x01\x19\x07\x01\x05\x01E\x15g\x01\x83\x04\x04\x00\x05\x02\x80\x05\xfaA\x04\x00\x0f<D\r\x08\x00\x18\x00\x14\x04\x00\x0b\x1e\x00\n\'2(\x04\x01\x07\x17\t\x01\x1d\x04\x13\x07\x17\x075\x05\x04\x00Q5\x01\xa59\x02\x82\x02\x8d\x01\x10\x8e\x01\x06\x00\x18\x00\x0c\x02I\x00\x7f\x06\x00\x0c\x02\x1d\x00b \xd2\x01\x01\r\x01\x0b\x17\x05\x01\x1bk\x03\x01\x03\x01\x1f\r\x04\x01e\x07\x01\x0b\x05\x011i\x01\xa896\x0c\x00\x06\x05\x01\x06\x88\x01\x14Y\x01\x00\x02D\x13)\x01\x03\x01?\x05\t3\x01\xa79\xe0:\x02H\n\x00\x04\x01\x0c\xab1!\x01\xcb\x02\x02\x0c@\xb4\x01,\x14\x1c\x0c\x1e\x03\xdc\x02\x94\x08\x04\x03\xa1\x01\xb3\x01\x03\xa1\x01\x03\x1f\x03\x1f\x039\x03\x05\x03I\x03\xc5\x02\x03\x05\x03%\x03\xc7\x01\x03o\x03\t\x039\x03c\x03\xfb\x01\x03=\x03m\x03%\x03A\x03I\x035\x03E\x03\x05\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03#\x04\x03\r\xaf\x01\x03\x01=\x01\x93\x02\x03\x04\x01\xab\x01\xb9\x03\xe7\x01\x01%\x03\x17\x05\x83\x02\x03\x01\xaf\x01]\x04\x0e\x00\x0e\x01\x00\x02\x12P\t*\x002\x00[\x01\x00\xde\x01\xf2\x0f\x9f\x01\x03C\x03Q\x03\xfb\x01\x03M\x03\x05\x03\xe5\x01\x03\xe9\x01\x03W\x03\x07E\x01\xdd\x01\x0f\xd9\x01CS/\x11)R\x01\x17\x03\xd0\x0f\x82\x02,\xe2\x01\x88\x01\xe6\x01\x80\x01`Z~0\xe5\n\xfe\x01(\xde\x01\x84\x01\xe2\x01|\\Vz,\x04\x00\x13\xe3\x08 \x1d\x04\x01:\x08\x07\x1d\x1b\x04\x01\x15\x00\x18\x008\x00\xe2\x08\x00\xbf\x05\x0e\x00\x0e\x04\r\x11\x01!\t\x03\x07\x01\x9d\x04\x00\xe0\x0c\x06\x00\x15\xef\x1d\x02\x00\x16\x01\x14\x03\x04\x01\x0e\r\x04\x01\x05\r\x05\r\x06\x00Q\x14\x00\x10\xbc\x0c\x10B\xc9\x0c\x01\xf0\n\xb2\x0c\x01\x86\x01\x0c\x00>\x03\x01Cx\x01\x86\x01\n\x00*$\x03\x01\xb9 \x02\x01\x00\xce\x02\xcb\x02\x01\xc8\n\x02\x00\x06\x00\x08\x03\x04\x00%\x08\x05\x0e5\x00\x88=\xef\t)\x11\xdf\t\x01\x0b\x05\x01\x1b\x07\x05\x03y\x06\x01\x01\x05\x04\x01\r\x7f\x01\x03\x01\x0b\x05\x01\x04\x03\x11\x01\x1d\x01\'\x03\x01E\x15\'\x04\x05U\x13;\x05\xbf\x04k\xdf\x05;\x03)\x01\xa3\x06e\x01\x9f\x08\x11\xb9\x02e\x01\x81\x04\x01\r\x01\x03\x05\x01\x19-\x13\x01\t!\x03\xab\x01\x05\x01!\xb9\x01#\x1b#\x0b\xf3\x02\x05\x04\x01\xa7\x01\xfd\x02\x00\xc0\n\xa9\x05\x01\x19\x0b\x00\xa0\x02\x00\x08\x01\xd6\x06\x00\xcc\x03\n\x03\xac\x05\xc4\x05\x06\x00\xa4\x04\x00:\x00\x1d\x00\x01\x04\xae\x07\x03\xb8\x02x\x96\x044\x8c\x01:\x9c\x01\x16\x01\x8d3\xb6\x02\x128\x02\x01fc\xf4\x01K`\xe8\x04\xbc\x05\xb7\x05\x07\xd4\x05\xa1\x05\xd8\x05\x8b\x05\xdc\x05\xc7\x10\x00\xb6\x02\xe2\x01r\xa6\n6P\xa9\x0b\x89\x02^\x00\x01\x92\x02\x08\x00>\x00T\x06\x00\x1f\x00L\x04\x01\x05\x03\x01\xc2\x02\x04\x01\x19\x02e\x00\xd5\x06\xc0\x02\xf8\x042L\x87\x01Q\r\xd5\x01\x03\x04\x01/\x1b\x05\x03\r\t\x15#)\x13\x07\x01\xe5\x05\x00\x02\x9a\x03\xf9\x01\xaa\x03&\xa3\x03\x1a\x12\x02\x00\x06\x04\x02\xbf\x01\x04\x16&(\x1f:\x83\x01\x06\x16\x04(\x0f:&<\x01r\x1fbW\xaa\x01U\x81\x035\x98\x03\x88\x01\x89\x02\xa8\x03D\x06\x1c\xfd\x02\xb4\x03\xa7\x03\xae\x03\x18\n\x1a\x02\x08\x89\x03\xb2\x03\x08\x9d\x03\xa2\x03\x0c\x1c\x00L\x00\xe3\x02\xac\x03\xf9\x02\xa4\x03\x0e\x06\x1c/\\Y\xb7\x02\xe4\x02\xbd\x02\"\x02\x1a\x153\xad\x01\x18\x12,\n\xe4\x02\xc7\x02\xe4\x02\xc7\x02\x8a\x03\x02\x00\x08\x1c\x00\xa2\x01\x02\n\x06\\\x00\xb3\x01\x02\x00\x08\x06$\x00\x04\x08_,&\x16\x0ec\xd6\x01\xcb\x01L\x0b\x0eL\n2&\x08\x03\x06\x0c\x1c\x00\x08\x00\"\xc0\x02\xbe\x04\xfb\x06\xac\x01\xdc\x05\xb7\x08\xba\x01\xb7\x01\x00\x08\xfc\x01\xdb\x01|k\x88\x03CF~\x02\x0e\xcb\x01\x12t.\x9f\x01\x04\x00)\x0c2 #\x8a\x01\x87\x01T&\x1c\x14$\x11\x1aD>\x83\x02\xd4\x01\x8e\x01\x8b\x01\x14\"\x04\x02+\x00\x01\x0c\x03\x02\x12\x86\x01[\x04+\x12J9\xf2\x02\x9c\x01\x99\x01\x80\x07,\x00\x91\x02<\xa9\x01\x04\x03+x\x08\x04\x18\rT\x02\x1c\x04 #%@b_\x00\x10\x1e\x00\x1cfc\x04\x00\x01\x0c\x04\x1e5\x10\xcd\x08\xbb\x01\x87\x07\x02\x08\x0c\xb8\x148x\xa4\x02Gk\x00n]\x8c\x02\xc9\x01\x8c\x02\xdb\x010\x0e\xe7\x0b\xfd\x05\xb7\t\xe9\x04F\x04\x003\x0e\x1c\x00o\x96\x01(\x02\x00\x10\n\xa4\x01D*\x07\r>\x0e\x01*\x00 \x00\xa7\x01\n\x00\xd2\x03\x04\x001:\n\x07\x02\x00\x08\x1a\xb6\x02\xb5\x02\xba\x02\xbf\x02\x03\x01\r\x18\xb6\x02\xd9\x02vV&0~\xd4\x02\x00\xe9\x05\x04\x03\x17\x01\x00\x02\x0c\xcb\x06<\xe4\x01Z\xe6\x01\xc4\x02\xaa\x02\xfc\x03\x04\x00!\xc7\x01\x01\xc5\x05\xb4\x04,Z0\x90\x01\x00\x03\xc9\x04\r\x03+\x03%S\x04\x01_g\x03\x07\x03\x01\x83\x06\x01\x05\xab\x05\xd4\x03\x98\x02\x00\xad\x08\xe6\t\x1c\x94\x01\x00&\x00\x82\x01\x00\x82\x03\x00$\x00\xa0\x02\x00*\x000\x00~\x008\x006\x00*\x004\x00|\x00>\x00^\x00\xe1\x18\x04\x00cN\x02\x00\x01\x06\x00\x04\x03\x16\x000\x00#\x00H\x00\x1c\x00\x02\x00\r\x0c\t\x00\x02\x01\x02\n\x0c\x02\x00\x02\x00\x02\x00\x02\x00\r\x12\x02\x00\x06\x03\n\x00\x1e\x00\x12\x00\x02\x04\x00\x07\x06\x01\x06\x8c\x05\x04\x03\x13\x01\xff\x04\x9c\x06\x03\x00\x0c\x00\x96\x05\x01\xef\x04\x08\x01\x05\x1b\x0b\x97\x06\x04\x01\x04\x03\x07\x01\x11\x1d\t\n\x01\x07\x0b\x05\x01\x07\x06\x01\x05\r\x05!\x04\x0f\x04\x05\x05\x15\x05M\x06\x00\x0f\xde\x08\x008\x00\x10\x02\x00\"\x04\x01\x19re\x0b\x1b\x00 \x00\x10\x02\x01\x0e\x00\x02\x08\x00\x17&\t\x0c\x1a\x01\x10\n\x00l\x00,\x01\x04\x00E\\\x01\x00\x08\x03\x8c\x02\x00\xcc\x01\x01\xb5\x04\x06\x03\x01\x88\x01\x01\x006f\x8c\x01\xf1\x01j\x90\x01\x82\x01\x00\xe5\x0f\x01\x1a\x02\x01\x8a\x0f\n\x00\x08\x07\t\x04\x00\x1f\x01\x03\xd5\x02\x16\x00\xf4\x02\x01\x03\x13\x01\x008\x17\n\x03\x88\x01\x04\x01=\x03\x01\x17\x97\x01\x00\xb2\x0f\x00\x99\x0e\x00\xa1\x03\x00\xfe\x03\xa4\x06\xc6\x03\xb2\x01\xf3\x0f\n\x05\x03\n,4\x00&\x02[+\xca\x01\x91\x0b\x01\xcb\x01\x04\x03\t\x0f!\x03\x9f\x01\x03\n\x009\xe8\x12\x0c\xff\r\x0e\xa2\x01\x01\x03\x01\x13\x01\xee\x01ZOV\x14\x0f`\x0b-POZ\xcc\x0c\x02\x00\x02\x00\x91\x06\xf6\x01\x04\x00\x01\x02\x04\x00\x0f$\x00\x18\x004\x12\x00@\x04\x00\t\x02\x01&%?\x08\x03\x1f\x01\x1fX\n\x04\x00e\x85\t\x0f\x1f\x07\x0f\x07\t\x00$\x06\x00=#\xc8\x08)\x01\r\x03\x15[\x03\x07\x01\xbe\x02V\x00&2(^\xb7\x010p]l\x006\x00\xb2\x05\t\x03\x0bm\x06\x03%\x01\x03\x0b#\x0b\'\x0f\x15\x0b\x1f\x0b#\x0f\x15\x0fA\r\x13\x01\x04\x03\t\x00\x08\xcb\x01\x00\xf4\x01\x08\x03\t\x01\xe1\x01\xba\x01\x00\x0b\x04\x02\x05g\x00\x18\x06\x00\x012\x06\x00\x0bk\x01\xf2\x03\x155q\x06\x00\x05o\x01\x0b\x04\x01\x01\x05\x04\x011\x03!\x15\x1b\x01\x15\x1f\x17#\x14$\x00\x02\x006\x00\x0f\x00K*\x16\x1a\x17\x01\x02\x04\x00\x19&\x00\x06\x000\xe4\x02\x04\x00*\x01\x0e\x00\xc0\x05\x06\x01I\xbd\x04\x01\x89\x05\xa9\x0f\x82\x0b\x1a*\'\x00\xcc\x05%\xbc\x04\x16\x00p\x002\x00R\x00p\n4\x1e[\x1ch\x02! \x04\x18\x00\xba\x03\x01\x19\x0b\x04\x03\x0b\xe5\x1f\x1b\x0f\xf0\x03=\x90\x19\x06\x03\x07\x01\xc7\x01\x00\xc9\x01\x04\x00\x03\x92\x03`\x06\x00;@\x0c\x03\x0083\x03\x00<\xcc\x034\x90\x01\xba\x02\xda\x01\x93\x04\xbe\x02\xde\x01\xab\x05\x86\x01\x12\xb6\x02\xda\x01\xa5\x04\x03\x01\xb6\x01\x00\x14\x1c\r\x06\x03\x01\x01\x08\x03\x1f\x01N\x0f\x0b\x004\x0f\x0b\x00\xa6\x01\x0b+\x1c\xb1\n7\x15\x0c\x03\x1d\x01\x9b\x1b\x06N\x1ag<\x08\xd4&\x0b!\x0f\x13\x01\t\x04\x0f\x07\x01\x07\x0f\x0b\x06\x03\x07\x01\x0f\x01\x05\x06\x01\x0f\x0b\x1f\x0b\x1d\x15\x01\x15\x1f\x04\x03\x01\n\x04\x03\x15\x01\x08Bn\x00\xd7%\x10h\x0e\x0b\x03\x04\x02\x04\x00\x03u\x86\x01\x06\x01\x01\x05\x04\x01\x03e\x0b\x04\x03\x03\xe2\x16\x15\x08\x03\x07\x01\xc3\x12\x16\x02\x04\x00\x13\xd2\x05\n\x00(\x00\xaa\x01\x02\x01\x00\x02\x04\x00\x0f\x08\x01\x05\x01\x87\x01!\x05!\x04\x03\x05\x01\x00\n\x04\x03\x15\x01<\xda\x01\x9e\x05\xda\x01\x00\x04,+\x03\xcb\x01\x06\x03\x13\x01\xed\x04/\xd7\x01\x01;\n\x00\xb0\x01\xb7\x01\x04\x00\x19\x94\x01\xfa\x01\x01S\x00e\x14\r\x00=\x01\x96\x01\x08\x04\x00w\x07\x88\x01\xad\x03\x9e\x01<`Zj\r\x03\x01\xe9\x03\x9a\x018\\V\\r\xa3\x01.\x01\x8c\x01,9\x120-\x81\x01\x00H\x00\x83\x02\xeb\x02!\t\x0bY\x0b+!7!\x00\xaa\x01\x00\x01n\x0c\x0ba\x0b\xa7\x01\x00\xde\x02\xb5\x01v\x00\x1b\x00\x02\x04\x00\x03.\xcd\x05\x06\x00-\xbc\x06!\x01\x13)\x0b\x1f\x01\x0b\x01M\x0b\xa7\x01\x00\x84\x01,:\x10\x14\x11\x00,\x16\x08\x00\x07\xd8\x01\x00\x02\x00\x04\x02\x05\x08\x01\x05\x06\x01/7\x00\x9f\x01\x0b\x00$\x12\x0f\x00rP\x02\r\x08\x13\x01\n\x008\x006\x00\xc2\x01\x00\x04\x03\x15\x01c\n\x00t\x00\xeb\r\x01\x05\xb6\x19\x03\x08\x00\'\x08\x00^\x00g\x00\x04\x03\x00M\xda\x01e\x01a\x00\x1d\xf0\x01\x00\x8c\x07q\x08\x03\x01\t\x04\x03\x05?\x0bo\x08\x03\x0b\x01\r\x03\x01+\x0b\x08\x03\x05\x05%c\x08\x03\x13\x01\'\x03\t\x01\x15\'\x03\tM\x04\x03\x04\x01\x05\xe9\x0b7\'\x04\x05\x03\x1f9\x04\x03\x05\'%9\x04\x03\x01a\x04\x03\x0f\x17\x03\x15\x1d\x03!\x03Q\x04\x03\x1f\x01%\x01M\x1d\t\x01\r\x17\x01\t\x1b\x01\r\x0f\x1f\x04\x01\t\x03\x0b7\xa9\x08\'\x06\x00U\xbc\x04v\xca\x01F\x0eD\xae\x04\x9f\x0b\x01*\xd0\x01\xf9\x01&\x03\x06\x03\x10\x02\x01\xd2\x01\xb6\x04\xa6\x01\x00,\x00+\x00\xa2\x03\x00\x02\x00\x01J\xf9\x02\x02\x00\x16\x17\x02\x00\x16\xf3\x01\x02\x06\x00\x03\x084\x04\x00\x01\x02\x04\x009\x01\x00&\t*\xe0\x01\x06\xb0\x01\x06F\x0e\x8e\x01\x9e\x01\x06\xa1\x06\xdc\x01\x02\xac\x01\x02B\n\x8a\x01\x9a\x01\x02\x89\x06\x1d\x01\x193\x04\x03\x0f\xc6\x06\x9a\x07\xe1\x06>~\x92\x01\xbc\x01\x0e\x04\x82\x01!\x0e\\\x92\x01\x0exP\x06zd\x06R\xa9\x0cB\x82\x01\x96\x01\xc0\x01\x12\x04\x86\x01\x17\x12`\x96\x01\x12|T\n~h\nV\xe9\x0c\x04\x03\x05l\x004\x04\x03\x05\x80\x01\xb9\x07)\x04\x15\t\x1bg\xee\x01)\x15\x04\x01\x0f\x93\x01\x15\x01\xf8\x02G\xaf\x02\x01\x82\t\x04\x03\x01\xd1\x01\x04\x03\x05\x13\x0e\xf9\x01\x04\x03\x07\x01\xa2\x01\x05\x9f\x01\x06\x03\x04\x01\x01\xff\x01\x04\x03\x01\xf8\x03\x04\x03G\xe7\x062\x00\xae\x01\x03\x0c2\x18\x07\xe6\x01\x82\x01\x96\x01V\x00U\xa7\x06\xde\x02\xa2\x01\xa4\x01\x06T\x9f\x03\xa6\x01\xa8\x01\nX\xa4\x01:\x9c\x01^\xde\x01\x86\x01\x9a\x01\x84\x01v\xf7\x0c\x06\x03\x1d3\x89\x01\xa2\x01\x0b\x89\x01\x0b\x91\x01\x00\x90\x01\xea\x01\x83\x01\xb4\x042\x00\xd2\x08\x06\x03\x01\x01\x04\x03\x01_\x06\x03\x01\x01\x04\x03\x03C%\x08\x03\x05\x01\x03\x83\x01\x08\x03\x0b\xf7\t\x00\x84\x01\x14\x00\x02\x04\x00\x1d\xae\x02\x9e\x01\xef\x06\x1c \x00Z\x00\xe4\x02\x000\xa2\x01\xc6\x15,\x02\x08\x00A\x0c\x18\x00\x8c\x01\x01\xc4\x01\x01\xfa\x0b\xba\x02\xdc\x01\xd0\x01\xbe\x01\xc9\x14\xbc\x01\xe8\x01\x8a\x02\xb4\x01\xae\x01\xce\x01\xc6\x01DC\xc5\x01\xcd\x01\xad\x01\xb3\x01\x89\x02\xe7\x01\x17\xa3\x01\x15\x89\x01\x17\x06\x03\x0f\x01\x18\xb6\x02\xd8\x01\xcc\x01\xba\x01\xbd)\x04\x04\x00;\x03.,*N\x84\x01.f\x87\x02\xae\x01\xb1\x01\xaa\x01\xad\x01\xa6\x01\xa9\x01\xa2\x01\xa5\x01\x9e\x01\xc1\x02\x92\x01\x8c\x01\x83\x02\x18\x9a\x01\\\xe8\x1e\x15;\x15\x07\x08\x03/\x13\x15Y\x15\x13\x03\x01M\r\x1f\x07\x03,\x00\xe2\x0c=\x03\x05\x0f\x0b;\x05\x0f\x0b\x04\x03E\x01\x11\x05\x0f\x0b\x17\x05\x0f+\x05\x0f\x0b\t\r\x0f\x13\x05\x0f\x0b\x13\x05\x0f\x0b\x15\x05\x0f\x0b\x00BA\x00N\x00Y\x8f\x04\x04\x03q\x01\xbb\"\xc1\x01\xa4\x01:\xdd\x01\x00\xdc\x08\x8a\t`\x94\x028\x04\x03<\x02\x06\x12\x14\x06.\x008\x06\x08\x1a(\x05\x16\x11\x046%\x00\x118\x14\x00\xb5\x02\x02\x0c\x06:%lEL\x0c\x00A]\xa8\x01\x01\x80\x01\x00\n\x01\x04\x07\x0b\x017\x008\x08\xf9\x0f\x04\x01\x01\xf9\x07\x06\x00\x87\x01\x02\xbc\x05\x02\x00\x01\x02\x00\x02\x00\x02\x03\x00\x04\x03\x02\x00\x04\x03\x06\x05\n\t\x0c\x05*\x03\x04\x03\x02\x01\x04\x05\x03\x00\x1f\x05\x00\x04\x03\x02\x01,\x03\x00\x01\x11\x06\x03\x02\x03\x00\x1c\x03\x0c\x0b\x02\x00\x0e\x00\x02\x06\x16\x15\x06\x05\x12\x01*\x04\x00\x19(\x030\x14\x0f\x01\x00\x08\x01\x00\x03\x01.\n\x00\x17\x02\x01(\x04\x06\x02\x01\x05\x03#\x03\'\n\x01\x13-#)\x0f\x05\x01\r\x01\x17\x13\x04\x01\x1f\xbd\x05\x00\xfa\x07\x03\x00\x04\x00n\x00\xb5\x07\x08\x03\x02\x01\x0e\r\x04\x0c\x05\t\x02\x03\x06\x00\x17\x84\x02\x01\xca\x03\x06\x01\x06\x00T\xb7\x02\x02\n\t\x04\x00M\x08\x03\x08\x0e\x00\x02\x12\x00\x04\x02\x1c\x07\x1e\n\x07\x00\x01\x00\x02\x00\xa6\x07\xaf\x01\x12\xb6\x01\x08\x03\x04\x03\xdf\r\x00\x06\x05\x0c\x0b\x1c\x01\x0e\x07\xa0\x0e\n\x00\x03\x08\x07\x04\x00\x15\x16\x06\n\r\x01\x00\x0c\x00\x06\x01\x04\x04\x00\x17\x04\x03\x04\x03P\x18\x12\x00\x07\t\x00\x10\x04\x01;\xcb\t\x02\x00\xb6\x01\x00\x04\x03\'\x00>\xe6\t\x06\x01\x02\x01\xa1\x01\x96\x04%7\x01\r%\x03[\x01U\x05\x03\x05\x03\x04\x01\x07\x07\x17\x01M\x04\x03\x1b\x0b\x15\x17\x03\x01\x05\x01\x07\x01\x9f\x01\x01\x0f\x01\xf3\x05\x04\x01\x13\x1d\x13\x01\x03\x11\x01\x0b\x01\x07\x03\x04\x01%\t\x0f\x13\x05!\x01\x8d\x01\x01\xed\x01\xeb\x01\x01\x13\x0b\x03\xb1\x01\x03;\x05\x19\x04\x00#\x04\xb8\x10\x13\x1e\xa6\x01\x03\x02\x01\x02\x01*\x00\x0e\r)\xa1\x01\x1d\xa7\x10\x04\x00\x05\x04\x98\x12\x05\x04\x01\t>\x01\x16\n\x0e\x04\x00\x0f\x08\x00N\x01\xd5\x0b\xae\x0c\x00\x1c\x04\x00\x13\x1f\x00P\x01\x07l\x01\x05\x1b\x19\x04\x01\x83\x01)E=\x07\r\t\x15;\x97\na\xf9\x07\xfa\x07\xd4\x0c\xcd\x14\x00\x96\x15\x00E\x01\x82\x01\x00\x0c\x14\x1a\x16\x14\x00S@B\x06\x00\x06\x05\x04\x03\x08\x07\x08\x04\x00\xa5\x01\x02\x00\x08\x01\x02\x01\x02\x01\x0c\n\x1b\x00\x06\x04\x03\x10\x0f\x06\x0c\x08\x07\x08\x0c\x04\x04\x02\x0b\xba\x01\x015\t\x0b\x03\x04\x01\x01\x06\x04\x00\x01\x06\x08\x02\r\x00L\x00>\x12\x00\x02\x06\x00\xc3\x02\x99\x18\xba\x0285\x08(\x8c\x03\x02\xba\x02\x10\x006ERu\xbe\x02\x026\xb1\x01\xf4\x01\x02\x146\x08\x00\"4\xc6\x01\xab\x01\x14\xea\x01\xab\x01\xce\x01\x02\xa7\x01\xdc\x01\xaf\x01\xfc\x018\xf5\x01\x82\x02\xf1\x01\x94\x02\xef\x01\x98\x02\x83\x02\xb2\x02.\x8d\x02\xc4\x02\xdd\x01\xc0\x01\xf4\x01\x10\x01-t7\x84\x01;\xb6\x01\x12\x14\'\x02b$\n\x08\\\n\x04P }\xe2\x01\x08@\"\x87\x02\x88\x01\x06\xe0\x01F\x04\xf1\x05\x98\x02\x90\x01\xd4\x01\xdc\x05\x06 $\x10(P \xff\x03\x04\x90\x07\x02J\x0e\x9d\x05\x9c\x02\x84\n\xd3\t\xe1\x01\x94\x0c\x03\xab\x04\xb8\x04\x91\t\xbe\x0b\x0b\x00\xe5\x05\xa6\x06l\x0c\x04\xc1\x0b\x9e\x11\x90\x01\x8f\x0c\xb8\x0c\x07\x02&\xec\x01\x0c\xdb\r\x9c\x0eb.\x87\t\x9a\t\xaa\x01\x96\x01\xaa\x01\xa7\r\x9c\x0e\xf5\t\xf9\x08\x04\x02\\\x1b\x04$\x0b\x04\x0c0\xc6\x02nIZIl\xdd\x02\xd3.\x04\x019\x91\x010\x01\x12\x05\xe2\x01\x00\x04\x00\x06\x02\x00\x04\x01\x02\x01\x08\x18\x06\x03\xf2\x18!a!\xb9\x02!)!\xe9\x01\x04\x015\xc7\x01!\x05!-!-!\xab\x01\x19e\x19\xb3\x01\x19\x05\x19\x1b\x19\x05\x19-\x19-\x19\xc3\x03\x01\x8d\x01\x04\x01\x07\x1d\r\x01\xc1\x02\x06\x01\x07E\x03\x01=\x04\x01\x01\r\x04\x01\x03\x15\x07\n\x01\x1b\x03\xe1\x01\x0b-\x01\t=5\x03#\x11\x01\x051\x04\x00\x15\x04\xc8\x04\x18\x00\x0c\x04\x00\x01\r\x17\xcb\x04\x04\x00\r\x02\xf0\x04\x01\x12\x00\x0c$\x04\x003\x01\x00\x04\x00\x14\x02\x00\x85\x01\x01J\x95\x03\x01\x00\x01\xa4\x02V\xc6\x0b\x00\x10\x01\x04\x9e\x07\x03\x01e\x1f\x04\x03\x05Y\x1f-\x04\x03\x01\x7f\x04\x03\x07{\x1f)\x1f\x04\x03\x01G\x04\x03\x01\x91\x01\x06\x01=\x0b\x01+\x03e\x03\x01\x03\x17\x1f\x05\x1f\x03)\x1f\x03)\x0b\x13\x03\x01\x1f\'\x07i\x03\xd1\x01\x05\x7f\x03E\x04A\x01\x93\x01\x04\x01\x01o\x041\x01U\x04\x01\r\xbf\x02\x01\x05\x01\x0f\x0b-\x04\x01SO\x00\xc4\x10\x01\x8b\x03\x074\x00P\x00(\x00\xd8\x03\x00L\x00\xdc\x02\x00\x84\x01\x00\xaf\t\x15\x00\xe9\x05\x00H\x00H\x00 \x006\x00 \x00\xce\x01\x00\x80\x01\x00\x81\x0c\x002\x06\x00\x03\x08\x01\x04\x00g\xbc\x02\n\x1c#\x01\xae\x03\x03\x01\xb4\x04\x006\x00\xa6.H\xe4\x01\xde\x01\xa6\x01\x92\x01\xa6\x01\xe1\x12PH\xe4\x01\xde\x01\xa6\x01\x92\x01\xa6\x01\xda\x02\xf7\x12\x00\xba\x16\xbf<\x00\xb8\x05\x01\xaf\x05\xfe\x03\x01\xa1\x01\x02\xb3\x02\x00\x14\x138\x01N\x01\xa4\x01\x02\x00\xa5\x01\x04\x00\x0bH\x00\x04\x00<\x13\x06\x00\x15\x06\x05\xc8\x0e\x1d(\xac\x01\x02\x7f\x80\x01\x86\x17\x9d\r\x04\x03\x0b\x8d\x01\x01;\x03\x11o\x04\x03\x11\x01\x9b\x01\x02\x8c\x01\xd4\x01\xd3\x01\xd0\x01r\xf0\x05\x04\x03\x1d\x01\xc9\x0b\x00\xd3\x13\x05!\x03G\x01\xea\x03\x00\x01\x02\x00\x0e\x04\x00\x01\xeb\x05\x04\x003\x02\x01T\x00\x04\x01:@)\x15\x18\r\x08\x07\x06\x05\n\t2\x15\x1b\t%\x13\x01S\x06\x00[\xb4\x01*\x02:\x0bY\x88\x01\x04\n\x07\"\x0b\x10\x05j\xeb\x01\x17\x00\xc4\x01:%\x004\xd3\x03\x02\x94\x04\xae\x05\x02\x0c\x03\x0b6\x18\xf2\x01\x06F\xc1\x02@\x00\x12\x01\xda\x06\x00<\x01\x05\x08\x00\x0f\xda\x05\x06\x00\n\x00\x0f\x0e\x05\x04\x00\x03\x07t\x04\x003\xc6\x01\x00\xa2\x02\x05Y\x05!\ry\x01\x00\xd1\x01T\x00Q\xec\x03\x00\xf0\x04@8T\xd5\x1e\x02\x08\n\t\x04\x03\x13\x015\x05\t\x01\'\x13\'\t\x15\x06\x01\x11+-\x01\x0b\x01\x0b\x11\x01\xb3\x01\x06\x00_\xd6\x03\x10\n\x00%\x12\x010\x00\x18\x00\x0e %\x03\x01 \x08\x02\x18\x06\n\t&\x04\x00\x028\x04\x01\x03\x00\x81\x01\x02\x06\x02\x01\x06\x08\x04\x00\x02\n\xb2\x01\x006\x00\xe1\x01\x06\x00\x01\xe2\x01\x06\x00!]`QJ\x000\x00\x17\x01\x00N\x01\x00\x02q.0\x06\x00\x13\xb0\x02\x11\x01\x00\xeb\x02\x8b\x05\xe0\x08\x11/\x11\x04!\x17\x03\x01\x17\x01/\x01\x13\x07/\x01\x13\r\x04\x01\x0b/\x1f\x19\r;\r\x04\x01\x1d5\x01\x03\x01#\x05\x01\x15\x01\x03\x01\x07\x01\x03\x01\x04\x05\r\x01\x03\x01\x07\t\x0f\x03\x04\x01-\x17/\x0f\x81\x02\x0b\xc7\x01\x00\xd2\x01\xda\x01*\x0e^\xdc\x01N\x80\x01\xc0\x01\xc7\x05Z\xd8\x01J|\xbc\x01\xc1\x02\x04\x02AM\xb1\x01\xf2\x01\t\x00t\x80\x01\xc0\x01\xb1\x03\x0e.\x10\x001\x00xUt\x00\x81\x01\x00J\x0e\x00\x8c\x01\x00\x1d\x84\x01!\x17\x8f\x02\x01\x11\x04\x0b\x07\xb6\x01&\x00\x0f\x04\x03Cm\x14!\x0e\x00\xf4\x01\x13\x0b\rK\x13\x03\x01\x13\r\x01V\x1aa\x8c\x01\x00\xfc\x02\x03\xbb\x01\x03{\x03\r\x01\x17\x0f\x01#\x19\x04\x01\x01\x11\x04\x01\x0f\x13\x19\x03\r\'\x13\rG\x04\x01\x11\xaf\x017\x81\x01\x01\'\x01\xd7\x01\x01\xd1\x01\x06\x00\x19\xf2\x08\\\x03=\x00\xa5\x010\x14h\r\x19=\x18\x04\x03\x01\x01\x06\x03\x04\x01\x9f\x01\x02\x0c\xbc\x01\xbb\x01\xda\x01\x00\xc3\t\x00\x98\x04\xfe\x06\x02\x00\x02\x00\x08\x00\n\x11\x0c\"\x00\x01\x024\xd0\x01\x06\x84\x01\x8c\x01\x94\x01\x06pr\x06\x9c\x01\xb4\x01\x06l0l\x06.\xad\x0c8\xd4\x01\n\x88\x01\x90\x01\x98\x01\ntv\n\xa0\x01\xb8\x01\np4p\n2\xf5\x0c<\xd8\x01\x0e\x8c\x01\x94\x01\x9c\x01\x0exz\x0e\xa4\x01\xbc\x01\x0et8t\x0e6\xa1\x0b\x04\x03\x01\xcb\x01\x06\x03\x01/\x06\x03S\xcc\x01\x001\x00\x0c\x01\xce\x01\x00\x1b\x00\xd7\x02-\x02\x0c\x00\x8d\x07\xa6\x08\x00V\x00V\x00&\x00\xdc\x01\t\x00&\x00\xe8\x03\x00>\x002\x00\x92\x02\x00&\x00p\x00L\x06\x00\x05K\x00\xa0\x02\n\x00\',\x00U\x00\xb2\x03\x00\xcd\r\x00\xf4\x01\x00%\x00K\x00\xb5\x06\x00\n\x010\x1e\x04\x00\x01\x9b\x01\x04\x00\xf9\x01\xb4\x05\x00\xbb\x03\x00\x8e\x06\x06\x1an\x00\x06\x05e\x07\x19\x03\x01\xe3\x03\xa6\x04\x00V\x12\x05>\x05\x9b\x05\xe4\x04R\x00\x80\x01\x06\x00@\x00\xa3\x02\x00\xe5\x03\x06\xda\x06\x02\x00\x06\x00dA\x10\x00\x1e\x00*\x00\xcd\x03\xde\x01~\xdb\x02\xda\x01z\x9a\x07H\x05\xcb\r\xc8\x03\x01\xaa\x04\x01\x9e\x01\x01\xee\x0e\x01\xe2\x01\x01\xe4\x02\x01\xba\x02\x01\xa3\x1b\x00\xf4\x02\x00\x0c\x00\x1a\x14\x11\x00\n\x16\x8a\x01\xe0\x01z(\x00\xfa\x07\x04LD\xe0\x01\xdc\x01\x84\x01\xa2\x01\x8e\x01\xa2\x01\xf1\x08PH\xe4\x01\xde\x01\x06\x88\x01\xa6\x01\x92\x01\xa6\x01\x8c\x01\x06\x00\xcb\x12\xde\x01\xf8\n\x00\x06\x00\x87\x04\xee\x01\x00\x06\xaa\x05\x06\x03\x15\x99\x01\x89\x04\xf1\x01\x03\x01\x8e\x06\x9f\x01\t=\xe2\x01\x87\x01\x04\x03\x13\xa4\x02\xba\x02\x03\x00\x01\x89,\xb6-\x04\x00\x1c\x06\x00o\xb3\x1f\x00\xcc\x06\x00\xac\x04\x00\xab\x04\x00\xac\x04\x00\xf7\n\xad\x02R\xbc\x06\x04\x0c\xa3\x01\x0c\xa8\x01\x01\x11\x0b\x03\xee\n\x01\xad\x02\x01\xb7\x03\x01\xc9\x05\x10\xc6\x01\x00\xaf\x01\x01\x13\x0f\x9c\x03\x16\x02\x04\x01_\x04\x0c\x12\x11\x0b\x01\xfb\x08\x01\x00\x01\xb2\x16\x00\xc8\x05\x06\x00\x01\xc7\x05\x06\x00\x15\xc2\x05\x00\xf5\x03\x00\xba\x05\x00\x93\x1b\x0c\x1e\x00\x02\x06\x00\x15\x01\x00\x1d\x0b\x03\x00*\xfa\x06\x01i\x02\x04\x00\x1d\x8e\x10\x00\xf3&\xf6\x01\x02D\x00\x02\x0c\x02\x01\x07\x03\x01C\x04\x01\x17\x04\x98\x04\x9e\x06\x03A\x03\x01\x03q\x0f9\x03\x04\x01\x05\x11+\x07\x04\x01m\x0b\x11\x01?\r;\x01\x96\x01\xa6\x01\x01$\x00\xc7\x01;\x03\x01\xe6\x01\x02\x08\x07\x0e\x9f\x03\x00\x0e\x0b<\x0eB\x12\x00\xb1\x06\x90\x1fw\xcc\x01\x87\x01\xca\x0b/!YQ!]!\x19\x05?\x0f\x03\x17\t\x11\x0b\x01\xa9\x01\xcd\x02\x04\x01\x01\x05\x04\x01\x03\x15\x11\x04\x01\t5\x01\x07\x11\t\x04\x01\x15\xa7\t\x04\x02\x01@$\x00\x13\x01\xb0\x0b\x02\x04\x00\x03\xec\x02\t\x04\x01\x03\x0b+\x04\x03\x0b\xba\t\x8f\x07%\x0b\x03\xa3\x01\x04\x03!\x95\x02\x04\x03\xd8\x0b\x07\xe6\x01\x10\xcf$\xb0\x08\x00\xf2\x04\x00)\xf3\x04$\x01\xda\n\x04\x03-\x8f\x01\x013\x00\xc2\x07\x9d\x01\x03\x01\xfd\x06\xa6\x08\xf1\x0f\x00\x80\x0f\x00}\x00\xce\x02\x00\xbe\t\xa9\x05\xe5\'\x00\xcd\x02\x04\x01%\x13\x03\x1b\x01\t\x11)!\x01\xf3\x01\x02\x01\x06\x05\xfa\x05\x02<\x03\x0e\x04\x00\x0b\x02\x00I\x08\x00\x02\x04\x00\x114 \x00\x06\xa0\x02\x00|\x01\x02\x04\x01\x17\x94\x02\n\x0c\x00\n\xb8\x0f\x00\xbf\r\x03\x01\x07\xbd\x01\x04\x07;+\t\x01\'\x01\xc6\x11\x00\xea\x07\x00\xc2\x05\x00\xd7\x10\x00\xe9\x16U\x01\xb4\x06\x002\x00\x91\x01<V\x06DX\x14\\\x06\n\x046\x1f\xa8\x02>LZ\x9a\x01\n\x16\x96\x01\xe0\x01z\x06\x14\xde\x01|\x06\xb6\x01\x04\x06=,*FTj\nn\xf6\x01TL\xf4\x01\xee\x01\x06\x8c\x01\xb6\x01\x96\x01\xb6\x01\x92\x01\xdd\x1f\x01\xe7\x02\x0c\x03\x01?\x9c\x01DP\x14T\x06\x042\x97\x01\xa4\x02:HV\x96\x01\x06\x12\x92\x01\xdc\x01r\x06\x10\xda\x01t\x06\xae\x01\x02\x06(&BPf\x06j\xf6\x01PH\xf0\x01\xe2\x01\n\x88\x01\xb2\x01\x92\x01\xb2\x01\xb7\x1f\x01?O\x82!>\x00\x02\x03\x0c\x14\x00a\x03\x00\x14\x00\x1e\x00\x82\x01_\x93\"\x004\x81\x02\x02\x00\x10\x00\x14\x01V\x00y\x16\x00l\x00c\x02\x06\x06\x01)\x96\x05\x03/\x00\xd5\x04\x02\x9e\x05\x02\x04\x05\x00\x02\x00\x12B\x00\x06\x07\x00.\x00\x04\x02\x04\x00%&\'\x02\n2m\x00S\xc4\x01\x00\x0c\x00\xbb\x01\x00\x11\x00\x9a&+E\x04\x01\x11\x11\x0b;\x01\x05!\x1d\x13\x85\x01\x04\x03\x01\xa9\x01\x04\x03\x01\x89\x01\x04\x03\x01\xa9\x01\x04\x03\x01\x7f\x04\x03\x01\xe3\x01\x04\x03\x01\xe7\x01\x04\x03\x01?\x04\x03\x01G\x06\x03s\xcd\x01\x1b\x03e\x03\x01\x03a\x03K\x03=\x03!\x03#\x03\xb1\x01\x03u\x03\xd5\x01\x03\x0b\x03s\x03\xd7\x01\x03\x8d\x01\x03\r\x03\x01\x03\x91\x01\x03Q\x03C\x035\x03\x1bi\x05%\x01k\x03-\x03-\x03\x01\x03\x01M\x04\x03\x04\x01\t\x07\x03\x01/\x19\x04\x03\x04\x01\x11\x0f!\x05\x03\x01\x057\x01\x03\x04\x01\t#\x01\x03\x01\x07\x04\x013\x1b\x11?\x05\x0b\x01\xad\x01\x03\x01\x03\x1d\xcb\x01\x01\x05C\x03\x15?\x11\x0f\x01\xbf\x01\x0b\x19\x01\t\x04\x01_\x07\x15\xbd\x03\x01\xf3\x01E\xba\x02\n\xa0\x03\xe4\x05\n80@\x1a8Bh\x10*.d\xe2\x01\x12\x88\x02HV\xac\t\xca\x02p\x8a\x03\xfa\n\xc50\x04\xc6\x0b\x00\x01L\x08\x02 \xf4\'\xa2\x01\x8e\x01\xa2\x01\xe7\x06\x1bW\x04\x03\x01\x9d\x01\x04\x03\x03\x01\x87\x01\x04\x03\x01\x9d\x01\x04\x03I\x01\x99\x02\xee\x02t\xf1\x02\xf2\x08\xb3\x04\x03\x01\x03\xff\x06\x01\xe0\x0b\x82\x04\x06\x01\xdf\t\n\x9e\n\x01\xf9\x07&|\x10\xaf\x01\xb8\x01\r\x01\xec\x02\x02\x00\x86\x02\x00\xec\x05\x01\x05\x83\x01\x06\x03\x01\x99\x01\x04\x03\x07\x01#\x0b\xb3\x01\x04\x01\x03\x0b\'\x04\x03W\x01I\x03\x01\x07\xc9\t\xa0\x01\xca\x03\xaa\x01\x96\x01\xaa\x01\x87\t\x88\x0bX<\x08\xf0\x01(\xa6\x01\x10\xaa\x01\x96\x01\xaa\x01`\xe1?\x01!\x0b\xa4\x01\x9a\x06\x01\x00\x01\x00\xaf\t\x02\x01\x0c\x0e\r\x0b\x02\x01\x8c\r\x04Z!p\x90\x01\xf2\x02\xae\x01|\xe2\x01\xa8\x01\x86\x02x\xdc\x01\xbe\x01:\xbd\x1e+\x03\xe2\x0b*\x04V\x19l\x8c\x01\xee\x02\xaa\x01x\xde\x01\xa4\x01\x82\x02t\xd8\x01\xba\x016\x9d\x12\x04\x00\x0f\xe4\x0b\x86\x02x\xdc\x01\xbe\x01:\xd1\x06\x96\x01\n\x00\x13$\x00\x04\x05.t\xd8\x01\xba\x016\x89\x05\x06\x00\x05\xab\r42\x04Z\x1bp\x90\x01\xf2\x02\xae\x01|\xe2\x01\xa8\x01\xea\x01x\xdc\x01\xbe\x01:\xfb\x1c\x0c\x04\x00/\x92\x06\x02\x00\x10\x01\x0c,\x00\xb4\x01\x06\x00<\x18\x13\x00\x14>\x00\xf3\x02\x01\xf4\x02\xa1\x01\xb0\x02G\x06\x00!*\x01\x03\x02\x00\x01\x00\"\x9e\x12\x13\xc7\x0b\x13\x99\x03\x19\x05\x13\t\x04\x01\x17\x07\x01\x0b\t\x0b\x07/\x07\x17-AS\x04\x013\x05\x01\x1f#\x1b\'\t1\x0b\x13\x03\'\x13\x05\x01cO\x1d\x01\x0b\r\x01\x97\x02\xb3\x05\x01E\x04\x00\'\x04\xb2\x0c\x0c\x00\x90\x03\x02\x00\x0cv\x07<\x008\x0c.\xc5\x01\'\x01\x00\x02\x04\x00\x0b\x14Z\x00\xb4\x01\x0e\x00\x04\x10\x13\x0c\x02\xa3\x06\x01\xf4\x05\x1c\xdb\x01\x127\x1f\x06\x00\x07f.\x02\x90\x02\x04\x01\r!\x01\x0b\x07\x03\x0f\t\x04\x01\x0b+\x0b\x01\x1f\x157\x04\x03\x06\x01\x1d+\r\x11\x01\x17+\r\x03\x01\x11\x01+\x0b\x01\x89\x03\x06\x01A\x0b\xb5\x0c\x00\xcc\x11\x00\x01\x00\n\xd5\x08\x002\x02\x00\xfd\x02\x0b\x06\x05z\xf8\x01\x00\xbc\x17\n$\x00\xb2\x01\x00\xd8\x03\x94\x02\x00\xed\x1d\x02\x00\x02\x04\x00-\x01\n\x02\x01\x00 \x00\xa8\x1e\x0f\x1b\x93\x02\xcd\x03\x03\x05\x95\x01\x1b#\t\xef\x01\x01\x03A\xeb\x05\x04\x01\x15/\t\x1f\x03\x19\x11\x1f\x05\x01\x1d\x13\x04\x1f\x0b\x05_\x1f\x19\x031\x04\x01\t\x05\x0f\x01\xe3\x03\x0b\x04\x05\x15q#\xd1\x04\x05\x01\x05\x1d\x01\t\x01S\x06\x01\x03?\xcd\x01\x08\x01\'\r\x05\r1\x03\x01\x03\x1f\x01\x1b#\x01\x07\x15\xd1\x01\x03U{\x01\xf1\x01\x04\x01\x01C\x04\x00\x0f\x06\xde\n\xcd\x04\x00\x10\x01\x04\xce\x19\x06\x03\x05\x01Q\x1f\x08\x03\x01)\x08\x03\x01\x01\x06\x03\tK\x1f\x0b\x1f\x07\n\x03\x03\xb1\x01\x15\x08\x03\x01g\x08\x03\x01\x01\x06\x03\x13\x0f\x03\x19\x01\x03\x01O\x1f\x05\x1f\x08\x03\x01\x97\x01\x08\x03\x01\x01\x06\x03\x0b#/\x11\x1f\x1d\x1f\x08\x03\x01k\x08\x03\x01\x01\x06\x03\x07]\x15\x05\x15\x08\x03\x0f-\xb1\x01\x03/\x11\x1f\x05\x15\x08\x03\x01\x7f\x08\x03\x04\x01\x19\x15\x1f\x05\x1f\x035\x1f\x035\x1f\x03\r\x1b\n\x03\t\x01!\x03\x07\x03\x04\x01\x13Q\x13\x19\xbb\x01\x03\x0b\x01\x13/\xaf\x02\x06\x01\x05\x0b\x01m\x0495\xe5\x03\x03I\x00\xa0\t\xf7\x02\x01\x86\x04\xca\x03\x01\x00\xf3\r\x00 \x1f\x00P\x00\x040\x01\x0c\x10\x00\x08\xc6\x02Z\x046\x01\x8c\x02\x04F\rN\x8a\x01\xd6\x01v0.\x86\x02\x04B\x17Lj\xde\x01T\xda\x01\x8c\x01\xa8\x01\x84\x01\x04\xb1\x18\xc2\x02V\x042\x01\x88\x02\x04B\rJ\x86\x01\xd2\x01r,*\x82\x02\x04>\x1bHf\xda\x01P\xd6\x01\x88\x01\xa4\x01\x80\x01\xcb\x17\xc8\x02\xb4\t\x03\xf5\x07\x8c\x02\x04F\x0fN\x8a\x01\xda\x01p\x060.\x06\x04B\x19J\x06j\xd6\x01T\xd8\x01\x06\x8c\x01\xa8\x01\x88\x01\n\xaf\x12\x88\x02\x04B\x0fJ\x86\x01\xd6\x01l\x02,*\x02\x04>\x17F\x02f\xd2\x01P\xd4\x01\x02\x88\x01\xa4\x01\x84\x01\x06\xd7\t\x04B\x19J\x06j\xd6\x01T\xd8\x01\x06\x8c\x01\xa8\x01\x88\x01\x85\nO(\x04:/\x00N\x00&\x00\xde\x03\x00J\x00\xe6\x02\x00\x86\x01\x00\x8d\x05P\xe4\x01\n\x88\x01\xb0\x01\x8c\x01\x89\x0c\x9d\t\x02\x04\x04\x01\xc1\x01\xb7\x02 \x1a\n\x04\x00 \x18ER\xa4\x01\x12\xe6\x0c#<\\\n\x18,\xca\x02&L&\\\xa7\x15\x00 \x00$\x00\x04\x008\x00\xb0\x01\xda\x0c\x9a\x01\x1a\xe6\x02V\x82\x01\xd7\x01\xe5\x02\x9c\x03r\x9b\x12\xca\x0c\x008\x06=\n\x98\x01\x9b\x10T\"\x06\xc6\x02\xc7\x01\x02(\x0c\x00\x03/*\xa5\x02\xfc\x01\x1a\x19\xe0\x01\x02.\x1a<P\xd3\x01\xdb\x03\x01\x06\x16\xe2\x05\xfd\x05d\x154\xa4\x01\xb4\x03\xa1\x03\x1d\xa0\x04\xa3\x04\x10\x82\x08\xdf\t\xc0\x06\x87\x07\x04\x00#JG\x04\x00\x16\x00\x16N#\x00\xb0\x06\x0b\x1d\x01\x1f\x07\x01\x13\x04\x01\x01\x1f\x06\x03\x06\x01\x03\x03\x19\x06\x03\x01)\x06\x03\x05\x0f\t\x19\x06\x03\x01\r\x06\x03\x011\x06\x03\x07\x01\x03\x01\xd2\x01\x04\x01\t\x05\x01\x03\x0b\x07\x04\x03\x1b\x01\xb7\x04\x01\x03\x01\x04\x00\"\x00\n\x01\x92\x05\x01\xc1\x03\x04\x011\x07\x01\x0f\x17\x06\xea\x04},\x0b\x1d\x00\xde\x01\x1d\x00n\x1d\x00\x9d\x04>\x1a@60\x94\x02\x02\x04\x00/\x16\x000\x02\x04\x00\x08\x0e\x01aN\xd3\x04\x16@L\xc4\x01\xe5\x02\x168L\x87\x01\x80\x01\xbe\x01\x02\x04\x01\x13\xc2\x06\x03)\x01!\x01\x03\x13\x17!\x04\x03\r\xc1\t\x00\x10\x11\x02\x03\xd8\x03\x04\x02\x13\x00\x03\x01\xd7\x03\x00\x01\x15\x0b\xcd\x01\x02\x04\x00\x93\x01f\x00l\x00x\x06p\x9a\x01\x8b\x03\x9a\x04%\x03\x01\xed\x03\n\x03\x00@\x00<\x14\x00<\xb2\x01\x9e\x01j\x8b\x05\x02\x00\xd1\x01\x00\xf8\x01\xf7\x01\xf2\x01:\x16<2*D\xd2\x01t\xa2\x01h\xfb\x06\x04L>\x1a@6.H\xd0\x01\nx\xa6\x01l\x0c\xab\x07:\x16<2*D\xd6\x01t\xa2\x01t\x0f\x03\x01Y\x06\x03\x01\x95\x01\x06\x03\x01k\x04\x03\x01\x01\x04\x03\x19\x93\x02\x00r\x00T\x00V\x01,\x00b\x00\xa7\x03\x04\x01\x07\x00\x04\x00\x0c\x04\x03\x05\x93\x02\x97\x02\x02\x08\x00\x05\x13\x02\x01\x04\x12\x04\x001\x02\xba\x012\xea\x03\xc3\x02\x01\xa1\x01\x01%\x00\x18\x01\x06\xb6\x03`\xd0\x01\x00\x89\x08\xfe\x02\x9a\r\xef\r\x98\r\x97\r\xe4\r\x8b\x10\x06\x00k\xde\x03\x02\x0e\x00\x16\x04\x06 \x08\x1a\x02q\x01d\x02.\x021\xc0\x08\x9a\x0c\x064\x02\x1e\x02\xd7\x036\x02V\x00\xc8\x01K\xfc\x01\xa9\x01\xe4\x02\xed\x01\x02\x06[\xca\x04\xed\x02\xfa\x039\x14Z\x05\x0b\x10\x06\x02.\x04\xa0\x01\xff \x08\x00\x05\x08\x03\xfe\x01\n\x00\x0b&\x00\x12\x03\x06\x05\x08\x00\x01\xd2\x01\x04\x02\r\x03\x00\x0c\x07\x0c\x01\x02\x04\x007\x81\x01\x00\x88\x01\x00\x01\x15\x01\t\x00\x02\x01\x0c\x06\x08\x01\x04\x05\x00\x12\x06(\x01+\x0c\x03\x06\x01\x02\x06\x00?\x04\x03\x06\x12\x03@\x01%\x05\x01\x0f\r\x05\x01\x03\x07\x11\x03\x01\x03\x0b\x03[\x03\x05W\x01\r\x11\x13\xfd\x01\x03\x04\x007\x04\xce\x04\x0c\x030,\xa5\x01\x02\x01\x02\x01\x04\x03\n\t\x04\x03\x0c\x03\x10\x00\xae\x01\x04\x00\x04\x03\x06\x05\x04\x00\x03\x14\x13\x04\x00=\x02\x01\x08\x01(\x06\x0c\x00\x02\x08\x07$\x15\x04\x03,\x01\x19\x06\x05\x14\x0b\x01\x05\x0f\r\x01\x0b\x05\'\x05\x04\x03\x01)\x04\x01\r-\x07A\x03\x0f\x07\x8f\x04\x04\x00%\x04\xbe\x06\x14\x03X\x02\x01\x04\x00\x16\x03\x08\x07\n\x05\x12\x06\x0e\x00\x06\x01\x04\x00\x11\x06\x01\x00\x020\x0b\x04\x03\x02\x04\x00C\x01\x00\x04\x03\x12\x00\x02\x08\x07\x04\x00\x04\x03\x00\x080\x08\x03\x02\x01\x10\x07\x08\t\x05*\x03\x04\x03\x04\x03\x129\x02\x04\x00K\x02\x01\x02\x016\x00\x02\x06\x02\x04\x01\x02\x03\x00D\x05=\x01\x03\x01\x00\x08\x0e\x07H\n$\x07V\nH\nN\x05T\x07\x11%\n\x01\x1f\tG\t\x01E\t\x01S\x1b\t\x01E\x05\x07\x015\x08\x01\x1b+\x01\x05\x03\x01\x11#\x01\x03\x07\x05\x11\x03\x11\x04\x03\x05S\x0f\xc1\x06\x04\x00#\n\x8c\x0c\x01b\x01\x00\x14\x12\x02\x05\x16\x17\x0b\n\x00RQ\x05\x04\x017\x04\x03\x12\x03\x02\x01\x12\x118\x18\x00\x1b\x00P\x08\x03\x02\x01\x02\x01\x02\x01\x04\x03\x04\x01\x06\x07\x06\x00\x07\x02\x01\x02\x01\x04\x00\x17\x02\x01\x00\n\x00\t&\x04\x01\n\t\x14\x08\x00\x93\x02\x01\x00=\x08\x03<\x03j\x11\x01\x1f\x05\x00\x04\x03\x02\x01\x0c\x006\x01\x00\x06\x03\n\t\x01\x00\xa9\x01\x02\x9d\x0e\x00t\x8e\x0c\x08\x03\x04\x03\x02\x01\x04\x03\x08\x00\x04\x05\x07\x01\x08\x03\x04\x03\x04\x00\x02\x01\x1c\x03\x16\x06R\x00\x01O\x05\x15\x17\x03\x00\x04\x03\x04\x03\x02\x01\x04\x03\x04\x03R\x01\x00\x02\x00\x02U\xc0\x01\x03\x86\x01\x01\x00\n\x03\x08\x01\x14\x01\x02\x01\x02\x01\x17\x01 \t\x02\x03\x00\x1c\x08\x00\x04\x03\x07\x17\x01\x05\x01\x004\x00?\x00`\x02\x00\x06\x03\x04\x01\x02\x03\x00\x02\x01\x02\x01\x00\x04\x01i\x00\x02\x00\x06\x03\x04\x03P,\x08\x00\x02\x03\x00\x02\x01\x0c\x0f\x01\x00\x03\x04\x00}\x02\x00\x02\x00\xc2\x03\x02\x00\x06\x03\x06\x05\x04\x03\x04\x03\x08\x00\x04\x03@\x02\x10\x086\x02\x00\x9b\x01\x02\xd6\x02\x04\x00\x11\xa8\x02&\xf6\x07k3\x0b\x03+7\x04\x01\x01\xef\x03\x04\x01\x05\x03/\x17\x04\x01\x0f3\r\x13;\x07\x01#\xa7\x02\x04\x01\x15\'\r\x07\x01\r\x01?\x07\x01\xb3\x01\x03\x04\x01\x11i\x03\x11\x03\x15\x11O\x01\xc3\x01\x06\x01\x0b\x17\x013\x03\r\x03\x04\x01EO\x01/\xbb\x01\x01\x05\x1d\xe9\x0b\'\x03G\xa8\t\xf4\x0f\xae\x016\xf6\x03h\xbb\x06\x02\x01\x08,\x00\x86\x02\x01\xe1\x01\x02\x06\x05\x04\x05\x01\x02\x00\x02\x04\x00m\x04\xd1\x10\x01\xac\r\x9e\x03\x9d\x03\x02\x00\x9c\x03\xea\x01\x02\x88\x02Pj\x00\x04\x01\x00\x01\n\x04\x03\x04\x01\x04.\x00\xa5\x01\x14\x08\x91\x1a\x02\x01\x02,\x02\x04\x00\x89\x01\x00\x1a\x04\x03\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00 \x04\x00\x11\n\x01\x0e\x0c\x02\xd1\x04\xf2\x01\x82\x01\xf3\x02\x04\x00\x13\x8a\x01\x89\x01\xf2\x01\x00\x14\x08\x07\x85\x02\xa6\x01v\x04\x18i\xa5\x01\xcc\x01\x02\x00,\x02\x00\x1a\x84\x01\x12\x04&\n\x10\x0f:\'W\xcd\x01\x02\xd8\x01\x06\x02J\x00B\x03L\x06\x08\x00\x02\x00\x08\"\xed\x03\xde\x01\xa5\x03\xca\x03!\xdf\x01\xb7\x01\xd8\x02\xf4\x02\xf1\x02\xb4\x03j\x80\x03\xc5\x03\x95\x03\xc8\x01\x02\x00\x04\x16+\x00\x16\x06\xe9\x06\x02\xb0\x04\x01\xbb\x01\x000\x0e\x00Z\x00&\x00%\x00E\x13\rH\x08\x00)\n\x07\x00R\n\x00\x14\x13\t\x00\x140\x14WF-\x010\x87\x01\x01\r\x04\x011\x13\x11\x07\xbb\x03\x00\x02\x00\x04\x020\x01-\x01\x03\x01\x02\xf2\x02\x0c\x0b\xb8\x01\xf6\x01\x00D\x0c\x1c\x04\x00\x17\x01\x00\x02\x01\x04\x02\x01\x00\x19\x0b\xf5\x03\xf3\x02\x04\x00\x07\x1c\x10\x0f\x1b\x06\x00\x11\x14\x000\x00\x14\x00\x14\x00(\x06\x00\x07\x17\x01\x00\x02\x04\x00\x04\x01\x11\x00<\x06\x01*\x03\x04\x00\x02\x04\x00?\x14*\x062\x0e\n\t\x01\x0b1\x01\x03)\x01\x11\x01\x03%\x03\x01\x0b\x05\'\x03\x07\x05\r\x13!\r\x05\r\x04\x007\x02\xee\x02\x00\x03\x00\"9\x015\x01\x99\x02\x00\x1c\x12\x0c\x0b\x1a\x00\x8e\x04\x01\x19!\x15\x013\x01\x99\x02\x03\x04\x01#_\x19\x11\x1b\xae\x01\xa8\x02\xd5\x03\x12\x8a\x02 \x05\x19\x18\x04@\x01\x07\x06\x06\x00/\x94\x04\x01J >\x06\xc2\x02\x02\x01\x83\x08\x02\x006\x00\x0c\x06\x00\x05\x01\t/\x05\x01\xe2\x01\x08\x00\x0b\xda\x01\x004\xe1\x06\x02\x01\x04\x0e\x99\x01\x0c\x04:9\x0f\x1b\x00\x0e\x08\x06\x10\x00:\x00I\x19\x01\x96\x01\x04:\x9e\x01\x02\x080J\x00<\x1e\xd1\x02\xde\x04\x02\x00\xed\x02\xc6\x03\x02&\xf9\x02\xea\x04\x0c\xeb\x02\xae\x03\x02\x00\xbd\x02\x84\x03\x02(\x19\xb3\x02\xf2\x02\xc3\x02\xea\x03\x02\x00\x91\x02\xba\x02\x02\x00\x99\x02\xb0\x02\x02\x00\xe5\x01\x92\x02\x02\x00\xd7\x01\xd2\x04\x02\x00\xc1\x01\x84\x02\x02\x00\xa3\x01\x97\x06\x0c\x06\x00\x01\xd9\t\x04\x00\x15\x16\x06\x18\x17\x00\x14\x13\x03\x01\x15\x04\x04\x01\x07\xb2\x0b\xb5\x05\xe7\x04\x02\x04\x00+4\x00.\xaa\n\xb5\x05\x01\xe7\x04\x05\x03-3\x01\x93\x01\x96\x01>\xfa\x01p\xae\x02N^\x8a\x02*\x04D?\x92\x03Z\xeb\r\xf2\x10\x84\x01\x83\x01\x80\x01\xd1\x10\x00\x062\x00\x86\x01\x10\x0f\x18\x17\x00\x9b\x03\xe4\x01\xe4\x03\x01\\\xe4\x02J\x9c\x02)B.\xfc\x02D\x87\x11\x08\x00\x1b\x90\x95\x02\x00\xd8\x04\xc7\x18\xe8\x08\x99\x05\x0cj\xe6\x01\x82\x01\n\xd0\x01v\x1e\x04\x00\x05\x02\x00\x02\x06\x00\x05\xc7J\x06@\x06\x00\x1d\xa9\xac\x01*\x96\x02\xaa\x02\x98\x01\x80\xc8\x01\x00f&\x01\x04\x03\x08\x07#\x08\x00\x01\x06\x04\x00\x1d0\x9d\x01\x0c&\x02\xa8\x01\x06\x04\x12\x14\xff\x01\x000\x02\x01\x04\x00?\x0c\x00\x18\x8c\x01\x00\xd7\xd2\x01\x1f\x05\x0b\x00\x9a\x01\xd0\x02\n\x08\x07\x02\x03\x07\x00\xc1\x07\x0b\x00 \x00\x18\x02\x01\x1a\x01\x02\x00\x1e\x06\x00\x07L\x83\x03\x01\xd2\x08\x06\x00)\xae\x01\x00\x1a\x01\x12\x00T\x12\x0f\x01\x07\x01\x11)\x05\x00\xb1\n0\x01\xbe\n(\x04\x00\x018\x04\x00\x01\xfb\t\x04\x01\x03\x00=\x04\x00_:\x98\t\x11\x17\x15\x05a\x03\x0b\x03\x01\x19\x1b\x01\xb9\x01s\x03\x99\x01\r\x01\x07\x01\x1b\x07\x05\x03\x01\x03G\x03O\x03\x05\x13\x01+\x01\x13\x03M\x03\x01\'\x01\x05\x01\r\x1d\x04\x01\x15\x07\x01\r\x01\x15\x1f\x07\x00\xca\'\x06\x05\x04\x00\x07x\x01\x00\xdb\"\x08\x03\x05\x01\xe8\x01\xc2.\x04\x01\x17\x02\x00\n\x008\x01\n\x07\x14\x02\x00\x02\x04\x01\x07\x00\x02\x00\x02\x04\x01\x07\x00\x06\x03X\x04\x00\x0f\x14\x00\x02\x01\x13\x0b\x00\x06\x06\x00\x05R\x00\x02\x04\x00\x01&\x04\x00\x01\x02\x04\x00\x01\x01\x06\x00m\x1e\x01\xc0b\x06\x03\x00\x16\x00B\x00\x86\x01\x01\x17\x00\x02\x91\x01\x1d\t\xfb\x11\x08\x00>\x00\x82\x01\x01\x02\x00\x013\xe2\x02\x94\x15\x00\x89\xa5\x01\xc9\x04b\xbc\\\x9d]\x01\xe2Z\xbe\x02\xc9)\n\x10\x01\x02\x00\x06\x03\xd4\x01D\xb8\x01\xfb\x01@\xb4\x01\xc7\x03\x04\x01\x15\r\t\xf5\x17\x94\x02\t\x14\x03\x06\x02\n\x07\x04\x01\x99\x01\x00\x02\x10\x00\n\x03\xb6\x15\x0c\x01\x0e\r\xe4\x02D\xb8\x01\x8aB\xb6\x03\x03\x13\x1dS1\x11#\x11\x05\x01\x92\x03\x1c\x05\n\x05\xde\x045S1\x19#\x19\x05\x01\x98\x06\xd6\x03\x19\x01\x1bQ1!\x17\x0b!\x07\xc2\x01\x00\x0e\r\x02\x01\n\t\x12\x11\xde#\x05\x13\x01M\x1d\x03\x0b\x01\xfb\x02\x07\x19+%\x05\x04\x11\x0f\x15\x13%\xc7\x04\x8d\x03\x01\x0b?\x04\x03\x87\x01\xd1\x02C1O\x1b\x05C\x0fU=\t\x01\x0b\x8d\x011\xbd\x02\xa9\x01\xb1\x01\x01\xa7\x01\x035[1\x19#\x19\x07_\t\x01\x9d\x03=g3%\x01\x85\x01!\x97\x06\x01\xb7\x02\x07\x03\x15\x91\x03\x01\x85\x01!\xb7\x053\xd5)]\t\x05g1\'1\x0b\x01\x83\x0f\x01M\x033\x01\x0f\x04\x01\x03O\x15\x04\x03\x0f#\x15\x05\x03\xc7\x02\x1b\t\xf1\x12\x04\x01\x03\x07\x05\x04\x01\x19\x1f\x05\x01\x15\x05\x01\x13\x1d51!\x01\t\x04\x01\x1d\x1b\x05\x0f\x01\x05\x0f?\x0b%7\x0b-%\xd9\x1a\xc9\x06\x04\x00\x05\x06\xcc\x90\x01\x01\x04\x00C6\x16\x00\xe4\x03\x93\x02\x00\x9a\t\x00\x85\x01\x16\x00\xec\x12\xb0\x03\x01\x00\x0c\x02\x0c\x01\t\x01\x0b\x00\xab\x03\x01\xd3\x0e\x01\xd9\x05\x00\x12\x03\x04\x03*\x04\x00\x05)\t\x01\x04\x00C\x01\x00\xb6\x07\x0c\x01\x02\x00\x0e\x00\n\x05\xc6\x01\xc5\x01\x03\r\x01\x07\x01{\x00\x02\x00\x01\x000\x01\n\x00\x16\x01\x98\x10\x85\x01\xf1\x0c\x83\x02\x04\x01\x85\x01\x17\x01\x11\t-K\xed\x02\x15\x85\x01\x0b\x15oQ\xcd\x04\x81\x02\x15\xc3\x01\x0b\x153\x01\xcf\x90\x01\x00\xd6\xa0\x01\x00\x1a\x85T\n\xee\x01\t\x16\x02R\x03\x07\x01\xb2C\x00\x14\x11\x06\x01<\x03\x0c\r7\x01\xd2\x01\x01H\x03\x01\x00\x02\x0e\x00\n\x07\x82\x01\xe3\x10\x00(\x1a\x108\x80\x11\x04\x02\x1f\x03\xd4\x0b\x01\x1f\x14\r\x03\x01 \x14\t\x18\x0e\x02\x18\x06\x04\x00;\x02\x01\x02\x1f\x00\x04\x03\x1e\x02\x01\x00\x16\x01\t\x01\x07\x05\x01\x15\x01\r\x17\tK\x01\x17\x01\xe1\x0b\x01\x81\x01\x04\x01\x1b\x0b\x01A\xcf\x01\x01\xd9\x0c\x03!\x15\x1b\r\x11\x15\xf55\x04\x01\r?\x01\x15\xc7\x01\x1b\t\xe9L\x04\x00/\x06\xd0\xa3\x01\x00\x12\x11\x0c\x0bzy\x1c\x1bM\x01\xc1\x13\x02\x0c\x036\x03\x02\x00\x1c\x06\x12\x08\x00\x13\x01\x00\x02\x00\x04\x06\xee\x01\x00\x88\x03\xb2\x03\x04\x01\x04\x05!\x9d\x03\x03\x87\x03\xed\x01\x05\x03\x01\x0f\x05\x1b\x011\x07\x01\xce\x03\x00\x02\x08\x00\x0b\x01\x00\x02\x00\x04\n\x04\x00\x1d\xb6\t\xb5\t\x00\x04\x00 \x00\x1d\x1c\x1d\x00\x88\x0e\x00\x06\x05\x04\x005\x12\x11\\\x05\x84\x01\x01\x00\x04\x05\x7fU\x01\x00\x02\x00\x04\n\xd4\x01\x04\x16\x00\x1a\x00\x08\x03\x04\x03\x04\x00\x05\x04\x01\x0e\x06\x00\x07\xee\x02\xcf\x02\x05\t\x04\r;\x01\x03\x19\x15\x01\xd5\x01\t\x03\x01\xe3\x07\x05\t\xf5\x05\x1b\x03\t\x03\x01\xcd\x03\xc3\x8f\x01\x00\xb0J\n\xc0\x01\x12\x07\x00-\x01\xafG\x06\x00q\x1c\x0e\x02\x00\x0f\x00\x14\x01\x002\x01\x08\x01\x10\x04\x00\x1a\x002\x00\xc0\x0c\x01\x02\x00\x06\x03\x00\xf2\x8e\x01\x02\x01\xef\x07\x97\x03D\xa8\x01\xb8\x01\xa2\x0e\x06@\xa4\x01\xb4\x01\xb3\x01\xa1\x01\x01\x04\xd3\x03\x02\r\x04\xe2\x03\x03\x01\xfb\x9a\x01\x00\x02\x01\x04\x03\x04\x00\x0b\x81\r\x0c\x0b\x8a\r\x0c\x02\x04\x00\x15\x02\x06\x02\x04\x00\xcf\x01\x02\x04\x05\x00\x0c\x06\x003\n\x03\x12\x11\x02\x01\x16\x05\x04\x03\x06\x05\x08\x00&\x03\x04\x03\x02\x01*\x00\n\x0b\',\x04\x00\r\x06\x05\x1e\x07\x02\x0c\x03\x04\x02\x19\x03\x04\x03\x04\x038\t\n\x01;\x0e\x03\x1e\x04\x00+\x0e\x03\x1c\x01\x00\x19\t\x03\x01\x00\x02\x01R\x07+\x01\x00\x18\x00,\x01\x04\x04\x00\x01\x02\x04\x00\x13\x06\x02\x04\x00\n\xea\x02\x01\x15\ri\x04\x01\x19\x03\x01\x15\x07\x01\x0b!\rm\x05\x01\x07\x03\x06\x01\x04\x03\x0b)\x17\x05\x15\x17\t\x04\x01\x13\x15+!\x07\x0f\x05\x0b\xc1\x0b\x11\'\x04\x00\x17\x04\xa8\x0e\x00\x06\x05\xc0\x15\x02$\x03\x02\x01\x06\x04\x003\x05\x1f\x01\xeb\x1e\x00\xda\"\x01\xaf\")\x004\x00\n\x01\n\x03\x04\x05\x03lk\x07\x0321-\x04\x01\x01\xa0\t\x04\x01\x1b\x02\x01\n\x14\x1dm\x01\x00\x9e\x08\x026\x04\x03\x18\x08\x00W\x03\x98\x01FNx\xea\x01\xe0\x01$x\xdc\x01$\x10\xaf\n\x02\xc1\x11\xa7\x01\x91\x01\xb6\x01\t\x02\x00N\x00\"\t4\x00\x1a\x02\x82\x04z\xfc\x01\xdc\x01\xc8\x01\x10<h@`B\x90\x01\x83\r\x01\x8b\x01\x04\x01\x0b\x02\x04\x00\x94\x01Tt\x04D)~\x80\x02\xe0\x01\xcc\x01\x14@j\x06DdF\x94\x01\xac\x01\xeb\x03\t3\x03\xa8\x01?\x03\xc7\x01\x06\x03\x04\x01\x05\x05\x11\x1b\x04\x03\x03\x01\t\x04\x03\x05\x01\x03\xb9\x01\x06\x03\x03\x01\xd1\x01\x06\x03\x03\x01\xf1\x01\x06\x03\x01\x01\x06\x03\x07\x1f\'#\x03\x04\x01\x19\t1\x03\x01\x03\x1f\x19\x03\x01m\x03O\x03\x04\x01\x15\xfb\x02\xa9\x01\x16\x05\xa6\x03(\x08O\x02\x08\x16\x04\x00\x0f\x04\x05\x00\x04\x03\x00\xa6\x07\xe6\x03\x04\x01\t\x93\x01\x02\xa0\x8e\x02\x01\x1f\x04\x01\r\r\x03\x0f\x03y\x00\xcb\x01\x04\x03\x05\x05\x03}\x04\x03\x113\x01!\x01\x19\x01!\x01{\x08\x03\x05\x1f!9\x04\x03\x19\x01\x07\x03\x83\x01\x01\xcb\x02\x02\x00\x12\x00\x06\x00\x14\x04\x00\t\x14\x02\x08\n\xea\x02\x04\x01\x01\xc1\x17\x04\x03;\xd9\xeb\x010\x90\x01\x16B\x18\x1c\\*\xf4\x01\x12\\\xe1\x04>0X&\xf0\x01\x0eX\x9f\x05\x00\x14\xbc\x01\x00\xdf\x0c \xda\x04\x01\x02\x08\x00\x03\x1c\x06\x04\x02\x07\x01\x0e\x06\xfa\x15\x04\x00!\xe5\x01\x01\x84\x04\x00\x11\x00\"\x12\x01\x0c\x87\x01R*(\x01\x05\x08\x04\x02qg\x00\x02\x01\x05\x01Z\x06\x03\x0c\x06\x14\n\x00\x02\x08\x00\x10\x04\x91\x02\x04\x000\x1a\x00\x02\x01\x08H\x12\x01 \x94\x02\'\xdd\x1c\x02\x01 \x00\x1f\xfa\x1b\x00\x0e\x00\n\x01\x02\x00(\x05\x03\x00\x0c\xfb\x1e\x00\x1a\x19\x06\x00\x032\x06\x04\x00I\x01\x00\x06\x00\x04\x03\xb4)\xf7\x04N\x1a\x10\x01\x02\x01J\n\x00\x1c\x00\x01\x17\x01\x07\x00\xcc\x05\x01\xa1\x06\x00\x02\xee\x01\x01\xe0\x03\xdd\x03\x00\x02\x00\x01\x06\x00\r\x12\x05\x04\x00\x08\x07R\x06\x00\x01\x0e\x04\x00u\r\x07\x000\x03\x08\x01\x00\x1e\x05\x04\x030\x01\x1d\x0e\x00j\x9e\x02U\xc1\x01\x01\x00\x10\x11\x0c\xab\x01\xc2\x02\x027@\x0c\x00\x12\x01\x00\x02\n\x02\x0e\x06\x02\x00\x04\x00\x04\x01\x02\x01\x14\xd9\x02!\x00\x80\x01i\x01\x0b\x03$\x04\x01)\x00\x01\x00\x0c\x04\x00\x1c\x1b\"\x04%\x04\xb8&=\x01\x05\xbf\x1f\x01=7\xb7\x02\x08\x01\x19\x05\x01\x05\x01\x03\x01\x05\x01\x0b\x01\t\x01\x0f\x04\x05\x04\x01\x115\x05Y\t[\x03\x07\x01\x15\x06\x01-\x03\x01\x07\x01\x1d\x03\x0b\x15\x07\x01\x05+I\x03\x0b\x015Q\x01#%\x05\x11\x04\x01\x07\x19M\xb5\x01\xc5\x03\x04\x01\x11\x03\x01\'\x03\x01\r\x07\x01\t\x04\x01\x07\x11\x05\x01\t\x04\x01\x04\x03\x01\x01\x04\x0b\x0f\x05\x01\x07!\x01\x07\r\x01\x04\x0f\x04\x05\x051\x05/\x04\x01%\x1d\x0fG\x01\x05\x19/\x03\x87\x01\x03\xe3\x01\x07a\x03\x0b\x03\x13\x05\x01\x04\x03\x1d\xd7\x01\x03s\x03\x1f\x03\xdb\x01\x03\xe5\x01\x03s\x03I\x03A\x04\x03\x19\x01\x0b!7%\x03\x01\x0b\x07\x01\x03\x013\x04\x01\r\x1d\x01\xe7\x01\xd1\x05\x01\x0f-\n\x01O\x19\x05\x01\x0b\x01\x05\x1b\x01\xa1\x01\x01\x07\x1f\x03\x01\x17\t\x11\t\x7f\x03\x0f\x05\x03\x17\x195\x01\x1d\x01\xc9\x01\x01#\'\x01{\x01\xf7\x03\x07\x0f\x13\x04\x17-\x01%\x00\xac2\x01\x90\x0f\x9e\x01\xf0\x01\x02\xb7\x0e^\xf7\x0c\x81\x16\xdd\x07@Z\x01\xb6\x08\xb8\n\xd7\x04\xfd\x10\x01\xf6\x96\x01\x04\x00Q\x8f}\r\x03\x01\xc5\x02\x00\n\x0c\x00\x0b\x02\x01\t\x00\x94\x02j\x06\"\x06\t\x01\xb2\x17\xc4D\xea\x07\xce\t\xbe\x01/\x01\x03\x01\xd8\x14\x01\x85\x86\x01\xad\x1b\xf6!\xf0\x01\xcf\x0b@H>\x9c\x10\x04\x01C\x9f\x02\xb1\x02\x9a\x80\x01\x00\x88\x02\xb0\x0b\x01\x02\x85\x02\x04\x18\x03\x06\x07\t6\x01\x1e\x03\n\x00\x12\x01\x12\x01\x00\x02\x00\xa2\x02\x01\x83\x02\x01\x19\x01\x04\x0f%\t\x193\x07\x03\xc5\x07\xe3\x01\xe5\x01!\xa5\x01\x01\r9=\x13#\x01\xd7m\xc3;\x04\x00\t\x02\xd2\xb8\x01\x06\x1dv\x04\x02\x04\x00\x8d\x01\x16\x1e\x003>\x08\x00G\x08\x05\x0c:T\x9b\x01\x02\x04\x01\x02\x01\x04\x03\x14\x00\x9a\x01x\x07\x01\x1d\x11=\x02\xad\x97\x01:\xd5\x04\x10\x06L\x06:\xc2\x01\xd2\x01\x06:\x9f\x0e\x03\xec\x01\x97\x02\x02\x00\x06\x86\x02\x9a\x02\x8c\x01\x86\x01\xab\x04\x9c\x02\x06\x90\x01\x8a\x01\x84\x03\x96\x02\xec\x01\x01\x00\x02\x00\x8d\x06\xdb\x08\x02\x00\x02\x08\x00\x04\x01\x19\x9c\x01\x00\x01\xea\x07\x10\xe2\x01\x06\x0e\x06\x8c\x02\x06\xf0\x01\x02\x04\x00!\xa7\x16\x01\x93\x06~\x80\x02\xe0\x01\xcc\x01\x14@lDdF\x94\x01\xc8\x06\xc3\x07\xd4\x0e\x04\x03\x15\x17\x06\x00\xf8\x05\xc2\x02\x03\xb9\x01\x037\x01A\x04\x03\x04\x01\x05\t\x01k\x04\x03\x011\x04\x03G\x01\xbb\x07\x06\xc7\x12\x01\x0c\x02\x00\x02\x01\x0e\x08l\x02BNv\xe8\x01\xdc\x01 Lx\xda\x01\xb0\x01\xc0\x01\x04 \x10bH,\xae\x01\xb8\x01\x02\xbe\x01\xca\x01\x04\x02\x05\x90\x01~\xf1\x08\x04\x03-\x92\x03\x02\xa6\x01F(\x8a\x01\x9f\x03\xbe\x04\xbe\x01\x9e\x05\">\xc6\x01\xa5\x10\xb2\x01\xdf\x05\xb4\x01\x9a\x07\xd0\x02\x02\xef\x02\x00\x9a\x05\x04\x03\x03\xb9\x01\x03\x04\x01\x0bA\x0021\x00\x94\x04\x04\x03\x05\x01A\x03\x04\x00\r\x81\x03A\x01\x00\xb0\x07\x03\xcd\x01\x04\x03\x01\xbd\x01\x04\x03\x015\x04\x03\x1f\x01\x03\x01\x99\t\x03\xad\x01\x03+\x91\x01\xbf\x01\x03\xaf\x01\x03\x07\x01\x8f\x03\x04\x03#\xdc\x03\xc8\x01\x94\x06\x01\x03$\x02*\x00 \x0c1\x168\x06:\x04\xf4\x04\x04\x0032\x02\x00\x0e4+$\x01\x0c\x12\x00\x0e\x93\x1f\x02\x00\x02\x10\x00\xa0\x1f\x06\x00*\x01\x0b\x1b\x05\x06\x01\x1f\x0b\x11\x01\t!\x07\x01\x0b\x01\x13\x1d\xf3\x04\x039\x01\x03\x04\x01\t\r\x1f\x05\x15#\x04\x01\x05!\x01A\x04\x01\x05k}\x8f\x01\x04\x01+\x97\x01\x89\x01\'\x073\x87\x01\x01]\x0f\x1f\x01\xcf\x01w\x03\x1b\xdb\x01\xe7\x01uMA\x01k\x06\x01\x0b\x0f\x01\x0b\x81\x05\x07\x0f\x04\x01\x01\xdb\x04\x04\x003\x0c\xa4$\x16\x00\x16\x15\x03\x00\"\x94\x01\xd5!\x04@\x00$+\\\xb20\x014\x00\x0c\x10\x06\xb4\x01,\x14\x18\n\x1a+\x12\nN6RJ*jB\xf8\x01T2fx\xd0\x01X\x16\x0e\xc6\x02B\x0e:\x04 -\xa2\x01\xbf\x15\xf2\x04J2NF&f>\xf4\x01P.bt\xcc\x01T\x12\n\xc2\x02>\n6\x04\x1c\x05\x9e\x01\xa9\t\x02\x04\x00\x07\xbd\x1d\x01\xea\x03\x02\x06\x00\x0f\xbe\x06~ \x82%\xabA\xf5\x02->\x04\x03\x05\x01\xe2\x02,\x04\x03\x03\x01\xd8\x01\x04\x01\x07\x07\x01\x0bv\x04\x03-\x19\x01\xb4\x01\x01\x1b\x01\x95\x01\xce\x07\xd2(\x01\xb8\x12@4\xae\x01\x088\x01\x00\xe1\x02\x890\x02\xcc\x02\x05\x04\x01\x01\t\x04\x01\xa7\x01\r\x05\x01\x07\r\x01\x07\x03\x01\x17\t\x01Y\t!\x05?\x05\x00P\x01\x9818\x00\x04\x00\n\x05\x00P\x00\xf3\x03\x00\xee\x01\x01\x00,H\xb5\x01\xd2\x02\x02\x01\x00\x02\x9b\x01\x01\x008\x00\nTKPa`S\x03L\x03OR\x01\xb9R\x00\x02?\x01\x85\x05\x1c\x01D\x00\xe0t\xc0\x03\x00\xbf\x03\xe1n\x02\x00\x01\xce\x11\x02\xf4m\x16\x06\x00\x01 \x04\x00\x0b\x1a\x05\x14\x08\n\x01\x04\x00\x03\xce\x87\x01\x8a\x01\x04\x03!)\r\x01\x03\x1d\x03\x05\x01\x19\x01\x15\x1b\x0b-\r)\x13\x08\x01\x01\x11\x04\r\x03\x0b\x15\x04\x01\x0f\x07\x01/#\x01\r\x01\r\x04\x01\x019\x04\x01\x11\xd3.\x02\x00:\x16\x0cb\x02R\x04\x02\x0b\xbc\x01\x02\x18\x02l\x04\x04\x02M\x8f\x01\x00\xb6\x01\x11\x03uvo\x01\xed\x01\x1e\x1d\x91\x028.Z\x10\\>L&J\xa5\x044*V\x0cX:H\"F\x06\xc1\xdd\x01\x02X\x00\xc6\x01\x02\x04\x00\x01\x16\x04\x00\x05\x1c\x00\n\x04\x08\t\x07\x1e\x02\x01\x08\x04\x00\x17\x02\x00\xb8\xd8\x01\x18\x06\x04\x05\x01\x03\x13\n\x02\x04\x00\r\xb6\x03\x02\x00\x02\x0c\x0b\x06\x04\x00\x0b6\x02\x04\x000\x10\x04\x00%\x06\x10,\x1e\x02\x1cw\x00F\x00<\x1f\x00\x18\x01w\x00\xbb\xdf\x01 \x04\x02\t\x0341\xbc\xdc\x01\x12\x04\x00\x01\x02\x04\x00\x03\x02\xa9\xc2\x01\x04\x01\x1f\x0b\x01\x0b\x07\xbc\xc3\x01\x01\x05\x01\x05\x01\x11Q\x03\x01\x1b\x11\x06\x05M\x03\x01-\x0b\x03\xd4\x17\x99\x01\xe4\x03\xdd\x01\nRF:x\x1e8@\x80\x01br\x92\x01\xd2\x01dr\xb4\x01\x1c@NJ*\xd1\x13\xb1\x01\x01\xfe\x17\t\xc8\x01\x01\x00\x02\x04\x00\x03@\x01\x06\x00\x85\x01\x02\xbd\x01\x91\x01\x0e\x84\x01\xa6\x02\x90\x01\xd4\x01z\x14\x99J\x00\xba\x02\x00\xbc\n\x00j\x00\xe0\x01\x00\xe6\x13\x00\xe4\x01\x00\xb8\x07\x00\xab*\x03\x81\xc3\x01\x00\xd8\xb1\x01\x00\xb4\x05\x00\xf4\x04\x00\xd4\x01\x00\x9e\x11\x00~\x00V\x00\xb4\x1d\x002\x008\x00~\x00\x9e\x01\x00\xec\x03\x00\xa4\x01\x00\xf6\x01\x00\xae\x02\x00\xc5\xd9\x01\xa6b\xde\x01\xc0\x04\x02\x04\x00\t\x04\x01N\x01\x9c,\x04\x01\x07#\x01\t\x03\x04\x01\x05\x11\x0b\x03\x04\x01%K\x11\x0f\x11[\x11\x15/\x11\x01q5\x03\x8d\x03\x05\x01\'\x1d-\x04\x03\x07\x01\xa3\x01\r\x1b\x04\x05\x03U\xe3\x01\x04\x01Y\xeb\x01\t\x11\x01\rI\x17A\x11q\x19;E\x01G\x0f\x87\x01U\xcb\x01\xbd\x01\x13-\x03\x01\t\x19\x15s\x0f\x01\t\xa9\x01\x1d/\x89\x01[I3\x03\x019\x01W\r\x1d\x08\x01\x01!\x04\x01\r\x15\x0b\x05\x01)\x01+\x04\x03\r\x01\x07\x05\x01\x03\x13#\x04\x017\x1d\x0b\x03C\x1f\x91\x01;\x01\x03\x05\x0bQ!kM3\x0b\x07\x0bg!\x1f%M3A\x07\t\x04\x01\x03\x19K\x04\x01\x1f#K\x1d\x01%\x15\x03\x15\x13U5\x01[G\x05\t\x06\x01\xa5\x01\r\x199/\x01\x11!\x11\x01\x03\x01\t\x07\x0bY\x1d=-k3\x1f\x11\tY\x1d=?S;{7\x0f][\x81\x01\t\x05\t[q\x1d=-A3\x1f)\x0fS\t5\x05\x07[\x1d=-G+\x173o%\x111aC\x0b5C!\x0by+3+\x97\x01\x01\xdf4Q\x05]\x03\x04\x01\x11\x0b?\x03A\x03\x05\x01\xc1\x05\xeb\x10\x04\x03\x13\x07\x037\x03\x1d\x03?\x03G\xb9\x04\x04\x01\t\x85\x03\x01\x83\x11\t-\x04\x01\x15\x07\x1f\x01\x0b\x01\x0f\x01\x03\x073\x8b\x06\x04\x00+\x02\xd0\x92\x01T\t=\x83\x06\x00\x90\x06\x9f\x8c\x01L\x00\x80\x10\x02\x00\x10\x00\x02\xf9\x01\x00\x0c\x02\xe3\x01\x04\x03g\x01\x93\x03\x03\x01\xce\x05\x02\x00\x1c\xa0\x01\x1c\x00:\x02\x01\x02\x01\xe2\t\x0e\x03\x0c\x02\xf6\x1dD\x86\x01\"B\x10\x96\x01*\xa0\x01\xd0\x146\xb2\x018\xbd\t\xf3)\x00\xb2\x02d\x00\n\x00\x18\x02\x0c\x021B\n\x06\x10\x0e\x04\x00[\x8a\x03\x00\xf5*\xe0\x02\n\x07\xa6\x91\x01\n\x07\x00F\x01\x06\x01#\x08-\x0c\x97\x90\x01\x01\xb4\nv\x02\x86\x02\x9a\x02\x90\x01\x86\x01\xb3\x13\xec\x01\x00\x17\x02\x00\x1a\x01\x02\x03\x00\x0c\x00\x06\x00\xcc\x01\"\xea\x08\n\x04\x03#\x00\n\x00\xb3\x04\xd6\x01\x98\x04\x02\x14\x13 \x00\x01\n\x86\x02\xda\x01,)\x00\x04\x02\x1d\x08\x9e\x02\x90\x01\x8a\x01\xbf\x04&\xfd\x10\xb6A\x06\x03\x01I\x02\x00\x02\x04\x015J\xae\x02\x0bW\x12\x07\x00\x88\x01\x03\x0b\x03W\x1b\t\xc7\x01\x01\x00\xd4\x01\tX\x0c\x0bW\xbf\x01\tI\x02\x04\x005\x01J\x00\x85G\x01\x13\x03\x07\x15m\x01\x90\x01\xc4\x07\x02\x00\xf5\x036\x00\x80\x04\x01[\x06\x03\x01\xb7\x02\xc3\x03\x10\x04\x00\x01\r\x06\x00\x15(\xbc\x02\xb7\x02\x01\xa4\x02[\x03\x01\x90\x02\x02\x01\x04\x00\x03M\x95\x03\x04\x00\x0b\x17\x00\"!\x01\x02\x04\x01\x07\x82\x03*\x0b\x12\x04\x00\x0bl\x01\xa3\x01\x10<\xc5\x01\x04\x039\x01\x004\x00I\x00d.\x00\x02\x00\x01\x00\x08J2\x06\xf8\x01\x06\xd8\x01\x06\x93\x046\n\xfc\x01\n\xdc\x01\n\xf5\x04\x04\x03\x07\x01\"\x000\x04\x03\x11\x01\x88\x02\x03\x01\xe2\x01\x03\x01\xc6\x01\x01\x04\x00%\x8e\x9c\x01\x01\x00\xc0\x01\x99o\xd6\x8b\x01\x00\x18\x01.\x00\x04\xb2H\x01\xb1\x04e\x83\x01\x01\xf3\x03\x06\x01/\x13\x03!\x03A\x03E\x037\x03\x13\x03\xab\x01\x03i\x03[\x03\xc9\x01\x03\x89\x01\x03i\x03\x04\x01S\'\x15\x0b\x11u\x037\x03/\x03\x15\x03o\x031\x03=\x03I\x03\x01\x03\x93\x03\x01\'1\x03\x01\x11/\x0f\t\x05\x85\x1b\xa7\x10\x01\x05-\x15\xcd\x12\x01\xedW\x06\x011\r\x01a\xcf\x01A\x01\xb1(\x8b\x03\x01\xc1\x0e\xdf\x0e\xdf\x06\x8f\n\x00\x9e\x01\xea\x04\x02\xc4\x01\xae\x93\x01\x02\n\x02\xc4\x19\xb6\x0b\xde\x07\x06\x02Y\xc2\x04\x02\x04\xc8\x04\x02\xae\t\xf4\x07\xc6\x01\x0c\xe6\x01\x0c\xc8\x07\x0c\xf2\x01\x0c\xaa\x02\x0c\xac\x05\x0c\x9a\x0fr\xce\x03\x02f\xe2\x01~\x06\xcc\x01\x02^\xf3\x90\x02\xe4\xc7\x01\x02\x04\x99\x13\x02(\x00\x16\x0e\x0c\x00\x18\x04\"\x04\x01\x01\x1d\x04\x01=\r\t\x0b\r\x15\'\x01\x00\xa6\x0b\xa3\x0b\x01\xf8\x10\x00T\x02\x1a\x02$\x02 42.6>\x1e\\\x08&\x08\x98\x06\x04\x08\x01\n\x06\x02\x8d\x01 \x0c\x1cL\x0c\x02\xb3\x0b(\x06\x05 $862:B\"`2\xa4\x06\x14\x0e\nL^\x02\x04\x03\x00F\x00\x128\x1a\x19\x00\xbf\x02\x00\xf1\x066\xa8\x06 6\x01n\x01\xfc\n\x01\xe8\x01\x01\xca\x07\x01\xf4\x01\x01\xac\x02\x01\x85\x17\xcf\xd4\x01\xb6\xc6\x01\x1b\x00\xc6+\x01\xb5\xdb\x01\x02\x00\x9b\x05\x0c\x05\x02\x04\x01\x01\x9a\x05\x04\x01\x05\x00\x0c\x01\x04\x03\x0b\x01\x06\x03\xa4O\x02\x0c\x08\x00\xb1\x02\x1e\x01\'080~\x10&H:\x10Hf6\x16*t8\x1c0L2B\"`\x0c\n:\x0eX\x14.$8F2B\"v`\x0e\n\x0e\x86\x01`b\x14<\x80\x01@XDB\"^\x0e\x16$8p2B\"`\x0e\nLb@\x96\x01$H\n\"`8N`\x8e\x014\"\xae\x01\x0e\x08|2\x18\xc2\x01\xd0\x01Z\x8c\x01\x14N&\xc2\x01^\xc2\x02J@\x1ev\x16F\x1cR:Z>@\"R\x0e\x0cF8R*$&l\x10\x0c\x108Rp&V\x10\x0e:x\xa5\x8d\x01\x06(\x00\xfa\x14\x00\xaa&\x0c\x00\"\x00\x0ep\xad\x07\x00\xccZ\x01\x11!\x03\x04\x01\to\x03\x0b)\x03\x06\x01\x0c\x03\x01E\x08\x03\x01\x19\x08\x03\x07\x13)\x11\x0f\x06\x03\x01E\x06\x03\x01/\x04\x03\x04\x01\x01\x07\x10\x03\x03[\x07\x04\x03\x01\x19\x06\x03\x01\x17\x06\x03\x01\x1d\x06\x03\x01E\x06\x03\x01/\x04\x03\x03A\x03\x08\x01\x03\x03\x05\x04\x03\x01E\x06\x03\x01\x19\x04\x03\x01\x13\x04\x11\x06\x03\x03!\x0f\x04\x03\x01Q\x04\x03\x035\x03\x04\x01\x03=\x07\x04\x03\x01\x0f\x06\x03\x035\x07\x04\x03\x01\t\x06\x03\x01m\x04\x03\x04\x01\x03\x05\x0b\x04\x03\x13\x019\x03E\x03\x01\x03\x89\x02\x11\x17\x04\x03\r\x01W\x03\x01\xbb\x01\x03!\x04\x03\x01=\x06\x03\x01\x0b\x04\x03\x01\x01\x04\x03\x01u\x06\x03\x01Q\x04\x03\x05\x01\x03\xc1\x01\x04\x03\x01\xbd\x01\x04\x03\x01\x0b\x04\x03\x07-\x03\x01u\x06\x03\x01\x05\x04\x03\x01\xa1\x01\x06\x03\x01\x19\x04\x03\x01+\x04\x03\x01\x85\x01\x04\x03\x01W\x04\x03\x15I\x033\x03[\x03\x01\x03\x01\x15\x03\x06\x01\x03\x03?\x04\x03\x01\x1b\x04\x03\x01\x8d\x01\x04\x03\x03;\x03\x04\x01\x01U\x04\x03\tG\x03\x05\x03\x05\x04\x03\x01S\x06\x03\x01\x19\x04\x03\x019\x04\x03\x01)\x04\x03\x01g\x04\x03\r3\x03\x1f\x03\x11\x03\x05\x04\x03\x01Q\x06\x03\x01\x19\x04\x03\x019\x04\x03\x01;\x04\x03\x01O\x04\x03\x05;\x03w\x04\x03\x013\x04\x03\t\x0f\x03\x01\x03S\x04\x03\x01W\x04\x03\x01}\x04\x03\t\t\x03\x05\x03\x05\x04\x03\x01S\x06\x03\x01i\x06\x03\x01\x19\x04\x03\x019\x04\x03\x01)\x04\x03\x01=\x04\x03\t3\x03\x1f\x03%\x04\x03\x0b\x0f\x03\x01\r\x11-\x04\x03\t\t\x035\x03\x05\x08\x03\x01S\x06\x03\x01\x19\x04\x03\x019\x04\x03\x01)\x04\x03\x01C\x04\x03\x0b+\x03\x17\x03\x01-\x04\x03\x01k\x04\x03\x01!\x04\x03\x05\x11\x03-\x04\x03\x01]\x04\x03\x01?\x04\x03\x03\x0b\x03\x04\x01\x1f\x19\x17\x03\x01A\x03!\x03\x0b\x03y\x03+\x033\x03\x06\x01\x05\x19\x0b\x03\x04\x01\x87\x01\x1f\x19\x1b!\t\x03\r\x01\x19\x1b\x1d\x03#\x13\x05\x03\r\x03?\x03!\x03\x11\x03-\x03\x01\x03G\x03!\x03\x1d\x03\x01\x03w\x035\x03\x05\x03\xaf\x01\x033\x03C\x03\x01\x03\x05\x1d\xb7\x01\x03A\x03\xb1\x02\x1b\x17\x03\xbf\x01\x03\x05\x03k\x03\x01\x03\x04\x01\x11\x1fO\r!\x0b_\x03\x01\x03\x04\x01Y\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\'\x03\x8d\x01\x03\x01\x05\x03\x01\x19\x1b!1\x04\x03\x11?\x03\x01\x03\x01\x19\x1b!1\x04\x03+W\x03\x01\x03\xfb\x02\x03_\x03\xab\x01\x03\xb7\x01\x03;\x03\t\x03W\x03\x05\x03c\x03\x04\x01\x06\x03#\x07\x03/\x03\x1d\x03?\x03W\x03\x01\x03\x01\x19\x1b\x1d\x031\x04\x03\x07?\x03\x01\x03\x04\x01C\x03\x1f\x03}\x035\x03\x01\x03\t\x03\xd3\x03\x033\x03\x01\x03;\x03;\x03;\x03\x01\x03C\x03\x01M\x03\x05E\x03\x01\x06\x03\x9d\x01\x07\x03O\x033\x03\x1d\x03M\x03\'\x03=\x03/\x03\x01\x03\xd5\x01\x03\'\x03\x01_\xa5\x01\x03m\x03\x0f\x03#\x03\r\x03\x9d\x01\x03\r\x03\x0f\x03=\x03G\x03?\x03S\x03w\x03\t\x03#\x03\xdf\x01\x03\t\x03\xf3\x01\x03\x81\x01\x03M\x03E\x03\x01\x033\x03\x93\x01\x03O\x03\x1b\x03\x01\x03\x01\x06\x033\x07\x037\x03\x1d\x03?\x03G\x03%\x03\x01\x03\x01+\x03-\x03-\x03\x01\x03\x011\x03\x04\x01\x19\'\x05!\x03)\x03{\x03\x01\x03\x01\x19\t\x04\x01\x15+K\xe7\x011Y\x199E-\t\x19\x04\x01\x01;\x04\x01\x1b;k\x1b\t5\x85\x01\xa1\x015\tKcae?\x04\x01\t\xd7\x01\x01\'\x17!\x04\x01\x0b\x19\r\x11+\x1f\x07\x04\x01\x17CkU]_w\x17\x131\'\x01C\x04\x00\x05\x02\x98L\x00\x04\x0c\x19\x00\x02\x06\x9e\x04\xb1\x04\x02^A\x03\x01\x03\x01\x0b\x04\x00\x03\x03\x01\x06\x03\rZD\x00@\x02=Z\x04\x00\x07\"\n\x0c\x02\x04\x00\x01\xb5\x02\x04\x00\x01\x08\x04\x03\x08\x00\x01\x08\x04\x037\x00\x02\x00\x0c\x9e\x01\x80\x01$\xa3\x01\x84\x01(\xdc\x03\x01\x03\x01\x0b\t\x01\x1fW\x01\x03A\x01\xbd\x04\x00Z\x00\xd2\x01\x04\x03\x03\x01\xb5\x02\x04\x00\x04\x0c\x01\x02\x06\x00\r\xba\x01\x16\x00\x03\xffK\xfc\x04\n\x04\x00!\x1c\x00%\x03\x01\x1f\x07\x1d\xd1\x03V\x8d\x03\xc8\x07\x00\x08\xf4\x02\x00\xf3\x02\x04\x03\x13\x01\xaf\x07\x13\xec\x0c\x00\xf2\x03\xad\x04\x00\xb6\xa3\x01\x01\x04\x00\t\x03\x00\xc9\x90\x01\t\x01\x06\x03\x03\x01\x03\x08\x01\x0f\xd5\x01\x03\x01\xca\x01\x00\x92\x06C%\x04\x03\x07\x01\x03\x01y\x04\x03\x07\x8b\x01\x03\x01\xdd\x04\x06\x01%\x1d\x03\xbf\x07\x02\x00\x18\x05\x0c\x0b\xa2\x02\xde\x07\x01\x99\x02&\x05\n\t\x99\x12\xfc\x0f\x04\x001\r\x00\x08\x07*\x00\x98\x02\x00\x02\x00\x06\x05\xce\x01\x00\x18\x01\x14\xf1\x07\x00H\xc7\x02\x00\xab\r\x00\xa4\x16\x06\x01\x013\x04\x01\t\x15\x13\x15I\x03\x04\x01\x15K\x05)\x017\x03\x01\x13\x1f\x01\t\x04\x01}o\x03\x05\x1b)1\x03\x8b\x01\x03\x01\x03AG-\x03\x01=15\x05\x19\x11\x01s\x01\x19\t\x01\xd5\x02#\xd1\x01\x03\xe1\x03\x17\x13\x1b\x05\xbf\x01\x0b\x05\x0b\x15\x01\x03\x07\x11\xa5\x01\x01\x0b\x01\x0b\x01\x13\x0bS\x7f\x01\x17\t\r\x05\x01\xdb\x04\x06\x00\x17\xdc\x08\x00\x12\xc2\x12\x02\x00\x06\x03\x01\xc5\x12\x02\x00\x04\x01\xcd\x01\xa2\x08$\x00\x02\x12\x00\x04\x06\x03\x01\x00\xb4\n\x02\x00\xb1\x06\xb5\x04\xbd\x02\x01\xb6\x05\x0e\xa2\x01\xaf\x01\xb6\x01\x00\xe6\x03\xb0\x01\xc1\x06\xb0\x01\xb7\x01\xb4\x01\xf4\n\xba\x01\xc7\x02\x01\x00\n\x07\x00\x8b\x03\x00\xc7\x01\xfb\x03\x04\x01\x06\x00\x05\x00\xb5\x0f\x16\x10\x0f\x11\x01\xbe\x0f\x01\x07\x01\xa2\n\xbe\x01\xb9\x02\x03\x01\rT\x02\x04\x00\xe3\x03A\x03\x8c\x03\x03\x01\xeb\x06\xc3\x07\xbc\x07\xcd\x13\x01\xde\x01\x06\x03\x04\x03\x04\x03\x04\x03\x04\x03\x0c\x0b\x04\x03\x06\x05\x18\x17H\x07$\x01\xb0\x14\x04\x03\x0f\x8b\x01\x03\x99\x02\x03\x85\x02\x03\x01\x1f\x04\x03\x04\x01\x1d%\tu1\xd9\x01\x03\x01\x15\x1f\x01/\x1f\x01\xd3\x04\xf7\x04\n\x01\x17)!?\x01\xdb\x01\x01\x03\x11\x05\x1d\x01\x9f\x04\x04\x00\x1f\x06\xc0\x07\xe9\x02\x02\x00\x02\x01\x04\x00\x12\x03\x10\x05\x9c\x03\x04\x03\x04\x01\x06\x00/\x117\x00\x10\x03\x18\x03\x04\x03\n\x07\x8c\x15\x95\x15\x01\x98\x92\x01\x06\nb\x06\x00\x0e\x02\x03\xb6\x1f\x04\x007\"\x00`\x0e\xa9\xb4\x01\xba\xb4\x01\x0c\x00\x026\x00c\xa3\xb5\x014\xca\xb4\x01\xef\x1d\x02\xb2\x01\xda\x01/\xbe\x02\x00\xb2\x04\x00\xeb\x89\x010\x96*\x07\x06\x03\x85\x02\x01\x00\xa4l*\xd3S\n \x80L\x8c;\x00\x06NB6t\x1a4<|n\x8e\x01\xce\x01`n\xb0\x01\x18<JF&\x8d\rRF:x\x1e8@\x80\x01r\x92\x01\xd2\x01dr\xb4\x01\x1c@NJ*\xdd\rNB6t\x1a4<|n\x8e\x01\xce\x01`n\xb0\x01\x18<JF&\x91\rRF:x\x1e8@\x80\x01r\x92\x01\xd2\x01dr\xb4\x01\x1c@NJ*\x9d\xdc\x01\x02\x00\xec\x9d\x01\x02\x18\x050\x16\x00\x9c\x1a\x02\x04\x08\x07\x03\xc7\x0c\x1c\x04\x03\x00\xdf\xc5\x01\x82\x8e\x02\x01:\x02\x00<$!\x00\x02\x00\x10\x0e\x04\x00$\'b\x00\x04\x02!\x05\x04L@\"\x1e8\x04\x87\x02\x00L\x00:&\"<\x8b\x02\x04\x00\x01\x02\x04\x00\x01\x16\x06\x00\x05\x0c\x00\x0e\x04\x00g\x0e\xae\x02\x8d\x01\"\x1e85\x00%\x1c\">e\xe5\xec\x01\n\xa2&\n\x00\x10\n\x07\n\x07\x01\x02\x03\x0f\x07\x01\xac7\x00\xd1I\x00,\xaaN\x00\xb4\t\x00\xe4\x03\x00\xec\x0e\x00\n\t\xb5h\xdb\x02\r\x8aI\x00\x84\x05\x01\x07\x06\x00\x05\x02\x00\xc6\x08\x04\x01\r\xa6\x04\x00\xf4\rVS\x02\x01\x04\x00\x07 \x05\x1c\x01\x04\x00\x07\xaa\x06\x00\x10\x0f\x06\x00\r\x06\x05&\x00\x18\x01\x0c\x04\x00\r\x01\x00\x02\x0e\x02\x18\x06\x08\x00\x076\x00\x12\x11\x04\x00)N\x01\t\x01?5\x05\x01\x15\x01\r\x01\t\x15\x03!\xff\x04\x1b\x85\x01\x01\x05\x04\x19)\x01\xf3\x0c\x1bK\x17\xcb\x02\x1b\x9b\x01!\xc1\x07\x1bI\x01\x17\x01\xbf\x03\x1b\x8b\x01\x11\xbf\x05\'\x04\x01\x1d\x07\x01?\x19\x01\x05\x8b.i\x1b\t\x99\x01\t\x91\x0f\x03\xe7\x01\x04\x07\x07+5\x01\xe78\x04\x00\x17\x02\x92\xaa\x01=\xcd\x98\x01\x00\x16\x02\xa7\x07\x12p\x16\x02\x04\x00\r\x8d\x03\x0c\x07\x18\x00\xec\t\n\x04\x03\t\x01\xd9\x01\x10\x00\xbc\t\x06\x01++\x1f\x11\x1b\t\x01%\x15\r5\x01\x0b\x01\x81\x01\x07\x8b\x01\x03\x01s\x07\x87\x01\x03\x04\x01\x01[\x04\x03\x03\x0b\x03\x06\x01\r\x07\x01\x15i\x1f)\x1b\x04\x03\x07\x01\x03\x0f\xd1\x01\x04\x03\x05M\x1b\x9f\x01\x04\x03\x01q\x04\x03\x06\x01\r\x07\x01\x15+\x15\x05\x03\x04\x01\x1f\x1f\x11\x15\x01\x13\x03\x01i\x03S\x0f\x17\x03\xa9\x01\x15\x0f\x06\x01\x13E1\x19\x03\x0f\x05/\x03\r\x1b\x04\x01\x0f\rC\x19U]\xd7\x01\x01%\x04\x00\x1b\x08\xbc\x10\x00\x01\x008\x00 \x00\x18\xde\x01&\xaa\x01\x12\x04\x031(\x02\x00*\x0b\x1d&\x8c\x02\x06\xa0\x02\x06\x94\x01\x91\n\x01\xb6\x05\x00\x14\xdb\x11\x018\x01\x84\x01\x01\xa6@\x14\x04\x00\x1f\x08\x00V\x03\x12\x05\x8a\x84\x01\x03\x13\x03c\x03\r\x03?\x03\n\x01\x11\x1f[\x011\x03\x0b\x03\x01\x03\x04\x01\x17G-\x05)[\x079\x13\x03\x01\x031\x04\x01\'\x83\x01\x01\x03C\x03\x1f\x03\x93\x01\x03;\x03\xc9-K\x0bW\x05\x93\x04\x15)\x07\x04\x01\x01\x03\x04\x13\x1d\x1f\x15\xfdC\x01\x07\x03\x01\r\x03\x05\r/\x03%\x03\x04\x01\x05\x05\x0b\x03\x04\x01\x07\x0bQ\x07\x0b\x04\x03\x19\x01\x03\x01\x0f\x0b\x03\x01\x1b\x07\x03\x01W\x05\x04\x01\x1f\x03\x19=\x05K\x01\x13\x015\t\x01\xbf \x01\xdb\x06\x01\xdd\x1b\x04\x00\r\x08\xacG\x01\x02\x10\x02y\x08\x03\x03\x01\x84\xdc\x01\x04\x03\x0f\x05\x01\x0b\x11\x19\x03\x01\x03\x04\x05\x19\x17\x05\x07\x05\x0b\x15!\x11\'\x019\x01\xc7\x02\x06\x01\x03\x17\t\x04\x01\x03\x03\x01\x04\x13\xa1\x01\x05\x11\x01O\x03%\x03E\x03I\x03;\x03\x17\x03\xaf\x01\x03m\x031\x1f\x11\x03\xcd\x01\x03%\x1fK\x03m\x03\x13\x1f-\x03Q\x1f\r\x03;\x033\x03\x19\x03s\x035\x03A\x03+\x1f\x05\x03\t\x05\x01\x19\x05\x019\x01\r\x1f)/\x1f\x05\x11\x1f\x11\x1f3\x17\x8b\x01\x87\x06\x17\xcb\x01\x17\xab\x01\x04\x01\x07#\'#\xe3\x01\x06\x01\r\x0b\x13\x01\x19+\x13\x05\x04\x0f\t\x1f\x03\x015\x05\x04\x01\x01\x03\x04\x01?\x17\x11\xbb\x01\x01\x1b\r%C\x05Q\x01a\r\x01\x0b9\x01\xf3\x07\x01\x0b\x1f\x05\x17\t\r\x1f7\t\x07\x13\x1f\x15\x04\x01\x13\x17+\x01\x171\x03\x1b\x17\x05\x03\x04\x01Q\x0b\x01\x03\t\x03\x07\x03\x07\x03\x97\x06\x03\x07\x03%\x03\x07\x03[\x03\x1d\x03=\x035\x03-\x031\x03\x19\x17\x03\x01\x1d\'#\x19\x0fS\x01\t\x04\x01!\x17\x8f\x03\x1f\x9b\x01\x03\x01\x11\x1fQ\x05\x01+!\x05\xfb\x03\x1f)\x06\x01\x17\xe3\x04\x1f\xdf\x02\x01\x81\x07\x01%)\x89\x01\xc3\x06A\xe9\n\x06\x05\x0f\xdf@\x01!\x1f\t\x8f\x1c\x7f\xcd\x01\x04\x05\r\x03\x0b\x03;\x03!\x03\x04\x01\x15=\x17\x03\x01#\x03C\x03K\x03)\x04\x03\x07\x19\x0b\r\x03\x04\x01\x1d\x1d\x01\x11\x07\x01\x0b\x15%\x01\xdf\x03!\xbf-%W\t\x04\x01\x17#W\x01S%\t\x01\x13\x01\x11\x0b\x01\x06\x17\x19=\x11\x0b\x15\x11C/\xd7\x01\x0f\x1b\x0b\x07\x0b\x04\x01\x03\x1d\x0b\x04\x01\x01\x05\x04\x01\x01\x19\x04\x01\x0b\x139!e\x01\xa5\x03\x06\x01?\x07\x01\x071\x01\x07\x01\x07\x1d\x07\x01\x07\x1b\x15\x01\x19\x1f\x8d\x01\x01\x1fW\x01\xe9\x04%\x9d\x01\xdc\x99\x02\"\x01\xdb\x89\x02\x00\xa8\x19\x04\x04\x00\x01\x16\x04\x00\x03\x0e\x06\x04\x019\x0f\x15\xc9\x13\x00\x88\xe8\x01\x02 \x83\xe8\x01\x00\xc8/\xe90\x90\r\x06\x02\x01\x03\x01&\x0c\x00J\x00\x86\x01\x00\x08\x1b\x00\x16\x07\x04\x00\t\xdc\x15\x00\x06\x00>\x06\x00\x19\xa3)\xc7\x0bf\xc0\\\xa3S\x04\xbc\x04\x0e\x00\x02\x01\x02\x05\x04\x03U\x01\x00\x0e\x00\x02\x01\x02\x01\x0c\x0b\x02\x0f/\x03I\x033\x03%\x00\x0e\x08\x01\x00\x05\x00\x1e\x02\x04\x03\x01\x1d\x00\x06\x00\x04\x03\x05\r\x00\x06\x00\x08\x04\x00\x0f\x1e\xc6\x01\x02\x00\x0c\r\x01.\x04\x03!\x01x\x10\x02\x0b\x1e\x02\xdf\x06C\t%\x01\xe0\x06\x04\x01\x02\x01\x04\x00%xw\x00\x04\x01\x02\x01\x02\x01\x02\x01\x02\x01\xc7\x01\xce\x01\x03\x06\x00*\x04\x00\x01\x14\x04\x00\x0f*\x00\x08\x07\x12\x01\x81\x04\x1a\x0c\x00!\xc0\x04\x03\x07\x01\xbat\xaa\x04\x16\x0fX\x00\x9f6\x06\x00\n\t\x05\xe3!\x04\x01+\x1d\x01\x1f\x01u\x03\x01\x07\xf1\x0e\x01\xb1\t\t\x0b\xe9\x1d\x00\xe2Y0*\x02\x00\nc\x04\n+\xbd3FE\x87\x01\x07\xd6*\xc8\x05\n\xdeH\x00\xcc\x058Rh&V\x10\x83\x03\x00\x08\x00\xd0\x04\x06\x03)\xb8\x02\x0ez&\x87\x0c\x00\x06\n\x00\x02\x90\x07\x06\x00\x0c\x9b\x03\x16\x02\x96\x03\x02\x00\x02\x04\x00\x01\x01\x04\x005\x08\x0c\xf1\x01\x01:\x01\xe3\x01\n\x0c\xa0\x041>\x81\x1b\x1f\x00x\x00\x0c\x00\x0b\n\x07\x06\n\x07\x00\x02\x04\x00\x04\x01O\x00\x05\x08\t\xa2 \x01\x1c\x01\xad \x03\x07\'\x01\xc7%\x01\x19\x1b!\x19\'\x05\x044\x02\x10Db,\x02\x16&p0\x180H.>\"X\x04\x04\x0b\x026\x0eP\x14\"\x04\x02\xb1\x01 8B.>\"rX\x06\x04\x02\x0e\x82\x01\\X\x02\x148v\x02@T@>\"V\x06\x10\x02 8l.>\"X\x06\x04\x02LZ@\x92\x01 @\x06\x1eZ\x024N\\\x8a\x010\"\xa6\x01\x06\x04x2P\x02\xc2\x01\xc6\x01\x06Z~\x06\x14NR\x02\"\xc2\x01\xb4\x02\x02F@v\x16>\x1cB:V:<\"J\x04\x06#8F8N& &d\x08\x04\x10 d8Nl&N\x04\x08\x1d:\xea\x015\x03%-#\x01\xf3\x13\x00\xd4\x02\x00\xf3\x08\x00\xd8\x05\x04\x03\'\x00\x06\x00\x06X\x02\x00 \x02\xf6\x01\xe3\x01\x01\x0f\x01\x1f\x01A\x11\x03\x01\x04\x03\x04\x01\t\x84\x14\x03\x01!\x0b\x04\x03\x04\x01\x03!\x0b\x04\x03\x0f\x8d\x192\x93\"\x01\xe0!./\x0e\x04\x00\r\x0c\x00\x02\x01\x12\x01\x0f\x04\x0b9\xd8\x1b\x00\x0f\x01\x19\x1b!\x19+9\x17\r!\x11\x03\xef\x84\x01\x01\xd6L\x02\x00L@\x1e8\x04\xe3\x18\xd3\x03\x05\x91\x01\x04\x03\x03\x01y\x04\x03\x13\x01\x07\x03\x01\t\x015#5\x05\x06\x03\xc7\x01\xcf\x1c\x0bO\x05\xf1\x10\xb3\x04\xee\x01\x00\xed\x01\xf2\x15\x00\n\x00\xa4[\x00\xb8\x0bf\x02\x00:\x00\xee\x04\xa8\x01\x97\x01\x00\x8a\x01\x00\xdf0\x01\x037\x1d?K\x01\xfdLHD\"<\x0c\xfa\x11/\tE\x03\x01\xc2\x05\x02\x00\x06FH\x03\x00\x0eb\x06\x00i\xe4\xac\x01|R&\x02%\x01\x00\x06\x1aq\x02z\x01\x00wXD2\x0e>!\x19\x01?\x00\x18\x17\xcd\xd8\x01\x02\x00<\x02\x00,\x01\x08\x00\x07\r\x06\x00\x0b\x0c\x15\x10\x0f\x11\n\x04\x00k\x14^\x00\x1a\r\xa4\x01\x9a\x01/\x00<\x04\x0c\x00\x08\x00\x0c\x00\x1c\x00\xcd\x02\x01\x05\x03/\x0b]\x03\x0f\t\x01;\x01\x88\x01\x00\x12\x11:\x004\x00\x10\x0b\x00#\x1c\x19\x1c\x804\x02\x00&\x00\x16\x02\x08\x00\x01\x08\x06\x00\x17\x14\x1d\xe4`\x03\x00\x10\x03\x00\x9e\x18\x06\x0c\x02\x04\x00)\x06\x01\x03\x01\x0b\x03\x01\xfe\x04\x00\x0e\x00\x0c\x03\x07\r\x03\x04\x02\x01\x0c\x02\x04\x00/\x06\x13\x99\x01r\x00\xcf\xc0\x01\x8a\xc1\x01\x13\x00\x08\x07\t\'?\x00\x80\x01\x00\x89\x87\x01\x00\x02\x9a\x0f\x02\x00\x0c\x06\x00\x15Z\x00\xa8\x01\x00\x07\x03\x01\x16\x03\x01f\x04\x03\x03\xc80\x02\x06\x00C\x01\n\x00\xcdw\x00\xd8H\x00\xa4\x03\x00\xf6\x05\x00*\x00H\x00D\x004\x00*\x00H\x00\xbc\x01\x00\xb5V\x00\xce#\x00\x92&(\x08\x01\t\x06\x00\x05\xc8\x05\xc7\x05\xd6\x05\x04\x00_\xea\x01\xf8\x0f\x02\xac3<F8R*$&l\x10\x0c\x10$h8Rp&V\x10\xad\x088Jh\"J\x04\xd7\x02\x02\x00B4Nl\"R\x0c\xf9\x02\xc2\x0cx\xb1\x015\x02\xd3\t\xbe\x01\x04\x03\x07E\x07\x03\x19\x04\x03\x03\xc6\x08\xe1\x93\x01\x04\x02E\x00\xd4I\xdc9\x06\x0c\xde\x11t\xdf\x010\x01\x0b\x15\x0b\xb9\x088B4N& \"h\x0c\x08\x0c d4Nl\"R\x0c\xe3\x07\x03\x04\x01\x03?a\x04\x03\x01E\x04\x03\x19/\x03\x01\t\x075\x01:\x01\'\x01\t\xd2\x03\x04\x01w\x07\x01\x0b\x03b\x01O\x0b\x03\xf6\x02\x83?\xbb\x02\xe3X\xff\x01\x02\x00\x06\x05\x06\x05\n\t\x0c\x00\x02\x03\t\x08\x06\x03\x0c\x06\x00\x1a\x00&\x02\x00\x04\x00\x08\x03\x00\x01\x00\x1c\x12\x00\x01\x04\x00\x12\x03\xea\\\x01\xff)\xcd\x02\x00\x9c.\x9f^\x04\x01\x05\x03\r\x0b\x06\x01\x17\x0f\x1b\x01\x03\x01%\x19\x05\x01\t\x01\x07\x04\x01\x17\xee\x1d\x1a&\x00\x01#\x17\xbb\x05\n\x0c\x00\xa2F\x04\x01\x0by\x05\t\x01\x0f\x17\x06\x01\x05E\x01\x03\x04\x01\x015\x04\x01\x05\x13\x17\x19\x04\x01\x0b\x11\x17\x01\x0f\x17\x0f\x04\x05?\x17+\x17\x19\x15\x17\x11\x17O\x01U#\x1d#\x85\x03\t?\x17\xd1\x01\x05k\x01G\x17\x81\n\x9f\x01\x01\x1d\x01\x9d\x01\x01\'\x04\x01\x0f\t\x15#5#\x07\x01\r\x04\x01Q\x057\x01\x1f\x01)#\x01#\x05#\x03\x01?\x03\xb3\x08\tW\x05c\x01\xf5\x01W\x01\xc9\x01\x03\x01\x19\x05w\x055\r\xb7\x01\xcd\x02\xa1\x02\x07\x1d\x05Kk\x04\x01\x19M\x03\x01#\x85\x02#[+%#\x15#\x15\x04\x03\x15A#\x07\x013\r\'\x1bO\t\x0b\x04\x01\x1d\r+\x115\x11-\x11!#\x85\x01\t\x83\x02\t\x01\x1b\x04\x0b\'\t%#\xfd\x01#\x9f\x01\x01\x1f\x01\x0f\x93\x01O\t\x0f\x01\xcf\x01\r\x8f\x03\x05\xb5\x03\x04\x01S\x03Q\x059\x05o\x03\x01\xd9\x01\x05\x01\x19\x05\xc5\x01\xe9\x01\x01\r#\x01\t\x17\x0b\x1d}\x01C\xfd\x04\x00\x96\x1e\x02\x01\x1d\x01\xb5\x01\n\x0c\x00\x01\t\x07\x01\xb8\x01\x06\x00\x17\x08\x0c\x00\x02\x08\x05\x0eD;\x07\x01\x0b\x04\x01\x01\x0b\x04\x03\t\x01\t\x00\x02\x00\x04\x01\x0b\x00\xca\t\x02\n\x02\x0b\x04\x01\x0f\xf4\x0e\x00\nz\x02\x00 \x02\x04\x00\t\x98\x91\x01\x06\"\xe0\x13,\x04\x00]\xc9\x01&\x80#\n\x03a^\x0c\xd7\x02\x08\x03\xfc\x02\x01\x19\x0b\x03\xaf#4\x01\xb2\x01\x01\xf2\x1e\x01\xdd\xed\x01V(N\x06\x00,\x03\x083\x93\x04\x01\x00&\x03(\x03\x02\x01\xb8\x02\x01\x11\x07\'\x04\x01\x13C\t\'U\x17\x01\t#!\xfb\x0b\x04\x00\t\x08\xf4\x0e\x01\x00\x0e\x04\x00\x1b\x16\x00\"\x99\x0f\x08\x05\x1a\x01\xd4\rD\x02\x01\x10\n\x04\x00[]N>\x01\x1f\t\x0b\x01\x04\x88\x01\x1f\x15\rE\x01\x00\x02\x00b.\x00\x02\x00\x8d\x0f\x16\x05\x82\x0e\x02\x04\x03\x1a\x05\x1e\x14\x0e\xaa\x01TL\x06*8N6\x10\xf9\x03\xfd\x0b\x04\x00\x01\x02\x04\x00\x04\x01\r\x002\xe8\x01\x02\x00\xdf\x01\x1a\x0c\x03+\x00\x1d&\x01\x03\xda\x01\xe3\x01\x02\x01\xe4\x01\xdb\x01\xf6\xd8\x01\x02\x04\x05\xcd\x03\x0e\x02n\x00\x12\x02\x04\x00\x01\x0c\x04\x01\x15\x07\x01\x11\x03\x11\x07\x01\x07\t\x011\x04\x01O\x03\x01\r\x81\x01\x01\xe61\x02\x82\x02}\xd9u@\xa4\x01\xb4\x01\\Y\x01\xab\x016\xb5\x98\x01\x02\x00FGF\xfc\x9e\x01\x0e\x00\x0b^\x00(\'+\'\x07\x01\xfd\x9e\x01\x02\x9c\xa0\x01\xc9\x02\x06\x00\t\xf5\x9c\x01\x00S\x00^\x04\x00-\xa8\x9f\x01\x00\"\xe9\x88\x01\x03k\x03U\x03]\x03_\x03w\x03\x17\x03\x13\x031\x03\'\x03\x04\x01#\x9d\x12\x02(2\x14\x18x`^Vl\x81\x05\xc4\x05\xc4\x97\x01\x04\x01b\x02\x04\x00\x01\x02\x04\x01\x03h\xc7\x01\x04\x01\x0b\xd74\x99\x04\x81\x15\xa7\x01\xc3\x0c\x9e$\x04\x00\xa3\x01\x92\x04\xbe6\xb3:\xbd\x17\xde\x01\xb8\x15\xf5#\xf7\x01\x03\x0f\x03{\x03\t\x03Q\x03\x01\x03\x01\x94`\x1c\rUW\x02\x00\x02>Z&J\"R\x0e\x08\x06,F8R*$&l\x10\x0c\n4Nh\"R\x0c\xab\x08\x00\xda\x06\x00\xce\x01\x01z\xf3\n\x8a\x03\x03\xc2\x07\xa4\x01\x92\x11\xe6\x01;\x03\x07\x0b\x017:587\n\t\x130\x04\x00K\xd2\x01D\x12h\x18\x9b\x07\x01\xb5\x02@\x98\x01$H\x8a\x01\x02\x04\x01\x02\x014~\x06\x9c\x01~\x06\xa9\x02\x01\x07\x177b\x00}\x03\x00\x01\xb4\x03\x00\xc7\x01\x06\x00-\x02\x01\x0cHG\x0b\x03\x01\x99\x1f\x00\x0e\x00\x01\x00\xea\x05\x04\x87F\r\x08\x0e\x00\x1a\x12\x04\x05\x07\x01\x03\x19\r\x04\x03\x04\x01\x15#\t\x01)+\x03\x01\x07\t\x01\xe1Y\x06\x00\x17\xb6[\x02\xdd\x01\x14\x16\x92\x01\x1c\xf5\x0e\x01\x05\x01\x0b\x06\x03)\xd8\x01\x15\x0f\x0b\x01\xd0T\x01\xeb\x18\x02\x00\xd7Y\x06P\x00\x8c\x1e\x12\x0c\x02-\x02D\x04\x01\xbb\x01\x07\x01\x0b\x0f\x8c\x1e,4,z\x0c\"D6\x0cDb2\x12&p4\x18,H.>\x1e\\\x08\x066\nT\x10* 4B.>\x1er\\\n\x06\n\x82\x01\\^\x108|<T@>\x1eZ\n\x12 4l.>\x1e\\\n\x06H^6V:<\x1eN\n\x08B4N& \"h\x0c\x08\x0c4Nl\"R\x04\x0ci<\x92\x01 D\x06\x1e\\4J\\\x8a\x010\x1e\xaa\x01\n\x04x.\x14\xbe\x01\xcc\x01V\x88\x01\x10J\"\xbe\x01Z\xbe\x02F<\x1ar\x12B\x18P6t\xb1\x07Y\xbd\x01!\x01\xc8\x03\xf4\x04\xa3\x1f\x00\x98\x1c\x00\x06\x00\x05\x06\x00\x15~\x0e\xa6\x01\x08\x9f\x04\x12\x13\x9a\x02\xce\x04\x1e\xfd\xa3\x01\x04\x00O\x02\x004\xd4\x8c\x01\x00\"\xf7\x8c\x01\x1f\x0c\x00\x82\x8d\x01\x00\xd3\x8c\x01.\x00\xa2O\xb9W\x02\n\x00 ,6\x18\x1c|dbZpJ\x06\x80\x01.(8\x06f\x8a\x01\x06\x062\r\x06\" ,\x06\xdc\x01\x08\x04\x06\x89\x01*LD\"<\x0c\x08\x06BbfhT\n2\xa6\x01\x8a\x01>\x12\x18pR\x06 T\x98\x018\x06JR\x86\x01\xf8\x01\x0e\xe4\x01(\x0e|XDLB\x14\x12\xa2\x01\x12(\x14r\xaa\x01\x06,\xda\x01\x064B,R\"8T\x0c\x08\x06L\nT\x06H\x06\x06@#\x068\xd8\x03\x0e\x06:\x82\x01$\x08\x06V\x0e\x80\x01\x14:\x06D\x18\x06\x06\x0b\\D\"4\x0c\x08\x04\x06-h\n\\\x0e@\xbc\x01\xb0\x01d\x80\x03\x06\\\x16\x06LH\xca\x01@\n\x14\xa4\x01\x0e.\xc4\x01\x04\x06\tD\x18\n\x92\x01,\x14\x1c\x0c\x1ee\x08\x06F2F:\x1ab2\xf0\x01X6\x06f\x06p\n\xc4\x01T\x1e\x18\x1a\x96\x01 0\n\xc2\x02F\xc2\x01\x06H8\xb4\x01\n:|\x06\"&L\x062\x16&D\x12\n\x14\x00\xa0\x01\x0e\x04\x00\x0f\x0e\x1du>\x02\xa9\x0c\x03\x05\x04\x03\x07\x01\x07\x01\x13\x06\x03\x01\x13\x06\x03\x01\x89\x01\x06\x03\x01\r\x06\x03\x01\x0b\x06\x03\xab\x01m\x03\x00r\x00\x01o\xd7\x0f\x01\x03\xbf\x01\x03)\x03\t\x03\x9f\x01\x03\x0f\x03\x05\x03;\x03\xc5\x01\x03C\x03G\x03\x01\xed\t\x01\x93\x02\x01\x03\x01\xc3.\x03\xd7\x01\x03\x01\x03\'\x03\x1b\x03\x1d\x03\x01\x03\xbd\x0b\x02\x00\"\x18(\x02\xd8\x01.\xf2\x08\x03a\x03\x01\x03\x01\xa7\x08\xd6-\x01Z\x01\xaa\x17\x00<\x07R\x00\x83\r\x00\xf0,<\x04\x06\x00(\x04\x00\x03&\x04\x04\x065\x10Hf4\x06\x16*t6\x06*\x06\x1c0L2B\"`\x0c\x08\x06:\x0ez\x14*\x04\x06Q$8F2B\"v`\x0e\x08\x06\x0e\x86\x01`\\\n\x14<~\x06@XDB\"^\x0e\x14\x06$8p2B\"`\x0e\x08\x06L`\x04\x06\x01\x1c\x04\x06Q^\x068N`\x8e\x014\"\xae\x01\x0e\x08\x06z\x062\x18\x06\xc2\x01\xca\x01\nZ\x82\x01\x0e\x14L\x0eV\x06&\xc2\x01\xb8\x02\nJ@v\x16F\x1cP\x01\x0e\x06\x039\x00\xd1\x0e\x00\xbd\x07\x01\x1f\x01\x03\xff\x1b$\x00&\x00#\x01#\x17\x01\xd02\x956\xa0\x04\xfe2\xc17\x1f\x04\x00\x93\x1c\xa8\x01\x9b<\x04\x01Y\xc8\n\x03k\x03\x13\x03\r\x039\x03\x85\x01\x03\xa1\x01\x03-\x03\x05\x03O\x03c\x03a\x03]\x03=\x03\x01\xef\r@fbdL\n6\xa2\x01\x86\x016\n\x1cl\xe61\x06\x04\x00Y\x01\x00\xe4.\x00\xb5h\xf4R\x03S\x03\xeb\x01\x03-\x03]\x03\x15\x035\x03A\x03-\x03A\x03\x01\x03\x01\xd1D\x02\x00F.F:\x1aZ2\xe8\x01L\xc0^\x00\x06\n\x00\x04\x02\x04\x00\x0f\x0e\x02\x01\x8b\x04\x12\xcf\x01\x02\n\x04\x00)\x1c\x01\x19\t\x01.\x00`\x00\x8f\x01\x00\x02\x01\x08\x01\x06\xba4\x00\x9d4\x01\x19\x04\x05\x03\xc5\x03\x03\x04\x01\x13\x97U\x01\xc8R\xfc\x04\x01\x11\x0f\xb6\x04%\x03\x06\x01\x01\t\x04\x01i\t\x03\x01\xf8\x1c\x0c \x12\x1a\x19\x0b\x03\x01\x80\x01\x7f\x01\x1d\x0b\x03\xa6\x01\'\x03\x00\x83\x19\xba*\x04\x00*\x00\xe7*s\x036\x00\xc2(\x02\x00F:R@D\">\x0c\xbf\x03\xe6\x01\x00\xe1\x01\x006\x00\x04\x02\x06\x00\x03\x08\x0e\x04\x00I\x0e\x01p\x1a\x01\x17$\xc4\x04\x03\x07\x039\x03\x1d\x03\x13\x11\x15\x03;\x03M\x035\t}\x01\x00:T\x8b\x12\xae\x11\x05\x07A\t\x17\x04\x01\x05m\x0b\r\x04\x03\x07\x01\x035\x03\x04\x01#\x83\x18\x02\x01\xb2\x01\x02\x00\x06\xb1=\x16+\n\x0c\x04\x03\x02$\x01F\x04\x02\x13\x00M\x02\x04\x03\x06\x00\x05\x00^\x04\x01\x13U\n\xdf<\xee\x80\x01\x02(\r\x16\x17\x19\x04\x00!\xce\x1b\x01\x00\xfb,\x00\x02(\x0f\n\t\x16\x05*\x00\x08\x03\x00\x04\x03\x01%\x04\x00\x05\x0f\x17\x01\x06\x00\x03\x04\x03\x08\x00\x13,\x0b\x9c-9\xad\x01\x9d\x02\xb7(]\x1f\x8bx\x04\x00!\n\xb2x\x00bY\x01B\x00\x02\x0c\x03\x04M\xca&\x00D\x06\x06\x00\x0fl\x00\x80\x04\xbf\x80\x01\xe9\x01\x02\n(\x06\x007\xe5\x01^\x00S\xf8\x02\x01#\t\x01\xad\x0e\x10\xf2\x9a\x01\x00\x02 \x00\x0c\x0b\x00\"\x00\"\x0b@\x00\x1c\n\x07\x06\x00O\x01\x08#\x00?\x00\x02\x01\x15\x00\x13\r\x00\x9d\xa6\x01\xeet\x00Q\x00\xc6\x06\n\x00>\x00\xb0\x08\x00\x08\x00F\x00!\x01\x00-\xd2\x01(\x01+\x023\x00\x04\x1c\r\x02\x002\x8bt\x8b\x03\x02\x00\x04\x01[\x94,\x02\xc2\xa3\x01NB6t\x1a4<|n\x8e\x01\xce\x01`n\xb0\x01\x18<JF&\x85\xe2\x01\x00\xd2\x01\x01\x02\x0c\x01!8\x86\x01\x01\x9f\x01\x03\t\x00\xb0\x02\x00\x08&\x00\x04\x01\x1c2\x06\x00\'?\xc3\x022\x02\x01\n\x00\x08\x07\t/\x01\x92\x03\x031\r\t\r\x01%\x04\x03k\x01\xb9\x02\x00\x04\x01\x00\x01\x00\x906\x00\x0c\x00\x1e\x03\x0c\x00\x1a<\xe2\x01\x1a\xf9\x01\x019\x01\x19\x07\x00.PH*\\&@\x10\n\x06\x00\xce\x01\xd5\x02\xf3\x02\x00\xfd\x04_\x05\x00j\x02\x00\x02\x01\n\x00\x1c\x04\x00\x03\x0e\x12\x04\x00\x19\x01\x00\x02\x00\x04\x14\x18\x15z!\x00:\x01\x04\x03\r\x01\x9b\x01K\x02\x00\x1a\x04\x04\x02\x17\x00\'\x01\x05\x1b%\t,+\t\x01\x03\x04\x01\x03\x11\x00\x06\x01\x1f\x03\x01\x0b\x07\x01\x84\x01*(\x12\x1a*H\x14\x87\x02\xf6\xa1\x01\x02\x04\x00\x05\x01\x00\x02\x04\x00\r\xb1\xd5\x01\x00\x03\x08\x03\x00\x86\x02\x04\x01W\x02{\x00\x8e\x02\x00\x9c\x01\xba\x01B\x98\x01h\x98\x01\xb0\x01d\xdd\x0b\x00\xcd\tp2Rz\x92\x02\xdc\x01\xda\x01\x14\xcd\x08l.Nv\x8e\x02\xd8\x01\xd6\x01\x10\xa9\x08p2Nz\x92\x02\xdc\x01\xde\x01\x10\x9a\x0f\xcb\x02\x04\x03\x03\x01Y\x04\x03\x01\xa7\x01\x04\x03\x01\x8f\x01\x04\x03\x03\x01]\x04\x03\x03\x01\x8d\x01\x04\x03\x04\x01\x05\x0f)\x03\x04\x01/\r\t\x15\x1d\x17)#\x03\x01\x03\x01\t\x02\x00\x0c8\x0e\x00>\x0e\x03\x00\x1c\x12\x04\x009&\x05\xce\xce\x01\x02\n\xf1%\x96\"@\xae\x07\xfb%\x01S\x01\x03\x01\x0b\x03\xf0!\x02\x06\x17\x86\x03\x02\x10\x02\x15\x12\x1e*\x04\x01\x13\x07\x01\x0fw\x00\n\x07\x1e\x00\x16\x04\x00\r\x0e0\x0b%b\x00\x08\x04\x00\x03 \n\x04\x02\x1f\n\x01\x16\xa5\x01\x98\x01\x02\xed\x01\x02\xf1\x01\x01\x1b\x03\x01\x03\x01\t\x04\x01\r\xe8\x04\x01\x1b\x11=\x01\x1b\x08\x01\x03\x13\x07\x04\x01\x0f\t\x0b\x13\x01\x059\x05\x0b\x04\x01\x15\x0b\x15\x1d\x01\x8a\x02\x02\x00\xe4\x01\x02\x8f\xe2\x012\x04\x00\x01\x08\x04\x00\x0f\x02\x00\xbe\xe2\x01(\x00\xe8-\x02(\x06\x00\x036\x01\x0e\x00\x058\x0f\x0e\x06\x00\x0b\x18\x00\x0c\x00\x06\x04\x06\x00\x05,\x00\xf3\x90\x02\x04\x00\x0b\x01p\x02\x0c\x0b\x0c\x04\x00\x03 \x02\x04\n%\x07.\x01\x02\x10\r\x04\xc2@\x99\x03\xa3\x01\x05;\xbd\x02\x05\x0fK\xc7\x01oa\x04\x01\x17+K\xe7\x011Y\x199E-E\x05\x11\n\x19\x14\x17\x1b+\xb3\x01\x01\x05\x01\x11\x01\t3\xcf\x06\x01\x91\x08\x01\x8f\x01\x04\x01\x1f\x13\t\x11\xff\x0e\x19\x15\x19U\x19\xe5\x01\x19\x9f\x03\x19\xf9\x01\x19\x91\x01\x08\x01\x01+\x04\x019\x07\x01\x1f\x0b\x01m\x01\xd9\x02?\x9d\x03\x011\x0b\x17\x05+\x03\xa1\x04\x00\xc8\r\x04\x05\x03\x0e\xa7\r\xc2\x0c\x0e\x06\x05\x04\x00;$\x01\x00\x0c\x00\x08\x07\xec\x07&\x92\x02\xa6\x02\x94\x01\xf1\x05*\x96\x02\xaa\x02\x98\x01\xf3\n\x00\xf2\x04&\x92\x02\xa6\x02\x94\x01\xd3\x07!\x03\xfe\x01\x1d\x03\x06\x00\x11\x04*\x84\x02\x06\x98\x02\x06\x94\x01\xa7\x0f\xa7\x0b\x04\x00\x15\xf2\x02\x00\x16\x00\n\x01\x04\x00\x16\x90\x01\xc2\x01\x06\x00\xf3\x03\xf4\"\x00\xc7\"\x00\xccG\x00\xa6\x03\x00\xe4\x05\x00,\x00J\x00F\x006\x00,\x00J\x00\xbe\x01\x00\xd5T\x00\xee\x11\x00\x9a\x02\x00\xe0\x03\x00\x88\x03\x00v\x002\x00\xca\x01\x00\xa2\x02\x00\x9c\x17\x00\"\x00\x1e\x00\xc4\x01\x00R\x00\xdc\x14\x00:\x00\x8bO\x00\x02\x01\x00\xec\x11\x00\x98\x02\x00\xde\x03\x00\x86\x03\x00t\x000\x00\xc8\x01\x00\xa0\x02\x00\x9a\x17\x00 \x00\x1c\x00\xc2\x01\x00P\x00\xda\x14\x008\x00\x93O\x00\xcaG\x00\xa4\x03\x00\xe2\x05\x00*\x00H\x00D\x004\x00*\x00H\x00\xbc\x01\x00\xe7T\x00\xccG\x00\xa6\x03\x00\xe4\x05\x00,\x00J\x00F\x006\x00,\x00J\x00\xbe\x01\x00\xfbT\x00\xcaG\x00\xa4\x03\x00\xe2\x05\x00*\x00H\x00D\x004\x00*\x00H\x00\xbc\x01\x00\xe7T\x00\xccG\x00\xa6\x03\x00\xe4\x05\x00,\x00J\x00F\x006\x00,\x00J\x00\xbe\x01\x00\xd5T\x00\xf6\x11\x00\xa2\x02\x00\xe8\x03\x00\x90\x03\x00~\x00:\x00\xd2\x01\x00\xaa\x02\x00\xa4\x17\x00*\x00&\x00\xcc\x01\x00Z\x00\xe4\x14\x00B\x00\x85L\xee\xe1\x01\x89\xe2\x01\x02\x00\x02\xceT\x01\x02\x00\xb7V\xac3.JB\"b:\xf0\x01L\xbf\x04>\x1e^6\xec\x01\xa1\x03\x1aZ2\xe8\x01\xce\x02\xc8\x01PSL\x10\x88\x03x\x04\x1b?5\x07\x01\xe7\x03H\x16\xbe\x02B\x99\x03\x1a\xc2\x02F\xfb:\x00\x94\x02\x00\xba\x03\x00\x80\x02\x00p\x000\x00\xe0\x10\xc2\x08\xb7\x08\xcc\x08\x00\xca\x12\x02\x00\x04\x01\x03\xe5\x1a#\x04\t\x0b\xd2\x08\r\'\x07\xea\x15\xae\x03\x04\x03\x03\x01;\x04\x03\x01\xb9\x02\x04\x03\x03\x01\x0f\x06\x03\x19C\xbf\x01o\x00x\xd0\x01X\x16\x0e\xc6\x02B\x0e:\x04 \x13\xa2\x01\x81\x08\xcc\x01T\x12\n\xc2\x02>\n6\x04\x1c\x0f\x9e\x01\xd5\x07\xc8\x01P\x18\xbe\x02D2\x04\x18\x03\x9a\x01\x99\x01\x04\x17\r1\x05\x01\x81\x03\x13\xef(\xbb\x01\x04\x03\x11\x01\xa7\x01\x03-E\x03\x9d\x01\r\xb5\x01\x06\x03+\xa7\x01\x07\x03\x01\xd5\x02\x01\x05\x07\x03\x11\x01#\x91\x02\xe7\x05\x01\x05\x07\xdb\x08\x00\xb8\xda\x01\x02\n\x04\x00\t\n\x08\x00\x87&\x02\x06\x00\x01\x1c\x04\x00+\x10\x00\x02\x00\x04\x02\x08\x03\x04\x03\x10\x03J\r.\x00T\x00\x14\r\x06\t\x04\x01\x19\x08\x05\x01Q-;\x0b\x03\x01\x03\x01\x0f\x1b\x04\x01\r\xb4M\x12\x0c\x04\x03\x06\x05\x04\x001\x16\x00\x8dC\x06\x0c\x02\x01\x00\x02\x0e\x01.\x01+\x0b\x01\x0b\x03\x01\xf6\r\x06\x03\x01\x00\x02\x04\x00\x01\x02\x04\x01\x0b4\x00,\x01]\x02\x04\x00\x13\x12\x1e\x1d\x0bd\x02\x00c\x01\x03\x04\x01Y\x9e.\x06\x00>3\x10\x000\x00\x14\xa1.\x01\r\x1b1\x01\xf3A\x0c\x14\x00\x0b\x0c*\r,-\x03\"\x00\x14\x002\x01:\x1a\xaa\x04\xa1\x88\x01\x01\n\x14\x01\n\x00X\xba\x14\x04\x00\x01\x01\x04\x00\x95\x03\x9c5\x10\x01\x00\x07\x00\xf5S\x00\xbc\x03\x16F\x16\xe6\x02\x06<\x060\x14\x06\x02\x0c4\x06.\x06\x1e\x068\x06b\x06\xf6\x02\x06Z\x06\xf6\x019R\x01Rx\x06\x15\x14$\x80\x01(V4\x18\"(\x00\xa8\x01).V\x00\xc0\x05\x93\x05\x9a\x05\x9f\x03\x12D!J\x11\xa8\x04\xa5\x04\xa8\x04\x91\x04\xc2\x04ZG\xff\x02\xfc\x03\xbd\x04\xee\x04\xe7\x04\xee\x04\xf1\x03\xf8\x03\xad\x03\x02\x00\x04\x80\x04\xfb\x03\x12\x00\x06\x01\xe8\x03\xd5\x03\xe6\x03\xeb\x04\x98\x05\x83\x04\xf8\x04p]\xd7\x02\xdc\x03\xc5\x03\xd2\x03\xc7\x04\x86\x05\xb9\x02\xe2\x04\xbb\x04\xe2\x04\xab\x04\xe2\x04f\xab\x04\x8a\x05\xbd\x04\x8a\x05\xed\x04\x8a\x05\xf1\x04\x8a\x05\xa9\x04\x8a\x05\xed\x04\x8a\x05\xe5\x01\x8a\x05\xef\x04\x8a\x05\xe7\x04\x12\xfe\x05\x95\x01\xb7\x04\xd8\x04\xd3\x04\xf6\x04\xd3\x04\xc8\x06\xdb\x01\xe5\x03\"\xcc\x04\xe2\x01\x06\xa9\x04\"\xd0\x044\x06\xf2\x01\x06\xeb\x03\xee\x04\xd3\x04\xee\x04\xcb\x04\x80\x05\xb9\x04\xda\x04\xb7\x04\xf2\x04\x95\x01\xca\x04\xb1\x04\xca\x04\xb2\x01\x9f\x01\xbb\x03\"\x9a\x04\xbe\x01\x06\x16\x06R\x06 \x06\xe8\x01\x06\xd9\x03\xb8\x04\x9f\x04\xb8\x04\xc8\x01\xb5\x01\x9e\x01\xa2\x04\x81\x01\xa2\x04\xd7\x02\xa2\x04\xb7\x02\xac\x04\x8b\x02\xa6\x04\xf3\x03\xa6\x04\x8d\x04\x02\x0c\x04\x16\x05\x02\x0c\x16\x04\"I\x0b\x14\x0e\x02\x0b6\xac\x02\x04P\x06\xde\x01\x06\xfa\x02\x06l\x06\x82\x01\xb1\x02\xd2\x02\xb5\x02\xd2\x02\x97\x02\xd2\x02\x04\xdf\x01\xe8\x02n\x06\xfc\x01\xe8\x02\xa3X\x01\x0c\x01\x10\x03\x02\x04\x00\x1f\x02\x01\x0e\x00\x04@\x0bb\x05\n\x01\x07\x9e&9\x13#\x04\x0b\x03\r\x03\x04\x07\x03\x11\x0b\x04\x03\x07\x011\x03\x07\x06\x03\x01G\x06\x03\x01S\x06\x03\x01\x01\x06\x03\x13\x01e\x01\x07\'\r\x15\x01Y;\x04\x01\x01\x11\x04\x1f\x08\x03\x04\x01\r\x07[U\x01\x03\x01)\x04\x19\'\x07\x1f\'\x17\x01;\x01\x03\x01\x19\x01\x15\x01\x05\x03;\x17\x03\x15\x1d\x06\x03\x079\x01\x0b\r\x04\x03\x03\x01=\x04\x01\x0bS\x17\ts\x01Q\x04\x01\t\x1b\x11\x01q\x01\x04\x07\x13\x01\x07\x15\r\x03\r\x15\x07\x01\'\x04\x01\x01\x0f\x06\x01\x07\x0b\x01\rE\x04\x01\t\x07\x01\x1b\x0f\x03\x04\x01\t\x1f\x19)\x0b\x03\x06\x01A\x0f\x01%5\x01\x07\x03\x01\x1f\r\t\'\x01\x15\x13\x1f\xc1\x01\x01\x17_\x01\x17\xe7\x01\x1b\xdd\x01\x1b\x87\x02\x1bC\x1b\xf9\x02\x01\xcb\x01\x04\x01\x1f\x03/[3\x03\r\x01\x0b\t\x05\x01\x0f!\x15\x03\x0f\x06\x13+\x0f\x05\x11\x0f\x17\x15\x03\x0f\t\x1f\x03\x0f\x13\x0f\x15\x0f\x05u\x0f\x03\x0f\x05\x04\x01\x1f\x05\x0f\x01\x07\x01\x17\x03\x05\t\x1f\x01\x0fw\x03\x97\x01!\x04\x00K\x02\xe8\t\x12Z\x01@\x11\x18\x00\x9d\x01\x00*\x01\x1c\x00\x1f\x13\x01b\x07\x00\xb4\x01\x16\x00m\x17-\x11\xe7\n\x00\xca\x01\xa6\x02(\x0b(\x0c\x16\x02\x04\x00\x17\xd7\x04\x00z\x01\xe0\x04\x01\x03\x01\x15\x00\r\x10\x04\x00#R%\x1e\x00\x82\x01\x01G\x81\x01*)R\x06\x01\xa2\x01\t\x004\x03\x04\x00)\xb2M\x026\x00E\"\x82\x01\x0b\x1d5\x01\r\x05\x0b!\x05\x01\x1b\xad\x01\x013\x04\x01/\t\x83\x01\x01\x05-\x01\x07\x01\x91\x05\x05\x01\x19\xb3\x01e\x0f\x01!\x01K\x11\t\x15\x01\x03\x04\x01\x111\tI1\x051\x03\x05\xb3\x08\x08\x01\x01\x1f\x04\x01\x01\x07\x06\x01\x01\t\x06\x01\x01\x07\x04\x01\x1f\x15\x1b\xef\x01\x07\x03\x07\xc5\x07\x05\xfd\x02\x07\x03\x07\xeb\x03\x01\x19!\x04\x05\x05\xaf\x01\x01\xbf\x0f\x0c\x01\x01\x05\x04\x01\x01\x19\x04\x05\t\x01\x15\x01\t\x17\x04\x03\x1d[\x03\x01C\x03\x01G\x01\x05\x01\t\x01#\x05\x07\x04\x05\x0b\x01\x15\x01\r\x17\x0b\x04\x01\x13\x0f\t\x01\x07\x1bC\t-\x05m\x06\x01\x01\x05\x04\x01)\x05\x19\x05\x01\x15\x01\t\x17\x059\x0b\x01\x19\x05\x03\r#\x19\x057\x87\n\x04\x03\x06\x01!\x05\x01\x05\x1d\x01\x11\x03\x0b\x01\x055\x03\x01\x0b\x9b\x01\x01\x93\x02\x04\x01\x01\xb3\x02\x04\x00)\x08\xb8U\x01\x13\x18\x06\xfd\"%\x8c\x01#\x94\x05\"\x00\xcd(\x02\xf26\x00\x06\x05\n\x07\x04\x01\x11\x00\x02\xf3\x03\x90\x03\xa5+\x05\x03\x11\x03\x04\x01\x15\x81\n\x02\x00\xcc\x0b\x00M\x94\x01\x00(y\xa6\x01\x08\x03\x04\x01\x03\x91\x01|\n\x03\x07\x01\t\x00\x18\x08\x00k\x0e\x00\x81\x01<@?b\x08\x1a\x00D\x00\xa2\x01\x17\r\x17\x00r\x98\x01\x02]Z\xf2\x02\x0e\x00\x0b\x00&\x00\x10\x00\xb3\x18\x01\x00\xbc6\x17\x00>\x08l\x0b6 \x8e\x01\xa8\x03\x01\x99\x03&\xd4\x01\x06\xba\x01\t\x03\xa7\x01\x04\x03\x1f\x01\xbf\x01\x13\x1f\x05\x0b\r\x0b\x01q\x05\x195e\x01=\x06\x01a\r\x07\x03\x93\x02\x8b\x01\x05\'SW\x05UMyC\x17YM\xdd\x01g%A%G\x8d\x01+]W_\xcd\x01I\xa5\x01yG\x17\tg\xcb\x01m\xa5\x01\xdd\x01k%A\x07\'+7\x03I\x04\x01\x1b\x87\x01-\x1fY\x0f\x1f\x99\x01#7cYA\x1f#\x04\x01\x19\x1d\x15\x03\rC\x0f\r\xa1\x01Ug[\x81\x01\xa1\x01\x04\x01U\x05/\x15\x07\xcf\x01\x01\x05\x01\x0f\x0b\xcd\x02\t\xa7\x02\xd1\x07\x8b\x04\x00\xa4G\r\x03\x86\x01\x00J\x006\x85\x13\x00\x02\x01\x8a\x04\x00\xe4\n\x01\xa6\x04\x01\x05-Im\x05\x0b\x01\x03\x99\x02\x06\x01W\xd7\n\t\x81\x04\x07\x916\x00\x82E\x05\x00\xfbD~\xd0\x01N\xda\x01L\xc4\x01\x8a\x01\x8f\x08\xc0\x08\x00\x16\x05\x06\x01\x8a\x05\xc0:\x02\x00\\>L&J\xd7\x02*\x01H\x02\x01\x0c\x12\x01\x88\x01o\x04\x039\x0e\x02rJ\x00\xa1\x01\x00\"\x01\x02\x000\x02\xf6\x03@bfhZ2\xa6\x01\x8a\x01L\x18p\xed\x0b\x00\x05\x04\x06\x00\x11\x10\x00\x0c0\x00\x85\x01\x0c\x00\n\x06\x00\r\x15\x1fX\x00\x04\x01\x06\x04\x00\x07\\S\x01\x0e\x04\x00\x11T;2\x08\x1e\x81\x01\x07\x01\x0b\x04\t\x04\x01G3 \x9e\x01J\x19\x01\x00\xa7\x01\x14\x00\x13\x01\x13\x0b\x00\x0e\x00\x0c\x0b\x8e\x02\xf3\x01\x00\x13\xca\x01+\x11w\x00R\x00\x10\x0f\x01\x18\x0c\t\x06\x00Y\x06\x01\x03\x01\x17\x0bU\x04\x03\x00F\x01\x07\x02\x06;\x00\xb0\x02D9\x03\xb0\x0bK\x03k\x03\x13\x03G\x03\x85\x01\x03\xa1\x01\x03-\x03U\x03c\x03a\x03]\x03?\x04\x031E\x03!\x03G\x039\x03W\x03\x01\xbf\x02\x05\ry\x00C\x01\x00\xb8\x03\x02\xe1\x03\x8c\x01\x01\t\x04\x0f\x05\x0b\x00\x1a\x06\x00U\xac\x03\xdb\x02\x00 \x00C\x10\x07\x04\x01$\x00&\x00\x08\x01f\x00`\x01\x00\x84\x013?\x01\xad\x020\x10\x07\x00\x94\x01MTf\xb9\x01Pb\xb3\x01\x02\x00\x0e\x00\xf8\x01\x04\x01\x05\x05\t-\x06\x01\x05\x05\x01\r\x04\x01\x05\x05\x01\x03\x06\x01\x0b\r!\x01\x03\x19\x03\x04\x01\x07\x05\x0b\x0f\x05\x04\x01\x13\r\x01C\x07\x01#\x01\x07\x0b\x03\x04\x19\x01\x01\x04\'\x0b\x01\x00\xd0\x0b\x8e\x01\x0cz\x04\x02\x19\xfd9h\x16\x1e\x00\x80\x03\x00&\x01\x84\x04.\x00\xe3\x01\x04\x03U\x01\xab\x06p\teU\x01\x07\x03\x0f7\x01\xa6\x08\x00,\x9e\x01\xd7\x16\xa8\x03\x02\x01\x8a\x02\x89\x02\xa3\x03\x01\xaa\x17\x02\x00B\x00\x18\x00f\x00j\x01\xc7\x04:\x1chf\xe8\x01JE\x06\x00\x0b\xa5\x01\x16\x02b\x01n\x04\x01\x19ir0\x00\x02F\x00F\x00\x16\x00\xff\x16\x1b\x04\x01\x1d\x1b\x03\x05\x1d\x01\x05\x01\x03\r\x19\x11\x01E\x03\x01\x04\x07\x06\x01\x01\x15\x04\x01!\xc9\x01\x01\xd1\x0c\x00\x96\x11\x02\x00\x01\x95\x06\x02d\x00\xf6=\x02\x00\x1c\xe3=\x04\x01\x13\xec<\x17\x03\x97 \x05\x01\x93\x03\x01\x03/\x04\x01\x03\tC\x06\x01\x05\x17\x01_\x04\x01-\x0b\x075\x01\x94 \x93 \t\x03I\x17\x03c\x03\x17\x03\x07\x01+\x03\x01\xdd\x1a\x00\xfe9\x04\x02\t\x03\xbb\x02\x00\xb7\x02\xb14\x04\x01\x01\xc5\x01\x04\x01\x01\xbd\x02\x06\x00\x1b\xbe8\xb8\x02\xf5:\x00\xf06\x96\x02A\x01\xdc\x06\x01\xd5\x06\x01ps\x04\x00\x01\x08\x04\x03G\x00\x02\x00\x0c\"F*p\xe6\x01Vf\x1cL\x82\x01Vf\x0e`TL<\x06\x98\x01\x06\x01\x0c\xb1\x02\x03\xcd \x00V\xae\x15\x02\x0c\x00\xce\x0c\x04\x03\x01\x01\x04\x03M\x01\x00\x03\x01\x91\x01\x03\x01\x037\x03O\x03[\x03\t\x03a\x03Q\x03}\x03G\x03\x17\x03a\x03Q\x03\xe1\x01\x03k\x03%\x03A\x03!\x06\x03/\x01A\x07\x03\x01\xcf\x01\xdd\x13G\r\x8b\x17\x01\x13c\x01\xad\x03\xd5\x06\xc7\x04\x00\xb6&\x00\x04\x03\x00\x02\x06\x00\xf7\x02\x08\xa9\x14\x01\x0c\x10\x00\x04\x01\xd8\x01\x08\x00F\x08\x06\xa6\x01\x86\x01`lZ\xa6\x01\x12\x14H\x16\x08\xae\x01\x1c($F^h<\xca\x01$\x14^.\xbc\x01N\x08\xe4\x03\x08<04\xe8\x02F*p\xe2\x01\xaa\x01r\xd0\x01l\x0e\x1cL~\xaa\x01N\xd2\x01d\\b0\x92\x01L*F*l\xe2\x01R^\x1cH~RZ\n\\X(\n\x8c\x01\x04\xa76\xa2\x01\x82\x01\\hV\xa2\x01\x0e\x10D\x12\x04\xaa\x01\x18$ BZd8\xc6\x01 \x10Z*\xb8\x01J\x04\xe0\x03\x048,0\xe4\x02B&l\xde\x01\xa6\x01n\xcc\x01h\n\x18Hz\xa6\x01J\xce\x01`X^,\x8e\x01H&B&h\xde\x01NZ\x18DzNV\x06XT.\xab,\x00\x02:\x01\x00\x14\x08\x00\xba\n\xed\n\x00\xa2\r\xd7\x02\xf5$\x00\x1f\"\x00\n\x00\x8c%\x07\x0b\x00(\x00\x95%\x18\x02\x04\x00e\x0c\x00\x0e\x06\x13\t\x01\x00\x04\x03\x10\x02\x00\x02\x01 \x00\x14\x00\x8c\x01\x00F\x00\x14\x00\x10\x0f\x03\x0f\x05?\x03\x01\x06\x00&\x00$\x00\x91\x02\x18\x01\x88\x02\x00*\x00\x0c\x00\x8c\x01\x01[\x06\x00\x115\x00\x03B\x00\"\x06\x00$\x06\x00+(\x00\x14\x008\x00\x16\x88 \xfb\x02\xc2\x07\x0e\x00\x0c0\x00\xd9+\x00\"\xa4\x0e\x00\x02\x14\x04\x00\x01:\x04\x00i\x18\x00F\x01\x02\x985\x08\x00\x13\x04\x08\x00\x0c\x04\x0c\x004\r\x07)\x02\x00\x91A\xd5\x01\x02\x00*B\t\x1e\x7f\x004\x00\x04\x00H\x11ojeR\x00\x08\x01\x02\x03\x00\x1c\x05\x0c\n\x01\x04\x06\x04\x01\x15\x04\x05\x00\x02\x00\x02\x03\x00\x06\x03\x00\x04\x01a\x03\x07\x0b\x15\x03\x01\x00\n\t.\x00\x0c\x03\xac\x07\x00\x04\x01\xa8A\xb5D\x06\x140\x00\"\x90\x05\x01\x00!\x8f\x01\x8e\x02\x01\x9c@4D\x00\x04\x03C3\xfdE\x00\x04\x00\x01\x02\xa1\x06\x02\x00\x9e\x01\x04\x00A\x0e:\x02\x00\x14\x0c!\x00$\x1b\x00\x10\x12\x02&\x07\x06\x00\xd0\x0cG\x02\x00\x08\x00\nJ\x02\x00\x12\x00 \x01\x17\x06\x00)\x18\x03\x00\x0e\xac\x01\x82\x01\x00 \x00E;.\t\x18\x07\x01,\n\x00\x10\x00\x04\x01\x0b\x0b\t\x00\x18\n\x02\x04\x00\x19\x18\x06\x1c\x01a\x0c\x00\xa4\x01\n\xa6\x01N\x00\x1c\x06\x00/&\x1d \x1e\x05\n\x0b\t\x18\x0e\x02\x18\x06\x0e\x07\x0e\x05\x08\x01\x04\x038J\x02\x04\x005L\x02d\x00\n\x05\xb1\x01\x03\x00N\x03\x00h\x03\x00\x06\n\t\x04\x03\n\x0b\x00\x18\n\x02\x18\x04\x06\r\x00\x1c\x00\x01\x00\x02\x01\x04\x007\x89\x13\x00\xca\x01\x00\xfc\x02\x00`\x00\x94\x1f\x00\x80\x0b\x00\x9c\x10\x00\xd0\x08\x00\x97\x1d\x01\x00\xf9+\x02\x04\x0043\x03\x01.\n\x003\x06@\xe6N5\x05\x17\xdbG\x89\x01\x81\x01\xcf\x03\x19\x01=?\x05\x0b!/\x13\x05\xdf\x07\x00\x9e\tB\xb5\x01J\x04\x00)\x02\x88\x01=\x03C\xc4Kx\x00w\x00x{\x84\x01^\x8c\x01\x01\x85\x01\xbbF\x00\xdc\x14\xf9!\x04\x005\x02\xcd\x01\x8e\x06\xbf\x04\xcd\x01\xb4%\"\xe5\x14\x10\x03\x01\x03\x01\xac/\x81\x01\x9c\x01(\x01;\x02\x00\x02\x00\x01\x00\x08\x00\x04\x03#\x00\n\x02\x80\x01\x9c\x01\xce\x0b\xf3\r\x0e\x84\x01\x91\x01\x12\x88\x01\xa4\x01\x02\x98\x0c\x04\x00\x1e\x04\x00\t\x1d\x03!\x01\x0b\x04\x03\x01\x01\x04\x03\x04\x01\x0b\xd3\x0b\x02\x00\x084:\x04\x02\x07&:\x06\x97\x04\x04\x03\x04\x01\x01\x81\x01\x06\x03-\x01\x03s\x03\x01\x90\x04\x002\x1c\xe93\x01\xf6\t\x02\x00\x06\x1c\t\xc8(\x02\x0c\x02\x01\x02\x04\x00\x01\x08\x04\x01\x1f\x03\x01\x0b\xd92\x02\x00\x0c\x00\xb5\x0b\x00\xcc(\x02\x00\x12\x05\x02\x04\x00\x15\x08\n\x0b\x14\x02+(\x00!v\x00\x042\'\'\x08\x00D\x0e\x00\xc7\x01\x02\x04\x00 \x01\x08\t\x17\xee\x02\tU\r;\x04\x07\x13\t\x11\x1f\x07\x01\x13\x05\x01\x0bE\x04\x03;\x01\xf8\x16\x01\x1a\x00\x1e\xe3!\x03\x01\x82 \x02\x10u\x14\x12z\x89\x01\x02\x03\xac\x02\x02\x01 $\x08\x0c7\x00\x12\"\x04\x03\r(\x08\x00\xed\x01{\xad>\x02\x06\x00=\n , \x14\x047\x00K\x00\x0b\xcd\x01\x01\xf6\x15\x01\x9a-4\x00\x8b:\x04\xb4\x16\x02\x00\x02\x00\x02\x00\x02\x00\x06\x03\x08\x01\x03\x9a\x01\x02\x04\x00\x152!\x0f\x01\x99\x01\x01\x9b\x17!\r\x07U\x04\x01\x0f/\x1b\x01\x0b\r\x03\r\xe9\t\x04\x00\x03\x08\xb6$\x04\x00\x11\x1c\x02\x00\x01\x00\x12\x14\x01,\x04\x00\x07\x01\xa23\x01\x89\x02\x04\x01\x11\x13/y\x8d\x01\xa7\x02\x07\xc7\x08\x07M\x06\x01\x03!3\x04\x01\x19\x07\x01\'\x01\x0f\x03\x01\r%\x07\x01\x11\x1f\x04\x01\x15\x1b\'1\x05#9\x03\x01\x0f\x01%\x04\x01\x0b#9\x03\x0f\x133\x04\x03\x03\x01\x9b\x01\x04\x03\x01\x7f\x04\x03\xb9\x02\x01\x8d\x01\x03\x8b\x01\x03\x05\x033\x03K\x033\x03U\x03\x01\x03]\x03M\x03y\x03\x1b\x07#\x03-\x03\x01\x03g\x03k\x03g\x03I\x031\'/\x03y\x03G\x03%\x03\x13\x03\r\x03]\x03M\x03\xdd\x01\x03?\x07#\x03-\x03\x01\x03g\x03M\'W\x03m\x031\'/\x03\xdd\x01\x03k\x03%\x03!\x03=\x03\x01\x03A\x03\x05\x03#\x03-\x03\'\x035\x03\x01\x03\x01\x033\'[\x03)\x03U\x03\x0b\x033\'i\x037\x03_\x03U\x03#\x03=\x03\x1f\x03\x01\x03!\x03\x1f\x03\x17\x03\x01\x03\x01\x0f\x03C\x03\x0b\x03\x11\x03\xa1\x01\x03\x1d\'\x0b\x04\x03\x0b\'?\x03#\'\x0b\x04\x03\x07\'Y\x03\x1d\x06\'\x07\x07\x03?\x03\x06\x01\r\x1b\'=\x0b\x17\'\x05\x04\x01\x01=\x06\x01\x03\'\x0b\x04\x01\x01\x05\x04\x01+#\x1f\x179\x13\x01\x03\x07W\x07\xf3\x02\x07\xc1\x01\x07e\'\xc7\x02\x01\t\x11\x01+\x06\x01\x85\x01!\x13/+/\t\xa3\x03\xbc\x03\\\xfc\x02B6\\4$>h\xfc\x02`\xc4\x01:P\x8e\x01\xa8\x01\x8a\x01L>\xd8\t\x18(\x92\x01\x06N\"\x06\x86\x01\x18\x8a\x01\x14\x18\xba\x02&6TpL\x1c\x18`\x1c\xa4\x03\x1a\x18.\x0e\x18v\x8a\x02&\\\xf8\x01r\x1a\x18<\x18\xd6\x03\x04\x18\rh\xe6\x01\x1cX&\xee\x01N\x04\x18\x8d\x02\xba\x05\xa0\x03\xca\x01\xe2\x01\xac\x022\x1aR\xe4\x01\x80\x03r\x86\x01 \x1c:\x04t\x84\x01\xd4\x04\xfdXB\x92\x014$>h\xfc\x02`\xdc\x03\xb6 \x82\x01\xf8\x01\xcc\x08\x1cX&\xee\x01\xce\x10\xe4\x01\x80\x03r\xf8\x03\x91D\x00\\\x00\xfc\x01\x00\x96\x01\x00\x88\x05\xea\x03\xf8\x0b\x00\x88\x08\x00\xf0\x04\xea\x06\x89-\x00\xe4\x01\x00\x94\x01\x00\xec\x07\x00\xe6\x0f\x00\x96\x08\x00\x97#\xca\x01\xb2\x01n\x8a\x01p\xaa\x01\x1a\x14L\xd5\x07\x02\x010\x00V\x00\xfc\x08\x03G\x03\x0f\x03\x15\x03\xa5\x01\x03\t%;\x033%+\x03\t#;\x033#\x03%+\x03\t%9#7\x03G\x01\x02\x01\x8e\x05\xe6\x02\x05\xe5\x02\xeb\x02<;\x18\xae\x01\x80\x02\x04\x00i\x1e(\x11\x01\xc0\x02*\x01\x11\x81\x03\x1c\xc1\x01#5\x032\x06\xde\x07\xde\x06\x00C\x12\x000&\x86\x01\"\x00\x8a\x02\"\x00\x9d\x1d\x00\x02\x88\x01\x00\x02N\x00\x02\x82\x01\x00\x02\xe2\x13\x00\x02R\x00\x02\xfa\x06\x00\x02\x83 \xe7\x02\x04\x00\x1b\x1e\x01\xf4\x02\xe2\x11\nr\xdc\x02\x00\'\x11\x00\xaa\x02$\x13\x06\x03\x91\x03\x01\xc0\x0b\x00\x9d\n\x00\xd8\x04\x00I\xbb\x01 \x02\x0e\n>z{\x16\x006\x00\x0c\x00\xc9\x08\xe8\t\x00\xe0\x03\x00\xf6\x01\x00\xf4\x01\x00\xbf\x04\x00\xeb\x05V\x006\x00\x04\x009\x006\x03\x00\xfc\x08\x1d\x15\xb5\x02\x00\xe6\x01\xfd\x17\x00\x02y\x00\x02\x9a\x04\x00\x02\xc4\x02\x00\x02\x12\x00\x02\x8f\x12\x01\x00\x02N\x00\x02H\x00\x02\xba\x17\x04\xb6\x01\x07\x15\x17-A\x05\x07\x91$\x01\x00\xaf\x04\x02&\xb2\x04\xa0\x01\x10F\x16\x04\x03\x11\x03A\x03\x0b\x03\x9b\x01\x03\x01\x8a\x0b\xe8\x06\xbf\x06:Z&J\"R\x0e\n,F8R*$&l\x10\x124Nh\"R\x0c\x04\x03\x07\x03M\x03\x1d\x03c\x03I\x03/\x03\x05\x07\x03\x0b\x03g\x03!\x03\x1f\x03%\x03M\x033\x03A\x03\'\x03\x05\x03\t\x03M\x03\x1d\x03E\x03!\x03U\x035\x03\x01\x00\x02F\x03\"\x00\x01\x08\x01\n\x02s\x01v\x04\x01\x055\x01\x03\x04\x05\t\x1f\t\x01#\xab\t\x04\x01/-\x1b\x8f\x01\xaf\x04%\x01\x1d\x00\xa4\x03\xd0\x01\xc8\x02(\xac\x05\x1alF$\x06\x02v\x02$\x02>\x04\x1c\t\x02V\x02@\x08\x06(#\x1eZ(\x04\x0c($@(\x04\x0c(\x1e\xa2\x01\x12\x0cD\x10\x06\x02%\x18 \"\x02 >$V`8j(4\x0cV*\\(4\x04\x02\x8b\x016(.$\x06B\x02>\"&l\xde\x010(2nX(Nh\x02.l\xde\x01N^\x0e\x14&Hz0(2Jhlh\x02.HzN^\x02V4L4\x06\x8c\x01\x8e\x01\xfe\x01\x02\xc5-\x06@\x16\nD\xa2\x01\x8a\x01\\pV\xa6\x01\x16\x10H\x16\x04\x06\x1d\x1c$&\x06$B(Zd<\xca\x01\x10Z.\xbc\x01\x04\x06\xaf\x01:,2(\nF\x06B&*p\xe2\x01\x8e\x01r\xd2\x01l\x062p\xe2\x01Rb\x12\x18*L~\x8e\x01Nlpl\x062L~Rb\x06Z8P8\n\x90\x01\x94\x01x\x06\xbb.\x03;\x03\x01}\x04\x06\"\x18\x04G@\xdb\x0c\x02\x08\x05\x08\x03\x10\x03bE\x06\x05\x06\x03T\x02\x00\x02\x01\x00\x01E\r\x01\x1b\x0b\x03\x04\x01\x03\xf6\x0b\x02\x04\x00\x0b\x01\xed\x01\x02\x94\x01\x03\x0e\x04\x00\x01\x02\x04\x00\x11\x01\x00\x08\x07\x1b\x04\x01\x04\x01\x04\x08; \x00\x06\x8c\x02\x00\x08\x00\xad\x0f\x02\x00\x1c\x02\xf8B\x05\x01\x03\x01\xa7\x05\x01\x8f\x01\x85\x01\x05\x03\x01y\x05\x83\x01\x05\x01\xe3\x02\x04\x03\x03\x11\x0f\x06\x03=\x01\xe9\x05%!\xe7\x03\x07\x03\x01\x03\x0f\x07\x11\x01\x91\x07\x11\x13a#k\x0b\x15\xc5\x02\xb3\x03#\x8d\x08!\x1b\xad\x03\x01\x07\xc3\x01\x04\x01\x13%\r\x0b\x03\x01\x03\x1f\x01\x05\x07\x04\x01\x05\x81\x01\x01\xdb\x0b\x06\x01\t\x03\x01\x1b\x01\xb5\x02\x04\x005\x04\x03\x00\xd4\x02\x02\x06\x07\x00\x08\x07\x04\x01\"\x01\t\x07\r\x01\x1d\x01\x9a\r\x06\x0e\r\x05\x99\r\xb3\x02\x06\x00\x01\xde\x0f\x04\x021b\x02\x00\x1e\x06\x0c\x07\x1e\x02\x03\x04\xdc\x02\x06\xe2\x01\x02\x00\x04\x05_\x00\x02\x00\x9c-\x064\x04\x00E\n\xb72\x00-\x00\x965\x00\xd73\x00\x9a\x01\x00P\x00\xa4\x01\x00\xcc\x01\x00<\x00\xcb\x01\x00\xea\t\x00\xd4\x02\x00\x97\x1a\x00\xae!\x00\xa8\x02\x00\xf2\x08\x00\x8f/\x02\x04\x00/\x022\x12\x04G\x00\x1e\x16\x01\xbc\x06\x01\x83\x06\x00\x92\x01\x004\x01\x04\xf89\xc1\x01\x01\xd9\t\x01\x97*\x04\x01\x01\xb9\x04\x06\x01\x17/\x01\x8f\x01\x01\xbf\x05\x00\xaa\x07\x00\xa6\x01\x01\x04\x02\x06\x01\x1f\xa1\x01\x01\xa9\x07\x00\xe8\x07\x00\xae\'\x00\xcc\x07\x00\xc0\n\x00\xa6\x01\x01\x04\x02\x06\x01\x1f\xa1\x01\x01\xbd\n\x01\xc9\x07\x01\xab\'\x01\xe7\x07\x00\xc8U\x00p\x01\x04\x02\x06\x01+k\x01\xc7U\x00\x90U\x00\x02\x01\x8fU\x00\x90U\xaa\x01\x01\xe9\x15\x00\x92\x01\x00j\x01\xaf\x12\x00\xa4&\x04\x01\x05\xa5\x01\x01\xc3\x12\x04\x01+e\x01\x8f\x01\x01\xb3\x10\x01\x970\x00\xd2\x08\x01\xc7\x01\x01\x85\x07z\xcc\x01J\xd6\x01H\xc0\x01\x8a\x01\x93\x03.\x04\x00\x07\x12\x07\xd4\x03\x15\x04/\x0b\x000*\x02\x00\n\x04\x03\x04\x01\x04\x04A\x03L\x03\x0f\x00\x14\x00>\x00&\xa5\x04E\t\'\x03\x01\xf0\x02\n\x00\x0b\'/\x00x\x04\x00LRa.\x00\xba\x01\n\x04\x00\x15\x07\x01\x00\n\x00\x18\x00\x1c\n\x00\x08\x04\x009E\x00<\x00t`\n\x00P\x06\xdd\x04\x05\x01\xfc\x01\x07\xa8\x04\n\x00\x0c\x12\x01\x0f\x0b\t\x03!=\x13/\x06\x03\x07\r\x05O\t\x04\x01\x11[\r\x07\t\x1b\r\x0f\x19-\x04\x03\r\t)Q\x0f+\x01\'\x04\x03\r\t\x01\'\x03w\x07\x03\x06\x01\x03%/\x04\x01\x15\t\x1b)\x01\x0f%\x1b\xa5\x02\xc9\x01\x03u\x04\x00\x11\x04\x00\x03\x00\xda\x0e\x06\"\x01\x1f\x04\x05;\x00\x0e\xd9\x01\x18\x00w\x18\x00\xfa\x02\x00\x08\x0c\x00\x07\x00\x14\x00\x01\t\x00\x07\x00\x14\x15\x1a\x0b\x00\x14\x00:\x04\x00G(\x10\x00\x04\x10*\x00:\x02\x14\x1c\x02 \t\x18vz\x91\x02\x12\x03\x00\x0c\xcf\x01x\x9b\x02\x0c\xd2\x02F\x00\x0e\x00\x02\x10\x14\x00\x02\x04\x00\x13,\x01\x08\x00Z\x14rvk\x01\x08\x03\x17\x01\x12\x1c\x00(R\x00\xa7\x01\xaf\x05\x1a\x0e\n\x04\x03\x05\x01)\x13\x06\x03\x0f\x01E\x8e\x01\x01\x0b\x17\xa8\x04\x01\x06\x0b1\xc9\x04\x16\x08\x00\x04\x03\x07\x0b\xee\x07\x0e\x00\x18\x1b\xe1\x11\x00`\x00\xa4\x02\x00\xfa\x01\x00\xec\r\x00\x02\x08\x04\x0e1:X*4^\x06XL\xbd\x03\\.8b\n\\P\xd9\x03`2<f\x0e`T\xe9\x03\x06\x03M*\x00\xfb\t\x18\x03\xe8\x04,\x00\x19\x03\xbe\x04\x00\x04\x03\x00\xe2\x01\x18\x00J\x04\x02\x13\x1e\x1a\x00\x06\xf4+|\x02\x16\x00\n\x12\x00\x82\x02\x00\x1c\xcf\x01\xbc\x08\x06\x00\x03\x1e\xb7\x08\n\x00\x05\x02\x91\x19\x0e\x04\x0c\x19\x1a\xc3\x05\x02\x0c\x12\x01\x0f\x0b\xca\x05\x07\x19\x01\t\x04\x0b\x05\x01\x9e\x0c\x16\x04\x03\x07\x0c\x00\x12\x11\x04\x0b\r\x01\x98\x02\x18\x01\xe3\x01\x1a\xfa\x01\x06\x02\x03\x0c\x02\x04\x00%\x08\xbd\x01\x01\\\x02\x00\x02 \xcd\x01\x07\x17\x01I\x1a\x19\x1a\x19\x1e\x05\x04\x02!\x04L\x00\xf5\x01\x00\x0c\x00\x83\x0b\x00\x0c\x00\xb2\x0c\x07\x19\x01\x11\x19\x04\x01\x01\x03\x04\x01%\x15\x01\xd8\n2\x00\x0e,\x01\xe3\x01\x02\x03\x01\x000\x10\x14\x02\x04\x03\x06\x00\t(\x00\x02\x00\xdb\x0b\x06\x00\r(\x00\x854\x02\x00F\x0b\x04\x02\x15\x146\x00\xca\x02\x01\xb49\x82\x11\x02\x04\x0c\x02\x06\x00\x0b\x9b\x01\xae\x01Tf\xcf\x01\x04\x04\x01\x05\x07\x01\x0b\x04\x03\x010\x04\x00K*Pb\xf5O\x00\x82\x08\x00\xb0\x03\x00\x86\x01\x00\xd05\x00\x87B\x00\x86\x08\x00\xb4\x03\x00\x8a\x01\x00\xd45\x00\xc74\x00\x95\x02\xdc6\xe79\'\x0b\x9c\x02\x00 \x00\xb5\n\x14\x08\x00\x04\x03\t\xa4\x0c\xa3\x0c\xa4\x0c\x0c\x0b\x06\x00\xbb\x01\xd68:8\x1c\x14-\x00\x12\x11\x01\"\x00\x08\xb5N\x00\xcaN\x8dK\\\xec\x0bP\xbc\x04\x84\x05r\x9e\x03\x9e\x04&6\x9c\x01L\x1c\x18`\x1c\xa4\x03\x1ah\x8c\x07\x1ah\xfe\x03\x18\xce\x06\x18\xe8\x05\xa0\x03\xca\x01\x8a\x042&:\x94\n\xd8\x05\xa3\x07\x1c:\xb5\x0e\x02\x0829\x01\x00\x0e>=\x01\x0b\x03\x01\x0063\x00>\x00=\x0045\x00R5\x07\r\x00<1\x00\x01\x077nJ\n\x04\x00E\x83>\x00\x04\xa80\';\x1d\x19\x13\xa7\x01\x1d\x8d\x01\xc9\x02\xe5\x013\x01\x0b\x01k\tI\x15;\x1d\x13\x01u\x07\x03\x07-\x07\x15;\t\x04\x01%\t\x01\x1f\x03!\x15\x1bU%\x01\x11\x01C\x01\x0b\x01\x93\x01\x07\x9f\x01\x06\x01\x11\xa7\x02\x11\x1b-\t\r1q\t\x04\x01o\x11\x01\x03\x01\x0b\x01\xb5\x02\x01\x0b\x01\xa3\x03\x01\x11\x01Q\x01\x0b\x01\xf5\x05\x01\x0b\x01s\x01\x0b\x019\x01\x11\x01s\x01\x11\x01\x03\x01\x0b\x019\x01\x0b\x019\x01\x11\x01A\x01\xe7\x02\t\x05\x15\xed\x01\x01\x0b\xe3\x01\x06\x01\t;\x03\x13\x01\x05\n\x01\x01\x0f\x04\x01\x059\x01\xc5\x05\x04\x01\x05\t\x1f\x0b\x04\x015\'\x0b\x01\x11\x07-O\x03\xb5\x02\x00\xe25\x00\x01\x00\xdc\t\x00\xc6\x01\xab\x01\x02\n\x00\x0c\r\t\xa1\x0e\x06\x03\x04\x005\x8a\x01\x06\x00*\x01\xc9\x07\x02\x00\x02\x0c\xa1\x07\x1e\t\xef\x01\x00\x94\t\x12\x00\x08\x00\x16\x05\xc5\x08\x86\r\x90\x06\x00\x08\x04\x03i\x00\x02\x00\x0c\x10\x00\x12\x00\xaa\x04\x03\'\x03\x04\x05\x06\x00\x8c\x02\x92\x01\xe5*\x1c\x00\xea\x0b\x03\x01\xb3\x03\x9e\x06\xe1\x05\x04:\x00 \r\x0e\r\x119\x01\xc65\x03\x00\x02\x00\n\xa2\x01\x87\x01\x1c\x0e.\x10\x87\x01\n\x80\x01\x08\x04\x03\x15\x01\x07-\r\x1b\x19\x03\x05\x03\xae\x01\x99\x01\x04\x00\x0f\xaa\x01\x01\x00}\x01\r\n\x80\x01\x04\x00\x05m\x00\\\x04\x01\x0f!\x0f.\x05\x19\r%\x07\x04\t\x05\r\x0b\x11\x04\x01\x05\xc3O\x02\x04\x04\x00\x07\x03\x00\x1c\x12\x04\x00\x15\x04\x0c\x02\x0b\x02\n\x01\x9e\x01\x01\x00\x02\x04\x00G\x01\x08\xab\x01,\x01,U\x01\x8c\x01\x01\x05-\x01+\'\x01\x03\x11\x1b\x01\xc4O\x02\x03\x92\x01\x01\x85\x01.\x8c\x01\xbbS\x00\xe0$\x18>\x02O\xe7$\x04\x00\x13\xce$\x02\x00\x08\x01\x06\x01\x02\x01\x04\x04\x03\x05\x05\x01\xcd$\x04\x00+\x02\xda$\x08\x03\x04\x05\x03\x00\x10\x0f\xd9$\xe0$\xdf$\n\xde$\x00\x07\x18\x086\x02\xb7%\x06\x00\xc7\x01\x02\x00\x04\x00\x18\x04\x07\x13\x1e\x1a<\x02\"@V\"t\x00 t\x00\x1a$\x0e$(\'\xc9\x05$!\x00\x18\x15\x00\x18\x00\x17\x16 <\x00\x02\x00\"\x04<\x00V\x00\"\x06\x05\x14\x13\x00t\x00\xae\x01\x00$\x00\x0e\x00L\x00\xe4F\xdfF\x04\x00$\x0c\x0e^5V\x04\n\x1e\x00\'P\xbd\x01\x84L\xd7L\xdaL\xedG\xb0J\xedG\x02\x00.$,*v\x0c\x84H\xa3G\x00\x02\x04\x00\x1f\x0c8\x100<\x04%\xe8G\xc4,\xdbJ\x02\x008\x02\x00\x08\x04\x04+\x02\x10\x0f\x01\"\x0e\x00\xe0K\x9fL\x00\x08\x18$d\x04\x02\x00\x08\xea\x01\xc7\x01\xec\x01\x04\x04\x02\r\x00\x08\xec\x01\x02\x00\x10(\x08\x00\x054\x0b*\x08\x03\x1bf@\x04$\x0f\x17\"\x00 \x1d\x06\x08\n(\x08\x07\x05\x8c\x01\xf1\x03\x96\x01\x04\x02\x11\xd6\x03\x02\x00\x064\x0b\x83\x04\x05\xa9\x05\x04\x02\'\x00\x08,\x00\x08\n\x12$\r.\x03\xc6\x01\xa3\x01\x048\x9c\x01\x83\x01\xdc\x01\xe4\x01\x12\x04\x075\xa2E\xf3J\x02v$\xe0\x06\xf9\x07\x8c\x050\x00\xb8E\x85\x88\x01\xb4\x10\x02\x06\x05\x01\xcb\x05\x00\xc9\x02\x14\x18\x00\x15\x01\x13\xe02\x04\x03\t\x01\xb8\x04\x00\x8e\x03\x04\x04\x00\r\x01\x02\x01\x00\x1c\x19 \x0c\x03\x04\x01\x0b\x05\"\x10\x00\x13\x00\x04\x02\x1b\x14\x0e\t\x02\x0e\x01\x0b\x01\x03\x01\x11\x01\x00\x01\x04\x00\x1d\x14\x0f]DBF\x14\x18k\x012\x01<\x0f\xb0\x01\x04\x00\x05\x02\x87\x03\xb0\x03\x06\x03\x1b\x01\xba\x01\x1d\xe1\x04r\x90\x02\x81\x03n\x8c\x02\xbb\x01&\x03\x06 \x04\x00\x1fK%(\x03\x00$\x03$\xaa\x02\x02\x01\x00\x08\x00\x01\x00\x04\x01\x04\x00\x15A\x00B\x04\xf3\x02!\x00\xe8\x02\x00=\x87?\x04\x01!\x02\xb4=\x01\x18\x00\xf1=\x02\x08\x05\x06\x07\x01\x08\x00 \x14\x13\x08\x00\x07\x1a\x16h\x04\x04\x00\x03\x01\x02\x04\x00+\x02NA\x18\x00\x17\x00\x1a\x00\x19\x84\x06&\xd6\x01\xf5\x01(,\x02(\x00}\x00\x10\x08\x03\x1d\x01\x82\x01\x03\x01\xf0\x018/4\x10\x000\x0e.\x00\x04\x06\x00\x03D\x02\x04\x00\x0f\x0b\x00\x0c \xce\x01\x02|\xd1\x02\x04\x00\'4\n\x00\x04>\x16\x01\x14\x01\x00\x02\x06,\x02\x00F\x00\n\x00\x04\x04\x00C\x08\x002&\x04B\xf4\x01\x1c\x08\x06x\\\x97\x05\x02\x18\x03\xe6\x04\x00T\x00(\x00 \x00\x9f\x02\x02\x00\x94\x19\x00\x01\x07\t\x01\x05\x04\x01=\x0f\x1b\x00\x03\n\x02\x00\x10\x00\x02\xaf\x07\x00\xca\n\xbb\x02\x02HhX6\xfd\x08\x01\x11\xbb\x01\x01\x9e\x01\x00\x94\x04\x00\x0f\x00\x9a\x01\x06\x00#\x08\x0e\x00\x02\x04\x08\x00Jr\x01K\x01\r\xed\x01\x00\x02\x00\x02\x04\x00\x01\n\x04\x00\x1d\x01\x00\x0c\x0f\x12\x00G\x00V\x05\x0b\x03\x01\xc1+\xe4\x01\x0c\x00\x01\xe3\x01\x04\x00\r\xe2\x01\xba+\x01G\x01\x07\x03\x04\x01\x1b\x0b\x07\x00\x01\x00g\x02\x12\x02\x0f\x12\x05\x01\t\x06\x01\x03\x9f\x03\x02\x06\x00\xcd\x01\x0e\xc5\x01\x00\x02\xc1+B*:`\x82\x018F\xac\x01\x0e\x96\x01NJ\x1c\xbe\x01\x1c\x80\x02.Dn.^dH&R&bp\">&\x18@>\xb0\x01$J\x1c\xe0\x01F\x18DtjJ\xfc\x01$\x16\"\x8e\x01<0|\x10Z\x1c&4\x1a\x80\x01\\\xe8\x02Tv\xf4\x01\xf0\x01\\2\x14(\xd8\x01D\xa8\x01\x9c\x01LD*L*@\x14\x10 &\x9e\x02\x124<j>N\\H(>\x90\x01\xb2\x01h\x04T=\\\xa4\x01V:\xaa\x02\xf0\x02\x0e\xc25\x95\x82\x01\x00\xa8\x02:\xaa\x02\xf0\x02\xd3\x056\xa6\x02\xec\x02\xc9\x05\xd4\x05\x90\x01\x8d\x01\x01\xd1\x05\x01\xa5\x02\x88>\xb0\x01\xd6\x05\xe1\x13\x02\x06\x00\x01\x01\x04\x02az\xe5\x01\x0e\x07\x96\x01\x01\t\x01\x05m\xf4\x01K\x07u\xc0\x01\x01\x12\x0f\x16\x03\x00\x0e\x10\x01\xc5\x05\'\x0b\x01\xc6\x05\x00\x06\x00\x03\x00\x08\x04\x11m\x00\x8d\x06\x00\x022\x01\x1d&\x86\x07\x01\x1f\x06\x03\r\x01\xc3\x19\x00*\x002\x01\x06\x00\x07\xc2\t{\x01\xcd\x01\x04\x01+\x87\x025\x03\x1b\x0b\x1b\x033\x1b\x03s\x03\x01\x03\x01\xf5\x01\x1d\x13\x1b\r\x1b\x05\x04\x01\r\x03\x17\x03\xef\x01\x03=\x03\x06\x01\x13#1\x07\x01#\x13\x01\x03\tE\n\x01\x07#\x05\x01\r\x04\x01\x19\x13\x01;\x03\t3\x01\x03\x01\x11\x01\t\xb5\x12\x04\x00g\x0c\xf4\x19\x00\x19\x00\x02\x12\x00\n\x12\x00\xc8\x01\x00V\x00\xcd\x02\xa0\x06\x00\x80\x01\x00\xfb\x04\x00&\x00\x96\x03\x00x\x00\x0e\x05B\xd4\x01\x80\x01\xcb\x13:6\r\x1a\x00\x08\x05\x00\xf2\x15\x06\x00(\x03\n\x03\x00D\x08\x04\x00%\"\x00\xc4\x03\xe6\x01\x077\x1b\x01\x1b#\x01C\xc6\x01 \x06\x03\xb9\x1c\x03\x01\x06\x00G\x89\x01\xa6\x01\x7f\xfe\x02\x12\x00\x1a\x19\r\x01aV\x8f\n\x02&\x04\x01\xe4\x06\x00v\x00E\x83\x06\xce\x0f\x12\x98\x18\xf4\x03&\x00\x91,\x16\xe0.\x01\xd1\x07\x0f\x02\x04\x01\x04\x19=\xf7*\x00\x0e\x8e\x1f\x02 \x1f\x80\x05 \x00\x1e\xba\x01\x00\x01\xce\x04\x00\x0c\x00\xa9\x05\x0e\x01\x03\x07\xf2\x02\xbc\x04\x1f\x11\x1b\x05\x1b\x03\x04\x01\t\x05\t\x015\x01\x04\x03\r\x07\x1b\x03\x01\xf5\x01\x00M\x04\x03\x15\x8d\x1e\x19\x15\x19\xbb\x05\x01\x15\x87\x01\x07\x01%\x04\x01\x0f\xdc\n\tO\x03\x05\x01\x81\x01\x0b\x04\x03\x9f\x01\x01\xc0\x17\x01\xf0\x01e\x03\x7f\x03\x01\x05\x98\x19\x03\x01\xe7\x04\x996\xae&*\xf7\t\xda\x01\xdf\x01\xc2\x06\x00\x1e\x00T\x00\x8a\x02\x00\'\x00|\x00 \x00 \x00 \x00\xd9,\x02\x0c\td\x01>\x01\xe2\x01\"\t\x04\x032\x08\x00\x02\x014\x01N\xbe*\x1c\xca\r\x018\x01\x92\x01\x8f\x01\xb3\x01\x00\x16\x15\xcb\x0b\x01\xf5\x19\x02\x00\xce\x17<;\xcd\x17\x04\x00\x11\x01\xf4\x19\x02\x00 \x00\x1c\x1b\x1f\x04\x00\x13\x01\x00\x01\xa3\x02\x9c\x10\x01\x9d\x03\x04\x01\x03\x04\x02\x04\x00\x91\x01<\x0cB\xe4\x01@d\xd1\x03\xaa\x02\xa9\x02\xae\x02\xb1\x02\x05 \x004S \x01\x032\x01\x1a&\x80\x01\x01\x14\x8d\x02loh\x1a\x00\xf5%\x00\xb7\x05\x01\x00\x12\x01\xc8\t\x01\xdc\x01%\xa4\x04\x01Bv\x9c\x05\x01\xda\r\x01\xe9\"\x01\xc0\x11\x01\xc2\x04\xc6\"\t\x03\xeb\x02\x03\xa5\x02\x035\x03\x01\x05\x1b-\x03\x9f\x01\x03W\x04\x03\t\x19\x1f\x01\x0f\x03\x04\x01\x87\x03\x19\x01/\x03\x01a\x03\xad\x01\x03\x8b\x01\x039\x03#\x03C\x03W\x03I\x039\x03e\x037\x03/\x03\r\x03\x99\x02\x03!\x03\x1b\x03\x0b\x03\x0f\x03;\x03%\x03G\x03%\x03?\x03G\x03\x97\x01\x03\xa3\x01\x03?\x03\xd3\x01\x03#\x03\x0f\x03-\x03W\x03\xeb\x01\x03\xef\x01\x03q\x03O\x03\xe3\x02\x03W\x03{\x03\x15\x03/\x03!\x03\x17\x03U\x03\x0b\x03w\x03+\x037\x03\x89\x01\x03\x1d\x03\x11\x03\x1f\x03\xf7\x01\x03E\x03e\x03o\x03\x01\x05\x0b+\x03\x01\x11\x03A\x03\xdb\x01\x03\x01\x05\x0f\x03E\x03\x1f\x03\xab\x01\x039\x03;\x03\x13\x03!\x039\x03\x1d\x03k\x03]\x03!\x03M\x03!\x03C\x03_\x03Y\x03)\x03i\x03?\x03)\x03\xfb\x01\x03\x17\x03\xb9\x01\x03\x17\x03E\x03I\x03\x91\x01\x03\t\x03\xa7\x01\x03A\x033\x04\x03\x07\x013\x13+\x04\x03!5\x1d\x07\x03\x013\x03%\x03=\x03\x02\xa69\x00\x080/\x04\x03/\x01\xdc\x02BA*=\x00\x06\n\x06\x00<\x02\x01\xeb7\xa8\x01\x01\x88\x11*\x00\'\x00^!\x04\x01\x079\x02\x82\x01(\x06\x06)fF\xf8\x01 \x0c\x06\x1e\x8a\x018,x\x0cV\x18\"0\x0c\n|X\xd8\x02\x04\x06QPr\xf0\x01\xe6\x01\x06N\n.\x10$\xd4\x01:\x06\x9e\x01\x06\x98\x01B\x06@&H&<\x10\x0c\x16\x06\"\x9a\x02\x08\x0602\x06`\x06:JXD\x18\x04\x06\'4\x06\x8c\x01\xa8\x01\x06\x81%\x01\x03\x01\x03\x01%)\x00\x01U\x01\xd2&\x02X\x04\x00\x0f[\xd8\x07\r\x05\x1d#kE\x04\t\t\xab\x03\x01]?W\x04\x01M\x13]\x03\x01\x03\xa3\x01\x03\x87\x01\x03\x01\x03/\x03\x01\x03\x01\x03\x13\x03?\x03S\x03\x1b)\x035\x03\x01\x03[\x03\x01\x03-\x03+\x03\x01\x06\x03Y\x95\x02\x03\x1d\x03\x01\x03\x11\x03\x07\x03\x0b\x037\x03!\x03C\x03!\x03;\x03\x01\x03=\x03\x93\x01\x03\x01\x03\x99\x01\x03\x01\x035\x03\xcf\x01\x03\x1f\x03\x0b\x03)\x03\x01\x04\x03\x87\x02\x01G\x03\x01\x03E\x9b\x01\x03\xeb\x01\x03)C\x03K\x03\x01\x03\x01\x03AuAY\x03S\x03w\x03\x05\x03\x07\x03+\x03\x1d\x03\x13\x03Q\x03\x07\x03\x11#=\x03\'\x033\x03\x1bi\x03\x19\x03\x01\x03\x07\x03\x1b\x03\xf3\x01\x03A\x03a\x03\x01\t\x1b\x1f\'\x01\xcb\x03[\x0f\xcf\x0c\xa5\x01\xd3\x04\x00\xe4=\x02\x00 \x00\xed<\x02(\x1fX\x00\x80=:\x07\x02\x95>\x02\x00P\xa0\x04\x9d\x04Q\x01\x84\x05\xcb\x01\x02\x04\x01\x02\x01\x02\x01\x1a\x13\x02\x18\x04\x01\x02\x01\x08\x1a\xa0.\x01?\x07\x03\x1b\x03\x1b\x05\x19\x06\x01\x05\t\x01\x11\x04\x01\t\x19\x01\x0f%!\x04\x01\rO\x07\x03\x1b\xc1\x01\x01\xe3\x01\x04\x01\x07\x1b\x1f\x03\x11\x04\x01\r#\x01\x0f\x01\x19\x05\t\x04\x01\x03\x1d\xc5\x01\x04\x01I%\x01\x03\x07\x01\t\x17G\x03\x1b\x19!\x1b\x05\xe7\x02\x01K\x01\xe9\x02\xd7\t\x01\xfb\x035\x7f\x13g\x0b\x01\'\x0b\x01+\x0b\x01\xf5\x06\x01\xf9\x01\x08\x01\x05[\x0ba\x04\x01\x03\x19\x07\x04\x01\x05\x15\x01\x05\x04\x01\x0b\x8b\x01\x01\x0b\x05;a\x04\x015s\x01\x97\x01\x00\xd2\x04\x12\x00~\x02\x00\x01C\x00\x1a\x13\x02\x18\x10\x0f\x01\x15\x01\x05\x017\x11\xd1\x04\x04\x00\x1b\x02\xca\x05\x12\x00\x14\x02\x00\x04\x00\x0e\x02\xb7\x01\x02\x0e\x04\x00\x19\x900\x02\xc1\x1f\x02\xa5\x11\x00@\x00\xf0\x19\x12\xa5\x05\xc6\x01\x95\x01\x06\x00\xd9\x01\x9a\x01\x03\x83\x01\x11)\x03\x01\xc2\x03\x93\x03\xce\x014(x\x8d\x07\x04\xbc\x05\t\x01\x07\x11\x01)\x01\x00\xe8\x03\x1a\x17\x00\x01 \xe3\x04\x00\xde\x03\x00%\x00)\x00\xfc\x04\x00\xcd\x0b\x02\xbe\r\x02\x008\x00\x18\x03\x00\xd8\x02\x03{\x03\xcf\x01\x03\x05\r7\x017\x05\x07\x03\x1b;\x01\t\x0f\x03\x1b\x8d\x01\x01\x1b\x11\xd1\x01\x07\x1f+\x0b\x13\x1b\x05\x1b\x05\x01\x03\x0f\x03\x01\x1f\x03\x017\x03#\x03/\x03\x055\x05\x1f1\x03\t\x0b\xc3\x03K\x04\x01\x01A\x04\x03m\x15\t\x01\xd9\x10!\x1d!\x8b\x04\x00\xc4$\xd2\x01\x06\x84\x01\xa5!\x0242\x005\xef\x03\x01\xd4\x04\x011\x01+\x01\x9a<\x00.\x02\x01\x00\xcd,\x00 \x08\x07\x1f\x01\x00\xb8\x02\x00\xea\x16\x01\x04\n\x06\xf2\x05A\x01\x85\x057\x05\xeb(\x06\x01\x05\t\x01\r\x06\x01/\x13\x11{\x01)\r\x01\xcf\x04\x00\xca/\x00\xc9/\x00\xd6/\x03\x01\x02\x01\x03\x01\t*\n\x05\x04\x00\x0f\x18\x00 \x02\x00=\x0e\t\x04\x00\r\x04\x01\x0e\x00\x02\x01X\x04\x00\t(\n\x14\x00\x08\x04\x00\x0f\x16\x01\x13\x07\x13\x01\x07\'\x04\x01#\x1d\x17\x03\x19\r\x01\x00\xb6\x01\x00\x02\x01\x1e\x07\x06\x01\n\x04\x02\x04\x005,\x00\x02\x04\x01\x12\x00\xa4\x13\xcf>\x1b\x15\x07\x0f\x0b\x17;\x01\xf7\x01\xaa\x02\x01\xa7\x02\x02\xe4,\x00*\xae\x01\xb2\x04\x04\x01\x0f\xf5\x0b\x02\x00\xac\x06\x00\xf0\x07\x0cQ\x06\x00cM\x0e\xa8\x01\x016\x01\x1f\x0b\xd9\x08\x00\x02\x06\x05\x1c\x0b\x00\x1e\x01*(\x18\x13\xc0\x01b4\\XD\x1cNl\\:\x0c6\x8c\x01\xa4\x01\xeb\x02\x01\x033\x01\x03U\x01\x03e\x01\x03E\x04\x01\x07\x03\x01\xa9\x03\x02\x04\nC<\x00\n\t\x04\x00\x14\x00\x02\n\x02\x00.\x02\x18(\x00\n\x00\"\x00M0/(\x00L\x11\x1f\x01\x03\x13\x05\'\x04\x01O\x13\x01\x1d\x00\xba\x015\x02\x00\x08\x95\x02\x02>\x1aW:\x16\x01\x13\x03\x19\x1b\x01\x00\xd2\x02 \x1a^0XT@\x182\x88\x01\xa0\x01\xe3\x04\x96\x05!#\x97\x01\x08\x01\x07\x15\x1f)\x1f\x06\x01\x03\x1f\r\x04\x01\x05\x0b\x01\x05\x06\x01\x01\x07\x08\x01#\r\x01\x03\x01\x07\x01\t\x1d\r%\x01\x035\t\x15\x07\x13\x05\x04\x01\x0b\x15\x1d\x07\x05\r\t\x04\x01\x0b\x13\x1f5\x05\x01\x03\x04\x01\x03\x83\x01\x0f\x04\x01\x0f\x07\x01\x13\x03;\x01\x07\t\x04\x01I\x1d\x0b+\x03\x07Y\x03\x1d\t)\x1b\x0f\x01\x93\x01\x01\x13\x05\x01\t\x01\x07\x05\x01\x15\x01\x07\x03\x01\x03\x13\t\x017\t-\x01\x1d\x04\x07\x06\x01\x1b\x05\x01\x89\x01\x01\x97\x01\x01\xb5*\x00\xee6\x00\xb2\x04\x00\xb9\x07\x12\x04\x00\x0b\x022\x00\x14\x13%\x04\x01\'\x07\x01\x11}\x01\x93\x07\x02\x9d\x01\x02\xaf\x05\x00\xb1\x15\x01\x14\x80\x01\x00\xbe\x12\x02\x9e\x04\x02\x06\x00!\x04\x01\xed \x01!\x0b\x01\xe7\x02\xfa4\x06\x0c\x02\r\x00\x1c\xb2\x05\x02\x06\x00!\"\x00&\x00\x10\x02\x1c\x06\x01\x0e\x0f\x01\x02\x00\x14\x00\xe3\x1c\x04\x00%\x03\xf7\x1b\x00\x13\x00P\x90)\xed\x15\x96\x16\x00\xaf\x17C\x1aw|\x00R\x1e\x01\x04\x0b/\x03\x0b\x99\x01\x01\t\x17\x03\x0b`\x01\x0b\x17\xca\x02\xd6\x144\x01+\x00X\x00 \x00\x8c\x06\x93\x05\x04\x00\x83\x01\x12]\x00h\x01\x07\x0f\x90\x05\x00\x02\x00J\x008\x00\x08\x00\x08\x9a\x01\x01\x95\r\x02\x98\x01\x02\x009D\x1e\x00\x04\x02\x0c\x02\x18\x06Q\x00\xa3\x01\xb8\x0e\x03\xe2\x02\x02x\x00A\x01\x1c\x0e\x00\x16\x15\r\x17\x00<\x00\x0b\"\x10 \x0c\x03\x89\x01\x002\xc0\x01\x04 \x13\x05*\x00\x0c\x00\x12\x05\x1c\t\x11\x04\x0b\x17\x07\x19\x05\x01\x19\x05\x19\xbf\x01\x01\x05\x0f\x0b\x04\x05+\x01\x033\x01\x93\x01\x11\x9f\x04\x11\x81\x01\x95\x03\xa3\x02;\xb1\x02\x01\xa3\x03\x01\xe1\x03u\x03\x95\r\x01\xc3\x18\x06\x00\t\x9a@\tZp\x03\x04$\x1d\xdb\x16\x01\x00\x02\x00\x01\x00\xd6\x04\x01a\x01p\x10\x01\x04\x04\x00\t\x15+\xd6\x01\x00\x02\x06\x00\x13\x19\x00\x1ai\x01\x05\x03\x0bn\x02\x04\x00\xb9\x01\x0e\x03\x08\x04\x03\x04\x00\x08Z\x00\xd1\x0cz\xd0\x06\xa5-\x00\n>\x10\x00\x02V\x08\x03\x08P\x14\x9f\x02\xe6\x02\n\x03\x02 \x0c\x03/\xf6\x02\xed\x02\xaa\x04\x16\x13\x0c\x00\x14\x06\x00%\xdb\x02\xa4\x03\x9d\x03\xba\x03\x1e\x1bT\"\x1f8\x00\x9d\x04\xee\x04\xeb\x04\n\x02\x8e\x05\x87\x05\xc4\x03\xf7\x02\xe2\x04\x94\x02\x91\x02\x08\x04\x02\x98\x02\x95\x02\xea\x01\xeb\x01\x8c\x02\x9c\x02\x99\x02\x08j\x14\x87\x01\x95\x05\x84\t\x9d\x02\x06,\x82\x01\xa2\x01\x9f\x01\"\x00\x04\x1c\x87\x01\xa6\x01\xa3\x01$\x12\x02\x1e\x1d\x97\x02\xec\x03\xe9\x038\xf0\x03\xed\x03.\xbc\x019^\x0b\xf4\x03\xf1\x03\x04\n\xf8\x03\xf5\x03\xb0\x01,\xdd\x01\x02\x00\x95\x027\x91\x07\xd7\x04\xe3\x02\xa4\x17\xa7\x17\x00\xcc\x18\xab\x17\x03\xde\x17\xaf\x17\x07\xc6\x02\x02\xb6\x17\xb3\x17\x00\x1a\x02\n5\x9a\x18\xb7\x17\x0fOXSD\x00\x12l=d\x02\xd6\x17\xbb\x17\x17\x04\x08)j\x14\x8f\x01G\xa6\x03\xcf\x017\xa9\x01\x97\x05\x00\xfc\x03\"Pl\xbb\x01(\x12\x00.\x02\x12\x04\x00m\x02\xb0\x01\x06\x8a\x01\x9e\x02\x06b\x8e\x02\x06\xd1\x07\x00\xa7\x01\xd8\x01\x13$\x00\"\x00\x1c\x00\x0c\x00\x08\x05\x00\x8e\x01\x00N\x00\x14\x00\xfe\x04\x03\x01\x03\x89\x02\x03]\x03\x01\x03\xef\x01\r\x05\r\x037\x119\x03\x01\x03\x00#%\x04\x01\x0f\t\x1b\x13\r\x07\x1b\x01\r\x04\x03\x19\x01\x00\x04\x00L\x00\x02\x00\x0cD\x02\x00\x0c\x06\x00\x0f$\n\x000\x00J\x00\'\x06\x00\x01*\x06\x005>\x00\xab\x01H\x006\x84\x01\xc3\x02430\x05\x16(\'\x00(\x1b\x0b\x00\x85\x03\x00\xe4\x01\xa8\x01\x064D\x04\x0e9\x9e\x02\xcf\x06\x01,\x00\xea\x03\xb4\x02\xdd\x02\x00l\x1a\x00(\x1a\x00X\r\x00\x18\x00\x9f\x04\x03\x00\x02\x00d|\x00\t\x04>\x05@>\xfd\x01\x04:\x83\x01<:@\x03\x01\x07\x03\x01\r\x11\x0b\x05\r\x19\x0b\x055\x05\x01\x0b\x19\x0b\x01\x08\x0b\x1c\x9b\x02tml\xf0\x02\xed\x01\xd6\x01@\xfd\t\x01JI\x04DlZSR\x9e\r\x03\x01%\x1d\x05\x0b\x1b\x03\x0b\r\x0b\x03%\x13\r\x15\x01\x05\x13\x03\r\x06\x03\x9b\x01\x01\x05\x01+\x05\x03\x01\x03\x01C!\x0b\x01)!\t\x03\x01\xe9\x07\xd0\x01\x068\x08N\xec\x01\n\xd9\x04\xd2\x01<\x05\x01\x0c\x00\x93\x02\n )&\x1f\xda\x05\xec\x01\x00\x10\xbe\x01\x04\x01N\x03\x02tml`\x03\x06\x00\x82\x01\xa4\x012\xd5\x01\x94\x01\x01\x04X\x06\x05\xbc\x01\x14\x0b\x01\x00\x01\x03\xb7\x0b(\x00\x9e\x03\n\x04\x03\r\x01\xa0\x05\x00V\x16\x03\x02\x04\x00\x03\x01\x02\x04\x00\x9d\x01\x04\x1a\x00\xf7\x07\x00\xc4\r\x01\xcf\x16\x00d\x03\x00\n\x18\xf6\x01\'\x076\x0fF\x13\x0bH~\\0G\x17b\x1eZ\x1e(\x1eu(\x1b\x03B\x18\x12\x16\x0c\x14\x04.\x1f\t\x06b#\r\xb8\x02\x02\x00\x08\'\"\x1a+\x1e\x14\x02\x00\x01 \x08\x18/\x1a,\x08\x0e\r\xfd\x04\x9c\x05\x143\"\x04\x0e\x97\x01$<(\x1c7\x1e\x06\x1c0; \x01\x14t\x1c\r0t\xa5\x08\x89\x01\x93\x06\xf4\x010\x82\x02`\x02xH.uF\xbd\x01\xd4\x01\x00R\x00WL>\x8b\x01\xd3\x06\n\x00\x84\x02\xec\x01\xa2\x02\xe0\x04\xa9\x01\x01\xcb\x02\xa5\x05\xd2\x05\x03\x01\xb7\x01JR\x9b\x01F\x02\xce\x02\x01\xdf\x01\x00\xa8\x02\xb8\x05\xf5\x01\x03\x0f\x19\x0f\x03\'\x19\x05\x03\x08\x01\x01#\x04\x03\x04\x01\x01\xaf\x01\x04\x03\x1b\x00 \x00\x02\x00H\x14\x00\x0e\x02\x10FE\x0e\x04\x00\x1f\x020l4\x8a\x01\x16TB\x02\x01\xe9\x02.\x88\x01\x0eJ\xd3\x08\x04\x00%\xb0\x01\x04\x00\xb4\x01&\xd9\x01\xb8\x01*\x95\x03\xb4\x01\xa9\x08\x00\xc2\x02\x06r\x06\xe8\x03\x06j\x04\x02\x85\x02\x10\x02h\x02\xc2\x04\x16\xe4\x01\x06rE`G\\\x17X\xe1\x01\xc4\x02\x89\x02\xa6\x03\x89\x02\xa6\x02\x89\x02\xe6\x03\x89\x02\xe4\x02\x89\x02\xe2\x01\x02\xc4\x02\x99\x02(\x02\xba\x02\x89\x02\xa4\x02\x89\x02\xce\x01\x89\x01\xa4\x02\x89\x02\x86\x013\x88\x03\x1a\x00\n\x0e\x0c\n\x02\x00\x01\x18!\xdb\x02\x00\xe8\x06\x89\x03\xec\t\xf9\x02\xfa\x03\xf9\x02\xb8\x03\xf9\x02\xa2\x03\x89\x03\x9a\x03\xf9\x02\x96\x03\xf9\x02\xca\x04\xf9\x02\xb6\x01\x92\x02\xe1\x01\x9a\x02\xf1\x01\xfe\x01\x12\x02\x00\x01\x8b\x02\xf8\x02\xe1\x01\xe8\x02\x02\x031P\x1e\n\xbe\x012\x02\xb3\x02\xbd\x02\xec\x04\xc5\x04\xbc\x05\xc5\x04\xe6\x04\xc5\x04\xc6\x05\xc5\x04\'\x08\x02\x00\x0eH\xc4\t\xdb\x04\xa4\x03\xd3\x02\x92\x05\xdb\x04\xc4\x05\xdb\x048\x14\x0e\x8a\x05\xcf\x04\x84\x10\xcf\x04\xcb\"\x00\xba\x02\x00\x08\x08\x00\x05\x1c\x00\x1c\x06\x017\x08\x00\x94\x01XDG@C<\x93\x08\xaa\x05\x16\xb5\x04\x00\xc0\x04\x01\x07\x13\xf6\x01\x00\xb5\x07\x05\x10\x06\xb6\x08\x00\x06\x05\x04\x00\x010\x04\x03\x03\x01\x00\x04\x03;\x00\xed\x1d\xaa\x13\xdb\x19\x01\xe6\t\x02\x00\xa9\x05N\xd0\x01F:*^\xa6\t\x87\x08\x99\x01\x03Y\x03%\x035\x03A\x03\xcb\x01\x03I\x04\x03k\x01\x03\x01\xc0\t\xbc\x1a\x03\x85\x01\x03\x8b\x01\x03e\x03\xc5\x01\x03\x91\x01\x03o\x03\x87\x01\x03\xf5\x01\x03a\x01\x03\x01K\x83\x01\x15\x05\x15\x03\x07\x01e\x01/\x0c\x05\x03\x01\x99\t\x12\xf4\x07.\x00+\x01\x00\x02\x00&\x0f\x02\x04\x00\x01D\x04\x0b3\x00C\x00\x04\x03\x00\x80\x01\x00\x12\x00\x18\x00\xc6\x02\x1c\x02\x01\x14\x00\xa5\x02\x00.\x00\x83\x02\xfa\x01\x11!\x04\x0b\r\x05\x0b\x07\x01\x18\x00&\x06\x00\r\x0e\x0c\x0b\r\x13\x11\r\x04\x03\x11\x01Q\x84\x02\x89\x0f\xf8\x0f\x99\x01\x0b\x01\x0f\x06\x00\x15dm0\x00\x8c\x01\x00\xe7\x02\x80\x03\x81\x02s\x82\x01\x04\x03\r\x01Y\x19\x03\x07\xaa\x01\n\x04\x03\t\x01NM\xec\x01\x0b\x04\x1f\x04\x03\t\x01#b\xad\x1d\xe4\x11\x04\x00\x03\x08\x9e\r\x04\x01\x17\x05\x01\x03\x01\x03\x01\x03\x15\'\x15\x05\xa5\x0c\x04\x01)\x05\xe5\x05\x01O\x01\xa9\x0b\x00\xfc\x11\x11\x04\xd7\x08\x03\x9e\x01:Vd2&dH\n\x04 W\n:N\xd6\x01`B\xa2\x014$,z\x0eN\x0ehH@T\x06\nL,\n\x88\x01d\nR\x0e\xd8\x02\xf8\x01\x18\x0e\xd8\x02\x80\x03\x02\xd5\x1d6R`.\"`D\x06\x04\x1co\x066J\xd2\x01\\>\x9e\x010 (v\nJ\ndD<P\x02\x06H(\x06\x84\x01jN\n\xd4\x02\xf4\x01\x14\n\xd4\x02\x97#9:\x0c\x00\xd8\x01\x00L\x00\xa6\x04\x00\xb2\x01\x00\x18\x00\x1c\x00\x18\x00r\x00\x86\t\x00\xd5\x11\n\x00\x19\xf8\x1c:\x1c\x06\xf0\x01n\x06\xc6\x02\xdb#\x02\x90\x06\xc4\x1c\x0c\x04\x01\x01\x06\x04\x00\r.\x01\x18\x01\x11\x03+\x04\x05\x01\xd2\r\x04\x00E\x06\x07\x9b\r\x05\xe9\x01\x01\x05;\x05\x0b\x05\x1f\x03\xeb\x01\x03\x01\x03\x17\x035\x03\xd1\x07\x01\x8d\x14\x05\x03\x05q\x01\x05\x03\x01\x05\x01[\x04\x01\x19\r\x019\x00\xf4\x0e\x00\xa5\x0c\x00\xcd\x02\x00\x06\x01\x16\x04\x00#\x01\x00\x10\x02T\x17\x01\x07\x01\x0b\x00\x0c\x01\x08\x00\n\x00\x12\x04\x00G8\x0f\x1a\x05\x84\x01\x00\x02\x01 \x05H\t\x0c\x00*4\x00R\x009\x00fB\x98\x01\x008\x00\xcf\x01\x03\x00\x8a\x05\xd4\x02\x02\x04\x03\x01\x06\x00\x0b\xd4\x03\xbc\x03\xbb\x03\x12\x11\x12\x04\x001\x01\x03\x06\x11\x92\x01\x83\x02\x00Z\x10\x01\x06\x05\x12\x00\xf4\x01\x17\x11\x01\x1d\x05\x0b\x01\xb4\x03\x01\xa1\x08\x04\x01\r\x86\x01\x02\x00\"\x0f\xc4\x04\x89\x01\x04\x03\x1d\xb4\x03\x01\xd1\x10\x00\x0c\x00\xae\x01\x00\x0c\x00\xd0\x06\x0f\x01\xcc \xdb\x04\x04\x01\x01\x07\x04)\t\x17%\x17\x19!\x04\x01\x03\x15\x1f\x04\x01\x0b%\x03+%\x05\x1d\x04\x19\t\x01\x193\x05\t\x04\x03\x013\x04\x01%\x1d\x19\r\x11\x01u\x19\x05\x01]\x03q\x03)!/\x05\t%\x04\x03\x07?\x03\x01O\x04\x03\x015\x04\x03\x01;\x04\x03\x01[\x04\x03\x01K\x04\x03\x01\x01\x04\x03\x01q\x04\x03\x01i\x04\x03\x01\x1f\x04\x03\x13\x17\x07\x03#\x07\x03\x91\x01\x07\x031\x04\x03\x01S\x04\x03\x01\xc9\x01\x04\x03\x013\x04\x03\t-\x03\x1d\x03\x17\x04\x03\x04#\x1b\x07\x17\x03\x01A\x03\x01\'\x11\x1d\x03-\x15\x1b\x06\x03\x17\t\x01\x03\x01\x1d\x05\x03\x01\x03\x01%\x19\x04\x05\x03\x8f\x01\x03\x06\x01\x0b#\x01\x1d-\x01\xc7\x02\x04\x0b\x05/!3\x04\x01\x17\x1bWq\x01Y3\x01\t\xb7\x01\x03\x01\xbf\x01\x04\x01u\x1b\x1d7\x11\x07\x01w\xc2\x02x\xee\x03p\x14j\xc4\x04\xfa\x01(\x9c\x01\x1c\xdc\x01Z\xf8\x01&.\x1c\x1aX\x06\\t\xda\x03\xe2\x06\x80\x01>(\x10\x1c\xd0\x014\xb2\x018\x8a\x01Rv \x80\x01B\xde\x04d\"hNF\xb4\x0b\xf9\x0b\x14\x00\xc9\r\x02\x0c\x04\x00\x03\x02\x08\x04\x01\x0b\x03\x01\x0b\xb2\x03\x00\xe3\x02\x06\x00\x1f\x12\x05\x08\x00[\x01\xc2\x05\x00\x06\x05\x00\x08\x06\n\x00\xb3\x14\x04\x02!\x18\x83\x01\x00\xf9\x01\x18\x00\xaa\x02\x15\x0b\x9a\x01\x01\x07\x17\x03\xe7\x03\x18\x12\x06\x00\x15$\x01!\x11\x17\x80\x03\x00\x0c\x06\x01\xa3\x02\x06\x00\tVUn\x92\x01\x8d\x01\x04\x01\x01U\x04\x17\x03\x90\x02\x01\x04\x03\x04\x0bI\xd1\x08\x06\x00$V\x14@\xa9\x01\x08\x00\x18\x00D\x00\x97\x0b\x01\\\x01\x00v\x01X\x00\x1e\x00:\x01$\x00\x02\x032\x01\xd6\x02\x01\x97\x07\x16\x04\x00\r\xd9\x01\x16\x00\xba\x03\x16\x00\xcf\x03\x06\x00\x0b\xd0\x03\x00\xcf\x03\x00$\x16\x04\x007\xe6\x01\x00\xa0\x02\x01\x15\x13\xbd\x01\x013\x13\xc7\x01\t\x15\x01!\x13\x01\x87\x01\x82\x03\xba\x03\xbf\x06\xfe\x02\xb6\x03\xf7\x06\x03\x01E\xb8\x18\x04\x03\x05?\x03S\x04\x03\t\x15\x01\x0b\x01\r\x04\x03\t%\x01\x03\x01\r\x04\x03\x01[\x04\x03\x01K\x04\x03\x01\x01\x04\x03\x01i\x06\x03\x01\x1f\x04\x03\x04\x01\x05\x03\x01\r\x08\x03\x07\x01\x0b\x01\x0f\x06\x03\x11\t\x01\x03\x01\x03\x01\x0b\x01k\x06\x03\x011\x04\x03\x06\x01\x03\x17\t\x04\x01\x07\x03\x01\t\x17\x04\x03\x111\x01\x0b\x017\x01\x0b\x01?\x06\x03\x03\x0f-\x04\x03\x15-\x03\x1d\x03\x17\x03E\x03\x17\x01\x0b\x04\x01\x05\x13\x1d\x03\x04\x01\x19\r\x0b\x05\x13\x17\x01\x11\x01\x07\x01\x0b\x13\x1b\x04\x03\x0f\x01G\x03\x01\x13\x1b\x00\xc4\x11\x04\x03\x01{\x04\x03\r\x01\xf1\x0b\x8c\x17\x00\xdc\x01\xf1\x1f\x02\x06\x00\x1f\xc4\x1c5\x05\x0b\x1b\x05\x03\x055\x1f\x05\x03\x05\x1b\x0f\x17\x06\x05i\r\x03\x01\x03\x01\xab!\x00\x02\xe4\tV:\x00\x06\x04\x03\x12\x00\x1e\x013@\x1e\x02\x08\x02\x04\x03\x18\x06\x0e\x00\x12\x01\x06\x00k\x92\x0bv\x00K\x002\x00L\x15\x1f\x15\x1b\x15\'\x01\x80\x05\x02\x04\x00\x0f\xd7\x13\xe9\x05x\xee\x03\x80\x11\xdc\x07\xc8\x08\xc7(\x04H?\x86\x03\xbe\x03\xec\x01\x06\x9e\x01>Vl\nhP\n$(\n:R\xda\x01dB\xa6\x018,0~\x12Z\nlLD`\x04\n\x1fL8\n\x8c\x01p\x06R\x12\xdc\x02\xfe\x01\x01\x0e\x0b\x00\x02\x00\x04\x0c\x0b\xb2\x02\x01\x05\x8e\x01\x01\x07\x04\x007,\x00\n$v\x01\x00\x08\x03.\x00\xe1\x1b\x0c\x16\x00\x02\x1a\x1d\x00\x87\r,\xe8\r\x02\x00\x0c\x0b\x01\x00\x04\x02/\x00\x14\x00&%\x13\x01\x80\x18\x02\x00\x04\x18$\x02\x01#,\xc7\x1e|\xe0\x14\x02\x08\xf5\x01\xfa\x01\x04\x03\x04\x01\x04\x0b\'\x03\t\x19\x03\x07\x01i\x0b%\x03\t!\x01\x92\x03\x02 \x03\x01\x00\x06\x06\x00g\"$!\x00\x01\x0e\xb5\x02\x03\x07\xe7\x198\x00\x10R\x03|tN\"6>\x82\x02>\xce\x01J>,\x80\x01XHDV\xe2\x10\x11\r\x0b\x15\x05\x19\x019\x0f\x13\x1b\x05\x01%\x07\x13\x0b\x1f\x05\x04\x01\x1bW\r\x03\x01%\x01\x15W\x01?#\x01;\x0b\x04\t\x0f%\x07\x05\x01\r\x07\x13\x07\x04\x03\r\x01\xaf\x02\x07S\x07\x05\x07\x04\x03\x06\x01\x03!I\x08\x01\x05\x0b1\x15\x04\x013\x15\x17\x01\x05\x01\x0b\x01!1\x01\t\x03\x11\x01\x19\x01\xb1\x01\x05\x11\x03\x1d\x0b\r\x1b\xaf\x0c\x02\n\x00\x13\x02\xd4\x1bO\x03\x01\x1b\t)\x037\x06\x03iC\x03\x05M\x03{\x03\'\x039\x03E\x03\xc9\x01\x039\x03\xfd\x01\x039\x031\x03\x1d\x03\x07A\x03o\x03\x05\xb1\x11\x00=>\nB\xec!\x0e\r\xdb\x04@\x00\xa3\x0e\x02\x04\x0c$\x01!\x0b\x03\x98\x13\x04\x06\x05\x03\x01\xd5\x1f\x04\x02!\x08\t\xe0\x03\x00\x0e\x00\xeb\x03\n\tP\rH\x01\x00:$\x01\x04\x00%\n\x03\x0cP\x01,\x03\x10B&\x04\x00.\x11\x00X\x14\x11\x00\x04\x04M\xd4\x01\xc5\x01\x02\x01\x00\x02\x01\r\x00\x0e*\x1d\x1e\x13\tf\x15m\xa2\x01a\x000\x008\x0e\x00\x0e\x02>\x002\x15\x002\x00E\n\xe4#\xf9\x01\x04\x03\x0b\x19\x01\xd1\x02\x95\x01\xe1\r\r\x04\x01\x17\xd5\x04\x05U\x03=\x03W\xab\x01+\x05\x01A\x04\x01\x01\x05\x04\x01\t\x0b\x05\x01\x15\x01\x04\x03\x19\x01\x1d\x01\t\x1b\x11\x05\x013\x05\x07!\x01\x04\r\x05\x055\x91\x03\x06\x01\x077\t\'\x0f\x04\x03\x07\x05\x07=\x01\x04\rG\x05)\x05\x01\x03#\x05\x01\x03\x05\t\x0f\x0b\r\x01\x03\x01\x03S\x1b\x03#\x01\x15+\x0f\'M\x07\x03\x05!\x017EA\x04\x01\x01\xd7\x06\x06\x00\x1f\xd4\r\x80\x01\x18\x00.#\"\x01,+\x1f\t\x17{\x03\xd3\r\x04\x00\x1d\x06\xb0\x0f$\x0e\x03m\x00\n$\x00\x16\x12\x00P\x10\x06\x00\x130\x00?$T\x00H=\t\x13\x04\t\x11\x01\x05\x01!\r\x15\x13;\x03\x04\r\x11\x07%\x07\xf5\x0e\x00\x9c\x11\x14\x00\x1c\x04\x06=\x05(\x00\x16\x00\x18\x17\x15\'\x05\x1b\x11\x01\x9b\x11\x00\xc0\x01P\xb8\x01\xea\x0e\xc8\x02\x02\x1a\xa2\x07\x02H\x06(\x02\x04\x02\x10\x06\x04\x11\x1c\".\x04\x1e\"(\x06B\x04\x04\t\x18\x04\x1e\x04.\x04\x04\x014\x04\x04\x01\xca\x01\x04\x04\x01T\x04\x04\x132\x08\x04\x92\x01\x08\x04$\x08\x04\x18\x04\x04\x01 \x04\x04\x01j\x04\x04\x01r\x04\x04\x01\x02\x04\x04\x01L\x04\x04\x01\\\x04\x04\x01<\x04\x04\x016\x04\x04\x01P\x04\x02\x03\x04@\x04\x04\x01&\x04\x02\r\xe0\x08\x875\x02\xa4\x128\t&\x04\x00\t#\x01\x006\x05\x04\x00\x1bD\x00\x14\x00z\x04 \xb0\n\x02\x04\x1c\xf4\x04\x05\x02\n\x00\x0f\x88\x03\x00\xee\x04\xed\x04\x00\x0c\x03\x0b\x04\x00\x1f\x01\x18\x08*\x04*\x08c\x03*.\x03\x0c.\xd7\n\x06\x04\x00\x05>\x00\x1a\x06\x00\x11\x02\n\x00\x02\xf7\x1e\x00\x0e\x00\x10\x04\x00=\x01\x02\x00\x1d\x00\x9a\x05\x00\x0f\x01\xc7\x01\x9f\x03L\x8c\x01Ln\"\x1c\x00\xb0\x03\x04\x03\x81\x01\x01\x9d\x02\r\x15\x01\xa5\x02\x00\xaa\x1e\xbb\x10\x04\x00\x07\xba\x0b\x88\x01\xef\x1a-\x04\x03;\x0b)\x03\x01\x00\xcc\x03\x91\x03\x00\x12\x00\x08\x03\x12\x00\xcc\x02\x00\x08\x00\xa8\t\x0b\x19\x1dc\x01=\x03)7\x17-\x06\x01\x13%\x0b=\x19\x83\x01\x13\'\x01\x0f\t\x04\x07\x04\x011D\x004w\x00\x1c\x00\x9e\x03\x00\x96\x01\x00r\x00\xc0\x0eX\xd8\x02\xfc\x01\x1e\xd8\x02\xa7\x08\x00:\x01\x00\x16\x06\x001\xe8\x10\xe0\x01\x95\'d6`<\"\xf3\x012\\8\x1e\xe7\x01.X4\x1a\xb0\x11\x06\x03\x01W\n4\x06\x00%3&\x03#\x01\x03\xc3\x02\n\x07\x00\x080\x00\x0c\x00\x10\x00\xce\x06\x90\x02\x06\x00\x05\x02\x06\x05\x04\x01\x03\x04h\x06\x00\x0b*\x01\xb8\x0e\x03\xdb\x01\x03\x04\x01\x07G\x07\'\x05\x04\x01\x0b\x1fS#\t+/\x04\x03\x057\x0f\x87\x02\x04\x03\x05\x05\x07\x0b\x04\x03\x04\x01\r\x039\x05\x0b\x01i/\x06\x03\x06\x01\x04\x03\x07\x07\x01\x0b\t\x06\x01\x04!\x07\x01\x0f9W\x04\x01\x03\x0f\x1b\x06\x03\x01\x01\x04\x03\x07\x01\x03\x077\x04\x03\x1d\x01\x03\t\x8b\x01\x05\'\x01g\x01\xe9\x01\x03\x11\x0b\x01+\x04\x01)\xb5\x03\x01\xc1\x02\x01!\x03\x0b\x03\x07!\r\t\xf5\x05\xa5\x02!O!s!\x1b\x03\x08\x01\x03\x0b1\x04\x01\x01\x03\x04\x01\x11;\x01\x07\x03?\x05)\tA\x04\x01\'!\x1b\x03\x11\x193W-_\t\x83\x03\x01\x07\x01\xc9\x02\x03\r\x03\x119\x04\x00!\x04\xd6!\x83\x1b2\xbe\x01&rP\xb8\x01`\x1c<:0\xce\x01\xa0\x01\x02\x08\x00G\x01\xed\x02\xca\x01\xfb\x08.\xba\x01\"nL\xb4\x01\\\x1886\xd9\x062\xbe\x01&rP\xb8\x01`\x1c<:0\xce\x01\xa0\x01\x02\x00\x9e\x02\x97\x02\x00\x1c\x00!\x04\x00Af\x00\x90\x01\x8f\x01<\x00$\x15G\x00\x10\x00\x0e\x006\x01\r\x00\x1e\x14\x11\x00\x04\x03(\x96\x0c\x01\x1d\x0f-\x1d\xb1\x02\x03\x04\x01[\x11\r\x01\x19\x03+\r\x95\x01\t\x01\t)]\x11\x01Q\t\x01\t\x1dO\xa5\x01[1\x0f\t\x1f\x03O\x03\x01\'\x01\x17\x05\x07\x1d\x07\x05\t\x05\x01/\r\x05\x15\x04\x05\r\x01Q\x05\x0f\x01\x05\x0f\x04\x05!\x0f\x03\x05\x01\x0fS!+\x0f\x03+\x03\x05\r\t\x01\x11\x06\x03\x04\x01\x15\x05)\x03\x0f\x07\x03\x05\x01)\x01\'\x04\x03\x04\x01\x01\x0b\x04\x01\x0f\x1b\x03\x0b\x03\x01\x0f\x19;\x06\x03\x07\x01E\x03\x05\x04\x01\x05\x0f3\x1b\x04\x03\x05\x05\x01\x15\x04\x03\x07\x05\xb3\x01\x03\x05\x04\x0f#\x07\x033\x0f\x05\x03=\'\x01\x07\x01\x03\x01\'1\x0fG\x05\x04\x01\x15\x1d\x03i\x03G\x03\x87\x01\x03\x1b\r\x01\x04\r\t\x03\x01\x1d\x00\xc4\x12\n\x00U\x16\x05&\r\x0e\x03\x16\"\x00@\x00B\x02\x00\xb3\x03\x14\x00\x10\x02\x04\x05\x00(\x10\x00\x08\x058$\x12\xb7\x01T\x08ZU\x01f\r\x11\x03\x01\xba\x03\x1e\x04\x00?\x02\n\x02\x00\x1c\x10\x06 \x01\x00\n\x00\x85\x01\x02\x04\x00\x0e\x00\x1e\x01\x9e\x02\x02\x00$#\x01M\x05\x01\x17\t\x1d\x04\x01\x03\x11\x1b\x06\x01\r\x05\x01\x1d)\x1b\r\x03\x04\x01\x1d#\x1d\x19%!\x15\t\x17\x0f\xc5\x01\x05\x01!\x1d\x05\x04\x01\x1b\x0f\x01%\x0f\t\x13\xfd\x10\x00\xc0\x18\x00,\x08\x07\x0f\x06\x00\x1f\x1c\x01\x00\x1e\x00x\xfa\x01\x8c\x01t\x96\x01\xca\x01j\x90\x01\x8a\x01\xbf\n\x02\x04\x00S\x01\x02\x00\x02 \x00\xdd\x01PvV\xd0\x01F:\xeb\x04LrR\xcc\x01B6\x91\x03V\xd0\x01F:\"\x08\x00\x1c\x00\x9a\x01\xb5\x01\xcf\x03R\xcc\x01B6\x93\x02\x00\x89\x01\x18\x11\x04\x00W\xb4\x014V\xd8\x01F:&\x02\x00\x02\xd9\x03\x02\x00\xe8\x03\x03\xe5\x03*\x00\x05\x01 \x18\x00\x18\x00H\x00GV\x06\x00L\x00\xcd\x02\x02\x00\x1a\x00\xf6\x02\n\x00\xae\x04\x01|\x04\x031\xd7\x04\x02\x00\x02\x00U\x02\x00\x96\x06!\x035\x03A\x03\x89\x01\x153\x03\x1b\x15\x1b\xc9\x02\x00\x08\x04\x00+\x0e\x00\xad\x12$!\x00\xfe\x03\x01\x00\x02F\x00\x02\xa4\x02\x00\x02+\x00\x02D(%\x06\x00a0 \x1d\x00\x9a\x03\x00\x02F\x00\x02\xbd\n(%\x00\x9b\x02\x00\x88\x01\x00z\x00\xfa\x07\xb1\x0b\x9a\x01:R~\x06zL\x06 $\x066>\x82\x02>\xce\x01J>,z\x0eV\x06h^V\\\x04\x06\x1bH4\x06\x84\x01f\x02\x00\x02\x088\x00\x0c*\x12\x04\x00\'\\\x01\x00\x01\x00:\x00\xcd\x01\xec\x01\x06\x03\x0e\r\"\x00\x10\x0f\xc7\x01\xf0\x01\x02\x04\x00E\x05\x04\x16\x01\x02\x0c\t\x05T\x00 \x1f\x80\x01\x07\r\x00\x14\x06\x05:\x89\x02\x00\x0f\x06\x07(\x00\xa8\x03\x02\n,\x00\x02\x00\x04\x06\x01\x13+\t\x01\x00\x85 \x16\x0c\n\x00(\x08\x00\x1b(\x10\x00\x18\x00\xa5\x01\x00\xfc\x01\x00%\x01\t\x13#\x04\x00=\xa4\x01\x15\x0b\x00\x1c\x00\x1a\xab\x02\x05\x9c\x01\x00\xd4\x02[\x00\x06\x00\xaf\x01\x10\x05\x18\x00\x17\xc4\x03*\x00\x02T\x00$\x06\x01\x04\x00/\n\t\x03\x0b5\x00\xe7\x03\x00F\x05\x10\x00E>N\xb4\x01\xc2\x01Z\x0e\x00:\x00\xa5\x01\x0b\x04\x01\t\x1b\x03+%+\x08\x03Y\x01\x8f\x03\x01\x0f\x01%\x01\x11\x1b\x07\x01q\x03\x15\x01\x9c\x06\x1b\x07:\x03\x01\x8e\x18&\x00:\xf5\x04\x12\x84\x03\x03_\x03q\x03{\x03\x02\x01\x82\x01\x00|r`\x9d\x02\x00\x93\x12\x04\x02C\x01\xc4\x156\x18\x8b\x16\x04\x90\x01\x93\x01\x8c\x02\x00y\x9f\x0e\x00\x04\x03\xfe\r\x02\x9c\x13{`\x01\x00.-<\x0e\r!\x01\t\r\x1d\x01\x80\x01\x04\x01\x0f\x92\x02q)\x19/\x01\x9d\x02\x06\x04\x00#0\x1a*rqv\x9a\x01v\x8e\x03\x175\x01\x05\x01\x8f\x01\x01\xd1\x02\x02\x04\x00U\x06\x1av\n:\x1c\x06\xf4\x01.\xf0\x01f\x01\xed\x19.\x00\x16;\x01\"\x01\x99\x02\x02\xbe\x1c\x02\xd5\x05\x03\x01Y6\x18\xf0\x01&\xf0\x01\x03\x91\x02\x03\xeb\x01M\x01\x03\x01\xfe\x01\x8f\x03\x06\x00)\xe2\x01V\xfb#\x02\x00\x08\x148 k\x00J\x00\xca% \x00\x18\xa9\x02\x02\x08\x01\x04\x00\x04\x01\x17\x08\x07\x14\x03\x04\x01\x04\x05\x00@\x00\x08\x04\x00\x07[\x02\x00\x1a\x04\x00\x01\x0e\x04\x00\t\n\x0e?\xde\x01\x08\x04\x00\x05\x12\x00\x9d\x01\x04\x013\x07\r\x01\x07\r\x19\r\x01\x9e\x01\x01\x11\x07\x81\x01\x02(\x08\x07\x08\x05\x0c\n\x0e\x02\x01\x90\x01\x08\x04\x00\x05-0\x8d\x01\x04\x01\x17\x07\r\x01\x07\x0b\x01\'\x01\xaa\x01\x13\x07\x01\x04\x00\x06\x02\x11\x0c\x02\x1065\x01\r\x01\x0b\x06\x01\t%\t\x07?\x0f\x04\x01-\xbd\x19\x04\x01\x02\x01\x02\x01\x06\x00\xd8\x01XBZ\x8f\x04\x00\x02\xb6\x1b\x00,\x02\x01\xab\x014\x04\x00\x04\x04\x04\x01\'\x0e\x89#\x00\xc6\x01\x00G\xc8\x01\xf1\x01\x01\xbe\x01\x01\xeb\x03\x00\x02\xbc\x01\xbe\x07\xb2&\x02\x00\x02\x04\x00\x11\x02\x00\x01\x08\x07\x1a\x04\x03\x06\x04\x02\x04\x00\x05\x91\x19\x0b\x81\r\x04\x03\x04\x01\x06\r\x17\x01\xb5\x07\x02\x004\xda\x01Z\x1cr\"X\x18\x04\x02\t4\x0c\"\x0c0\x04\x0cI\xf8\x06\xf7\x06\x0c\xa8\x04\xf1\x02\x01\x03%\x01\x83\x01\x01\xc6\x02\x02\x00.\x00\x16\x00$\x06D\x06x\x16\x06\x9a\x01ZF`\nHRv\x06rLr\x04\x06+ $\x066@\xd6\x01`>\xa2\x014(,v~\x0eV\x06hH@\x06\\\x04\x06KH4\x06\x84\x01zh\xdb\x19\x01 \x00\x1b\xca\x01\x11\x03s\x03\x01\xa0\x03\x03[\x03A\x03U\x03\x95\x01\x03\x01\x06DRj\x06nHj\x02\x06\x04\x1cu\x066<\xd2\x01\\>\x9e\x010 (rz\nJ\ndD4\nP\x02\x06H(\x06\x80\x01vd\xb7\x13\x03\n\x00\x1e\x08\x00\x05\x00\x86\x01M\x00B\xa6\x02\x81\x02\x00\xf2\x01\x01\xba\x0b\xaa\x14\x1c\x06\x05\x15\x05\xdd\x01\x03\x01\x91\r\x00\x0b\x04\x00\x19\x02\x01\x03\x01G\x12\x9b .\x00\x9e\x07\x06\x00\x1c\x06\x00\x15\x18\x00\xee\x1d\x0c\x02\x03\x05\x039\x02\x01\x04\x02\x058\x01q\x0e\x00\x03\x06\x01\x06\x00\x01\x01\x04\x00\x17\xd3\x02\xf2\x03\x07\x00\x1e\xc1\'\xce\"\x01\x00\xf6\x03\x02\x1a\x04\x00/\x03\x00\x15\"\x0c\x18\x04\'\x00r\x13\x01\x00\x02\x00\x08\x07\x00+,\x00\x10\x03\x07\x04\x03a\x01\x00\x02\x0c\xc8\x01+\x03)\x03\x01\xcd$\n\x03*\x95\x04H\x12\x02\xaa!h\r,\x12\x0b6\x8b\x02\x0c\x1bh\n\\\n\xe1 \n{\x02\x00\x0c\xce\x19\x01w\x01\x90\x1c\x02\x0e\x00\x1e\x1d\r\x04\x01\x0f\xb7\x08\x84\x01\xcd\x03\x01\x07\x0b\x01\x03\x04\x01]\x98\x05\x00\xbf\x02\x10\x0f1\x80\x01\x00\x02\x01\x00\x0c\x93&\xc0\x05\xac\x02\x18D\xba\x01\x9c\x01\x1c\xdc\x01Z\xe8\x02\x1a^\xfc\x0c\x80\x01>8\x1c\xd0\x01N\xc2\x01R\xe4\x02v \x80\x01\xb6\x05\x86\x01h\x88\x01\xb4\x0b\xb5\x1a \x00\xeb*\x04\x01\x07O\x01\x0f\x13\x04\x03\x06\x00)\x1a\x00\x19(\x04\x03\x01\x19\x0b\x00,\x00\x03:\x00*\x00e\xb6\x01h\x01\x04\x00Y5\x00\x14\x00v\x00Z\x06\x08\x02\x8c\x01\x97\x04\x00\xba\x03\x00\xde\x02\x00\xb1\x06\x04\x82\x02\x00\xa0\x01\x00\xdc\x01\x00\x8a\x01\x00\xec\x01J4\xd0\x01\xc8\x01R\"\x06\xb2\x01P\x8e\x01\x9a\x01\xd0\x01f\x8c\x01\x94\x010\xab\x10\x04\x01G\xe1\x06\x00\x94\x17/\x93\x01\x8b\x01e\xcf\x01\x99\x01\x8d\x01O\xb1\x01\x05!Q\xc7\x01\xcf\x013I\x01\xe5\x06\x00\xb0\x02\x05\xdc\x01\x00\xee\x01\x00\"\xec\x08\x80\x06\tYc\r\x05\x04\t\r\x01\x07\x05;\x1d!\t\x04\x03\x13-\t\x13\x05)%\x03%\x13\r\x04\x05\x06\x03\t\x01)%\x01\xd1\x07\x04.\x1d\x8a\x02\x94\x01\x14\xe0\x01\x83\x03\x03\xfa\x01\x03\xd3\x01\x00\x9f\x02\x00\xdf\x03\x00\x96\x0f\x04\x01O\x89\x04\x00\x04\x00\xe2\x02\x00\xdb\x07\r\x07\x03\x0f\x03\x01\xb7\x02\x03\x08\x82\x02\xb5\x02\x01\n\x00\x9c\x02\x00\x0c\x00\x86\x01\x00\x0c\x005\x94\x01\x93\x01\x92\x01\x99\x04\n\t\x03\x01\x98\x02\x02\x08\x00\x03\x06\x05\n\x00\x0b\x01\x97\x02\xb6\x07\x00\x18\x02\x04\x00\'\x01\x14\n\x1a\x87\x10\x00\xd0-\x00\xb1\x18\x00\xd8\x0e\x01\xbb\x1b\xbe\x01VUV\x00\x01\xc0\x18\x04\x01\x0b\x02\x01\xeb\x04\x03\x17\x03\x04\x01\x05\xa9\n\x03\x1b\x04\x03\ry\r\x05C/-\xc9\x0b\x04\x01\x13\n\xf2\x05\x18\x05\x0e\x02\x01\x00\x02\x00\x04\x04\x0b\xf2\x1d\x01\x05\x01\xf1\x1d\x0c\x04\x00\x01\xff\x0c\x04\x00\x15\xda\x01\x1c\x00\n\x00\\\x01\x00 \x01\x0c\x06\x00\x1dr\x00\x08\x07K\x0b\x19\x03\x07\x1dG\x11\t\x1b\xd9\x01\x04\x00!\xbe \x04\x01\x02\x01\x06\x00B\x02\x00\x08\x07\x01A\x05\x01\xbd \x06\x00\x11\xc0 \x01W\x00\x01\xa8\x01U\x01K\x04\x01\r\xe3\x1f\x00\xacC\x12N\xa1@\x9c\x07\x0e\x83\x01\x0f\x02\x9c\x02\x00\x02\x01\x80\x1d\x1e\x19\x04\x00=\x08\x03\x16\x03\x18\x03\x0c\x0b\x04\x01\x06\x07\x01\x00\x14\x03\n\x03\xe3\x01R\x00y\x01\x06\x00\x16\x01\xbe\x01\x0b\x05\x0f\x04\x11\x04\x03\x19\x01+9\x07\x13\x07S\x83\x01\x05\x01\xc1\x19\x0f\x87\x06\x04\x00\r\x04\xbe!\x00\xcc\x01z\x04\x01\x04\x00\x1d\x98\x01\x03D\x03\xc9\x01\x02\xf6\x08\x0b\x1b\x0b\xf2\x01\x03\x00D\x0b\x04\x00+7\x04\x01\x08\x07\x02\x01\x06\x00\x16\x00\x10\x07\x1a\x02\x00\x04\x80\x01}\x82\x01\x83\x01\x02\x06\x009F\x009\x0b\x00\x04\x03\x00\x01\x00\x04\x03\x04\x03\n\x07\x00\x04\x03\x00\x08~\x15\x18\x00\n\x00\x06\x03\x04\x00\x13,\x00$\x01\x08\x02\x00&\x01\"\x04\x00\x11\x02\x00\x1a \xb5\r\x01\x9a\x03\x00\x02\x04\x00\x07\x06\x05\x06\x05\x04\x00\x07\x10\x01\n\x00\x06\x01\x05\x02\x00\x88\n\x08\x01-\x19\x05\x03\x15\x01\x1b\x05\x01!\x01\t\x05\x19+\x01\t\x11\x05\x0f!5\x01\x05\x08\x01\x07\x19\x07\x15\x05\x04\x011\xbd\x01\t\x19\t\xc1\x04\x01\x17\x01\x03\r\x01\xcf\x01\x01=\x01\x89\x01\x1d\r\x01\t\x01y\xb5\x01\x15\xc1!\x04\x00\x0f\x04\xee\'\x1a\x06\x001G.\x04\x1e\x0b\x18\x01B\xd2\t\x01\xc1\t\x04\x00\x01\x02\x04\x08\x19\x07\x0c\x9b%\x01\xec\x01\x01\xf6)\x01\x9f\x07&\xa0\x07n\x1e\x04,;:>\x06\x08\x03\x04\x03\x1a\x19\x04\x03\x04\x03\x16\x15(\x07\x10\x0c\x01\x1a\x0e\x00\x06\x05\x0e\x04\x06\t\x10\x04\x00\x0f\x01\x00 \x00 \x00@\xf5\x01\x04\x00\r\n\x04\r\xf3.\x0c\x07\x0c\x04\x00\r\x14\x13\x0b\x01\xe1\x01\x02\x0e\x04\x00\x05\x14\x13\x0b\x04\x01\x0b<0\x00\x82\x01\x00\x03\x06\x00\x1d\n\x01\x02\x01\x02\x01\x02\x01\x02\x01\x0e\r\n\x01\x04\x04\x05\t\x10\x00\x1c\x01\x06\x04\x00\x04\x03\x15\xee/\x02\x00\x16\x03\x1e\x03\x16\x03\x1a\x03\x04\x00\x01\x1a\x04\x00\x11\x02\x06\x00\x06\x01\x0e\x04\x03.\x04\x00\x01\x02\x04\x00\x05)\x04\x03\x04\x00%N\x06\x00\x1a\x00\xc4\x03\x19\x05\xa1\x02\x01\x1f/\x03\t\x03\x01\x1b\x19\x05\x04\x01\t\x13\x01\'\x0b\x05\x04\x01?\t\x03\x05\x01\x19\x15\x11\x19\x11\x01\xd3\x01\x03-\x03\t\x03=\x15_\x03c\x03\t\x03\x11\x15A\x03a\x03\x01\x83\x01\x04\x01\x0b\x07\x03\x01\x15\x03\x0b\x04\x03a\x01\r\x05\x17\x01\x19\x03\x0b\x03\x01\x0f\x0b\x03\x01\x0f\x0b\x03\x01\x1f\x0b\x03\x015\x037\x03\t\x03?\x03?\x03\x01\r\x0f\x07\x05\x03\x05W\x03\x01\x03\x01\x1f3\x01\x1f\r\x04\x07\x15\x01\xb1\x03\x0b\x8d\r\x01\xe1\x02\x01\xcf\x06\x01\x07=\x043\t\x05\x03\xcb\x04\xe9\x01\x01\x04\x03\x15\x01\x13\x0f\x07w\x05)\x059\x01\xfd\x01\x06\x00\x03\x9c6\x02\x04\x00\x01\x02\x08\x00#\x02\x01\x08\x07\x08\x07\x02\x01 \n+\x16\x0c\t\x00\x02\x01\x16\x08\x00\x01\xef\x01\x04X\x07\x83\x02\x00\x16\x07\x04\x00\x05\x08\x07\x0c\x04\x00\x07\x0e\x1a\x01\x02\x04\x009pT\xeb\x01\x16\x1c\x16\x9e\x01\x12\x00\x0eJ\x02\x01\x02\x01 \x10v\x02\x00\x16\x03&\r\x17\x11\x01-\x05\x06\x01\x05\t\x01\x11\x06\x01\x15%\x01\x0b\x13G\x01\x0b\x01\x11\x8d\x01\r\x04\x01\x07\x0b\x07\x01\x17\x04\x01\t\x0b\x07\x0b\r\x874\x04\x00\x13\x04\xbe8\x06\x01\n\x05 \x00\x1a\x02\x04\x00\x03\x12\x03\x04\x00\x05\x08\n\x0f\x04\x00\x01\x01\x06\x00O\x04\x03\x06\x05\x06\x07\x0b\x14\x03\x04\x03\n\x1b4,\x00,\x0e\x00\x1e\x00\x06\x05\x83\x01\n\x0b\x00\x12\xe0\x01G\r\x1d\r!\t+\x01\x03\x11\x03\x06\x01\x04\t\x01\x0f\x04\x01\x03\x19\x1f\x04\x033\x17\x00\x06\x03\x00\x02\x01\x02\x01\x0e\r\x06\x05\x16\x03\x1e\x03\n\t>\x0b \x07N\x01\x03\x04\x00\x174\x03#\x01\t\x06\x00:\x1a:\x00\xf3\x06\x04\x01\x11\xf8\x04\x00\x9c\x01\x019\x03\x01\x05\x0c\x04\x00\x11,\x7f\x05\x00R,\x00\x01\x1f\x04\t\x05\x01\x00\x02\x04\x00\x0b\x01\x00\x1c\'\x00\x0e\x06\x00\x0b>\x00%\x14\x01\x00\x06\x02\x04\x00\x01\x01\x08\x00/\x1c\x00\"\x08\x01\x0c\x12\x03\n\t\x10\x13\x038\x11\x1b\t\x05\x01\t\x05\x01\x1f\x1b\x04\x01\r\x11\x17\r\x01%\x01\r\x04\x01\x1d\x03A\x171\x19\x11\x01\xaf\x03\r\x854\x00\xbc9\x0c\x00\x0e\x04\x00\x19\r\x03\x01\x07\x00\x12\r\x00\x16\x07\x08\x07\x0c\x04\x00\r\"\x01\x00\x1a\x00\x04\x01\x04\x00\x0b\x1c\x02\x01\x90\x01\x8f\x01\x19\x04\x01\x1d\x19\x1f\x0b\t\x01\x03\xd6\x01\x03\x01A\x8d\x01\xc6\x01\x02\x00\x1a\x04\x00\x05\x12\x11\x17\x04\x01\x0f\xc5\x01\xf9\x01~\x94\x01\xa8\x01\x00\x02\x01\x04\x00\x11\xb9\x02~\x1a\x00\x04\x00\x0e\x00\x0c\x04\x00\x03&\x03\x08\x00\x05\x0e\r!\x04\x0b\x04\x01\t\x10~\x02\x00\x1a\x04\x00\x01:\x06\x00\x03\xe3\x010\x04\x00\x01\x04\x04\x00\x1f\x04\x03\x08\x07\x06\x05\x1a\xf8\x01\x11\x1b\t\x01\x11\x19\x01\x8d\x01\x06\x01\x11\x15\x03/\x01\x19\x01\xf7\x01\x03\xc17\x04\x00\r\x08\xa2:4\x02\x00\x12\x03\x04\x00\x018\x04\x00\x01\x02\x04\x00\x0b\x14\x03\x02\x13\x1c\x06\x04\x00\x19\x01\x03\x06\x02\x01\x04\x03\x04\x03\x0c\r\x16\x08\x04\x00\x15\x08\x05\x0c\x00\x06M\x00Z\x00\x03\x04\x04\x00Y\x16\x06\x05\x9b\x0b\x00\x1e\x07\n\x00(\x00\x1a\x00\x94\x01\x0e\t\x08\x00(\xaa\x02\x00&\x01\\\x00(\x00Z\x00*\xd0\x04\x1e<>\x00GV\x10\x05\n\x00\xdb\x1b\x00\x06\x03\x04\x00\x11\x02\x00\x1a\x06\x10\x00\x04\x00\x06\x06\x01\x07\x03\x0f\x05\x19\x04\x01\x05\xa3\x16\x01\x05\x04\x01%\xe1\x02\x17\x01\x93\x05\x01\x19!G\x03\x19\t\x07\x01\x03\x11\x1b\x01\xaaA\x02\x04\x00\x07\x18\t\r\xabC\x04\x00/\x82\"\x01\x9f\x02\x06\x00\x0e\r\x04\x03\x05\xba\x03\x00\x08\xea\tfrh\xbc\x012\xe8\x01\x8a\x05\xb9\x0b\x07\x0b\x06\x03\x04\x01\x03\x0f\x17\x04\x01\t\xb8\x0b\xa5\x05\x02\x00\x1a\x04\x00\x17\xc2\x05\x01\x97\x02\x02\x0c\n\x08\x01\x00\x05\x00\xa7\x03\x04\x17\x04\x01\x15f\xb0\x02\xa7\x02\t\x00\xa8\x026\x01\x19\t\x0b\x04\x01\t\x9c\x02\x9b\x02\x14\x05\x02\x04\x00\x0f\xb6\x02\x9b\x02\x02\x01\x02\x04\x00\x0c\x04\x00\x1b\x1e/\x19\x01\t\x01\xf2\x02\x01\x00\xc7\x02\x19\xb4\x02\x1d;\x04\x1f\x04\r\x01\t\x04\x03\x04\x01\x1d\x17\t\x01\x0f\r\x15\x07\x03\x01\r\x01\x99\t\x03\x00\xaa\x04\x06\x00\x0b\xec\x02\x02\x00\x10\x01\xf3\x04\x06\x00\x07\xf0\x04\x00\x0e\x0b\x04\x01\x0f\xc31\x02\n\t\x1c\x12\x00\x04\x04\x02\x04\x00\x15\x01\x00\x0c\x03\x12\x07$\t\xa0\x01\x11\x8b\x01\n\x00#\x18\x00\x19\x06\x01\x00\x04\x03\x04\x03N\x05,\t\xbe@\x0e\x04\x05\x04\x01I\x00\x07\xaf\x13$\xde\x04\x05\x15%\x01\x1b\x01\x03\x11\x0f\x01\x1b\x01\x03\x07\t\x07\x03\t\x1b\x01\x03\r!\x0bY\t\x01\x11\x05\x11\x05\x01\x06\x0f\x07\x035\x03\x05\x06\x01\x11\t\x03\t\x01!\x01-\x00\x03\x04\x01\x0b7\x0b\x01\x02j\x1a\x04(\t6:\xc3\x02n\x1e\x04,\x1b:>\xab(\x06\x01\x06\x00\x18\x01\x06\x07\x15\x03\x0c\x04\x00\x11\"!\x0b\x01\xc2\x16\xee\x0e6j\x1a\x04(W6:\xab(\x06\x01\x02\x01\x06\x004\x004\x00@\x01\x06\xe8%%\x0b\x1b\x01\x99\x06fnh\xb8\x012\xe4\x01\xb7\x07^\xd9\x17\x00\xe4\x02\x00\xce\x10\x02\x00\x02\x01\x00\x10\x03\x08\x07\x08\x00\x11\x0e\x03,\x13\xe4\x01\x02\x00\x06\x03\x04\x01\x07\x00\x02\x00\x02\x04\x01\x05\xe3\x01\x17\t\x04\x01\x05\x04\x03\x0c\x04\x00I\x10\x0f\x03\x01\x05\x08\x00\x0e\x00 6\x00$\x03\n\x03\x06\x02\x01X\x0c\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x04\x00\r\x05\x07\x01\x00\x0e\x07\x10\x04\x00\x13\x10\x0f\x0b\x00\x02\x01\x0c\x02\x00 \x04D\x01\x0e\x04<\x012\x04\")b,\x10\x06$\njh\x0el\xb2\x01\x0e6\xde\x01\x0e\xe1\x06\x00\x1a\xd9(\x04\x0c\x04\x00\x0f\x0b\x01\xb4\x03\x04\x9a\x02\x01\xd3\x01\x02\x04\x00\t\xd0\x01\x04\x01\xd3\x01\x02\x04\x009\xd0\x01\x87\x02\x01\x0b\x03\x8b\x01\x01\xd2\x01\x04\x01\xd5\x01\x94=\n\x03\x16\x03\x16\x03\x1ab\xc8\x01\x01\x7f\xa8\x01\x7f\'Ea\x19\x04\x11\x03\x05\xc1\x04\x06\x01\x05\t\x03\x1f\x04\x03\x03\x01\x03\x04\t\x13\x03\x0b\x01!\x07\x01\x17\x01\r!\x04\x01\x01\x03\x04\x01\x05\x11\x01\x11\x04\x01\x1d7\r\x013\xaf\x03\x01\t)W\x01\'U\x05#\xa5\x02\x04\x01\x1f\t\x1d\x07\x03\x87\x01\x0b\x19!\x05\t\x15\xa7&\xb3\x01\xd3\x01\xd5\x01\x89\x06\x06\x00\x01\xb0E\x04\x00\x136\x00\x08\x07\x18\x17/\x00\x08\x07\x04\x00\x04\x0c\x01\x0b\x04\x00+\xd3\x05\x01\xb0\x05\x11\x0b\x00\x08\x07\x0c}\x02\x92\x01\x00\x01\x13\x0b\x01\x03\x8b\x05\xeb?\xacC`\x04\x02\x04\x01!\x85\x11$_l\xd5\x03\x02\x00\x02\x00\x08\t\x00\x02\x00\x08\x07\x0c\x04\x00\t\x18\x01\x15<\x02\x04\x00\x06\x01\x07\x04\x08\x03f\x04\x00\x03\x01\x00\x04\x02\x05\x00\x14\x01\x04\x02\x03\x00\x02\x04\x00\t\x02\x00\x06\x03\x00\x04\x01\t\x00\x1c\x02\x01\x1b\x06\x01\x01\t\x06\x00/F\x00\x06\x01\x00\x03\x00 \x02\x00\x12\x0b\x16\x03\n\x03\x08\x01\x00\x05\x00\x12\x00\x02\x06\x00\td\x00&\x1e\x00\x04\x03\x05\x00Z\x89\x01\x06\x00\x01*\n\x00\xc1\x01\xc9\x02\x1a:\xb4\x02\x00,\x00\x87\x01\x000\x008\x002\x001\n\x00*\x12@\t\x01\xad\x01\x00J\x00F\x00\xf94\xb6\x02\x020&\x00\x1e>H\x18\xc8\x01\xd9\x03\x01\xd4\x06\xf7\x02\xc8\x04*\x14\x12L\x9d\x04\xd0\x05\x93\x02\xb0\x03\x02\x00\xfb\x01\xce\x02\x02\x00\xe5\x01\xbc\x04\x9b\x02\xec\x02\x02\x00\xdd\x01\x84\t\xe3\x0e\x1e\x1dt=\x06\x01\x05r9\x82\x06\xad\x03T\xa8\x03\xa2\x04\x0c\xe3\r\x00\x02\x8b\t\x00\x86\x06\xd0\x01\xba\x03\x94\x01j\xc2\x02n\xc2\x05\n\x04\x03\x9f\x02\x01\x97\x13\x00D\x00>\x00H\x00\xf8\x08\xa9\r\x82\x03\xf8\x04\xc8\x02\xe2\x01\x02\x00\xea\x02\x97\x02\x02\x00\x80\x03\x1e\x02\x00\x90\x03\x9a\x02\x02\xec\x01\xbb\x02\xc6\x02\xbb\x016\x00\xf6\x01\x06b\x02\n\x00\t\x03K\xc3\x15\xc4\x12\x00\xa1\tT\xa0\x03\x97\x10\xee\n\x01\xb7\x02\x004\x11\x18\x00J\x006P.\x00\xa0\x02\xcf\x02\x12(\x05\x8c\x033\x9d\x02\x01\'\x12\x01\x00\x0f\x03\x01\n\x02\x04:0*v F*l\x88\x02R^\x1cH\x94\x01RZ\n\\XH0\xa5\r\x0b\x01\x1f\x07\x00\"\x8c\x02u\x07\x01\x85\x02\x1c\x1d3J\xbc\r/GW[\tYQ\x93\x01G\x1b]Q\x87\x02k)E\t\x1f/9\x03\x01\x03\x04\x01C\x15\tI\x03=3\x15I\x17!\xb3\x08\x82\x03\xfa\x04\xee\x06j\xb0\x03\x83\x13\x00\xbe\n\x06\x00>\x00\x0c\x0b\x04\x03=\x05\xbf\x02\x01\xae\x10\x02\xab\x18\x04\x005P6!@\x02\x08\x00\x08 mtq\x90\x01s,>\x02\x1c\x0c\x08\x02\x14\x02\x15\x01\x13\x8d\x02\x04\x00\x03f\x10\x04\x00\x01\x08\x06\x00\x03\x0e\x00\x04\x04\x05M\x00n\x04\x01G\r\x07\x0f\x1f\x03\x1fEP4\x04\x87\x01\x00P6\x00l\x00(\x00\x08\x00\x08\x10\x00q\x01\x10\x00\x04\x00b\x01?\xf9\x01\xa2\x01\x01\x04\x06\x0b\x00\x04\xaf\x01\x00\xa2\x01\x02\x04\x01\x03\x08\x01\x04\x06#\x05\x04\x01\x00\x02\x0f\x10\x08\x03\x0c\x16\x00\x02\x01\x15\x0b\x01\x05\x0c\x00\x93\x01\xab\x01\xbc\x03\x02\n2 >\x9b\x01\xac\x01\x02\x084\x00Z\x06\x008\x06\x00\x02.\x150\x12\x07&\x11 \x11\x0b\"\x14\x0f\x1e:\x13\x1a\x10\x17\x16\xbf\x02\x04\x17\x80\x0f\x02\x012\x124\x02\x0c\x14\x02\x00\x01A\x95\x05\xe5\x0f\xb0\x01F\xda\x01>\n\\\xea\x01\xde\x01\nR\xfc\x01VD\xbd\n$\x12\x04\x00\x1f\x04\x03n\x00\x1e\x00\x1e\x00\x18\x00\n\x00\x18\x0b\x04\x18\x06\x00\x0bg\x00>\x00\x96\x01\t\x04\x17\x1d\x01 \xec\nCU\xfb\x01Q\t\xdd\x01\xe9\x01[\t=\xd9\x01\x05\x04\x01\x01)\x04\x01\x19\x17\x03Y=\x1dm\x11#;\x03\xab\x01\x03G\x04\x00\t\x02\xd8\x05\"!\xd9\x05\x04\x00\x17\x02\xf8\x05\xa1\x03\xb2\x01\x02p\x00x\x00\x02\x00\x02\x04\x01\x11w\x1d\x01\xfc\x04\x08\x077\x01\x07\x04\x01\t\x11\x03\x11\x05!\x04\x03\x07E\x1b\x01\x07\x04\x01\x11\x11\x15\x01\x0f\x01k\x03\x01\xbb\x01\x04\x01\x13O\x01\x11\'\x01\x0b\x01\x17\x01\x17\x04\x01\tG\xd1\x01\x03\x17S\x08\x001\x02\x01\x00\xdc\x04\x00M\x01\xfc\x04\x00`s\'\x00:\xfb\x04\x02 \x05\x02\x00\x1a\x00\xc1\x04\x02\xcc\x04\x04\x00#\xa8\x03c\x00C\x03\xc9\x06\x82\x07\x01 9JN\xa9\x07\x1f\x1e\x06#\"\x06\x00\x01\x02\x06\x00\x11\xac\x07\x0c\x01\x08\x00\xab\x03\x02\x0c\x01\x04\x00/\x82\x01\x00\xec\x02\x00Z\x02\xd3\x04\x04\x00\n\x8e\x01;\x01\x00\x02\x00\x0c\x03\x18\x00\xff\x02#\x00\x02\x04\x00\xa9\x01\x06\x01\x00h\x1b\x01\xa2\x06\x01\xdb\x04\x0b\x19\x01\x19\x019\x01\r\xa2\x01\x02\n\x00\x02\x12\x11\x01\t\x01\x97\x01\x02\x01\x0c\x07\x06\x05\x08\x01\x84\x03\xee\x01\x17\x00\xd3\x01\xe4\x04\x03_\x85\x04\x9a\x02E>\x00\xa9\x03\x16\x03\n\x00\x1e\x00\x02\x1a\x01\x02\x08DH\x13\xba\x03\x08\x05\x08\x18\x0e\x02\x18\x04\x00>\xb1\x06\x00\xe8\x06\x13\x03\x13\x05\x13\xcd\x02\x01\x04\x081\xe8\x01R@\xc3\x03?\x042\x06\xe4\x01N<\xa5\x036\n\xe8\x01R@\xbd\x03\x8a\x01\xec\x01VD\x8d\x03\x07\x02\x04\x01\xb3\x01w\x11\x01\x13\x01\x13\xc7\x01\x060\x06N\xe8\x01R@\x81\x06\x01\x00\x11+^]Rv\x00\x02\x002\x00\x12\x11\x0b%\x01\x8e\x10\x00H\x00\x0c\x02\xa9\r*\x00\xf3\x08\x00T\x00\x1c\x00\xd4\x01\xce\x04\x07A\x9b\x01\x93\x02\x01E\xde\x02#\x00\xc2\x03\xfb\x04\x03\x01\x06\xd4\x01N<\xdd\x03\x02\x01<z-\x03\x01\x00\xea\x02\x00(\x00\x16\x00y\x07\xeb\x029\x01\rJ\x01\x04\x00I\x02\x1a\xbe\r.\x00\x18\x00\xa5\x02\x00\xcb\x03\x00\x18\x00\xb6\x05\xdf\x01\n\t\x02\x90\x02\x00\x02w\x00\xcf\x05\x00\xa3\x03\x14\x00\x02\x93\x04\x00\x01\x00\x02<\x13\xbc\x01\n\x00\x1f\xb3\x05\x00\x86\t\xd1\x03\x00\x18\x01\xf1\x01\x02\x00\x01\xe0\x08\x01\x05\x01\x05\x04\x01\x0f\t1\x03\x01\x15\x01\r\x17\x04\x03\x04\x01\x1d3\x07\t\x07\t\x13\x0f\t\x05\x13\x01\t\x19\t;\x06\x01\x019\x06\x01\x13\x13\x17\x07\x01C\x07\x03\x01\x07\x03\x06\x01\x8f\x01\x0b3C\x05\x01\x19\x01\x1d\t\x11\xe7\x01\x05\x03\t\x011\x01G\x01\x03\x01\xd5\x01\x19\x01\x17\x05\x033\x00X\x01\xe8\x02\x02<\x02\x00\x0e\x02\x01.\x01\n\x10\x0f$!\n\x00\x16\x17\t\x04\x10I\x00\x0e\x01\n\x00\x0e\x002\x01\x0b\x01\x00\x18\x03\x06\x03\x08\x07\x04\n\t\x00\x13\x00|\x02\x04\x00G\x01CLC\x07!\t\x01\t\x01\x13!\r\t\x0b\x01\x0b\x01\x13\'\x01\xe7\x02U\xe8\x04\x82\x01\xe9\x05\x02\x80\x06\x00\x01\x00\x02\x00\x12\x01\xa9\x01\x04\x00q\xd4\x01\x04\x06D\x068\x81\x01\x182ILKP\x04\x03\x01W\x8e\x02\x00\x9b\x01\x01e\xc5\x06J\x0e\t\xf2\x0b,\x06\x1a\x070\x98\x02\x02\x01\xab\x03\xc2\x04\x02\x0c\x00\x0b\xc1\x04\x0b\xcd\x0b\x06\x03\xaa\x0f\x05\x19/\x05\x01\t\x01%\x15\xaf\x02\x06\x01K\'\x03\x013\x17\x8d\x02\x17\xad\x08\x05\x01GJ\xd4\x0b\x9d\x0c\nB\x0c\x04\x90\x0c\n\x12\x17\x14\x01\x17\x02,\x0b\x06\x05\x00\xc2\x02\x04\x9e\x01$!\x01\xef\x10\x04\x00)\xca\x06\x00\x02\x18\x0b\x1a\x05\x14\x00\x08\x03>\x01\xb2\x01|\x01\r\x84\x02\x02\x00\xb4\x01\x06\x00\x1b\n\x03\x14\x0c\x08\x03\x10\x01L\x0b\x06\x01\x02\x03\x04\x00\x04\x01\'\x0b\x16\x151\r\x03\x01\t\x13\x05\xb3\x01\x01\xb9\x013\x15k\xb1\x013\x07\x03\x04\x13I\x0b\x01\xc9\x06\x00\x98\x0e\x97\x0e\x00\x96\x0e\x00\x04\x05\x00\x16\x00.\x07\x02\x18\x01\x038\x01\x05 \xcf\x03\x02\x08\x03\x04\x03\x0c\x0b\xf3\x02\x00\x08\x07\xa6\x02\x06\x00\x03\x9b\x0b\x08\x08\x00\x05\x03\x02\x05\x04\x02\x1a\x00\x03\x02\x05\x04\x02\x05\x00\x02\x05\x06\x02\x01\x05\x04\x02\x0c\x00\x13\x03\x02\x01\x02\x01\x08\x00\x03\x02\x05\x06\x02\x01\x05\x06\x02\x01\x05\x06\x02\x01\x05\x04\x02\x0c\x00\x17\x02\x05\x02\x01\n\t\n\t\n\x05\x02\x05\x04\x02\x10\x00\x0b\x03\x08\x03\x00\x02\x05\x04\x02\x08\x00\x03\x02\x05\x06\x02\x01\x05\x06\x02\x01\x05\x04\x02\x0c\x00\x03\x02\x05\x06\x02\x01\x05\x04\x02\t\x00\x03\x08\x07\n\x04\x00\x05\x05\x02\x05\x04\x02\xbc\t\x00\x03\x03\n\x04\x00\x11\x05\x02\x05\x02\x01\x08\x03\x02\x05\x06\x02\x01\x05\x04\x02\x11\x03\x08\x07\n\t\n\x05\x02\x05\x06\x02\x01\x05\x04\x02\x0c\x00\r\x03\x08\x07\n\x05\x02\x05\x04\x02\xfc\x03\x00\x03\x02\x05\x04\x02\x04\x00\x03\x02\x05\x04\x02(\x00\x13\x03\x08\x07\x08\x07\x08\x07\x08\x07\x08\x1e\x00\x03\x07\x08 \x00\x03\x07\x08\x06\x00\x05\x03\x02\x05\x04\x02\x0b\x03\x08\x00\x03\x02\x05\x04\x02\x0c\x00\r\x03\x08\x03\x02\x05\x02\x01\x04\x02\x1d\x04\x07\x04\x00\x03\n\t\n\t\n\t\x08\x03\x02\x05\x04\x02\r\x00\x03\n\x00\x05\x02\x05\x04\x02\x05\x00\x02\x05\x04\x02\x05\x00\x02\x05\x06\x02\x01\x05\x04\x02\x9c\x1b\x00\x03\x02\x05\x06\x02\x01\x05\x04\x02\xb4\x04\x00\r\x02\x05\x02\x01\n\t\x08\x08\x00\t\x07\n\x05\x02\x05\x04\x02\x1f\x03\x02\x01\x02\x01\x02\x01\x02\x01\n\t\x08\x07\x08\x03\x04&\x00\x05\x03\x04\x07\x04\x04\x05\x03\x02\x05\x04\x02\xa0\t\x00\x0b\x03\x08\x07\x08\x07\x08\n\x00\x07\x03\x04\x07\x04\x06\x00\x01\x04 \x00\x03\x07\x08\x0c\x00\x05\x03\x02\x05\x06\x02\x01\x05\x04\x02\r\x03\n\t\n\x05\x02\x05\x06\x02\x01\x05\x04\x02\x9e\x03\x00\x07\x03\x08\x07\x08\x08\x00\x07\x03\x04\x07\x08\x08\x00\t\x07\x08\x03\x02\x05\x06\x02\x01\x05\x06\x02\x01\x05\x06\x02\x01\x05\x04\x02\x08\x00\x0f\x03\n\x00\t\x08\x03\x02\x05\x04\x02\x05\x00\x02\x05\x04\x02\x04\x00\x03\x02\x05\x04\x02\n\x00\x03\x02\x05\x04\x02\x06\x00\x03\x02\x05\x04\x02\x9a\x01\x00\t\x03\n\x05\x02\x05\x04\x02\x0c\x003\x03\n\t\x08\x07\n\t\x00\x04\x08\x00\x01\x02\x00\x02\x0c\x01\x02\x17\x12\t\n\x00\n\x02\x1d\x06\x00\x17\x08\x01\x04\x01\x02\x01\x06\x03\x00\x02\x06\t\x04\x00\x05\x05\x02\n\x04\x003\x02\x04\r\n\x04\x00\x01\x00\x01\x06\x02\x00\x01\x00\x01\x00\x02\x03\x01\x16\x02\'\x08\x00\n\x02\x04\x00\x04\x01\x1d\x02\x01\x00\x01\x00\x01\x02\x06\r\x02\x03\x14\x05\t\x08\x04\x00\t\x01\x00\x01\x00\x0b\x04\x00\x0e\x02\x04\x00\x04\x02\x07\x0c\x0b\x05\x08\x06\x00\x01\x07\x04\x04\x0f\t\x06\x08\t\x0b\x04\x02\n\x08\x00\x03\t\x04\x04\x06\x03\x0b\x16\x08\x01\x03\x03\x00\x04\x01\x13\t\x02\x08\x07\x01\x06\x02\x0f\x00\x12\x04\x00\x01\x11\x04\x00\x15\n\t\x00\x14\x03\x06\x02\x00\x02\x00\x15\x04\x02\x04\x06\x01\x16\x04\x01\x07\x19\x01\x04\x03\x04\x02\x07\x04\x07\x01\x06\x06\x00\x0f\x08\x02\x07\x04\x07\x02\x04\r\x04\x00\x03\x02\x05\n\x00\x03\x0c\x00\x04\x02\x11\x0f\x16\x02\x00\x01\x0f\x01\x03\x02\xfe1\x05\xe4\x01\x02C\x08\x00\x07D\x00CD\x04\x00\t\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x14\x00\x03\x02\x01\x04\x00Y\xe2\x02\xdf\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\xe0\x02\xdf\x02\xe0\x02\x00\xdf\x02\xe0\x02\x00\xdf\x02\xe0\x02\x00\xdf\x02\xe0\x02\x00\xdf\x02\xe0\x02\x06\x00\x0b\xdf\x02\xe0\x02\xdf\x02\xe0\x02\x00\xe5\x01\x04\x00\x01\xe6\x01\x04\x00\x01\xe5\x01\x04\x00+\xe6\x01\x8b\x02U\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01V<\x00\x1fU\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01V\x04\x00\xcb\x02U\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\xf8\x02\xf5\x02\xf6\x02\xf5\x02\xf6\x02\xf7\x02\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01V\x14\x00;U\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01A\x0e\x00\x01B8\x00\x01\x02\x08\x00\x01T\xc8\x01\x00\x01&\x06\x00\x01\xe6\x01@\x00\x05\x16\x00\xd3\x03$\x00\x01X\x86\x01\x00\x03\x82\x02\xd1\x02\x9e\x02\x00\x01\xd2\x02\x08\x00\x01\xbc\x01\x84\x06\x00\x01\x81\x02 \x00\x01\x15\\\x00\x01\x93\x02R\x00\x030\xce\x01\x10\x00\x01\xcd\x01\x04\x00\x03\x18\x17\x06\x00\x03\xf0\x03\xef\x03\n\x00\x03\xf0\x03\xef\x03\x08\x00\x03\xf0\x03\xef\x03\x04\x00\x03\xf0\x03\xef\x03\x94\x02\x00\x01\x18b\x00\x03@v\x10\x00\x01\xaa\x01\x04\x00\x01x\x06\x00\x01\xc7\x01\x06\x009\xdf\x01\x97\x01\x98\x01\x97\x01\x98\x01$#$\x00#\xe0\x01\xdf\x01\xe0\x01\xdf\x01\xe0\x01\xdf\x01\xe0\x01\xdf\x01\xe0\x01\xdf\x01\x97\x01\x00\x98\x01\x00\xe0\x01\xdf\x01\xa8\x03\xc7\x01\xdf\x01\x10\x00\x01\xe0\x01\n\x00\x05\xdf\x01\xe0\x01\xf7\x02\x0c\x00\x01\x80\x01\xea\x01\x00\x01\x18\xa8\x05\x00\x01\x04d\x00\x01 \x1a\x00\x01\xbc\x012\x00\x01\x92\x01 \x00\x07\x16\xd9\x04\x00r\x0e\x00\r\xb6\x01\xd0\x02\xcf\x02<;\x00\xa5\x02\x06\x00\x01\x08\xdc\x01\x00\x07\x02\x00\x0e\x08\x08\x00\x01\nz\x00\x01\x042\x00\x01\n\xcc\x01\x00\x01\x04\x8c\x04\x00\x01(\xdc\x06\x00\x01\x08\x18\x00\x01\x0c\x0e\x00\x01\x10\x10\x00\x01\n\x06\x00\x01\x04\x16\x00\x01\x0c\xb4\x08\x00\x03\x14\x02\xe4\x03\x00\x01\n\xac\x05\x00\x01\x06:\x00\x01\x04\x82\x01\x00\x01\x02\xa6\x03\x00\x01\x02\x9c\x01\x00\x01\x06\x0c\x00\x01\x12\x8e\x01\x00\x01\x12\x1e\x00\x03\x1c\x02\x0c\x00\x01\x08\x0e\x00\x01\x02\x10\x00\x01\x04\xbc\x02\x00\x01, \x00\x01\x04N\x00\x01\x0c\x12\x00\x01\x08d\x00\x01\x0e\x08\x00\x01\x16\xa8\x03\x00\x01\x0e\x12\x00\x01\x04@\x00\x01\x08J\x00\x01\x06\x1e\x00\x01\x02P\x00\x01\x0eB\x00\x01\x08\x0e\x00\x01\x10\x92\x03\x00\x01\x18\x04\x00\x01\x12\x9c\x01\x00\x01\x18\xea\x01\x00\x01\x14\x08\x00\x01\x14(\x00\x01\x02\x92\x03\x00\x01$~\x00\x01\x10\x0c\x00\x01\x08\xca\x01\x00\x01\x0eH\x00\x01\xc9\x03\x9a\x01\x00\rD\x8a\x02F\xd7\x03\xd8\x03\x00\x04\n\x00\x01\xf9\x01\x0e\x00\x01\xfa\x01\"\x00\t\x03\x00\xd7\x03\xd8\x03\x85\x04\x04\x00\x07\xd8\x01\xd7\x01\xd8\x01\xd7\x01\n\x00\t\xca\x02\xb7\x01\x91\x01\xd8\x01\xd7\x01\n\x00\x07.-\xd8\x01\xd7\x01\x0c\x00\x05\xd8\x01\xd7\x01\xd8\x01\x06\x00\x05\xd7\x01\x00\x86\x04\x08\x00\t\xd7\x03\xd8\x03\xd7\x03\xd8\x03\xbb\x01\x16\x00\x01\xcb\x01\x14\x00\x05\xcc\x01\x00\xcb\x01\x04\x00\t\xcc\x01\xcb\x01\xcc\x01\xcb\x01\xcc\x01\x06\x00\x03\xcb\x01\xcc\x01\x0e\x00\r9\x91\x01Z8\x8f\x02~}\x04\x00\r\xd8\x01\xd7\x01\xd8\x01\xd7\x01\xd8\x01YZ\n\x00\x03YZ\x0e\x00\x03YZ\x16\x00\x03YZ$\x00\x05YZ\xb2\x02\x04\x00\x05\xb1\x02YZ\x1e\x00\x03YZ\n\x00\x03YZ\x10\x00\x01\xd7\x01\x06\x00\x01\x90\x02\x10\x00\x07\xfa\x01\xf9\x01\xfa\x01\xf9\x01\x04\x00\x07\xb2\x01D\x00\x85\x04\xc6\x01\x00\x01.L\x00\x01D\x96\x03\x00\x01\x0c<\x00\x018\x1c\x00\x05\x10\x00\x12\xac\x04\x00\x018\x80\x02\x00\x01:\xd0\x01\x00\x01\"\xd2\x01\x00\x01:\x04\x00\x01\x1c\x8c\x01\x00\x01D\x92\x05\x00\x01\x04\xac\x02\x00\x01\n\x06\x00\t\xa1\x03\x88\x01\x00\xa1\x01\xa2\x01\"\x00\x05\xc7\x01\xc8\x01\xc7\x01\x04\x00\x01\xc8\x01\x04\x00\x01\xc7\x01\x04\x00\x01\xc8\x01\x18\x00\x01\xc7\x01\x18\x00\x01&\x04\x00\x01\x06\xd4\x02\x00\x01\x9c\x01\xd2\x04\x00\x11\xa6\x01\x1d\x9b\x03\xba\x03qr\x1d\x1e\xb9\x03\n\x00\x03\xba\x03\xb9\x03\x04\x00\x01\xba\x03\x10\x00Cqr\x00qr#\x00$#$q\x00rqr\x8b\x02\x8c\x02\x8b\x02\x8c\x02\x8b\x02\x00\x8c\x02\x8b\x02\x8c\x02\x00\x05kl\x06qrqrq\x04\x00\x05\x99\x01\x00J\x12\x00\x01\x88\x01\x06\x00\x01\x87\x01\n\x00\x01I\x06\x00\x15J\x88\x01\x87\x01\x88\x01\x87\x01\x00\x88\x01\x87\x01\xc2\x01\x009\x06\x00\x15:q\x96\x01\x95\x01r$\x00\x11\x12#$\x04\x00\x03\x11\x12\x06\x00\x0f\x95\x01\x96\x01\x00\x11\x12\xa1\x03\x00\xa2\x03\x04\x00\x0b\x11\x12\xa1\x03\xa2\x03]^\x06\x00\x0f\x11\x12\x00#q\x00rq\n\x00\x03rq\n\x00\x03r\xd1\x03\x96\x02\x00\x01\x06\x88\x02\x00\x01\x12\x16\x00\x01<$\x00\x01$\x06\x00\x01\x06\x14\x00\x01\x18\x08\x00\x01\x06\x1a\x00\x01*@\x00\x01\x08\x1a\x00\x01\x08r\x00\x016.\x00\x01\x04D\x00\x01\x12\xae\x07\x00\x01\x08\x1c\x00\x01\x0cl\x00\x01*\xe4\x02\x00\x01\x1a\x0e\x00\x01\x0el\x00\x01\x02\x10\x00\x03\x0c\x02\x96\x01\x00\x01\x16>\x00\x05\x06\x00\x0cT\x00\x01\x04\x0c\x00\x01\x06\x12\x00\x01\x02\x12\x00\x01\x06\x88\x06\x00\x01\x12>\x00\x01\x12~\x00\x01\x02\x08\x00\x01\x02\x08\x00\x01\x0e\x10\x00\x01\x1e\x9e\x01\x00\x01\x02\x06\x00\x01\x08\xec\x02\x00\x01(\xfc\x01\x00\x01\x04\x92\x05\x00\x01\x12\x08\x00\x01\x8d\x04\x18\x00\x07`_\xe2\x01\xe1\x01B\x00\x07`\x00\x82\x01\xd7\x01\x08\x00\x05\xbe\x03\x00\x91\x01\x04\x00\x07\x92\x01\x00\x91\x01\xab\x02\x06\x00\x01@\x0c\x00\x03?\t\x04\x00\x05\xb6\x02\xb5\x02\xd8\x02\x04\x00\x15\x8f\x01\x80\x02o\x00po\x00\x8d\x02I\n\t\x18\x00\x01\n\x94\x01\x00\x01>>\x00\x01\x024\x00\x01~\x08\x00\x01n\x16\x00\x01\"\xe0\x01\x00\x01V\x1a\x00\x01\x1a\x1e\x00\x01e\x04\x00\x0f\xf5\x01\x00\xf6\x01\x00\x15\xb5\x01\xb6\x01\xab\x01j\x00\x01a\xe8\x06\x00\x01b\x8a\x05\x00\x01\xb6\x02\x18\x00\x01\x8d\x01\n\x00\x07\xa5\x01\xc6\x02\xcd\x02\x08\x04\x00\x03\x90\x01\x8f\x01\x12\x00\x01\x8e\x01\x04\x00\x01\xb8\x01\x0e\x00\x03\x97\x02\x98\x02\x08\x00\x15\xb7\x01\xb8\x01\x9f\x01\xa0\x01\xb7\x01\n\x0e\x00\xa0\x01\x9f\x01\xa0\x01\x06\x00\x03\x9f\x01\r\x0e\x00\t\x93\x02\x00t\x00\x08X\x00\x01.\x18\x00\x01`\x06\x00\x01\n\"\x00\x01\x0e\xfa\x01\x00\x01\xa0\x01@\x00\x01\x9f\x01\"\x00\x03\xad\x01\x92\x01\x18\x00\x01\x0e\x04\x00\x03\r\x0e\x04\x00\t\r\x85\x02\x00\x86\x02\x0e\x04\x00\x03\r\x0e\x06\x00\x07\r\xbc\x01\xbb\x01\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x85\x02\x08\x00\x01t\x18\x00\x01\x92\x01h\x00\x01\x0e\x14\x00\x01\x0e\x04\x00\x03|\x89\x02\x06\x00\x01\xcf\x020\x00\x01\x04\x08\x00\x01\x02L\x00\x01\x04\x9c\x02\x00\x01\x04p\x00\x01\x026\x00\x07\x02\x00\x02\x04\x0c\x00\x01\x04\xcc\t\x00\x01\x02\x0e\x00\x01\x04<\x00\x01\x08.\x00\x01\n\xc6\x02\x00\x01\x02\x8e\x01\x00\x01\x04\x98\x02\x00\x01\x06\xac\x01\x00\x01\x06\xa8\x07\x00\x01\x06\x04\x00\x01\x02>\x00\x01\x06\x0e\x00\x01\x08\x08\x00\x01\x02\xbc\x01\x00\x01\x02\x16\x00\x01\x12`\x00\x01\x02\x1a\x00\x01\x02\xd0\x05\x00\x01\x02\xfc\x01\x00\x01\x06\x08\x00\x01\x02\x06\x00\x01\x06*\x00\x01\x06\xec\x02\x00\x01\x10\x0c\x00\x01\x02\xf4\x01\x00\x03\x02\x04\xf8\x04\x00\x01\x04\x84\x01\x00\x01\x06\x04\x00\x01\x02\x1c\x00\x01\x02p\x00\x01\x04R\x00\x01\x08\xe8\x01\x00\x01\x06\x08\x00\x01\x06\x94\x04\x00\x01\x04&\x00\x01\x08\x96\x11\x00\x01\x04>\x00\x01\x02\n\x00\x01\x0c\x8e\x04\x00\x01\x04\xd4\x01\x00\x01\x068\x00\x01\x0c\x10\x00\x05\x02\x00\x06\x0c\x00\x01\x02\n\x00\x01\x02\xa2\x01\x00\x01\x04\x12\x00\x01\x06\x14\x00\x03\x04\x08\x80\x01\x00\x05\x06\x00\x02\xc8\x02\x00\x01\x02\xca\x02\x00\x01\x04\x04\x00\x01\x04\n\x00\x01\x18\xa6\x02\x00\x01\x06\xa2\x06\x00\x05\x02\x00\x02\x18\x00\x05\x02\x00\x04\x04\x00\x01\x02\x06\x00\x01\x166\x00\x03\x06\x02\x04\x00\x01\x02\xf4\x01\x00\x01\x06\x06\x00\x01\x04\n\x00\x01\x02@\x00\x01\x06\x08\x00\x01\x02\x04\x00\x01\x04\x84\x05\x00\x01\x02\xb8\x01\x00\x01\x066\x00\x01\x02\xb8\x01\x00\x01\nZ\x00\x01\x04<\x00\x01\x08N\x00\x05\x04\x00\x06\xfa\x01\x00\x01\x02\xc8\x05\x00\x01\x04:\x00\x01\x14\xd2\x01\x00\x01\x04>\x00\x01\x0cJ\x00\x01\x02\x10\x00\x01\x06\xba\x02\x00\x01\x02\x84\x01\x00\x01\x02\x0e\x00\x01\nJ\x00\x01\n\xa4\x03\x00\x04\x04\x90\x0c\x00\x01\x064\x00\x04\x02\x10\x00\x01\x02t\x00\x01\x08\x14\x00\x01\x0c\"\x00\x01\x04@\x00\x03\x02\n<\x00\x01\x08\n\x00\x01\x04*\x00\x01\x02\xb4\x01\x00\x01\x02\x94\x01\x00\x01\x04\x10\x00\x01\x06\xd6\x01\x00\x01\x06\x04\x00\x03\x02\x08\xe2\x01\x00\x01\x02>\x00\x01\n\x96\x02\x00\x01\x08B\x00\x01\x06\x18\x00\x01\x02\xae\x03\x00\x04\x02\x06\x00\x01\x04\x08\x00\x01\x02\x8a\x02\x00\x01\x04D\x00\x01\n\x82\x02\x00\x01\x04&\x00\x01\x02&\x00\x0b\x85\x01Y\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x08\x00\x01\xa8\x01\x06\x00\x01\xa7\x01\x1e\x00\x07\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x04\x00\x15\xa8\x01\x00\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x12\x00\x03\xa8\x01\xa7\x01\x0c\x00\x03\xa8\x01\xa7\x012\x00\x03\xa8\x01\xa7\x01\x10\x00-\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x00\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x0c\x00\x03\xa8\x01\xa7\x01\x1e\x00\x1b\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x85\x03\x86\x03\xa8\x01\xa7\x01\x85\x03\x86\x03\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x04\x00\x05\x85\x03\x00\x86\x03\x14\x00\x07\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x04\x00\x19\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\x1e\x00\x01\xa7\x01\x14\x00\x11\xa8\x01\xa7\x01\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x00\xa8\x01\xa7\x01\x04\x00\x05\xa8\x01\xa7\x01\xbb\x03\xc8\x04\x00\x01\x0eZ\x00\x01\x02\xa4\x03\x00\x01&\x0c\x00\x01\n\x18\x00\x01\x02\x14\x00\x01\x0ev\x00\x01\x02\xe8\x02\x00\x01\x10\x1c\x00\x01\"\xee\x04\x00\x01\x16\x9e\x01\x00\x01\x0c<\x00\x01\x06\x06\x00\x01\x04\x06\x00\x01\x1a`\x00\x05\x12\x00\x06\xf0\x04\x00\x01\x0c\xd4\x01\x00\x01\x18\x1a\x00\x01\x02 \x00\x03\x14\x08~\x00\x03\x0e\x08\x18\x00\x01\x0e\x0e\x00\x01\x04\n\x00\x01\x02\xb0\x02\x00\x01\x04\x1e\x00\x01\x12\x04\x00\x01\x1c\\\x00\x01\x04\x16\x00\x01\x06\x18\x00\x01\x02\xda\x01\x00\x05\x02\x00\x02n\x00\x01\x12\x0e\x00\x01\x14d\x00\x01\x04v\x00\x01\x02\xac\x08\x00\x01\x02<\x00\x01\n\xac\x01\x00\x01\x16\x12\x00\x01\x04\x04\x00\x01\x06\xbe\x05\x00\x01\x06\xa4\x03\x00\x01\x12X\x00\x01\x10\xe4\x01\x00\x03\x06\n\xe0\x05\x00\x01\x08\xec\x01\x00\x01\x0c\"\x00\x01\x02\n\x00\x01\x1e\x16\x00\x03\x02\x0c4\x00\x01\x02\xc6\x01\x00\x01\"P\x00\x01\x02\xd0\x02\x00\x01\x14\x84\x01\x00\x01\x02\xf6\x01\x00\x03\xaf\x03\xd9\x01\\\x00\x01\xbc\x01$\x00\x01N\x16\x00\x01M2\x00\x01N\x16\x00\x07\xb9\x01\x1d\xb8\x01\xb7\x01\x06\x00\x03\xb8\x01\xb7\x01\x10\x00\x0b\x1e\x1d\x1e9:\x1d\x10\x00\x03\x1e\x1d\x16\x00\x05\x1e\x00\xca\x02\x1e\x00\x03\xc9\x02\xca\x02\x08\x00\x035\x83\x01\x06\x00\x07*)*\xf3\x01,\x00\x05\x0c\x00\x0b4\x00\x01\xce\x020\x00\t\x93\x02(\x00\xb0\x01\xaf\x01\x04\x00\x01h\x04\x00\x05\x8f\x01E\x0c\x86\x02\x00\x01\x04\x06\x00\x01\x08\x06\x00\x01\x10\x8a\x01\x00\x01\x04|\x00\x01\x04\xf8\x01\x00\x01\x16\xd8\x01\x00\x01((\x00\x01\x04j\x00\x01\x04\x0c\x00\x01\x18\xea\x01\x00\x01\x14\x98\x01\x00\x01\n&\x00\x01\x0e\x86\x01\x00\x01\x1c\x06\x00\x03\n\x1cZ\x00\x05\x04\x00\x1e\x0e\x00\x01\x1c2\x00\x01 R\x00\x05\x16\x00\x1a*\x00\x01\x06\x8c\x04\x00\x01\x08\xe6\x04\x00\x01\x0e\x10\x00\x01*\xe8\x02\x00\x01\x0e\x98\x02\x00\x01\x04:\x00\x01\x04\xda\x01\x00\x03\x1a\x08\x1a\x00\x01\x02\xdc\x04\x00\x01\x12\x1e\x00\x01\x1c\x9e\x01\x00\x01\x06V\x00\x01\x16\xaa\x01\x00\x01\x06\\\x00\t\x0e\x00\x1c;\x93\x03\x0c\x00\x03\x94\x03\x93\x03\n\x00\x03\x94\x03\x93\x03\x04\x00\x0f\x94\x03\x93\x03\x00\x94\x03\x93\x03\x00\x94\x03\x93\x03\x0e\x00\x0f\x94\x03\x93\x03\x00\x94\x03\x93\x03\x00\x94\x03\x93\x03\x06\x00\x03\x94\x03\x93\x03\x04\x00\x03\x94\x03\x93\x03\x06\x00\x03\x94\x03\x93\x03\x06\x00\x03\x94\x03\x93\x03\x06\x00\x03\x94\x03\x93\x03\n\x00\x03\x94\x03\x93\x03\x06\x00\x03\x94\x03\x93\x03\x08\x00\x03\x94\x03\x93\x03\x0c\x00\t\x94\x03\x93\x03\x00\x94\x03\x93\x03\n\x00\x03\x94\x03\x93\x03\x04\x00\x03\x94\x03\x93\x03\x14\x00\x0f\x94\x03\x93\x03\x00\x94\x03\x93\x03\x00\x94\x03\x93\x03\x06\x00\x03\x94\x03\x93\x03\n\x00\x03\x94\x03\x93\x03\x16\x00\x03\x94\x03\x93\x03\x16\x00\x03\xb5\x01\xb6\x01\xb2\x05\x00+\x0c\xc1\x01\xc2\x01\x00\x0b\x00\xb5\x01\x00\xc2\x01\x00\xc1\x01\xb6\x01\xb5\x01\xc2\x01\x00\xc1\x01\xb6\x01\xb5\x01\xb6\x01\x0c\x00\x0b\n\x00\x07\xd0\x02\xc3\x02\x00\xc4\x02\x08\x00%wx\x00\xc3\x02\x00\xc4\x02\x00\xc3\x02\x00\xc4\x02\x00\x8b\x02\x8c\x02\xc3\x02\x00\xc4\x02\xc3\x02\x00\xc4\x02\x0c\x00\x05\xc3\x02\x00\xc4\x02\x08\x00\tDC\xc3\x02\x00\xc4\x02\n\x00\x05\xc3\x02\x00\xc4\x02\x04\x00\x05\xc3\x02\x00\xc4\x02\x10\x00\x03D\xc9\x04\x08\x00\x01\xb6\x01(\x00\tD\x10\x00\x84\x01x\x88\x01\x00\x01D\x18\x00!\xc9\x04\xe4\x01RQRQRQ\x84\x01\xe0\x01\xe3\x02RQ\x84\x01\x83\x01\xe4\x02\xe3\x02\x06\x00!\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x00\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x04\x00\x03RQ\x04\x00\x07\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x04\x00\x03\xe4\x02\xe3\x02\n\x00\x01R\x10\x00/Q\x00RQ\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02RQ\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x00\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\x08\x00\x07\xe3\x02\xe4\x02\xe3\x02\xe4\x02\x14\x00\x11\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x0c\x00\x0f\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x06\x00\t\xe4\x02\xe3\x02\xe4\x02\xe3\x02\x85\x02\xd6\x03\x00\x03\"6<\x00\x01(\xba\x01\x00\x01\x142\x00\x01\n\x12\x00\x03\x0e\x02\x1e\x00\x01\x08V\x00\x05\x04\x00\x1e\x1a\x00\x01\nX\x00\x01\x02|\x00\x01\x08\x04\x00\x01\x1a\x9e\x05\x00\x01\x06$\x00\x05\x10\x00\x10L\x00\x01\x02\x12\x00\x01\x08\xa8\x02\x00\x01\n\x08\x00\x01\x124\x00\x01\x026\x00\x01\x042\x00\x01\x0c\x92\x01\x00\x01\x0e\x12\x00\x01\x142\x00\x05\x04\x00\x06\xb2\x03\x00\x01\x02\n\x00\x01\x02\x1a\x00\x01\x02\xa4\x06\x00\x01\x0c.\x00\x01\x06\x1a\x00\x01\x04B\x00\x05\x04\x00\x10\n\x00\x01\x06\xd8\x04\x00\x01\x02\xa0\x08\x00\x01\x06H\x00\x01\x0e\xca\x01\x00\x01\n\x1c\x00\x01\x06\xe4\x01\x00\x01\x02\xb4\x02\x00\x01\x06\xf8\x01\x00\x01\x10\x04\x00\x01\x02\x1a\x00\x01\x06\x12\x00\x01\x02\x98\x03\x00\x01\x08&\x00\x01\x12\x16\x00\x01\x06B\x00\x03\x08\x02J\x00\x01\x0c\n\x00\x01\x14\x0e\x00\x01\x02&\x00\x01\x0c\x06\x00\x01\x04\x80\x01\x00\x01\x02\xb8\x03\x00\x01\x10\x12\x00\x01\x12\n\x00\x01\x14\x10\x00\x01\x02X\x00\x01{<\x00\x01\xf3\x01D\x00\t\xbe\x02\xad\x03\xae\x03S\x93\x04\x12\x00\x018\x88\x05\x00\x01,\x84\r\x00\x01V8\x00\x01p\x1e\x00\x01T\x80\x02\x00\x01\x18R\x00\x01~\x0e\x00\x016\x80\x04\x00\x01\x1e\xd0\x02\x00\x01$\x9a\x02\x00\x01\xd1\x01\x06\x00\x03gh\x06\x00\x03gh\x04\x00\x05gh\xe7\x01\x08\x00\x01\xe8\x01\x04\x00\x01g\x04\x00\x03hg\x04\x00\x07hghg\x04\x00\x05h\x00\xe7\x01\x12\x00\x01\x80\x01\x10\x00\x03d\x04,\x00\x07\x8d\x01\x8e\x01\x00g\x04\x00\x03hg\x04\x00\x03hg\x04\x00\x07h\x8d\x01\x00\x8e\x01\x1c\x00\x01\x8d\x01\x04\x00\x01&\x04\x00\x03d\x04\x80\x02\x00\x05\n\x00\xb5\x03\xf0\x01\x00\x03\x8c\x05\xe3\x02\n\x00\x01\xe4\x02F\x00\x01\xe3\x02\x18\x00\x03\xe4\x02\x9d\x05\xb4\x01\x00\x01.\x98\x01\x00\x01\x02\x06\x00\x01\x1c\x1e\x00\x07\x0e\x00\x02\x18\x84\x02\x00\x05$\x00ll\x00\x016(\x00\x01\x14\x04\x00\x01\x02 \x00\x03n\x02B\x00\x01\x08$\x00\x01\x0e\x0e\x00\x01(\x0c\x00\x01\x12\n\x00\x0fB\x00\n,\x00\x14\x00\x02\x8c\x03\x00\x01\x97\x04\x94\x01\x00\x012\xc4\x01\x00\x01\x8a\x03\x0e\x00\x0f\xf1\x01\xb1\x01\xa7\x01\xda\x02H\x92\x01\xb3\x04\xe4\x01\x04\x00\x05ABr\x0c\x00\tL:Xr\x9d\x04\x08\x00\x01X\x06\x00\x03\xc6\x03\x95\x04\n\x00\x01\x8e\x04\x06\x00\x01\x81\x02\x06\x00\x07\x19\xd3\x02\xd4\x02\x04\x06\x00\x01\x93\x02\x0e\x00\x03\xac\x04\xab\x04\x06\x00\x0b\x1e2\x00\x8a\x03\x00\xd9\x03\x12\x00\x03\xa0\x04\x97\x03\x04\x00\x01W\n\x00\x07X\\\xbc\x02\xbf\x02\x04\x00\x03\xc0\x02\x1f\x04\x00\t\xa7\x01\x12\x96\x01 \xf9\x04\x0e\x00\x01r&\x00\x01R\x04\x00\t\x80\x02\xff\x01\xa4\x01:\xdd\x01\x04\x00\x05\xdb\x01\x1a\x1e\x12\x00\x01\x02\x18\x00\x04\x0e$\x00\x01\x06&\x00\x01\x02\x16\x00\x01\x12\x0e\x00\x01\n\n\x00\x01\x04\x12\x00\x01\x14\x10\x00\x05\x16\x08\x06\x08\x00\x01\x0e\x18\x00\x01\x10\x12\x00\x05\x08\x06\x0e\x14\x00\x03\"\x0c\x16\x00\x03 \x02\n\x00\x01\x04\x0e\x00\x05\x12\x00\x18*\x00\x01\x0e\x1c\x00\x03\x04\n\x16\x00\x01\x10\x16\x00\x03\x08\n\x14\x00\x01\x06\x12\x00\x04\x04\x01\x00\x04\x04&\x00\x01\x08\x08\x00\x01\x04\x12\x00\x03\x0e\x1c\xf2\x01\x00\x01\x04\x16\x00\x01\n\n\x00\x03\x02\x06\x18\x00\x01$Z\x00\x03\x022\x1a\x00\x01\x02\x12\x00\x05\x12\x02\x14b\x00\t\x02\x00\x06\n\x04$\x00\t\xc9\x03\x80\x02\xff\x01\xa4\x01\xa3\x01\x12\x00\x03\xa4\x01\xa3\x01\x1a\x00\x03\xf0\x02\x83\x03\x04\x00\x01\x05\x08\x00\x0f\x06\x84\x03\x8f\x01\x00\xea\x01\x00\x17\xff\x02\x04\x00\x0b\x8d\x02\x08\x16\x10\x02\x08\x08\x00\x05\x14\x04\x18\x0e\x00\x03\x14\x06\x0e\x00\r\n\x00\x0e\x08\x04\x02\x06\x0e\x00\x07\x02\x08 \n\x04\x00\t\x0e\x00\x04\x02\x08\x04\x00\x06\x08\x07\x02\x06 \x06\x18\x00\x05\x06\x04\x18\x04\x04\x0e\x00\x04\n\n\x00\x03\x14\x02 \x00\x01\x02\x08\x00\x06\x086\x00\x01\x0c\x04\x02\x04\x00\x01\x0c\x08\x00\x07\x02\x00\x04\x12\x0c\x00\x05\x06\x02\n\x1c\x00\x01\x04\x06\x00\x01\x08\x12\x00\t\x06\x00\x02\n\x08\x0e\x00\x05\x06\x0c\x02\x06\x00\x04\x02\x0c\x00\x05\n\x1e\n\x0e\x00\x07\x12\x02\x08\x0c\x10\x00\x04\x02\x0f\x08\x04\x02\x04\x00\x04\xcd\x01\xc3\x02\x06\x00\x05\xe8\x01\xff\x02\x98\x01\x04\x00\x0b_`\n\x00@t\x04\x00\x0b*\",\x0eX,\x08\x00\x01F\x04\x00\x01\x99\x02\x06\x00\x01\x99\x01\x06\x00So\x8c\x04\xdd\x04L\x06t\"2\x04\x18\x04\x84\x01(\x0e`\x18\x0e\xf1\x01\xd6\x01\xdf\x04\x02Lz\"2\x04\x18\x04N6(\x0e`\x18\x0eI\xb7\x03\xa7\x01\xa2\x03\xbe\x01\xdb\x02\xf6\x01\x06\x00\tZwx\xd3\x04\xae\x02\x06\x00\x11tBP,2\x14\x97\x01\x00\xb7\x02\x06\x00\x01\x98\x03\x18\x00\x07\'\x00{\x16\x04\x00\r\x03\x04\x00\x03\x04\x03\x04\x06\x00\x03\x03\x04\x06\x00\x01|\x06\x00\x03\x89\x02\xb4\x02\x04\x00\x03\x85\x05\x02$\x00\x01\x06\x06\x00\x05\x04\x00\x04\x0c\x00\x01\x02\x06\x00\x01\x08\n\x00\x01\x04\\\x00\x01\x02\n\x00\x05\x0e\x02\x04(\x00\x01\x046\x00\x01\x10$\x00\x01\x02,\x00\x01\x02*\x00\x01\x04\x08\x00\x01\x06\x08\x00\x03\x08\x02:\x00\x01\x18\x04\x00\x01\x02\x12\x00\x03\x02\x06d\x00\x01\x06\x06\x00\x01\x06\x82\x01\x00\x01\x06\x04\x00\x03\n\x02\x08\x00\x03\x06\x00\x04\x02\x1e\x00\x01\x04*\x00\x03\x02\x06\n\x00\x01\x02 \x00\x01\x14\x1c\x00\x01\x08\x06\x00\x01\x04\xa8\x01\x00\x01\x1c\n\x00\t\x02\n\x06\x00\x02\x0c\x00\x05\x02\x00\x02\n\x00\x01\x044\x00\x01\x06 \x00\x07\x02\x04\x00\x02\x0e\x00\x04\x04\x04\x00\x05\x02\x00\x02\x1a\x00\x03\x04\x08\x04\x00\x0b\x08\x06\x00\x06\x02\x00\x04\x02.\x00\x01\x02\x16\x00\x01\x04\x06\x00\x01\x02\x08\x00\x01\x04\x16\x00\x01\n\x04\x04\x06\x00\x05\x04\x06\x04\x10\x00\x05\x04\x08\x02$\x00\x01\x06\x04\x00\x03\x02\x04\x8e\x01\x00\x01\x02L\x00\x01\x02\x06\x00\x01\x04\x18\x00\x04\x02\x01\x08\x1c\x00\x01\x04\x0e\x00\x01\x04\x06\x00\x01\x04\x06\x00\x04\x04\x01\x02d\x00\x01\x02<\x00\x01\x04\x0e\x00\x0b\x04\x00\x04\x06\x08\x0e6\x00\x04\x04\x03\x00\x026\x00\x04\x02\xf6\x01\x00\x01\x04\x0e\x00\x01\x04\x1a\x00\x01\x04.\x00\x01\x06p\x00\x04\x02\x01\x04:\x00\x03\x04\x02\n\x00\x03\x04\x02H\x00\x03\x06\x0e.\x00\x04\x020\x00\x01\x062\x00\x01\x02\x0e\x00\x01\x04\n\x00\x01\x0c\x06\x00\t\x04\x00\x04\x0c\x04\x0c\x00\x01\x06`\x00\x01\x02P\x00\x03\n\x00\x04\x02\x01\x08\x04\x02\x07\x00\x02\x04\x02N\x00\x07\x02\x00\x06\x00\x04\x04\xb2\x01\x00\t\x02\x04\x00\x04\x89\x01\x06\x00\x03\xcd\x01\xce\x01\x04\x00\x0b\x9f\x04\x1a\x04\x10\x02\x08\x06\x00\x07\x12\x02\x00\x0c\n\x00\x01\x04\x10\x00\x01\x14\x06\x00\x03\x0c\x12\x06\x00\x05\x0c\x00\x04\x06\x00\x01\x04\x04\x00\x07\x04\x02\x08\x06\x06\x00\x03\x02\x1c\n\x00\x07\x04\x14\x00\x04\x0e\x00\r\x04\x02\x1a\x02\x04\x02\x06\x06\x00\x05\x08\x18\x06\n\x00\x01\x06\x06\x04\x04\x00\x05\x02\x04\n\x04\x04\x06\x00\x03\n\x12\n\x00\x0b\x0c\x02\x00\n\x08\x02\n\x00\x01\x06\x06\x00\x01\x0c\x04\x02\x0c\x00\x05\x04\x00\x08\x08\x00\x0b\x06\x08\x10\x02\x04\x06R\x00\x01\x04\x06\x00\x07\x08\x02\x04\x00\x04\x02\x0c\x00\x07\x08\n\x04\x0e\x1a\x00\x04\x02\x07\x08\x00\x02\x1e\x04\x00\x01\x08\x0e\x00\x01\x06\x08\x00\x01\x02\x08\x00\x0b\x0c\x02\x08\x06\x04\x02\x1c\x00\t\x02\n\x04\x02\x04\n\x00\x01\x02\x06\x00\x04\x02\x01\xb3\x03\x06\x00\x11\xbd\x01\x00J\x83\x01\x84\x01\x9e\x02:X\x95\x04\x0c\x00\x01\xbc\x01\x0e\x00\x01\x9c\x03\x06\x003\xb1\x02\xca\x02\xbd\x02\xa1\x02\x02Lz\",\x06\x04\x18\x04\x0e\\\x1a\x1e\n\x0e`\x18\x06\x08\xff\x04\x94\x03\xf9\x01\x04\x00\x03\xaa\x03\xc5\x04\x04\x00\r\'\x08\x16\n\x06\x02\x04\x08\x00\x01\x04\x06\x00\x05\x08\x0c\x04\x06\x00\x01\x08&\x00\x03\x16\x02\x06\x00\x03\x0c\x1a\x06\x00\x01\x04.\x00\x01\x04\x04\x00\r\x08\x02\x06\x00\x02\x00\x06 \x00\x03\x02\x12 \x00\x01\n\n\x00\x03\x04\n\x0c\x00\x01\x0e\x06\x00\x07\x06\x12\x04\n\x06\x00\x03\x02\x06\x12\x00\x0f\x06\x00\x04\x00\x16\x0c\x04\n\x06\x00\x01\n\x06\x04&\x00\x04\n\n\x00\x07\x16\x00\x02\x00\x06\x08\x16\x00\x01\x06\x0c\x00\x03\x06\x02 \x00\x01\x02\x0e\x00\x01\x0c\x0e\x00\t\x06\x1a\x04\x00\x06F\x00\x01\x04\x18\x00\x01\x08\x08\x00\x01\x02\x14\x00\x01\x04\x1a\x00\x04\x02 \x00\x04\x08\n\x00\x05\x06\x0c\x02\x84\x01\x00\x04\x02\x0c\x00\t\x0e\x00\x04\x00\x18.\x00\x01\x06&\x00\x01\x02\x06\x00\x03\x12\x02\x06\x00\x01\x06\x06\x00\x05\x02\n\x02\x8e\x01\x00\x07\x0c\x04\x02\x04\x18\x00\x05\x04\x02\x91\x04\x08\x00M\xde\x01\xdd\x01\xa4\x02\x16\xa6\x01(3 \xf5\x01\xa3\x01\\\x00\x96\x01\xb7\x03\x02Lz\"2\x04\x18\x04.V\x1e\n\x0e`\x18\x0e\x83\x05\x82\x01\xa7\x01&\xda\x02\":X\x8d\x04\x06\x00\x03\xda\x02\xd9\x02\x16\x00\x03\xc8\x04\xc7\x04\x04\x00\x05%\x08\x16\x04\x08\x03\x02\x08\x06\x00\x01$\x0c\x00\x17\x14\x00\x0c&\x00\x04\x02\x0e\x02\x1c\x00\x1c\x06\x00\x05\x04\x02\x14\x0c\x00\x04\x06\x13\x02\x06\x00 \x06\x00\x06\x04\x02\x08\x04\x00\x01\x04\x04\x00\x01\n\x04\x04\x0c\x00\x05\n\x08\n\x06\x00\x05\x04\x08\x02\x04\x00\x01\x02\x04\x00\x04\x08\x01\x02\x04\x00\x01\x06\x06\x00\x03\x0c\x04\x06\x00\r\x08\x00\x04\x06\x08\x0e\x00\x04\x04\n\x00\x01\x06J\x00\x05\x04\x00\x0c\x04\x00\x01\x02\x04\x00\x04\x02\x04\x00\x0f\x04\x02\x00\x02\x04\x00\n\x0e\x0c\x00\x04\x02\x03\x06*\n\x00\x04\x04\x06\x00\t\x0c\x02\x08\n\x02\x0c\x00\x0b\x02\x00\n\x04\x02\x04\x06\x00#\x04\x9f\x05\x00\x86\x05\x97\x02\\\xa6\x01\x16\x12\xb1\x03\x88\x01\xee\x01\xa7\x01\x16\x92\x01\x14(u\n\x00\x01\xf3\x01\x0e\x00\x03\xee\x02\xed\x02\x04\x00\x01u\x04\x00\tv\xea\x01]\x18\x17\x04\x00\x03\x18\x17\x06\x00\x03\xa1\x02\xa2\x02\x06\x00\x03\x18\xbf\x03\x1e\x00\x03\x86\x05\xbb\x04\x04\x00\x03e8\x06\x00\x07\x02\x00\x1c\x0e\x06\x00\x05\x02\n\x0e\x06\x00\t*v\x00 \x06\x08\x00\'F\x00\x18\x10\x0c\x04\x00\x08\x00\x12\x1c\x04\x00\x12$\x022\x14\x02\x14\x10\x00\t\x02\x00\x14\x00\x02$\x00\x07\xa9\x01\x00\xed\x022\x04\x00\x0312\x06\x00\x05\x8a\x03\x00\xbd\x04\x06\x00\x1f\xa2\x02\x00l\xea\x01\xed\x01\xf1\x02\xfa\x03\xcd\x01\xa9\x02\xb2\x01\xde\x01\xad\x03\x04\x00\x02\x08\x06\x00\x05\x04\x00\x02\x06\x00\x01\x08\x18\x00\x07\x02\x10\x02\x06\x04\x00\t\x06 \x00\n\x02\x18\x00\x0b\x10\x00\x02\x00\x04\x02\x08\x00\t\x06\x00\x08\x00\x02\x08\x00\x05\x04$\x02\x04\x00\t\x04\x00\x0e\x00\x04\n\x00\x01\x02\x1a\x00\x04\x04\x03\x08\x06\x06\x00\x0f\x06\x00\x02\x00\x14 \x02\x04\x04\x00\x01\x04\x08\x00\x01\x02\x08\x00\x01\x04\x10\x00\x13\x06\x0e\x08\x12\x04\x12\x00\x04\x00\x06\x04\x00\x11\x0c\x04\x00\x1c\x02\x00\x02\x00\x08\x08\x00\x03\x06\x16\x06\x00\x01\x04\x04\x00\r\x16\x00\x04\x00\x10\x00\x12\x04\x00\x01\x0c\x06\x00\x0f\x1a\x0e\x00\x08\x04\x00\x06\x08\x12\x00\x01\x02\x04\x00\x05\x02\x00\x04\x06\x00\x07\x1a\x00\x02\x14\x88\xaa\x01\x01\x0e\xec\x05\x00!\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x06\x00\x01\x02\x06\x00S\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x1e\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00)\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x0e\x00\x07\x01\x02\x00\x01\x04\x00\x11\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0c\x00\x0f\x01\x02\x00\x01\x02\x01\x02\x01\x10\x00\x01\x02 \x00\x05\x01\x02\x01\x0e\x00\x17\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x1c\x00\r\x02\x01\x02\x01\x00\x02\x01\n\x00\r\x02\x01\x02\x01\x00\x02\x01\x04\x00\x01\x02 \x00\x01\x01\x04\x00\x0b\x02\x00\x01\x02\x00\x01\x04\x00\x01\x02\x06\x00\x01\x01\x04\x00\x11\x02\x01\x02\x01\x02\x01\x02\x01\x02&\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x15\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02(\x00\x15\x01\x00\x02\x00\x01\x00\x02\x01\x02\x01\x02\x06\x00\'\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02\x06\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00%\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x04\x00\x13\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x08\x00\x07\x01\x02\x01\x02\x04\x00\x15\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02P\x001\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x00\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x06\x00\x17\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x02\x01\x06\x00/\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01d\x00\x05\x02\x01\x02\"\x00\x0b\x01\x02\x01\x02\x01\x02L\x00\x1d\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x00\x01\x02\x01\x02\xbc\x01\x00\x07\x01\x00\x02\x01\x0e\x00\x13\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x08\x00\x03\x02\x01\x04\x00\x19\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x06\x00\x05\x02\x01\x02\x0c\x00\x03\x01\x02\x0e\x00\x05\x01\x00\x02\x04\x00\x01\x01\x1a\x00!\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x04\x00\t\x01\x02\x01\x02\x01\x06\x00\x03\x02\x01|\x00\x01\x02\x04\x00\x07\x01\x02\x01\x02\x06\x00\x01\x01\x18\x00\x05\x02\x01\x02\n\x00\x15\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x1f\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x04\x00\x15\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x0e\x00\x01\x02\n\x00\t\x01\x00\x02\x01\x02\x08\x00\r\x01\x00\x02\x01\x02\x01\x02\x06\x00\t\x01\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x01\x02\x10\x00\x03\x01\x02\x16\x00\x05\x01\x00\x02\x0e\x00\x0f\x01\x02\x01\x02\x00\x01\x02\x01\x06\x00\x01\x02\n\x00\x03\x01\x02\n\x00\x01\x01`\x00\x01\x02\x08\x00\x15\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02*\x00\t\x01\x00\x02\x01\x02\x04\x00\x17\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x06\x00\x15\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x00\x01\x06\x00\x03\x02\x01\n\x00\t\x02\x01\x00\x02\x01\x04\x00\x01\x02\x1a\x00\x05\x01\x02\x01\n\x00\x01\x02\x0c\x00\x05\x01\x02\x01\x06\x00\x15\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x01\x04\x00\x01\x02<\x00\r\x01\x02\x01\x00\x02\x00\x01\x04\x00\x13\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x04\x00\x05\x02\x01\x02\x1c\x00\x05\x01\x00\x02\x10\x00#\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x04\x00\x03\x02\x01\x0e\x00\x01\x026\x00\x01\x01\x04\x00\x01\x02\x06\x00\x07\x01\x02\x01\x02\x14\x00\x01\x01\x04\x00\x03\x02\x01\x08\x00\x03\x02\x01\x04\x00\x05\x02\x00\x01\x06\x00\x01\x02\x06\x00!\x01\x00\x02\x01\x02\x01\x00\x02\x00\x01\x00\x02\x01\x02\x00\x01\x02\x04\x00\x0f\x01\x00\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\xbe\x01\x00\x01\x01\x16\x00\x19\x02\x01\x02\x00\x01\x02\x00\x01\x00\x02\x00\x01\x02\x04\x00\x07\x01\x02\x00\x01\x04\x00\x01\x02*\x00\x01\x01\x06\x00\x05\x02\x01\x02\x04\x00\x01\x01\x04\x00\x03\x02\x01\x06\x00\x03\x02\x01\x04\x00\x01\x02\x0c\x00\x07\x01\x02\x01\x02\x0e\x00\t\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x00\x01\x02\x06\x00\x03\x01\x02\x0e\x00\x01\x01\x06\x00\x05\x02\x00\x01\x10\x00\x01\x02\x04\x00\x01\x01\n\x00\x01\x02\x0c\x00\x07\x01\x02\x01\x02\x0e\x00\x15\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x10\x00\x03\x01\x02H\x00\x01\x01\x04\x00\x15\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x06\x00\x01\x01&\x00\x03\x02\x01\n\x00\x0b\x02\x00\x01\x02\x01\x02\n\x00\x01\x01(\x00\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x05\x02\x01\x02\x04\x00\x05\x01\x02\x01\x06\x00\x07\x02\x01\x02\x01\x04\x00\t\x02\x00\x01\x00\x02\x04\x00\x05\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\x08\x00\x1f\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x08\x00\x03\x01\x02\x86\x01\x00\x19\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\n\x00\x05\x01\x02\x01\x04\x00\x05\x02\x01\x02\x04\x00\t\x01\x00\x02\x00\x01\x04\x00\t\x02\x01\x02\x01\x02\x04\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\r\x01\x02\x00\x01\x02\x00\x01\x06\x00\x17\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x14\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x00\x01\x06\x00\x07\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\x04\x00\x01\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\x06\x00\x07\x02\x00\x01\x02\x04\x00\x0b\x01\x02\x00\x01\x00\x02\x04\x00#\x01\x02\x01\x00\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\x08\x00\r\x02\x01\x00\x02\x01\x00\x02\x04\x00\x1d\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x00\x02\x06\x00\x05\x01\x02\x01\n\x00\x15\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x16\x00\x0b\x02\x01\x02\x01\x02\x01\x06\x00\r\x02\x01\x02\x01\x00\x02\x01\x0e\x00\x07\x02\x01\x02\x01\n\x00\x03\x02\x01\x12\x00\x01\x02\n\x00\x05\x01\x02\x01\x08\x00\x11\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x04\x00\r\x01\x00\x02\x01\x02\x01\x02 \x00\x01\x01\x04\x00\x01\x02\xc6\x04\x00\x01\x01\x04\x00\x05\x02\x01\x02\x04\x00\x19\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x04\x00#\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x06\x00\x07\x01\x00\x02\x01\x08\x00\x03\x02\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\x08\x00\x1f\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x03\x02\x01\x06\x00\x01\x02\x1c\x00\x1d\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x08\x00\x03\x01\x02\x04\x00\r\x01\x02\x01\x02\x00\x01\x02\x06\x00\x03\x01\x02\x16\x00\x0f\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02\xc6\x01\x00\x01\x01\x06\x00\x01\x02 \x00\x03\x01\x02B\x00+\x01\x02\x01\x00\x02\x01\x00\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x1a\x009\x01\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x00\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02\x08\x00)\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x00\x01\x00\x02\x01\x02\x06\x00\r\x01\x00\x02\x00\x01\x02\x01\x04\x00#\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\xf4\x02\x00-\x01\x00\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\x08\x00\x1b\x02\x01\x02\x00\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x04\x00\x05\x01\x00\x02\n\x00\x05\x01\x02\x01\x06\x00\x05\x02\x01\x02\x0c\x00\x15\x01\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x04\x00S\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\xb0\x02\x00\x1b\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01p\x00\x01\x02(\x00\x05\x01\x00\x02>\x00\x19\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x00\x02\x01\x08\x00\x0f\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x07\x01\x00\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\x04\x00#\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00\x01\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\x08\x00\x19\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x0c\x00\x01\x02\x06\x00\x05\x01\x02\x01\x04\x00#\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x07\x01\x02\x01\x02\x12\x00\x0f\x01\x00\x02\x01\x00\x02\x01\x02\n\x00\x05\x01\x00\x02\x08\x00\x01\x01\x06\x00\x01\x02\x04\x00\x03\x01\x02\x04\x00\t\x01\x02\x01\x00\x02\x04\x00\x07\x01\x00\x02\x01\x06\x00\t\x02\x00\x01\x00\x02\x0c\x00-\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x04\x00\x05\x01\x02\x01\n\x00\x01\x02\x04\x00\x03\x01\x02\x08\x00\x01\x01\x04\x00!\x02\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x04\x00\x0f\x02\x01\x00\x02\x01\x02\x00\x01\x06\x00\x0b\x02\x01\x02\x01\x00\x02\x0c\x00\x17\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x12\x00\x01\x01\x06\x00\t\x02\x01\x00\x02\x01\x06\x00\x01\x02\x16\x00\x01\x01\x04\x00\x01\x02\x1c\x00\x01\x01\x14\x00\x03\x02\x01\x06\x00\x11\x02\x00\x01\x02\x01\x00\x02\x01\x02\x18\x00\x05\x01\x00\x02\x06\x00\x01\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02\x08\x00%\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x04\x00\x03\x02\x01\x06\x00\r\x02\x00\x01\x00\x02\x01\x02\n\x00\x07\x01\x02\x01\x02\x04\x00\'\x01\x02\x00\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x00\x01\x04\x00\x05\x02\x01\x02\x0c\x00\x0b\x01\x02\x01\x02\x01\x02V\x00\x11\x01\x00\x02\x00\x01\x00\x02\x01\x02\x04\x00\x01\x01\x0e\x00\x11\x02\x01\x02\x01\x02\x01\x02\x01\x02J\x00%\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x01\x01\x04\x00\r\x02\x01\x00\x02\x01\x00\x02\x08\x00\x15\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x11\x01\x00\x02\x00\x01\x02\x01\x02\x01\x06\x00\x05\x02\x01\x02\x04\x00/\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x03\x02\x01\x04\x00\x05\x02\x01\x02\x0e\x00\x01\x01\x04\x00\x1b\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\x08\x00\x1d\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x06\x00\r\x02\x01\x02\x01\x02\x00\x01\x04\x00#\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x04\x00\x01\x01\x04\x00\x05\x02\x01\x02T\x00\x01\x01\x08\x00\x1b\x02\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x06\x00\x03\x01\x02\x08\x00\r\x01\x00\x02\x01\x02\x01\x02,\x00\r\x01\x00\x02\x01\x00\x02\x01\x08\x00\t\x02\x00\x01\x02\x01\x12\x00\x01\x02\x16\x00\x0b\x01\x02\x01\x02\x01\x02\x06\x00%\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x06\x00\x01\x01\x06\x00\t\x02\x00\x01\x02\x01\x06\x00\r\x02\x01\x02\x01\x00\x02\x01\x1a\x00\x11\x02\x00\x01\x02\x01\x00\x02\x01\x02\x06\x00\x01\x01\x08\x00\x19\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x06\x00\x01\x01\x0e\x00\x01\x02\n\x00\x01\x01\x06\x00\x03\x02\x01\n\x00\x07\x02\x01\x00\x02\"\x00\x03\x01\x026\x00\x01\x01\x04\x00\r\x02\x00\x01\x02\x01\x00\x02\x04\x00\x05\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x05\x02\x00\x01\x06\x00\x01\x02\x08\x00\x03\x01\x02\xa4\x01\x00\x13\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x11\x02\x01\x02\x01\x02\x01\x02\x01\x02@\x00\x01\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\x04\x00\x13\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02 \x00\x03\x01\x02\x04\x00\x15\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x04\x00\x05\x01\x02\x01\x04\x00\x1b\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x06\x00%\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x15\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\n\x00\t\x02\x01\x02\x01\x02\n\x00\x11\x01\x02\x01\x02\x01\x00\x02\x01\x02\x08\x00\t\x01\x02\x01\x00\x02\x80\x01\x00\x01\x01$\x00\x01\x02\n\x00\x01\x01.\x00\r\x02\x01\x00\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x05\x01\x00\x02\x08\x00\x03\x01\x02\x08\x00\t\x01\x02\x00\x01\x02\x0e\x00\x1d\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x04\x00/\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x08\x00\x01\x01\x08\x00\x05\x02\x01\x02\x04\x00\t\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02t\x00%\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x06\x00\x01\x02\x18\x00\x03\x01\x02\x04\x00\x07\x01\x00\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\x04\x00\x03\x02\x01\x04\x00\x01\x022\x00\t\x01\x00\x02\x01\x02\x0e\x00\x05\x01\x00\x02\x14\x00\x01\x01\x06\x00\x0b\x02\x01\x02\x01\x00\x02\x04\x00\x01\x01*\x00\x01\x02\xd4\x01\x00\r\x01\x00\x02\x01\x02\x00\x01\x04\x00\x13\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02D\x00\x01\x01\x14\x00\x01\x02\x16\x00\x01\x01\x06\x00\x07\x02\x01\x00\x02\n\x00\x15\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x10\x00\x1f\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0c\x00\t\x01\x02\x01\x02\x01\x08\x00\x11\x02\x00\x01\x02\x00\x01\x02\x01\x02\x04\x00\x0f\x01\x02\x00\x01\x02\x01\x00\x02\x04\x00\x01\x01\x04\x00\t\x02\x01\x02\x00\x01\x04\x00\x17\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\xaa\x01\x00\x05\x01\x00\x02\x06\x00\t\x01\x02\x01\x02\x01\x06\x00\x03\x02\x01\x04\x00\x0f\x02\x01\x00\x02\x01\x02\x00\x01\x04\x00\x01\x02\x04\x00\x03\x01\x02\x06\x00\x05\x01\x02\x01*\x00\x03\x02\x01\x10\x00\x19\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x06\x00\x0f\x01\x02\x00\x01\x02\x00\x01\x02,\x00\x01\x01\x8e\x04\x00\x03\x02\x01\x04\x00\x0b\x02\x00\x01\x00\x02\x01\n\x00\x05\x02\x01\x02\x06\x00\x05\x01\x02\x01\x04\x00\x13\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x08\x00\x01\x02\n\x00\x01\x01\x08\x00\x07\x02\x00\x01\x02\x06\x00\x05\x01\x00\x02\n\x00\x01\x01\x08\x00\x05\x02\x00\x01\x08\x00\x07\x02\x01\x00\x02&\x00\x03\x01\x02\x06\x00k\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00!\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x06\x00\r\x01\x02\x00\x01\x02\x01\x02N\x00\x1b\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x06\x00K\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x08\x00\x01\x01\x0c\x00\x15\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x04\x00\x0f\x01\x02\x00\x01\x00\x02\x01\x02\x08\x00\x0b\x01\x02\x01\x02\x01\x02\n\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x01\x02\x04\x00\x01\x01\x04\x00\x05\x02\x01\x02\x1c\x00\r\x01\x02\x01\x02\x01\x00\x02\x0e\x00\x05\x01\x00\x02\x0e\x00\x01\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00#\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x0e\x00\t\x01\x00\x02\x01\x02\x10\x00\t\x01\x00\x02\x01\x02\x16\x00\x07\x01\x00\x02\x01\x06\x00\x01\x02\x06\x00\t\x01\x00\x02\x01\x028\x00\x01\x01\x06\x00\x01\x02\n\x00\x05\x01\x02\x01\x06\x00\x19\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\x07\x01\x02\x01\x02 \x00\x15\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x04\x00\x1b\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x04\x00\x03\x01\x02\x0c\x00\x01\x01\x06\x00\x19\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x11\x02\x00\x01\x02\x00\x01\x02\x01\x02 \x00\x05\x01\x02\x01\x04\x00\x15\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x06\x00\x01\x01\x0e\x00\x01\x02\x0e\x00\t\x01\x02\x01\x00\x02\x18\x00\x03\x01\x02\x04\x00\x03\x01\x02\x1a\x00\x01\x01\x06\x00\x01\x02R\x00\x05\x01\x02\x01\x06\x00\t\x02\x00\x01\x02\x01\x04\x00\x01\x02\"\x00\x07\x01\x00\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x04\x00\t\x01\x02\x01\x00\x02\x14\x00\x03\x01\x02\x06\x00\x01\x01\x04\x00\x05\x02\x01\x02\x18\x00\x11\x01\x00\x02\x01\x00\x02\x01\x00\x02\x04\x00\t\x01\x00\x02\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x00\x01\x0c\x00\x01\x02\x18\x00\x01\x01\x06\x00\x0f\x02\x00\x01\x02\x01\x02\x01\x02\x12\x00\x0b\x01\x00\x02\x01\x00\x02\x08\x00\x11\x01\x02\x01\x00\x02\x00\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x18\x00\x01\x01\n\x00\x17\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x12\x00\x01\x01\x04\x00\x03\x02\x01\x04\x00\x01\x02\n\x00\x0b\x01\x02\x01\x02\x01\x02\x08\x00\x0b\x01\x02\x01\x02\x01\x02\x08\x00\x01\x01\x06\x00\x07\x02\x01\x02\x01\x04\x00\t\x02\x00\x01\x00\x02\x06\x00\t\x01\x02\x00\x01\x02\xc0\x01\x00\x05\x01\x02\x01\x0e\x00\x03\x02\x01\x04\x00\r\x02\x00\x01\x02\x01\x00\x02\x08\x00\x1b\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x03\x02\x01\x06\x00\x13\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x14\x00\x01\x02 \x00\x01\x01N\x00\x01\x02\x06\x00\x03\x01\x02\x04\x00\x03\x01\x02H\x00\x03\x01\x02\n\x00\x05\x01\x02\x01\x08\x00\x05\x02\x01\x02\x04\x00\x05\x01\x02\x01(\x00\x01\x02\x06\x00\x05\x01\x00\x02\x08\x00\x0f\x01\x00\x02\x01\x00\x02\x01\x026\x00\x0b\x01\x00\x02\x01\x02\x01\n\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x08\x00\x05\x02\x01\x02\x06\x00\x01\x01\x08\x00\x01\x02:\x00\x0b\x01\x02\x01\x02\x00\x01\x0c\x00\x01\x02J\x00\x03\x01\x02N\x00\r\x01\x00\x02\x01\x02\x01\x02\x08\x00\x01\x01b\x00\x01\x02\x04\x00\x03\x01\x02\x08\x00\x07\x01\x02\x01\x02\x06\x00K\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00-\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x19\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x04\x00\x07\x01\x02\x01\x02\x06\x00\r\x01\x02\x01\x02\x01\x02\x01\x04\x00\x01\x022\x00;\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x06\x00\x17\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x13\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\x04\x00#\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x17\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x03\x01\x02\x04\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\x88\x01\x00\x1d\x01\x00\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\n\x00\x05\x01\x00\x02\x06\x00\x05\x01\x02\x01\x06\x00\r\x02\x01\x02\x01\x02\x00\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x00\x01\x02\"\x00\x01\x01\x04\x00\x05\x02\x01\x02\x04\x00\x05\x01\x02\x01\x08\x00\x01\x02\x08\x00%\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x10\x00#\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\xc2\x02\x00\x01\x02\x04\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x07\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02\x98\x01\x00\x0f\x01\x00\x02\x01\x02\x01\x00\x02\n\x00%\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x0c\x00\x0f\x01\x00\x02\x01\x02\x01\x00\x02\x9e\x01\x00K\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x00\x01\x04\x00\x01\x02\x0c\x00\x07\x01\x02\x01\x02\"\x00\x07\x01\x02\x01\x02\x04\x00=\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x1e\x00\t\x01\x02\x01\x00\x02\x0c\x00\x03\x01\x02\x0c\x00\x01\x01\x04\x005\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x07\x01\x00\x02\x01\x04\x00\x03\x02\x01\x06\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x00\x01\x04\x00\x0f\x02\x00\x01\x00\x02\x01\x02\x01\x08\x00\x07\x02\x00\x01\x02\x04\x00/\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x00\x02\x12\x00\r\x01\x00\x02\x00\x01\x02\x01\x0c\x00\x01\x022\x00\x1b\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x01\x01\x08\x00\t\x02\x01\x00\x02\x01\x04\x00\x01\x02\x04\x00\x01\x01\x06\x00\x03\x02\x01\x04\x00\x03\x02\x01\x04\x001\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x06\x00\t\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x01\x02v\x00\x01\x01\x12\x00\x01\x02\n\x00\x01\x01\x08\x00\x05\x02\x00\x01\x0e\x00\x05\x02\x00\x01\x04\x00\x03\x02\x01\x04\x00\x0b\x02\x00\x01\x02\x01\x02\x10\x00\x07\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x05\x02\x01\x02\x14\x00\x01\x01\x08\x00\x01\x02H\x00\t\x01\x00\x02\x01\x02\x04\x00\x03\x01\x02$\x00\x05\x01\x02\x01\x08\x00\x03\x02\x01\x04\x00\x07\x02\x01\x02\x01z\x00\x01\x02\x16\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x89\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x06\x00\x05\x02\x01\x02\x0c\x00\x11\x01\x00\x02\x01\x02\x01\x02\x01\x02\x04\x00\x0f\x01\x00\x02\x01\x02\x01\x02\x01\x06\x00\t\x02\x01\x02\x01\x02\x04\x00\t\x01\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\t\x01\x02\x01\x00\x02\x1c\x00\t\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\n\x00\x05\x02\x01\x02\x12\x00\x01\x01\x14\x00\x03\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x08\x00\x03\x01\x02\x0c\x00\x03\x01\x02\x12\x00!\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x01\x02\x18\x00\x01\x01\x04\x00\x01\x02\x08\x00\x01\x01\x04\x00\x03\x02\x01\x06\x00\x01\x02\x10\x00\x1d\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x0e\x00\x1b\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x04\x00\x01\x02\x0e\x00\x03\x01\x020\x00\x03\x01\x02\x04\x00\x03\x01\x02\x06\x00\x05\x01\x02\x01\x08\x00\x03\x02\x01\x06\x00\x07\x02\x01\x00\x02P\x00\x0b\x01\x02\x00\x01\x00\x02\x06\x00\x07\x01\x02\x01\x02\x1e\x00\x03\x01\x02\x06\x00\r\x01\x00\x02\x00\x01\x02\x01\x04\x00\x05\x02\x01\x02\n\x00\x03\x01\x02\x06\x00\x13\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02\x16\x00\x01\x01\x04\x00\x03\x02\x01\x04\x00\x17\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02\x08\x00\x01\x01\x08\x00\x05\x02\x01\x02\x18\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\x05\x01\x02\x01`\x00\x07\x02\x00\x01\x02\x04\x00\x03\x01\x02\\\x00\x1d\x01\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x04\x00\x0b\x01\x00\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x03\x01\x02\x04\x00\x01\x01\x08\x00\x1f\x02\x00\x01\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x00\x02\x01\n\x00\x19\x02\x00\x01\x00\x02\x01\x02\x01\x00\x02\x00\x01\x02\xc6\x02\x00\x01\x014\x00\x05\x02\x01\x02\x04\x00\x03\x01\x02B\x00\x01\x01\x08\x00\x05\x02\x00\x01\x08\x00\x01\x02\x04\x00\x01\x01\x04\x00\x05\x02\x01\x020\x00\x01\x01\n\x00\x03\x02\x01\x16\x00\x01\x02\x06\x00\x03\x01\x02\x06\x00\x01\x01\x08\x00\x01\x02\x08\x00\x01\x01\x1c\x00\x01\x02$\x00\x05\x01\x02\x01\x0c\x00\x13\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x05\x01\x02\x01&\x00\x03\x02\x01\x06\x00#\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x00\x01\x00\x02\x01\x02\x00\x01\x04\x00\x19\x02\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x00\x02d\x00\x17\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x0c\x00\t\x02\x00\x01\x02\x01\n\x00\x03\x02\x01\n\x00\x01\x02\x04\x00\r\x01\x00\x02\x00\x01\x02\x01\x04\x00\x01\x02V\x00#\x01\x00\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x17\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x07\x01\x02\x01\x02\xb0\x01\x00\x13\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\xbe\x02\x00\x0f\x01\x02\x00\x01\x00\x02\x00\x01\x04\x00\x0b\x02\x00\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02d\x00\t\x01\x00\x02\x00\x010\x00\x01\x020\x00\x01\x01\x18\x00\x01\x02\x04\x00\x1f\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0c\x00\x01\x01\x04\x00\x05\x02\x00\x012\x00\x13\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x0c\x00\x01\x02\n\x00\x05\x01\x00\x02\x06\x00\x01\x01V\x00\x03\x02\x01\x06\x00\x0f\x02\x01\x02\x01\x00\x02\x01\x02r\x00\x07\x01\x02\x01\x02\x14\x00\x05\x01\x02\x01\x04\x00\x11\x02\x00\x01\x02\x00\x01\x02\x00\x01\x0e\x00\t\x02\x00\x01\x02\x01\x04\x00\x03\x02\x01\x14\x00\x01\x02\n\x00\x03\x01\x02\x1e\x00\x11\x01\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x06\x00\x0f\x01\x02\x01\x00\x02\x01\x02\x01\x08\x00\x01\x02\x08\x00\x11\x01\x02\x00\x01\x02\x01\x00\x02\x01\n\x00\x03\x02\x01\x06\x00\x03\x02\x01\x16\x00\x03\x02\x01\x18\x00\x01\x028\x00\x0b\x01\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x1b\x01\x00\x02\x01\x00\x02\x01\x00\x02\x00\x01\x00\x02\x01\x06\x00\x01\x02\n\x00\x03\x01\x02\n\x00\x01\x01\x06\x00\x05\x02\x00\x01\x06\x00\x03\x02\x01l\x00+\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x1b\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x08\x00\x05\x01\x02\x01\x04\x00\t\x02\x01\x02\x00\x01\x04\x00!\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x024\x00O\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x1d\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02,\x00!\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x04\x007\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x04\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x0b\x02\x01\x02\x00\x01\x02\n\x00\x07\x01\x00\x02\x01\x04\x00\x03\x02\x01\x08\x00\x05\x02\x01\x02^\x00\x0f\x01\x00\x02\x00\x01\x02\x00\x01\x04\x00\x0f\x02\x01\x02\x00\x01\x02\x01\x02\x06\x00i\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x04\x00\r\x01\x00\x02\x01\x02\x01\x02\x08\x00\x19\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x04\x00\x01\x01\x08\x00\x19\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x15\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x0e\x00C\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x0f\x01\x02\x00\x01\x00\x02\x01\x02\x0c\x00\'\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\r\x01\x02\x01\x02\x01\x02\x01\x04\x00\x0f\x02\x01\x02\x00\x01\x02\x01\x02\x04\x001\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x08\x00\x03\x02\x01\x06\x00\x03\x02\x01\x04\x00\x01\x02\x8c\x01\x00\x01\x01\x0c\x00\t\x02\x01\x02\x01\x02\x04\x00\t\x01\x00\x02\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x01\x02\x04\x00\x0f\x01\x00\x02\x01\x02\x00\x01\x02\x06\x00a\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x13\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01~\x00\x01\x02\x04\x00\x17\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\x05\x01\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02\x04\x00\x01\x01\x06\x00\x01\x02\x18\x00\x07\x01\x00\x02\x01\x04\x00\x01\x02\x0c\x00!\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x02\n\x00\t\x01\x02\x01\x00\x02\x04\x00)\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x04\x00\x13\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x0c\x00\x01\x024\x00\x17\x01\x00\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x08\x00\t\x02\x01\x02\x01\x02\x1e\x00\x01\x01\x04\x00\r\x02\x01\x02\x01\x02\x01\x02\x08\x00\x19\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x02\x00\x01\x04\x00\x03\x02\x01\x04\x00\x01\x02\x0c\x00\x15\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x10\x00\x13\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01v\x00\x0b\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x03\x01\x02\x10\x00\x0f\x01\x00\x02\x01\x00\x02\x01\x02\x14\x00\x01\x01\x18\x00\x1f\x02\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x1a\x00\x05\x01\x02\x01\n\x00\x03\x02\x01\x12\x00\x03\x02\x01\x06\x00\x03\x02\x01\x06\x00\x07\x02\x01\x02\x01\x0c\x00\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01\x14\x00\x05\x02\x01\x02\x06\x00\r\x01\x02\x01\x02\x00\x01\x02\x06\x00\x01\x01\x06\x00\x05\x02\x01\x02\x04\x00\x13\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x04\x00\r\x01\x02\x01\x02\x01\x00\x02\x04\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x10\x00\x17\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x04\x00\x0b\x01\x00\x02\x01\x00\x02n\x00\x13\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\n\x00\x1f\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x11\x01\x02\x01\x00\x02\x01\x02\x01\x02\x06\x00=\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x06\x00\x11\x01\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00\t\x01\x02\x01\x00\x02\x08\x00\x01\x01\x06\x00\x0b\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x0e\x00\x01\x01\x04\x00\x03\x02\x01\x04\x00\x01\x02\x06\x00\x15\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x08\x00\x01\x02\x14\x00\x0b\x01\x02\x01\x02\x01\x02\x10\x00\x03\x01\x02\x16\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\xa0\x02\x00\x05\x01\x00\x02\x06\x00\x1f\x01\x00\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x00\x01\x04\x00\x01\x02\x08\x00\x03\x01\x02\x08\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\x1b\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x11\x01\x00\x02\x00\x01\x02\x01\x02\x01\x04\x00\x01\x026\x00\x05\x01\x02\x01\x0e\x00\x01\x02\x08\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x01\x01\x06\x00\x0f\x02\x01\x02\x00\x01\x00\x02\x01\x06\x00\x01\x02\x06\x00\x03\x01\x02\x06\x00\x05\x01\x02\x01\x08\x00\x1d\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x00\x02\x00\x01\x02V\x00\x17\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\x0f\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02\x04\x00\x05\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02&\x00\t\x01\x02\x01\x00\x02\x04\x00\x05\x01\x02\x01\x04\x005\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x08\x00\x05\x01\x02\x01\x08\x00!\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x022\x00\x01\x01\x06\x00\x11\x02\x00\x01\x02\x00\x01\x00\x02\x01\x04\x00#\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x05\x02\x00\x01\n\x00\x01\x02\x0c\x00\x0b\x01\x00\x02\x01\x00\x02\x06\x00\x1b\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x00\x02\x01\x08\x00\x03\x02\x01\x04\x00\x7f\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x08\x00\x07\x01\x02\x01\x02\x06\x00\x13\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x06\x00\x07\x02\x01\x00\x02T\x00\r\x01\x00\x02\x00\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x01\x02\x06\x00\t\x01\x00\x02\x00\x01\x04\x00\x13\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x06\x00\x03\x01\x02\n\x00\x07\x01\x02\x01\x02\x08\x00\x01\x01\x06\x00\x11\x02\x01\x00\x02\x01\x02\x01\x02\x01\x18\x00\x19\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x1e\x00\x07\x01\x00\x02\x01$\x00\x01\x02|\x00\x07\x01\x00\x02\x01\x04\x00\x03\x02\x01\x04\x00\x05\x02\x01\x02\x04\x00\t\x01\x02\x00\x01\x02\x06\x00\x03\x01\x02T\x00\x13\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x08\x00\x01\x02\n\x00\x03\x01\x02&\x00\x07\x01\x02\x00\x01\x04\x00\r\x02\x00\x01\x02\x01\x02\x01\x06\x00\x03\x02\x01\x06\x00\x15\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x12\x00\x07\x02\x00\x01\x02\x06\x00\x05\x01\x02\x01\x06\x00\x1d\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x03\x02\x01\x08\x00\x01\x02\x04\x00O\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x01\x02\x08\x00\x03\x01\x02\x04\x003\x01\x00\x02\x00\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00!\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x06\x00\x03\x01\x02\x04\x00\x01\x01\x0c\x00\x05\x02\x00\x01\n\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02\x04\x00\x03\x01\x02\x08\x00\x01\x01\x08\x00\x0b\x02\x01\x02\x01\x00\x02\xb8\x03\x00\x05\x01\x02\x01\x06\x00\x03\x02\x01\x14\x00\x01\x02\x04\x00\x03\x01\x02\n\x00\x0b\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\n\x00\x05\x02\x00\x01\x06\x00\x01\x02\x0e\x00\x07\x01\x02\x00\x01\x06\x00\x01\x02\x06\x00\t\x01\x02\x01\x00\x02\x04\x00)\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x024\x00\x07\x01\x00\x02\x01\x06\x00\r\x02\x01\x00\x02\x01\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\n\x00\x13\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\n\x00\x07\x01\x00\x02\x01\x12\x00\r\x02\x00\x01\x00\x02\x01\x02\x08\x00\x01\x01\n\x00\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x00\x01\x10\x00\x0b\x02\x01\x00\x02\x00\x01\x1a\x00\x01\x02\x04\x00\t\x01\x02\x01\x00\x02&\x00\x15\x01\x00\x02\x00\x01\x02\x01\x02\x01\x00\x02>\x00\x05\x01\x00\x02\x06\x00\x01\x01\x14\x00\x0b\x02\x01\x00\x02\x01\x02\x0e\x00\t\x01\x02\x00\x01\x02\n\x00\x05\x01\x00\x02J\x00\x07\x01\x00\x02\x01\x06\x00\x03\x02\x01\x06\x00\x03\x02\x01\n\x00\r\x02\x01\x02\x01\x00\x02\x01\x04\x00\x11\x02\x01\x02\x00\x01\x00\x02\x01\x02\x98\x01\x00\x13\x01\x00\x02\x01\x02\x01\x00\x02\x00\x01\x08\x00\x05\x02\x01\x02\n\x00\x01\x01\x04\x00\x01\x02T\x00\x03\x01\x02.\x00\x07\x01\x02\x01\x02\x08\x00\x05\x01\x02\x01\x0e\x00\x01\x02\x06\x00\x03\x01\x02&\x00\x03\x01\x02\x08\x00\x03\x01\x02\x04\x00\x01\x01\x04\x00\x01\x022\x00\x13\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x06\x00#\x02\x01\x02\x00\x01\x00\x02\x00\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x04\x00\x01\x02\x04\x00\x03\x01\x02\x06\x00!\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x05\x02\x00\x01\x04\x00\x11\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02V\x00\x01\x01$\x00\x05\x02\x01\x02\x04\x00\x0f\x01\x00\x02\x00\x01\x02\x00\x01\x12\x00\x01\x02\x14\x00\x01\x01\x04\x00\x0f\x02\x01\x00\x02\x01\x00\x02\x01\x08\x00\x0f\x02\x01\x00\x02\x01\x00\x02\x01\n\x00\x01\x02\x08\x00\x07\x01\x00\x02\x01\x08\x00\t\x02\x01\x00\x02\x01\x0c\x00\x03\x02\x01\x0c\x00\x0f\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00\x01\x01\x08\x00\x01\x02\x04\x00\x11\x01\x00\x02\x01\x00\x02\x01\x00\x02<\x00\x01\x01(\x00\x01\x02\x06\x00\x17\x01\x02\x00\x01\x02\x01\x00\x02\x00\x01\x02\x01\x14\x00!\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00A\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x0f\x02\x01\x00\x02\x01\x02\x01\x02\xca\x04\x00\x0b\x01\x00\x02\x01\x02\x01\x08\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\n\x00\x01\x02\x0c\x00\x05\x01\x02\x01\x04\x00\x13\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01 \x00\x03\x02\x01\x06\x00\x03\x02\x01\x14\x00\x07\x02\x01\x02\x01\x06\x00\r\x02\x01\x02\x00\x01\x02\x01\x04\x00\t\x02\x00\x01\x00\x02\x10\x00\x1d\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x05\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\n\x00\x07\x02\x01\x02\x01\n\x00\x07\x02\x01\x00\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x01\x01\x06\x00\x07\x02\x00\x01\x02\x10\x00\x03\x01\x02\x0e\x00\r\x01\x02\x01\x02\x00\x01\x02\x10\x00\x15\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x04\x00\x11\x01\x00\x02\x01\x02\x00\x01\x02\x01\x04\x00\x07\x02\x00\x01\x02\x04\x00\t\x01\x02\x00\x01\x02\x04\x00\t\x01\x02\x00\x01\x02\n\x00\x11\x01\x02\x01\x02\x01\x00\x02\x00\x01\x04\x00\x01\x02\x06\x00\x13\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\"\x00\x01\x02\x08\x00\x03\x01\x02\x18\x00\x1b\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x01\x00\x02\xba\x01\x00\x01\x01Z\x00\x03\x02\x01\x06\x00\x03\x02\x01\x04\x00\x03\x02\x01\x04\x00\x01\x02\x18\x00\x03\x01\x02\x06\x00\x01\x01@\x00\x03\x02\x01\"\x00\x05\x02\x00\x01\n\x00\t\x02\x01\x00\x02\x01\x06\x00\x01\x02\x1a\x00\x03\x01\x02\x04\x00\x13\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\n\x00\x03\x01\x02\x08\x00\x05\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x00\x02\x01\x88\x02\x00\x11\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02\x9a\r\x00\x07\x01\x00\x02\x01\x0c\x00\x07\x02\x01\x00\x02\x0c\x00\x03\x01\x02\n\x00\x11\x01\x02\x01\x00\x02\x01\x00\x02\x01\x06\x00\x03\x02\x01\x08\x00\x01\x02\x04\x00\x01\x01\x06\x00\x01\x02\x04\x00\x01\x01\x12\x00\x01\x02\x1a\x00\x07\x01\x02\x01\x02\x06\x00\x01\x01\x08\x00\x1f\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\n\x00\x05\x01\x02\x01\x06\x00\x05\x02\x01\x02\x0c\x00\x15\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x02\x1e\x00\x03\x01\x02&\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00/\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\r\x01\x02\x00\x01\x02\x01\x02\xb2\x01\x00\x13\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\x05\x01\x00\x02\x04\x00\x0f\x01\x02\x01\x00\x02\x01\x00\x02\x04\x00\x07\x01\x00\x02\x01\x04\x00\t\x02\x00\x01\x02\x01\n\x00\t\x02\x00\x01\x00\x02\x06\x00\x1b\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x0e\x00\x05\x01\x00\x02\x04\x00\x01\x01\x04\x00\x05\x02\x01\x02\x0e\x005\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\\\x00!\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x06\x00\x05\x01\x00\x02\x04\x00\x17\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x08\x00\x03\x02\x01\x06\x00\t\x02\x00\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x06\x00\x01\x02\x06\x00\x05\x01\x02\x01\x04\x00\x01\x02\n\x00\x01\x01`\x00\x01\x02&\x00\x01\x010\x00\t\x02\x01\x02\x00\x01\x06\x00\x01\x02\x04\x00\x01\x01\x04\x00\x0b\x02\x01\x00\x02\x00\x01\x08\x00\x15\x02\x01\x02\x01\x00\x02\x00\x01\x00\x02\x01\x04\x00\x05\x02\x01\x02\x0e\x00\x05\x01\x02\x01\n\x00\x1b\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x01\x02\x08\x00\x01\x01\x10\x00\x03\x02\x01\x08\x00\x01\x02\x0e\x00?\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x04\x00\x01\x02\x04\x003\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x08\x00\x17\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x84\x01\x00\r\x01\x00\x02\x01\x00\x02\x01\x0c\x00\x03\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\x06\x00\x07\x01\x02\x01\x02\xda\x01\x00\x15\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x08\x00\x01\x02\x04\x00\t\x01\x02\x01\x02\x01\x0e\x00\x05\x02\x00\x01\x04\x00!\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\xf6\x01\x00\t\x01\x00\x02\x00\x01\x04\x00\x01\x02\xaa\x06\x00\x03\x01\x02\x04\x00\x01\x01\x04\x00\r\x02\x01\x00\x02\x01\x00\x02\x08\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01\x06\x00\x01\x02\x08\x00+\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x0f\x02\x00\x01\x02\x01\x02\x01\x02\x08\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x10\x00\r\x01\x00\x02\x01\x02\x00\x01\x04\x00\x01\x02\x06\x00\x07\x01\x02\x01\x02\x06\x00\x0b\x01\x02\x01\x00\x02\x01\x04\x00\x07\x02\x01\x00\x02\n\x00\x07\x01\x00\x02\x01\x04\x00\x01\x02\x08\x00[\x01\x02\x01\x02\x01\x00\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x06\x00\x13\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02&\x00\x01\x01\x04\x00\x05\x02\x00\x01\x08\x00\x01\x02\x10\x00\x01\x01\x0e\x00\t\x02\x01\x02\x01\x02\x06\x00\x01\x01\x06\x00\t\x02\x01\x00\x02\x01\x04\x00\x03\x02\x01\n\x00\r\x02\x01\x02\x01\x02\x00\x01\x06\x00\x01\x02\x04\x00\x01\x01\x0c\x00\r\x02\x00\x01\x02\x01\x02\x01\x04\x00\x0f\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x05\x01\x00\x02\xce\x02\x00\x0b\x01\x02\x01\x02\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01\x06\x00\x01\x02\x1a\x00\x03\x01\x02\x16\x00\x05\x01\x00\x02\x06\x00\x11\x01\x00\x02\x01\x02\x01\x02\x01\x02*\x00\x05\x01\x00\x02D\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x15\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x0e\x00\x01\x01\n\x00\x01\x02\n\x00\x05\x01\x02\x01\x04\x00\x05\x02\x00\x01\x04\x00\x03\x02\x01\x0c\x00\x05\x02\x00\x01\x08\x00\x01\x02\x06\x00\x01\x01\x06\x00\x01\x02\x08\x00\x07\x01\x00\x02\x01\x04\x009\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x00\x01\x04\x00\x11\x02\x01\x02\x01\x02\x01\x02\x01\x02\x1a\x00\x03\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x00\x01\n\x00\x1b\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x00\x01\x02\x00\x01\x06\x00\x07\x02\x01\x00\x02\x0c\x00\t\x01\x00\x02\x01\x02\x08\x00\x01\x01\x06\x00\x03\x02\x01\x06\x00\x0f\x02\x00\x01\x00\x02\x00\x01\x02\x08\x00\t\x01\x00\x02\x00\x01\x04\x00\x15\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x10\x00C\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\r\x02\x00\x01\x02\x01\x02\x01\x04\x00\x03\x02\x010\x00\x01\x02\n\x00\x07\x01\x00\x02\x01\x14\x00\x07\x02\x00\x01\x02\x10\x00\x01\x01\x04\x00\x03\x02\x01\x08\x00\x01\x02\x82\x01\x00\x01\x01\x06\x00?\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\n\x00\x05\x02\x00\x01\x06\x00\x01\x02,\x00\x01\x01\x04\x00\x01\x02\x06\x00\x01\x01\x06\x00\x01\x02\xaa\x03\x00\x05\x01\x00\x02\x06\x00\x01\x01\x04\x00\x01\x02\n\x00\x01\x01\x0c\x00\x07\x02\x01\x00\x02\x16\x00\x05\x01\x00\x02\x04\x00\x01\x01\x06\x00\x01\x02\x06\x00\x01\x01\x06\x00\t\x02\x01\x00\x02\x01\n\x00\r\x02\x01\x00\x02\x01\x00\x02\x04\x00\x01\x01\x04\x00\x05\x02\x01\x02\x08\x00\x03\x01\x02\n\x00\x13\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x04\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02 \x00\x05\x01\x00\x02\x04\x00\x1d\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x06\x00\x03\x02\x01\x04\x00\x01\x02\x18\x00\x15\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x03\x02\x01\x14\x00\t\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x07\x02\x01\x00\x02\x0c\x00\x05\x01\x00\x02\x04\x00\t\x01\x00\x02\x00\x01\x06\x00\x05\x02\x00\x01\x04\x00\r\x02\x01\x00\x02\x01\x00\x02(\x00\x05\x01\x00\x02\x14\x00\x01\x01\x04\x00\x01\x02\x04\x00\r\x01\x02\x01\x02\x00\x01\x02\n\x00\x01\x01\x04\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02*\x00\x03\x01\x02\x14\x00\x11\x01\x00\x02\x01\x00\x02\x01\x00\x02\x04\x00\x03\x01\x02\x04\x00\x01\x01\n\x00\x03\x02\x01\x0e\x00\x01\x02\x18\x00\x05\x01\x02\x01\x04\x00\x03\x02\x016\x00\x0f\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00\x01\x01\x04\x00\x01\x02\n\x00\x01\x01\x08\x00\t\x02\x01\x00\x02\x01\x0c\x00\x05\x02\x00\x01\x0c\x00\x07\x02\x01\x02\x01\x0c\x00\x01\x02\n\x00\x03\x01\x02\x08\x00\x01\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\n\x00\x0f\x01\x00\x02\x00\x01\x00\x02\x01\x04\x00\x07\x02\x01\x00\x02*\x00\x07\x01\x00\x02\x01\x0c\x00\x01\x02\x16\x00\x0b\x01\x02\x00\x01\x02\x01\x04\x00\x03\x02\x01\x0c\x00\x01\x02\x9c\x02\x00\x07\x01\x02\x00\x01\x04\x00\x03\x02\x01\x04\x00\x03\x02\x01\x1a\x00\x07\x02\x01\x02\x01\x08\x00\x17\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\xc4\x03\x00\x03\x02\x01\x04\x00\x0f\x02\x01\x00\x02\x00\x01\x00\x02:\x00\x05\x01\x00\x02\\\x00\x05\x01\x00\x02\x1a\x00\x03\x01\x02\x06\x00\x05\x01\x00\x02\x04\x00\x15\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\xee\x01\x00\x01\x02\x06\x00\x07\x01\x02\x01\x02\x08\x00\t\x01\x02\x01\x00\x02\n\x00\x01\x01\n\x00\x03\x02\x01\x04\x00\x01\x02>\x00\x03\x01\x02\x18\x00\x13\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02,\x00\x05\x01\x00\x02\x14\x00\r\x01\x00\x02\x01\x00\x02\x01\x04\x00\x05\x02\x00\x01\x08\x00\x05\x02\x01\x02\n\x00\x05\x01\x02\x01\x04\x00\x0f\x02\x01\x02\x01\x00\x02\x01\x026\x00\x01\x01\x06\x00\x01\x02\x08\x00\x03\x01\x02\x0e\x00\x01\x01\x04\x00\t\x02\x01\x02\x01\x02\x06\x00\x07\x01\x00\x02\x01\x10\x00\x05\x02\x00\x01\x04\x00\t\x02\x01\x00\x02\x01\x08\x00\r\x02\x01\x02\x01\x00\x02\x01\x04\x00\x01\x02(\x00\x01\x01\x04\x00\x01\x02$\x00\x13\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x04\x00\x11\x02\x01\x00\x02\x00\x01\x00\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x01\x02\x06\x00\x01\x01\x06\x00\x05\x02\x01\x02\x04\x00\x03\x01\x02\x04\x00\x1d\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\x03\x01\x02\x06\x00\x17\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x0b\x01\x00\x02\x00\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x00\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x0c\x00\x03\x02\x01\x04\x00\x05\x02\x01\x02\n\x00\x1f\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x1b\x01\x02\x00\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x15\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x06\x00\x13\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x04\x00\x05\x01\x00\x02(\x00\r\x01\x02\x00\x01\x02\x01\x02\x0c\x00\x01\x01\x06\x00\x11\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x0b\x02\x00\x01\x02\x01\x02 \x00\x1b\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x0c\x00\x01\x01\x12\x00\x07\x02\x01\x02\x01\n\x00\x07\x02\x01\x02\x01\x04\x00\x19\x02\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x00\x01\x02\x08\x00\x13\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\n\x00\x03\x01\x02\x1e\x00\x01\x01\x0e\x00\x03\x02\x01\x04\x00\x19\x02\x00\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x02\x04\x00\t\x01\x02\x01\x02\x01\x10\x00\x05\x02\x01\x02\"\x00\x01\x01\x10\x00\x01\x02N\x00\x05\x01\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x00\x01\x04\x00\x07\x02\x01\x02\x01\x0e\x00\x01\x02\x0e\x00\x01\x01\x14\x00\x01\x02\n\x00\x17\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x08\x00\x15\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x01\x02N\x00\x01\x01\x0c\x00\t\x02\x01\x00\x02\x01\x0e\x00;\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x11\x02\x00\x01\x00\x02\x01\x00\x02\x01\x06\x00\x0f\x02\x01\x02\x00\x01\x02\x01\x02\xc4\x01\x00\t\x01\x00\x02\x00\x01\x08\x00\x17\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x08\x00\x01\x01\x08\x00\x05\x02\x01\x02\x14\x00\t\x01\x02\x01\x00\x02\x0c\x00\xd5\x03\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x04\x00\x03\x01\x02L\x00\x01\x01\x06\x00\x17\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x03\x02\x01\x04\x00\x01\x02\x14\x00\x03\x01\x02\"\x00\x03\x01\x02\x96\x01\x00\x01\x01\x06\x00\t\x02\x01\x00\x02\x01\x06\x00\x11\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02$\x00\x01\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\r\x02\x00\x01\x00\x02\x01\x02\x0e\x00\x03\x01\x02\x04\x00\t\x01\x02\x01\x00\x02\x06\x00\x0b\x01\x02\x00\x01\x02\x01\x04\x00\x01\x02\x04\x00\x07\x01\x02\x01\x02\x08\x00\x05\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\n\x00\x01\x01\x04\x00\x1d\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x04\x00\x19\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x04\x00\t\x02\x01\x02\x00\x01\xd4\x03\x00+\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\xe2\x03\x00\x1b\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x08\x00\t\x01\x00\x02\x01\x02\x08\x00\t\x01\x02\x01\x02\x01\x06\x00\x03\x02\x01\x06\x00\x01\x02\x0c\x00\x07\x01\x00\x02\x01\x06\x00#\x02\x01\x02\x00\x01\x02\x00\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x01\x02\x88\x03\x00\x05\x01\x00\x02\x04\x00\x07\x01\x02\x01\x02\x08\x00\x05\x01\x02\x01\x06\x00\x01\x02\n\x00\x01\x01\x06\x00\x01\x02\x0c\x00\x01\x01\x04\x00\x0f\x02\x01\x00\x02\x01\x02\x01\x02\n\x00\x05\x01\x00\x02\x0e\x00\x0f\x01\x02\x01\x00\x02\x01\x02\x01\x0c\x00\t\x02\x01\x02\x01\x02\x06\x00\x05\x01\x00\x02\x06\x00\x05\x01\x02\x01\x04\x00\x13\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x04\x00\x03\x02\x01\x06\x00\x05\x02\x00\x01\x06\x00\x01\x02\xf2\x01\x00\x07\x01\x00\x02\x01\x04\x00\x0b\x02\x01\x02\x00\x01\x02\x04\x00\x01\x01\x04\x00\x01\x02$\x00\x05\x01\x02\x01\x12\x00\x11\x02\x00\x01\x02\x01\x02\x01\x02\x01\x12\x00\x03\x02\x01\x06\x00\x05\x02\x01\x02\x04\x00\x01\x01\x04\x00\t\x02\x00\x01\x02\x01\x04\x00\x03\x02\x01\x1c\x00%\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\n\x00\t\x02\x01\x00\x02\x01\x04\x00\x01\x02\x1a\x00\t\x01\x00\x02\x01\x02\x06\x00\x13\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x06\x00\x07\x01\x02\x01\x02\x04\x00\r\x01\x00\x02\x01\x02\x01\x02\x10\x00\x03\x01\x02\x04\x00\t\x01\x02\x00\x01\x02V\x00\x03\x01\x02\x06\x00\x01\x01\x04\x00\x01\x02\x0e\x00#\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\t\x01\x02\x00\x01\x02\x08\x00\x0b\x01\x02\x00\x01\x02\x01\x04\x00\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x01\x02d\x00\x01\x01\x0c\x00\x17\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x06\x00\x03\x01\x02\x12\x00\x01\x01\x04\x00\x05\x02\x01\x02\x0c\x00\x17\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\n\x00\x0b\x02\x00\x01\x02\x01\x02\x06\x00\x03\x01\x02\n\x00\x11\x01\x00\x02\x01\x02\x01\x02\x01\x028\x00\x01\x01\x06\x00\x0b\x02\x00\x01\x00\x02\x01\x08\x00\x01\x028\x00\x03\x01\x02\x1e\x00\x01\x01\x04\x00\x01\x02\x16\x00\x05\x01\x02\x01\x04\x00\x05\x02\x01\x02\x10\x00\x01\x01\x04\x00\x01\x02\x04\x00\x01\x01,\x00\x01\x02\n\x00\r\x01\x02\x01\x00\x02\x01\x02\x80\x01\x00\x01\x01\x04\x00\t\x02\x00\x01\x02\x01\x06\x00\x17\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\xa4\x02\x00)\x01\x00\x02\x00\x01\x02\x00\x01\x00\x02\x01\x00\x02\x00\x01\x00\x02\x01\x02\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\r\x02\x01\x00\x02\x01\x00\x02\x06\x00%\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x10\x00\r\x01\x02\x01\x02\x01\x00\x02\x04\x00\x0b\x01\x02\x01\x02\x01\x02\x04\x00-\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\x04\x00\x05\x02\x00\x01\x04\x00\x0f\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x05\x02\x01\x02\x04\x00\x01\x01\x04\x00\x03\x02\x01\x06\x00\x19\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x00\x02\x04\x003\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x00\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x10\x00#\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x08\x00\x0f\x01\x02\x00\x01\x00\x02\x01\x02\x08\x00\x15\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x04\x00\x11\x02\x01\x00\x02\x00\x01\x02\x00\x01\x06\x00\x07\x02\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x13\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x04\x00\x01\x01\x04\x00\x03\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x04\x00\t\x01\x02\x01\x00\x02\x08\x00\x01\x01\x06\x00\x03\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\n\x00\x07\x02\x01\x02\x01\x06\x00\t\x02\x01\x02\x00\x01\n\x00\x13\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x06\x00%\x02\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x00\x01\n\x009\x02\x01\x00\x02\x00\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x04\x00\x07\x02\x01\x00\x02\x06\x00\t\x01\x02\x01\x02\x01\x04\x00\x01\x02$\x00\x0f\x01\x00\x02\x01\x00\x02\x01\x02\x0c\x00\t\x01\x00\x02\x00\x01\x04\x00\x01\x02\x06\x00\x05\x01\x02\x01\x04\x00\t\x02\x01\x02\x00\x01\x06\x00\x01\x02\x08\x00\x01\x01\x04\x00\r\x02\x00\x01\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x01\x01\x1c\x00\t\x02\x01\x02\x01\x02\x18\x00\x01\x01\x14\x00\x01\x02\x1c\x00\x01\x01\x04\x00\x0f\x02\x00\x01\x02\x01\x00\x02\x01\x06\x00\x0b\x02\x01\x02\x01\x00\x02\n\x00\x01\x01\x08\x00\x11\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00#\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x00\x01\x02,\x00\x03\x01\x02\x06\x00\x01\x01\x0c\x00\x01\x02\x04\x00\x01\x01\x0c\x00\x07\x02\x01\x00\x02\x04\x00\x05\x01\x02\x01\x06\x00\x07\x02\x01\x02\x01\x0c\x00\t\x02\x01\x02\x01\x02\x08\x00\x01\x01\x06\x00\x15\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\n\x00\t\x01\x02\x01\x00\x02(\x00\x0b\x01\x00\x02\x01\x02\x01\x04\x00\x11\x02\x00\x01\x00\x02\x01\x02\x01\x02\xd4\x04\x00\x01\x01\xb2\x01\x00\x01\x02.\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x15\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x16\x00\x0b\x02\x00\x01\x02\x01\x02P\x00\x01\x01\x06\x00\x0f\x02\x00\x01\x02\x01\x02\x01\x02 \x00\x07\x01\x02\x01\x02\x06\x001\x01\x02\x00\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x06\x00\x13\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x04\x00\x07\x01\x02\x01\x02\n\x00\t\x01\x02\x01\x02\x01\n\x00\x01\x02\x04\x00=\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x06\x003\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x00\x01\x00\x02\x01\x00\x02\x01\x06\x00\x01\x02\x0c\x00\x07\x01\x02\x00\x01\x04\x00\x03\x02\x01\x08\x00\x01\x02\x14\x00\x05\x01\x02\x010\x00\x01\x02f\x00\x11\x01\x00\x02\x01\x00\x02\x01\x02\x01\x04\x00\x01\x02.\x00\x01\x01\x9a\x03\x00\x01\x02\x08\x00\x01\x01\n\x00+\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x12\x00/\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\n\x00\x01\x02\xa0\x01\x00\t\x01\x00\x02\x00\x01\x04\x00\x05\x02\x00\x01\x04\x00\x05\x02\x01\x02\x0e\x00\x05\x01\x00\x02\x08\x00\x07\x01\x00\x02\x01\x06\x00\x11\x02\x01\x02\x01\x02\x01\x00\x02\x01\x08\x00\x05\x02\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00?\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x08\x00\x1d\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02 \x00\r\x01\x02\x01\x02\x01\x00\x02\x0c\x00\x19\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x18\x00\r\x01\x02\x01\x02\x01\x00\x02\x0c\x00\x07\x01\x02\x01\x02\x04\x00\x19\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x1c\x00\r\x01\x02\x01\x02\x01\x00\x02\n\x00\x0f\x01\x00\x02\x01\x00\x02\x01\x02\x06\x00\x01\x01\x04\x00\x05\x02\x01\x02\x08\x00\x07\x01\x02\x01\x02\x04\x00\r\x01\x02\x01\x02\x01\x00\x02\n\x00\x07\x01\x02\x01\x02\x04\x00\x19\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x04\x00\x1d\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00\x1b\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02~\x00\x05\x01\x00\x02\x04\x00\x01\x01\x06\x00\x01\x02\x06\x00\x01\x01\x04\x00\x1b\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x04\x00\x05\x01\x02\x01\x04\x00\r\x02\x00\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x03\x02\x01\x16\x00\x05\x02\x00\x01\x08\x00\x07\x02\x01\x02\x01\x08\x00\x13\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x18\x00\x07\x01\x00\x02\x01\x08\x00\x01\x02\x12\x00\x03\x01\x02\x10\x00\t\x01\x00\x02\x01\x02\x06\x00\x1d\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x018\x00\x01\x02\x08\x00!\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x00\x02\x00\x01\x00\x02\x01\n\x00\x03\x02\x01\x08\x00\r\x02\x01\x02\x00\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\x0e\x00\x01\x02\x16\x00\x03\x01\x02\x06\x00\x03\x01\x02\x08\x00\x01\x01\x12\x00\x03\x02\x01\x04\x00\r\x02\x00\x01\x02\x01\x00\x02\x08\x00\x01\x01\x08\x00\x03\x02\x01\x04\x00\x17\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x1c\x00\x03\x01\x02\x0c\x00\x01\x01\x08\x00\t\x02\x00\x01\x02\x01\x08\x00\x0b\x02\x01\x02\x01\x02\x01\x10\x00\t\x02\x01\x02\x00\x01\x08\x00\x0b\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x0c\x00\t\x01\x00\x02\x01\x02\x06\x00)\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\n\x00%\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x08\x00\x05\x02\x01\x02\x04\x00\t\x01\x02\x00\x01\x02P\x00\r\x01\x00\x02\x01\x02\x00\x01\x04\x00\x01\x02\x08\x00\x17\x01\x02\x00\x01\x00\x02\x00\x01\x00\x02\x01\x02\x06\x00\x07\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\r\x02\x01\x00\x02\x01\x00\x02\xba\x02\x00\x19\x01\x00\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x04\x00\x03\x01\x02\x04\x00\x11\x01\x00\x02\x01\x02\x01\x00\x02\x01\x06\x00\x15\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x08\x00\x01\x02\x04\x00\x01\x01\x06\x00\x03\x02\x01\x04\x00\x01\x02\x06\x00\x13\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x11\x01\x02\x01\x00\x02\x01\x02\x01\x02\x08\x00\r\x01\x02\x01\x02\x01\x00\x02\x08\x00\x01\x01\x06\x00\x01\x02\x16\x00!\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\"\x00\r\x01\x00\x02\x01\x02\x00\x01\n\x00\x1b\x02\x00\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x06\x00\x03\x01\x02\x1a\x00\x01\x01\n\x00\x03\x02\x01\x10\x00\x17\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\n\x00\r\x01\x00\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x04\x00\x15\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01@\x00\x0f\x02\x01\x00\x02\x01\x02\x01\x02\x04\x005\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\xcc\x02\x00\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x01\x02\x0e\x00\x19\x01\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x12\x00\t\x01\x02\x01\x02\x01\x06\x00\x07\x02\x01\x00\x02\x12\x00\t\x01\x00\x02\x00\x01\n\x00\x01\x02\n\x00\t\x01\x02\x01\x00\x02\x0e\x00\x01\x01\x04\x00\x01\x02\x08\x00\t\x01\x02\x00\x01\x02\x08\x00\x03\x01\x02\x04\x00\r\x01\x00\x02\x01\x02\x01\x02\x06\x00\x0b\x01\x02\x01\x02\x01\x02\x06\x00\x07\x01\x02\x01\x02\n\x00\r\x01\x02\x01\x00\x02\x01\x02\x04\x00;\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x00\x02\x00\x01\x00\x02\x00\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x01\x00\x02\x10\x00+\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x08\x00\x01\x01\x04\x00\x03\x02\x01\x0c\x00\x03\x02\x01\x08\x00\x11\x02\x01\x02\x01\x02\x01\x00\x02\x01\x18\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x16\x00\x0f\x01\x02\x01\x02\x01\x00\x02\x01\x0e\x00\x01\x02\n\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x08\x00\x01\x02\n\x00#\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x00\x01\x02\x08\x00\x15\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x1a\x00\x01\x01\x08\x00\x01\x02\x0e\x00\x0f\x01\x02\x01\x02\x01\x00\x02\x01\xe8\x01\x00\x01\x02\x06\x00\x05\x01\x00\x02\n\x00\x01\x01\x08\x00\x15\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x08\x00\x03\x01\x02\x04\x00\x03\x01\x02\x04\x00\x0b\x01\x00\x02\x01\x00\x02\x0c\x00\x0b\x01\x02\x01\x00\x02\x01\x04\x00\x13\x02\x01\x02\x01\x00\x02\x00\x01\x00\x02\x0e\x00\x11\x01\x02\x01\x02\x00\x01\x02\x01\x02\x92\x01\x00?\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x01\x01\x06\x00\x15\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x04\x00\t\x01\x02\x01\x00\x02\x0e\x00\x01\x01\x04\x00\x05\x02\x01\x02\x04\x00\x05\x01\x02\x01\x08\x00\x05\x02\x01\x02\x06\x00\x01\x01\x08\x00\x11\x02\x01\x02\x01\x02\x01\x02\x00\x01\x06\x00\x03\x02\x01\x04\x00\t\x02\x00\x01\x00\x02\n\x00\x01\x01\x06\x00\r\x02\x00\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\x06\x00\x03\x01\x02&\x00\x03\x01\x02N\x00\t\x01\x02\x01\x02\x01\x04\x00#\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00!\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x05\x01\x00\x02\x06\x00\t\x01\x00\x02\x01\x02\x06\x00\x1f\x01\x02\x00\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x06\x00\t\x01\x02\x00\x01\x02\x04\x00\t\x01\x02\x01\x02\x01\x12\x00\x0b\x02\x01\x02\x01\x00\x02\x1c\x00\x0f\x01\x02\x00\x01\x02\x00\x01\x02\"\x00\x03\x01\x02\xe2\x03\x00\x01\x01\x04\x00\x01\x02\x08\x00\x17\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x08\x00\x05\x01\x02\x01\x04\x00\x01\x02\x06\x00\x01\x01\x9a\x01\x00\x01\x02\n\x00\x05\x01\x00\x02\x06\x00\x01\x01\x04\x00\x07\x02\x01\x00\x02\xee\x02\x00\x0b\x01\x00\x02\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x00\x02\x01\x0c\x00\x01\x02\x04\x00\x01\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x00\x02\xee\x01\x00\r\x01\x00\x02\x01\x02\x01\x02\x04\x00\x05\x01\x02\x01\x04\x00\x01\x02\x12\x00\x11\x01\x00\x02\x01\x02\x01\x00\x02\x01\x0e\x00\x03\x02\x01\x08\x00\x07\x02\x01\x02\x01\x08\x00\t\x02\x01\x02\x01\x02\x0c\x00\x01\x01\x0e\x00\x01\x02\x0e\x00\x01\x01\x04\x00\x05\x02\x01\x02\x04\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x00\x01\x02\x8e\x01\x00\x01\x01\x0e\x00\x0b\x02\x01\x02\x00\x01\x02\n\x00\x05\x01\x00\x02\x04\x00\t\x01\x02\x01\x00\x02\x06\x00\x01\x01\x04\x00\t\x02\x00\x01\x00\x020\x00\x0b\x01\x00\x02\x00\x01\x02\x0c\x001\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02\x1e\x00\x05\x01\x02\x01\x08\x00\x03\x02\x01\x06\x00\x13\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x12\x00\x07\x01\x02\x00\x01\x08\x00\x01\x02\x06\x00\t\x01\x00\x02\x00\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x01\x02\x0c\x00\x19\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x00\x02\x01\x1e\x00\x01\x02 \x00\x01\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x06\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\x07\x02\x00\x01\x02\x18\x00\x05\x01\x02\x01\n\x00\x05\x02\x01\x02\x10\x00\x01\x01\x04\x00\x01\x02\x96\x02\x00\t\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02\x12\x00\r\x01\x02\x01\x00\x02\x01\x02\x06\x00\x11\x01\x00\x02\x01\x02\x01\x02\x01\x02\x0c\x00\x01\x01\x08\x00\x03\x02\x01\x08\x00\x0b\x02\x01\x02\x01\x02\x01\x06\x00\x17\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x08\x00\x0f\x01\x02\x00\x01\x02\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02\x1e\x00\x05\x01\x00\x02\x04\x00\t\x01\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x00\x02\x01\x02\x06\x00\x15\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\x03\x02\x01\x14\x00\t\x02\x01\x02\x00\x01\x04\x00\x0f\x02\x01\x02\x00\x01\x02\x01\x02\x06\x00\x05\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\x06\x00\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x01\x02P\x00\x07\x01\x00\x02\x01\x04\x00\x03\x02\x01\x04\x00\x0f\x02\x00\x01\x00\x02\x00\x01\x02\x06\x00\x0b\x01\x02\x01\x00\x02\x01\x04\x00\x13\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x08\x00\x05\x01\x02\x01\x08\x00\x07\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x00\x01\xc0\x02\x00\x03\x02\x01\x06\x00\x07\x02\x00\x01\x02\x04\x00\x05\x01\x02\x01\x12\x00-\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02H\x00E\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x08\x00\x05\x02\x00\x01\x04\x00\x11\x02\x01\x00\x02\x00\x01\x00\x02\x01\x0e\x007\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02@\x00\x01\x01\x04\x00\x05\x02\x00\x01\x0c\x00\x01\x02\x04\x00\x05\x01\x00\x02X\x00\x01\x01\x0e\x00\x01\x02\x08\x00\x05\x01\x02\x01\x04\x00\x01\x02\x06\x00\t\x01\x02\x01\x00\x02\x06\x00\x05\x01\x00\x02\x06\x00\x05\x01\x02\x01\x04\x00\x01\x02\x06\x00\t\x01\x02\x00\x01\x02\x0c\x00\x07\x01\x02\x01\x02\x06\x00!\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\xcc\x01\x00\x01\x02\x06\x00\x05\x01\x02\x01\x08\x00\x05\x02\x01\x02\x16\x00\x01\x01\x04\x00\x01\x02\x08\x00\x07\x01\x02\x01\x02*\x00\'\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\n\x00\x01\x02\x0c\x00\x0b\x01\x00\x02\x01\x00\x02\x04\x00\x07\x01\x00\x02\x01\x94\x02\x00\x03\x02\x01\x06\x00\r\x02\x01\x02\x01\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x0e\x00\t\x01\x00\x02\x01\x02\x08\x00\x17\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x0c\x00\x0f\x01\x02\x01\x02\x00\x01\x02\x01\x0e\x00\x01\x02&\x00\x03\x01\x02>\x00\x03\x01\x02\x06\x00\x01\x01\x04\x00\r\x02\x01\x02\x00\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02\x04\x00\x01\x01\x04\x00\x17\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\r\x01\x02\x01\x02\x01\x00\x02\x0e\x00\x11\x01\x02\x01\x02\x01\x02\x01\x00\x02\x10\x00\x01\x01\x06\x00\x01\x02\x06\x00\x05\x01\x02\x01\x04\x00\x07\x02\x01\x02\x01\x08\x00\x01\x02\x0e\x00\x03\x01\x02\x06\x00\x05\x01\x00\x02\x0c\x00\x01\x01\x06\x00\x07\x02\x01\x00\x02,\x00\x07\x01\x02\x01\x02\xb8\x01\x007\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x18\x00\x11\x02\x00\x01\x00\x02\x01\x02\x01\x02\x0c\x00\x07\x01\x02\x01\x02N\x00\x1b\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x06\x00\x01\x02\x08\x00\t\x01\x02\x01\x02\x01\x06\x00-\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x00\x01\x06\x00\x01\x02\x04\x00\x0b\x01\x02\x01\x00\x02\x01\x04\x00\t\x02\x01\x02\x00\x01\x04\x00\x15\x02\x00\x01\x00\x02\x00\x01\x00\x02\x01\x02\x18\x00\x0b\x01\x02\x01\x02\x01\x02\x0c\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\xfa\x02\x00\x01\x01Z\x00\x07\x02\x01\x02\x01\x04\x00\x07\x02\x01\x00\x02\n\x00\x15\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x15\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x05\x02\x01\x02\x0e\x00\r\x01\x00\x02\x01\x02\x01\x02\x08\x00\x01\x01\x04\x00\x13\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x1a\x00\x05\x01\x02\x01\x06\x00\x0f\x02\x00\x01\x02\x01\x02\x01\x02\x06\x00\x03\x01\x02\x04\x00\x07\x01\x02\x01\x02\x04\x00\x03\x01\x02\n\x00#\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\xc2\x02\x00\x03\x01\x02\x0e\x00\x07\x01\x02\x00\x01\x04\x00\x05\x02\x01\x020\x00\x05\x01\x02\x01\x08\x00\r\x02\x01\x02\x01\x02\x00\x01\n\x00\x03\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x02\x01\x02\x0e\x00\x07\x01\x02\x01\x02\x0e\x00\x01\x01^\x00\x05\x02\x00\x01\x06\x00\x01\x02\x04\x00!\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x06\x00\x0f\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x01\x02\x04\x00\r\x01\x00\x02\x01\x02\x01\x02\x06\x00\x01\x01\n\x00\r\x02\x00\x01\x00\x02\x00\x01\x06\x00\x01\x02&\x00\x05\x01\x00\x02\x04\x00\t\x01\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02\x08\x00\x05\x01\x02\x01\x04\x00\x03\x02\x01 \x00\x01\x02\xbc\x01\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02X\x00\x01\x01\n\x00\t\x02\x01\x00\x02\x01\x08\x00\x01\x02\x08\x00\x01\x01\x04\x00\x05\x02\x00\x01\x04\x00\x01\x02\x04\x00-\x01\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x06\x00!\x02\x01\x02\x00\x01\x00\x02\x00\x01\x00\x02\x00\x01\x02\x00\x01\x02\x04\x00\x03\x01\x02\x08\x00\x03\x01\x02\x08\x00\x0b\x01\x02\x01\x00\x02\x01\x04\x00\r\x02\x01\x02\x01\x00\x02\x01\x04\x00\x01\x02\xd6\x01\x00\x17\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x0e\x00+\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02(\x00\x19\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x10\x00\x01\x01\xbc\x01\x00\r\x02\x01\x02\x01\x02\x01\x02\x04\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x0e\x00\x19\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x06\x00\x01\x01\x10\x00\x01\x02\x08\x00\x01\x01\x06\x00\x15\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x06\x00\t\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\t\x02\x01\x02\x00\x01\x0c\x00\x07\x02\x01\x00\x02\x10\x00\t\x01\x02\x01\x02\x01\x04\x00\x01\x02\x0e\x00\x13\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x05\x02\x01\x02:\x00\x01\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x10\x00\r\x02\x00\x01\x02\x01\x02\x01\x10\x00\x01\x02\x12\x00\x03\x01\x02\x04\x00\r\x01\x00\x02\x01\x02\x01\x02\n\x00\x1b\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x06\x00\x01\x02\n\x00\x0b\x01\x02\x01\x02\x01\x02\xb6\x02\x00\x07\x01\x00\x02\x01\x1c\x00\t\x02\x01\x02\x01\x02\x1c\x00\x01\x01\x1a\x00\x19\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x01\x01\x04\x00\t\x02\x01\x02\x01\x02\xe0\x02\x00/\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x0f\x02\x00\x01\x00\x02\x01\x02\x01\x0e\x00\x01\x02\x0c\x00\x05\x01\x02\x01\x06\x00\x03\x02\x01\x06\x00\t\x02\x00\x01\x02\x01\x04\x00\x13\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02`\x00\t\x01\x02\x01\x00\x02\x04\x00\x0f\x01\x02\x01\x02\x00\x01\x02\x01\x14\x00\x03\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\x0e\x00\x01\x02\x0c\x00\x01\x01\n\x00\r\x02\x01\x02\x01\x02\x01\x02\n\x00\x0b\x01\x00\x02\x01\x02\x01\x0e\x00\x03\x02\x01\x04\x00\x1f\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x08\x00\x15\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x08\x00\x11\x01\x02\x01\x02\x01\x00\x02\x01\x02\x1a\x00\x01\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x1b\x02\x01\x02\x00\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x06\x00\x07\x02\x01\x02\x01\x04\x00\r\x02\x01\x02\x01\x00\x02\x01\x06\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01H\x00\x03\x02\x01\x04\x00\x03\x02\x01\x04\x00\x13\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\x01\x02\x04\x00-\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x06\x00\t\x02\x01\x02\x01\x02\x0c\x00\x01\x01\x06\x00!\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x08\x00\x03\x01\x02\x06\x00=\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x06\x00\x13\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\t\x02\x01\x02\x01\x02\x1a\x00\x03\x01\x02$\x00\x01\x01\x04\x00\x07\x02\x01\x00\x02\x14\x00\x03\x01\x02\x06\x00\x01\x01\x04\x00\x01\x02\x08\x00\x01\x01\x04\x00\t\x02\x01\x02\x00\x01\x04\x00\x03\x02\x01\x06\x00\x03\x02\x01\x08\x00\x01\x02\x12\x00\x03\x01\x02\n\x00\x07\x01\x00\x02\x01\x10\x00\x01\x02\x0e\x00\x07\x01\x00\x02\x01\x14\x00\r\x02\x00\x01\x02\x01\x00\x020\x00\t\x01\x02\x01\x02\x01\x12\x00\x07\x02\x01\x02\x01\x0c\x00\'\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x06\x00\t\x02\x01\x00\x02\x01\n\x00\x0b\x02\x01\x00\x02\x01\x02\x1c\x00\x01\x01\x04\x00\x07\x02\x01\x02\x01\x06\x00\t\x02\x01\x00\x02\x01\x06\x00\x01\x02\x1c\x00\x05\x01\x02\x01\n\x00\x01\x02\x1e\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x0f\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x03\x02\x01\x04\x00\r\x02\x01\x00\x02\x01\x02\x01\x04\x00\x01\x02\x08\x00#\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x04\x00\x07\x02\x01\x00\x02\x14\x00\x01\x01(\x00\x01\x02\x12\x00\x01\x01\x08\x00\x03\x02\x01f\x00\x01\x02\x04\x00\x05\x01\x00\x02v\x00\x1b\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x04\x00\x05\x01\x00\x02\x0c\x00\x05\x01\x02\x01\x04\x00\x01\x02\x04\x00\x01\x01\x06\x00\x15\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x11\x02\x00\x01\x02\x01\x02\x00\x01\x02\x06\x00\x17\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\t\x01\x00\x02\x00\x01\x04\x00\x05\x02\x00\x01\x04\x00\t\x02\x01\x02\x00\x01\n\x00\x05\x02\x01\x02\x04\x00\x05\x01\x02\x01\x06\x00\x07\x02\x00\x01\x02\n\x00\x01\x01\x04\x00\x01\x02\n\x00\x03\x01\x02\x06\x00\x01\x01\x06\x00\r\x02\x01\x00\x02\x01\x02\x01\x18\x00\x01\x02\x06\x00\t\x01\x00\x02\x01\x02\x08\x00\x05\x01\x00\x02\x0e\x00\t\x01\x02\x01\x00\x02\x04\x00\t\x01\x02\x00\x01\x02@\x00\x03\x01\x02\x12\x00\t\x01\x02\x01\x02\x01\x04\x00\x01\x02\x08\x00\x0f\x01\x02\x01\x00\x02\x01\x02\x01\x04\x00?\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02&\x00\x05\x01\x00\x02\"\x00\x15\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02F\x00\x01\x01\x0c\x00\x01\x02\x08\x00\x0b\x01\x02\x01\x02\x01\x02\x06\x00\x0b\x01\x02\x01\x02\x01\x02\x1a\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x0c\x00\x1d\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x00\x01\x02\x00\x01\x06\x00\x03\x02\x01\n\x00\r\x02\x01\x02\x01\x02\x01\x02\x04\x00\t\x01\x00\x02\x01\x022\x00\x01\x01\x04\x00\x0f\x02\x01\x00\x02\x00\x01\x02\x01\x04\x00\x01\x02\x06\x00\x05\x01\x02\x01\x06\x00#\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x16\x00\x1b\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x0c\x00\x0b\x01\x02\x01\x02\x00\x01\x04\x00\x01\x02\x0c\x00\x01\x01\x08\x00\x01\x02\x0e\x00)\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x11\x01\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00\x07\x01\x02\x01\x02(\x00\t\x01\x00\x02\x00\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x04\x005\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\n\x00\x03\x02\x01\x06\x00\x01\x02\x04\x00\x1f\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x04\x00\x01\x01\x08\x00#\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x1b\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x04\x00\x07\x01\x02\x01\x02|\x00\r\x01\x00\x02\x01\x00\x02\x01\n\x00\x07\x02\x00\x01\x02\x04\x00\x01\x01\x06\x00\x07\x02\x01\x00\x02\n\x00\x05\x01\x02\x01\x0e\x00+\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x04\x00\x1b\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x11\x02\x01\x00\x02\x01\x00\x02\x01\x02\x06\x00\x01\x01\x04\x00\x05\x02\x01\x02\x08\x00\r\x01\x02\x01\x00\x02\x00\x01\x04\x00Q\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x17\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x04\x00\x13\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\xa4\x02\x00-\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x04\x00\x0f\x02\x01\x02\x01\x02\x01\x02\x01\x0c\x00#\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x00\x01\x08\x00\x03\x02\x01\x04\x00\x17\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02N\x00K\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x06\x00\x1d\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x00\x020\x00C\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x04\x00\x0f\x02\x01\x02\x00\x01\x02\x01\x02\x08\x00\t\x01\x00\x02\x01\x02\x04\x00\x01\x01\x04\x00\x01\x02\n\x00%\x01\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x00\x02\x00\x01\x04\x00%\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02D\x00\r\x01\x00\x02\x01\x02\x01\x02\x08\x00%\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x00\x01\x04\x00\x07\x02\x00\x01\x02\x1a\x00\x0f\x01\x00\x02\x01\x00\x02\x01\x02\n\x00\x01\x01\x04\x00/\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x0e\x001\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02(\x00%\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x06\x00\x17\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x06\x00\x1d\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x04\x00\x17\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x19\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x08\x00\x03\x02\x01\x04\x00\x07\x02\x01\x02\x01\x04\x00\x0b\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02>\x00\t\x01\x02\x00\x01\x02\x04\x00\x1f\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02(\x00\x11\x01\x00\x02\x01\x00\x02\x01\x02\x01\x08\x00\x0b\x02\x01\x02\x00\x01\x02\x08\x00\x0b\x01\x00\x02\x00\x01\x02\x10\x00\x0b\x01\x02\x01\x00\x02\x01\x04\x00\x11\x02\x00\x01\x02\x01\x00\x02\x01\x02\x0e\x00\t\x01\x02\x00\x01\x02.\x00!\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\r\x01\x00\x02\x01\x00\x02\x01\x04\x00\x17\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00%\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x01\x02\x04\x00\x0b\x01\x02\x00\x01\x00\x02~\x00\x01\x01\x0e\x00\r\x02\x01\x02\x01\x02\x01\x02\x04\x00\t\x01\x00\x02\x01\x02\x06\x00\x05\x01\x00\x02\x0c\x00\x1d\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x08\x00\x01\x01\x10\x003\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x06\x00\x07\x01\x02\x01\x02\x0c\x00\r\x01\x02\x01\x00\x02\x01\x02\x06\x00\t\x01\x02\x01\x02\x01\x04\x007\x02\x00\x01\x02\x01\x00\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00\r\x01\x02\x01\x00\x02\x01\x02\x04\x00\x0b\x01\x02\x01\x02\x00\x010\x00\x03\x02\x01\x06\x00\x05\x02\x01\x02\x04\x00!\x01\x00\x02\x00\x01\x00\x02\x00\x01\x02\x00\x01\x00\x02\x00\x01\x02\n\x00!\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x94\x01\x00\x15\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x15\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x08\x00\x05\x01\x02\x01\x04\x00\x05\x02\x01\x02\x0e\x00\x05\x01\x00\x02\x06\x00\x01\x01\x08\x00)\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x00\x02\x01\x02\x04\x001\x01\x00\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x0e\x009\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x01\x06\x00\x05\x02\x01\x02\x04\x00\x17\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x06\x00\x01\x02\x04\x00\t\x01\x02\x01\x02\x01P\x00\x07\x02\x01\x00\x02\x10\x00\x0f\x01\x02\x00\x01\x02\x01\x02\x01\x0e\x00\x01\x02\x06\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01@\x00\x05\x02\x01\x02\x06\x00\x03\x01\x02\x04\x00\x15\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x06\x00\x05\x02\x01\x02\x14\x00\x05\x01\x00\x024\x00\x03\x01\x02\x08\x00\x0b\x01\x02\x00\x01\x00\x02H\x00\x01\x01\n\x00\x11\x02\x01\x02\x01\x02\x01\x02\x01\x02\n\x00\x07\x01\x02\x00\x018\x00\x03\x02\x01\x04\x00\x19\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x00\x02\x12\x00\x01\x01\x06\x00\x19\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x04\x00\x07\x01\x02\x01\x02\x06\x00\x01\x01\x0e\x00+\x02\x01\x02\x00\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\n\x00\r\x01\x02\x01\x02\x01\x02\x01t\x00\x01\x02\x16\x00\x01\x01\x04\x003\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x08\x00\x03\x01\x02<\x00\t\x01\x00\x02\x01\x02\x04\x00\x1b\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\n\x00\x03\x01\x02^\x00\x11\x01\x00\x02\x01\x02\x00\x01\x00\x02\x06\x003\x01\x00\x02\x00\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02\x04\x00\x01\x01\x06\x00!\x02\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x04\x00\x1d\x02\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x04\x00#\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x01\x00\x02\x00\x01\x00\x02\x18\x00\x0b\x01\x00\x02\x01\x00\x02\x08\x00\x13\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\n\x00\x13\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x03\x02\x01\x04\x00\t\x02\x01\x00\x02\x01\n\x00\x0b\x02\x01\x00\x02\x01\x02(\x00\x01\x01\x18\x00\x01\x02(\x00\x15\x01\x00\x02\x00\x01\x00\x02\x01\x02\x01\x02\x08\x00\x11\x01\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\t\x02\x01\x02\x01\x02\x0e\x00\t\x01\x02\x01\x00\x02\x0c\x00\x07\x01\x02\x01\x02\x08\x00\x0f\x01\x02\x01\x02\x01\x02\x01\x02\x08\x00\t\x01\x02\x01\x02\x01\x06\x00\x15\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x04\x00\x1d\x01\x00\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x00\x02\x01\x06\x00\x01\x02\x04\x00\x1d\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x00\x02\xa6\x01\x00\x07\x01\x02\x00\x01\n\x00\x17\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x04\x00\x15\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x06\x00%\x01\x02\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x00\x02\x01\x02\x00\x01\x02(\x00\x01\x01\x04\x00\x0f\x02\x01\x02\x00\x01\x02\x01\x02\x04\x00\x05\x01\x02\x01\n\x00\x01\x02\x04\x00\x01\x01\x06\x00\x01\x02\x06\x00\x03\x01\x02\x06\x00\x01\x01*\x00\x05\x02\x01\x020\x00\x01\x01\x04\x00\t\x02\x00\x01\x02\x01\x04\x00\x01\x02\x04\x00\x15\x01\x02\x00\x01\x02\x01\x02\x01\x02\x01\x02\x04\x009\x01\x02\x01\x02\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x00\x01\x00\x02\x01\x02\x01\x02\x01\x02\x01\x04\x00\x17\x02\x01\x02\x01\x02\x01\x02\x01\x02\x00\x01\x02\x04\x00\x03\x01\x02.\x00\'\x01\x02\x00\x01\x02\x01\x02\x00\x01\x02\x01\x02\x01\x00\x02\x00\x01\x02\x00\x01\x06\x00\x1b\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x02\x01\x0c\x00\t\x08\x07\x00\x03\x0c\x1a\x00\x19\x07\x00\x03\x0c\x00\x07\x00\x03\x0c\x07\x00\x03\x0c\x0c\x00\t\x07\x03\x04\x03\x04\x04\x00!\x08\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\x00\x03\x0c\x0c\x00\x07\x07\x00\x03\x04\n\x00\t\x08\x07\x00\x03\x0c\x10\x00\x0f\x07\x00\x08\x00\x07\x00\x03\x0c\x08\x00\x17\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\x00\x03\x0c\x0c\x00\x13\x07\x00\x03\x0c\x07\x00\x03\x0c\x00\x07\n\x00\t\x08\x07\x00\x03\x0c\xbc\t\x00\x01\x07\x06\x00\x1f\x08\x07\x00\x03\x04\x00\x08\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\n\x00\x11\x08\x07\x00\x03\x0c\x07\x00\x03\x0c\x0c\x00\x01\x07\x06\x00\t\x08\x07\x00\x03\x0c\xfc\x03\x00\x07\x07\x00\x03\x0c\x04\x00\x07\x07\x00\x03\x0c(\x00\x01\x07^\x00\x0b\x08\x07\x00\x03\x0c\x07\x04\x00\t\x08\x07\x00\x03\x0c\x0c\x00\x1b\x07\x00\x08\x07\x00\x03\x04\x03\x0c\x07\x00\x08\x00\x07\x0e\x00\r\x08\x07\x00\x03\x0c\x00\x07\x04\x00%\x08\x07\x00\x03\x0c\x00\x07\x00\x03\x0c\x00\x07\x00\x03\x0c\x07\x00\x03\x0c\x9c\x1b\x00\x0f\x07\x00\x03\x0c\x07\x00\x03\x0c\xb4\x04\x00\x07\x07\x00\x03\x04\x12\x00\x1b\x08\x07\x00\x03\x0c\x07\x03\x04\x03\x04\x03\x04\x03\x04\n\x00\x03\x08\x07&\x00\x13\x08\x07\x00\x08\x07\x08\x07\x00\x03\x0c\xa0\t\x00\x01\x07\x14\x00\x07\x08\x07\x00\x08\x06\x00\x01\x070\x00\x13\x08\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\x06\x00\x11\x08\x07\x00\x03\x0c\x07\x00\x03\x0c\x9e\x03\x00\x01\x07\x0e\x00\x03\x08\x07\x10\x00!\x08\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\x00\x03\x0c\x07\x00\x03\x0c\x08\x00\x01\x07\x08\x00\x13\x08\x07\x00\x03\x0c\x00\x07\x00\x03\x0c\x04\x00\x07\x07\x00\x03\x0c\n\x00\x07\x07\x00\x03\x0c\x06\x00\x07\x07\x00\x03\x0c\x9a\x01\x00\r\x07\x00\x08\x07\x00\x03\x0c\x0c\x00\x01\x07\n\x00\x01\x06\x16\x00\x0b\x03\x04\x03\x04\x03\x04\x04\x00\x1f\x03\x04\x03\x00\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x00\x03\x04\x03\x08\x00\r\x04\x03\x04\x03\x04\x03\x04\x04\x00#\x03\x04\x03\x04\x03\x00\x04\x03\x04\x03\x04\x00\x03\x04\x00\x03\x00\x04\x06\x00\x0f\x03\x04\x03\x04\x03\x04\x00\x03\x04\x00\x17\x04\x03\x04\x00\x03\x04\x03\x04\x03\x04\x03\x04\x0e\x00\x03\x03\x04\x08\x00\x11\x03\x04\x03\x04\x03\x00\x04\x03\x04\x06\x00\x01\x03\x04\x00\x0b\x04\x03\x04\x03\x04\x03\x1a\x00\x1d\x04\x03\x04\x03\x00\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x08\x00\x01\x04\x04\x00\t\x03\x04\x00\x03\x04\x06\x00\x01\x03\x06\x00\x1d\x04\x03\x04\x00\x03\x00\x04\x03\x04\x03\x04\x03\x04\x03\x04\x04\x00\x17\x03\x04\x00\x03\x00\x04\x00\x03\x04\x03\x04\x03\x08\x00\x01\x04\x04\x00\x0b\x03\x00\x04\x03\x00\x04\x93\xf8\x02\x83\x06\xa6\x05\xa5\x05\x9cS\xa2\x02\xa5\x01v\xc1\x0b\xc9I\"\x92W\xe5V\" \xde\x04\xd9\x04\xdc\x04\xd7\x04\xaaI\xa7D\xacD\xa9I\xacI\xa0\x02n\xac\x01W8:)3\xd3\x01\xc7E\x81\x06\xd8K\x0e\x01\xdbK\x03\x80\x06\xfb\x05\xfe\x05\xf9\x05\xb4\x06\xaf\x06\xe0\x06\xdb\x06\xdc\x07\xd7\x07\x8a\x08\x85\x08\x8a\x08\x85\x08\x88\x08\x83\x08\xbe\x08\xb9\x08\xce\x08\xc9\x08\xcc\x08\xc7\x08\xaa\t\xa5\t\xa8\t\xa3\t\xc4\t\xbf\t#(\x8c\x03\xb1\x03*\x06\x0c\r\x18\x14\'P\x0cW~\x14\xee\x02\xdd\x02\x9d\x01\xa4\x01\x9f\x01\xc6\x03\xfb\x01\x9c\x01*\'q\xf4\x01\xcb\x01\xa4\x01\x04\x01y\xc2;\xd34\xaf\t\xb2\t\xad\t\xd8\t\xd3\t\xd0\n\xcb\n\xf6\n\xf1\n\xf6\n\xf1\n\xf4\n\xef\n\xa0\x0b\x9b\x0b\x90\x0c\x8b\x0c\xb6\x0c\x807\xcc\x06>\xff\x06\x8a\x07\x87\x07\x08\x84\x07\xc1\x06\xee\x02\xbd\x02\xea\x02\xd9\x02\x86\x06\xff\x05\xd6\t\x81\t\xb0\x05\xab\x05\xd0\t\x02\xe1\t\xc0\x05\xbd\x05\xc2\x05\x0e\xbc\x06\xc1\x04\xec\x06\x02\xe7\x05\xb3A\xb3\x0c\xb6\x0c\xb1\x0c\xb4\x0c\xaf\x0c\xda\x0c\xd5\x0c\xb0\r\xab\r\xd6\r\xd1\r\xd6\r\xd1\r\xd4\r\x88;\xd8\x06\x88\x01\xc7A\xef\x0e\xf4\x0e\xef\x0e\x84\x0f\xff\x0e\x82\x0f\xfd\x0e\xb4\x10\xaf\x10\xe6\x10\xe1\x10\xce\x11\xc9\x11\x98\x12\x93\x12\x96\x12\x91\x12\xda\x13\xd5\x13\xea\x14\xe5\x14\xd0\x15\xcb\x15\xce\x15\xc9\x15\x84\x17\xff\x16\xde\x17\xd9\x17\x96\x18\x91\x18\x94\x18\x8f\x18\xdc\x19\xd7\x19\xde\x1a\xd9\x1a\xb4\x1b\xaf\x1b\xb2\x1b\xad\x1b\xe8\x1b\xe3\x1b\x88\x1d\x83\x1d\xde\x1e\xd9\x1e\xf0\x1f\xeb\x1f\xb6!\xb1!\xb6!\xb1!\xb4!\xaf!\xea!\xe5!\xc2\"\xbd\"\xa0#\x9b#\xa6$\xa1$\xa6$\xa1$\xa4$\x9f$\xe6$\xe1$\xf6$\xf1$\xf8$\xf3$\xf4%\xef%\xf2%\xed%\xb8&\xb3&\x82\'\xfd&\xea\'\xe5\'\x88)\x83)\xdc)\xd7)\x8e*\x89*\xce*\x82p\xcb\x9a\x01\xe6\x9a\x01\xe1\x9a\x01\xe4\x9a\x01\xdbo\x83+\x86+\x81+\x90+\x8b+\xc8+\xc3+\x80,\xfb+\xae,\xa9,\xcc,\xc7,\xea,\xe5,\xc8-\xc3-\xf0-\xeb-\xfc-\xf7-\xfa-\xf5-\xfa.\xf5.\xdc/\xd7/\xc60\xc10\xd00\xcb0\xb41\xaf1\x883\x833\x923\x8d3\xc03\xbb3\xc45\xbf5\xce5\xc95\x906\x8b6\x8c7\x877\x888\x838\x9e9\x999\x9c9\x979\x96:\x91:\xbc;\xb7;\xba<\xb5<\xb8<\xb3<\x8e?\x89?\x8c?\x87?\x94@\x8f@\x92@\xc4\x04\"N!\x11n\x0e9\x1e$%\xb1\x05\xb9@\xbc@\xb7@\xba@\xb5@\xa0A\x9bA\xb6A\xb1A\xdaA\xd5A\xfeA\xf9A\xb0B\xabB\xe6B\xe1B\xe6B\xe1B\xe4B\xdfB\xa4C\x9fC\x82D\xfdC\x80D\xfbC\xeaD[\x06\xb8\t\x02h,zL\xdbU\xd2\x02\x8cHnl\x04\x04\t\x02&\x06(\x02\x0c\x04\x03h\x16\x04\x0e\t\x08\n\x10\n\x1c\x04\x02\x1d\x97O\x10@ \x8a\x01\xfa=\x04\x06\n\xe2\x01\x10\x1cT\n\x0c\x04\x02\x07\x14\x0e\x02\x04\x04\x02\x04\x04\x04\x08\x03\x16\x12\x04\x02\x1d\x08\x02\x10\x02\x16\x02\"\x14\x084\x0c\n\x1c\x04\x02\x04\x04\x0b\nj:8 0\x04\x02\x010\x08\x02\x074\x02\n:\x04\x10\x1f&\x02\x04\x0802\x0c\x02\x04\xc8\x01\x04(\x04\xb2\x02^\x86\x01\x04\x02\x11\x0e\n2\x02<PZR<\x04\x02\x04<\x03\x02\n\x06\x02\x11\x06\x02<\xd1Q\x0c&\x0c\xf9\x03\x04\x04\x02\x01\x04\x04\x02\x138\x1a86\x1a\n*2\"V\x18\x04\x04$\x04\x04\x1f\xd4\x98\x01\x0c\xa3\x93\x01\xd4\r\x87\x01\xaa\x01DA\x93\x01\x87\x18\xd4\x05\x8e\x12\x12v4\x14\x04\x04\x04\x0c#\x06\xb5\x0b\xaa\x01\x8b\x01\x9a\x01\x19D\x15\x1a\x16\xbc\x01\xb5\x01\x8e\x01\'\xc5\x01\xe1\t\xd2\x02\xce\x02\x04\x06\x03B$\x04\x02\r\x04\x0e\n\x10\x02\x10\x12\x04\x02\x06\x04\x03\n\x0e\x04\x02\x07\x10\x04\x02\x04\x06\x02=\x0e\x02\"\x0e\x02\n\x02Zz\x0c\x06\x08\x1a\x14\x04\x08\x16Z( \x12\x02\xf4\x0b\x9a\n\xae\x15~\x04$\x0e$\x06\x04\n\x03\\\x02$\x04\x05\x02\x0c\x06\x04\n\x03\x1c$\x04\x06\x03\x0c\x02\x04\x0c\x0f\x98\x01F(\x06\x18\x06\n\x0c\x04\x06\x19\x94\x04\x98\x01\x04,\x1c\x06\x0c\x10\x04$\x14$\x14\x04\x06\x17\x02\x9a\x01\n\x12\"\x80\x0f\xf0\x17\x0c\xf0\x17\x0c\xe8\x17\x0c\x06\x06\x0b\"\x8e\x07\"\x06\xda\x10\x8e\x18\x04\n\x0fZ\x1a\x0eN\x0e\x0c\n\x04\x04\n\x03$\x06\x04\x04\x04\x08\x03\x1c\x12\x04\x0e\x11\x16\x02\x14\n\x08\x18\x02\x0c\x06\x04\x08%>\x0c \x02\x0c\x06\x18\x04\"\x02\x16\x04 \x0c\x06\x02\x08\x02Z\x04\x10\x0f\x12\x91\xdc\x01\" \xe0;\x02\xa3<\x0e\x04\x0c\t\x1c\x02\n&$\x04\x02\x01\x12\x06\x0c\x06\x04\r\x02\x10\x04\x0c\"\x0e\x1e\x04\x02\x01\x04\x06\x02\t\x1e\x06\x1e\x10\n\x04\x04\x03\x94\x04\x06\x04\x02\x03\x1e\x18\x04\x02\x0b\x1c\x14 2\x06\x14\x04\x02)\n\x1a8\x06\x04\x14\x12 \x14\x06\x02F\x1c\x04$\x12\x0c\x1cN\xe0\x012\x04\x0e\x03\x80\x11\x82\x1d\x04\x04\x03\x02\x1e\x04\x02\x04\x04\x01\x1c\x04\x0c\x08\x02\x05\x04\x02\x1c\x06\x02\x01\x04\x04\x02\x05\x04\x06\n\x04\x02\x04\x06\x04\x14\x01\x1e\x04\x02\x01\x04\x04\x02\x01\x06\x04\x02\x05\x14\x0e\x1e\x04\x02\x01\x04\x04\x06\x03\x04\x08\x06\x06\x04\x04\x08\x08\x04\x06\x03\x0e\x06\x04\x14\x0b\x02\n\x08\x1e\x04\x02f\x04?fp\x02\x16\x042\x04\x02F\x04P\x04b\x04d\x04\x02\x04\x02\x04\x06\x04\x1e\x0c\x1a\x12\x04\xa6\x01\x04\x02\x04\x02\x06\x04\r*\x04T\x042\x04\x02\x06\x04\r*\x04Z\x04*\x04\x02\x06\x04\x15*\x04Z\x04*\x04\x02\x04\x02\xa8\x06\x06\x04\x04\x05\x02\x1e\x04\x04\x02\x01$\x04\x04\x04\x14\x03\x0c\x04\x04\x0c\x01\x02\x04\n\x04\x02\x03\x04\x1c\x06\x02\x03\x1a\x12\n\x02\x07\x06\x02\x1c\x06\x04\x02\x07\x06\x02\x1c\x08\x04\x02\x01\x06\x04\x02\x01\x1a\x08\x02?\x0c\x10\x1c`\x044\x04\x02pH\x04\x02\x04x\x04P\x04\x02\x04\xc4\x01\x04N\x04\x02\x04\xde\x01\x04t\x04\x02\x04v\x04\x04\'D\x04\x02\x04\"\x04d\x04<\x04\x02\x04v\x04.\x04\x02\x04\x02\xa8\x06\x04\x04\x05\x1c\x02\x06\x04\x02\x03\xb2\x06\xb2\x1d\x04\x08/\xe1\x8e\x01\xa2\x02\xdf\x01\xd6\x02\x16\xc7\x01\xc5\x05\xf0\x01\xf8\x01\x82\x01^Tf\x06\x0e\x02\n\x81\x02\xde\x1b\xd7\x13\xa5\r\xd2\x02\xd2\n\xc4\x10\n\x04\x04\x06\x04\x04\x05\x0e\x08R\x08\x02\x01\x10\x04\x08\x07.\x02.\x0c\x04\x02\x06\x08\x04\x02\x07\x12.\x08\x06\x04\x02\x01\x04\x04\x06!\x02\x8d!\xda\x02\xf2\x08\x9e\x08\xc4\x01l\xac\x02\x04\n<\x04K\xa9\x02\xe9\x10\xd2\x02\xce\x02\x04\x04\x03\x1e\x06\x04\x02\x04\x08\x04\x10\xa5\x01v\xe0\x03\x90\x05\x1c\x98\x02`\x04\x1a\x04>\x04\xd0\x08\x8e\x04G\xe5\x08\xd2\x02\xcf\x04\xeb\n\x04\xc8\x03\xd3\x02\xaa\x02\x9f\x03\xa0\x07\x04\x01\xe0\x04\x9e\x1a\xf9\x19\xeeP\xdd:\xdd\x15\xe0\x13\x18\xe9\x10\xf4\x10\x03\x07(8\'\xa7\x11\xd2\x12\x85\x01%\xc7\t\n\xdb\x07\xcc\x11\xe1\t\x90\n\x81\x12\x92\x12\x85\t\x0c\xd2\x16*f/\x91\x17\xaa\x1c\xf9\x1b\x9e\x05\x04\x01\xf3\x04\x94\x02\xae\x14\xab\x14\xb0\x14\xad\x14\x98\x03\xd9\x02\x98\x03\xd1\x02\xae\x13\x91\x13\xf4\x02\x9d\x02\xed)\x04\n\x1c\x04 !\x10\xb8\x04\x10\x1e\xe4\x0f\xb0\x02\xb8\x0b\x84\x010\x1e (\x90\x01\xb8\x01FrF\x04\n\x06\x0c\x01$\x04>=P\x02\x06\x02\x04<\x1c\x04\x086\"\x04\x0c\n\x06\x04\xcc\x0360\x1e\x90\x02\x0c\x06\x14 \x02\x10\n$\x02\x06\x04\x16\x01\x8c\x01\x04\x04\x04\x8c\x01\r\x04\x90\x01\x14\"*\x02 \n\x04\x05\x08\x04\x10\n\x04{\x0648\x16\x14\x9a\x01\x04\x02\x04\x02\x04.\x16\x12\x16\"\x02.\x02\x12\x16\x12\x16\x84\x1d\x04\x16\x1c\x02\x16\x1c\x10\x0e:\x10\x16\x02\x16\x1e\x14\x06\x16\x04x\x1e6\x90\x01\n\x06\"\x06\x0c\x02\"\x04\x1eT\x02\x04\xee\x02\x02\x1c\x14\x04\x02/\x16\x0c\x02\x04\\\x02\xee\x02\x04\xf0\x02\xa7s\xca\x0e\xe4\x01\"\xb2\x02>\xa6\x02\x02\x8c\x01\x02\xd2\x82\trp\xf7\xfb\x08\x06\x04\x04S\xb9\x1f \x9e\x04\xbb\x04\xe4\xbd\x01\xf5V\xd6W\xcbW\xe0W\x99\xbe\x01\xf0\xc8\x01\xbd\xc9\x01\xf2\x02\xea\xc8\x01\xbb\xca\x01\xd6\xcc\x01\x9f\xcc\x01\xc2\xcc\x01\x8b\xcc\x01\xaa\xcc\x01\xf3\xcb\x01\xaa\xcd\x01\xf3\xcc\x01\xc6\xcd\x01\xf7i!\x96l\xbe\r\xc9\xdc\x01\x80\xe7\x01\xe1\xe0\x01\xe7\x05\x82\xe7\x01\x98\x02?pHC,\x0f_\x85\xe8\x01\x04\n\r\xe6\x01\xbd\x01\xb2\x01\x9e\xe6\x01\xe9\xec\x01\xeee\"\x04\x04+R\x10\x02\x85g\x06z\x02\n\x046$\x08\xea\"\xd2\x02`\xac\x01\x94\x01d\x94\x01>\xb6\x01\x04\x04\x02\x152\x08\x12\x06x\x14\x02\x10\x1c\x02\xdc.\x04\x0e\x0f8\x08\x02\x088\x02\x04\x0e\x04\x02-\x18\x10\x08\x02\x08\x06\x02\x08\x1a\x0e\x02\x12\x02\x08\x16\x02\x0c\x02\x04\x02\n\x02&\x04\x02\x0f\x048\x044\n\x9a\x01<\x06\x08\x02\t\x04\x0c\x02>\x08\x06\x04\x058<\x02\x0e\x04\x03\x90\x01\x04\x04\x02\x01\x0c\n\x04\x07\x02\x06\x02\x06\x06\x02\x0b\x0c\x02\xab\x04\x04\xb8\x04\x06\x08\x02\r\x16\xe0\x03\x14\x02\n\x02\xe8\x03\x04\x02\x13\x04\x06\x02\x04\x06\x08\x02\x8c\x01\x1e\x08\x04\x02\'\x9a\x02\x02\x04.\x02\xb4\x01\x04\x02>\x04\x88\x02\x9a\x02\x02\x14\x08\x02\x12\x06\x04\x02\x04\x04\x01\n\x04\x02\x03\x16\x04\x04\x08\r\x0e\x02\x12\x06\x04\x02\x04\x04\x02\x07\"\x0e\x02\x04\x04\x02\x0b\"\x02\x04\x0c\x10\x0c\x0c\x04\x07\x02j\x04T\x0c\x04\x05\x02\x0c\x1c\x04\x02\x01\x1e\x06\x02\x01\x08\x04\x06\x0f\x04\x08\x06\x02\x04\x14\x04h\x04\x04\x03\x02\x0e\x08\x02\x0c\x04\x04\x02\x1b\x06\x04\x02\x10\x12\x02\x0e\x02\x14\x028\x04\x08\x10\x06\x02\x01\x0e\x08\x04!\x02\x0e\x04\xa2\x01,\x0c\x04\x10\n\x0e\x14\x06\x0e\x14\x04\n0\x08\x04\x01\x02\x04\x04\x01\"\x04\x02\x0f\n\x16\x04\x0e\x02\x1e\x14d\x04\x04\x04\x02\x01\"\x06\x02\x05 \x08\x12\x04\x08\r\x1e\x06\n\x04\x18\x02\n\x04\x08\x0f\x18\"\x02(\"\x04\x02:\x04<#B\x0c\x1e\x02\x04\x06\n\x06\x02\x04\x02\x18\x08\n\x04\x02\x06\x08\x04\x02):\x04\x02\n\x02\x18\x10\xbc\x07\x02\x14\x1c\x0c\x04\x14\x04\x02\xbe\x02\x02B\x1e,\x04\x04\x1d\x92\r\x02\xee\x05\x02\x0c\\V\n\x02\n\x04\n \x0cv\x04\x04\x01X\x04\x04\x01\xa4\x01\x04\x04\x01\x8c\x01\x04\x04\x03\x022\x04\x04\x06\x02\x05\n>\x0c\x04\x02\x05V\x02\x06\x04\x02\x03\x9a\x01*\x04\x02\t\n\xe8\x03\x02\n\x12\x06\x02\x01\x10\x04\x02\x1f\x064X\xf2\n\x9e\x04\"\x1e\xb6\x01R\xaa\x0f\xc6\n8\x8c\x02 \x04\x18\x04\x02\x0b*\x10\x81\xaf\x01\x10\x04\x10\x04\x02S>\x08\x10\x08>\x1e\x024\n\x04\x02$\x10\x04\n\x14\x1a\x024\">\x04&>\x14\x0e\x10\n6\x02\x10\x02\xf4\x03\x04\x02$\x06\x98\x01\xc2\x01\x02\x04\x02\x04\x06\x07\x04\xebK<\x16\x04:\x07F\n\x02\x8c\x01\x06\x02\x0b:\n\xef\x03<\x1c\x1a\x0e6\x04\x1a\x138\x04\x08*\x80\x01:\x04\x02\x086\x04\x02\x07\x04\xf2\x14\xce\x02\x8c\n\x10\x04\x07\x1e\xea\x02L\xf8\"\x04\x04-\xddO\x01\xac\n\xab\n\xce;\xe6F\xa5\x0b\xd2\x05\x04\x86\x02\x02\x8d.\xa5H\xf0J\xe9Q\xceR\xa2G\xa8\x17\x04\x02D\xa5\xb3\x01(\x04\x02+(\x02\x04\x02\x04&\x02T\x02\xae\x01\x04\x12\n\x1a\x02\x06\x02&\x02\x96\x02\x98\x02\xd8\x02\x04\x02\x0c\x04\x0f\xba\x03\xb2\x01,\x8a\x01\x12:D\x028\x04\x07\x02\x04\x02\\\x04\x06\x19\x02\x12\xd2\x02\x02\x0e\n\x18X\x04\xa2\x01\x04\xa4\x01\x02$\x04\x01\x12\x04\x10\x13\x1c\x85\x19\x04\x81\x03\x08\x04\x02\x0e\"=\x0c\x04\x03\x12\x1e,\x04\x01(\x04\x04\x01(\x04\x02\x01(\x08\x02\x01\x04\x04\x02\x07\x04L\x16\x06\x04\x14\x01\x06\x04\x04\x04\x02\x05(\\\xa4\x03\x06\x02\x17\x86\xd3\x01\x04\x8e\x01\x02\x12,\x02(j\x02(\x06\x06\x02\x05\x04\x1c\x1a\x04\x12\x04\x1a\x01\x12\x04\x06\x15\x1a\xf3\xdf\x01\x88\x01h\x02*\x06\x10&\x16\xc8\x01\x06\x04\x01\x0c\x04\x04\x01v\x06\x04\x01R\x04\x04\x01.\x04\x04\x07\x02\x040\x1e\x04\x04\t\x02\x04\x02\x04N\x04\x04\x01*\x04\x04\x0f\xc0\x12\x02\x18\x02\x8e\x01L\x02\x16\x04\x02\x0f\xda\x01\x16\x8a\x01$h\xee\x01\x02\xec\x01\x04\x02/L\x04\x02\x06\x0e\x04\x02\x10(\xa4\x02\\\xfc\x04N\x18\x84\x04\xaa0\x06\x14\x02$\x1a\x06\x02\x10\x04\x06\x07\x0cH\x02\x16\x06\x02\x15\n\x08\x18\x04f\x14\x06\x10\xf1f\x1a\x02\x04\x04\r\x02\xde\x01\x06\x12\x06\x10\x02\x04\x16\x05\x0e\x06\x08\n\x04\x03\x1c\x06\x04\x02%8\x10\"$\x1c\x082\x06\x02\x04\x02\x1c\x02:\x1c\x042\x1c\x04\x04\x1c\x0f\x04 x\x042\x0c\x1e\x02\x04\x06)\x02\"\x10\x04\x16\x04\"\x1c\x12\x02\x04\x02$4\x02\x10\n\x02\x08N\x02\x04\x06\x0b\x02\x1a\x02\x04\x02\x10\x08\x04\x03\x08\x1c\x08\x04\x03\"\x10\x04L\x07\x18L\x02\x04\x08\x02\rb\x02\x04\x02\x06\x02\x04\x04\x02\x06@\x0c\x02\t~\x02\x10\x02\x0c\x04\n\x04\x08\x07:\x0e\x02\n\x04\x08\x04\x06\n\x02\x03 \x0c\x04\x04\x04\x02\x19\x16\x08\x040\x1c\x0c\n\x06\x12\x04\x1a\x08\x1e\x06\x02\x04\x08\x13\n\x02\x088\x06\x02\x0c\x02\x0eR\x04\x06\x05\x02\"\x10\x04\x04\rP\x10\x02\x04\x02\x0c\x04\x04\x08\x03\x1c\x08\n\x02\x0f\x08\x0c\n\x06 \x04\n\x02\x04\x06\x05$\x02\x04\x04\x0c\x04\x02\x01\x1a\x04\x02\x01\x18\x04\x06\x04\x02\x07\x04\x16\x06\x02\x04\n\x038\x08\x04\n\x03\x06\xd0\x01\x06\x02\x04\x08\x03\x06\n\x04\x0e\x03\n\x0e\x06\x04\x05\x02\x04\x02\x06\n\x03\x06\x9f\x1b\x04\x04\x0f\x02\x1c\x04\x02\x04\x02\x06\x02\x04\x04\x15(\x04\x0e\x060\x12\x14\x04b82\x04\x02\x1d8\x020\x02 \x02\x1e\x1a\x1e\x12V\x02\x1c\x0c\x1c\x04\x04\x11\x1e\x16\x0e\x04@\x02\x18\n\x12\x04\x04\x04\x02e\x0e\x1c:\x06*\x16\x022\x14(\x0c\x1c\"\x12\x18\x06\x12\x1c\x06\x02\x06\x04:\"\x12\x18\x08\x10\x1c\x02\x06\x04\xb0\x02\xbe\x01\"xd\n\xd2\x01\x02\x0e\xa0\x01\nF\x0e\xb4\x01\n4\x06\x86\x03T\x06\x02-PN\x12\xd8\x02.\x06\\\x02\x1a\x02\xae\x01\x06\x02\x06\x02\n2\x04\x02\x16\x02\x0e\x18\x04\x04; \x08\x1c\x02.\n<\n8\x06\xea\x01\x12\xb4\x01\x02\x0e\x06\x02\xc4\x01\n\x02.\nX\n:\x06\x96\x02\x14\x06\xc4\x01\x06\x02\r\x06\x02P\n\x1e\x02\x1c\x04\x08\x07\x02\x0e\x02.\x04\x06\x15\x0e(\x0e\x02\x1a\x062\x02\x1e\x02\x10\x06\x02\r\x06\x020\x04\x02\x16\x02\x04\x04\t\x02\x1e\x02\x1c\n\x04\x08\x11\x06\x028\x06N\x06>\x04\x08\x04\x02\r*\x028\x06\x02F\x06\x04\x02\x0b\x08\x02\x0c\x02<\xe8\x01\x06\x02\x05\x06R\n\x04\x02\x01F\n\x02\x0f\x12\x02\n \x1c\x08\x02\x10\x04\x04\x01.\x04\x06\x0b\x1c\x1a\x064\x1a\x06\x08\x02\x15\x064\x04\x02\x16\x02\n\x1e\x02$\x02\x04\x08\t\x06\x02\x16\x10\x06\x04\x02\x0b>\x06*\x02\x12\x06\x06\x02\x048\x150\x08\x02\x0c\x04\x02b\"\x1c\x04\x02\x04\x04\x06\x02#\x1e\x14*\x06\xfa\x01\x02T\x028\x14\x02\x06\x04\x9e\x02\x02(\xdcE\x02\x08\x04\x13\x02\x08$\x02\x08\x06\x08\x020\x08\x06\x04%\n\x02\x04pj\x02pj\x02tj\x02\x04tl\x0e\x12&\x04\x04\x06\x0b\x80\x01\x04\x08\x18\x14\x06\x04\x04\x05\x02 \x0c\x04\x80\x01\x04\x04\x05\x08\x02\x0c\x04\x04\x07\x84\x01\x80\x01\x04\x80\x01\n\x02\x01\"\x04\x06\x05\x16\n\x06\x04\x02\x05\x08\x02\x04\x04\x06\r\x1c\x08\x06\x04\x0c\x02\x06\x06\x02\x07\xc7\xa9\x01\xa4\x1d(\x9c\x01\x04\x02\x13\x06\x18\x1e\x02DR\xb0\x08\xdf(\x08\x04\x04\x02\x07\x10\x06\x027\x04\x80\x01\x1b\x1e\x02\x1e\x02\x1e\x18\xf5\x02\x04\xb0\x01\xae\x01Q\x94\x01\x04\x02\x04\x94\x01\rR\xe6\x01\x02\xe6\x01H\x02\xbb\n\x04\x02\x03\x18\x06\x06\x02\x01\x1e\x04\x10\'\x02\x12\x04z\x0e\x1c\x0e\x1c\x0e\x1c\x02\n\x048\x04\x06\x0c&\">\x04\x04\x04\x02\x05\x0c\x18\x14\x04\x04\x04\x02\x01P\x04\x02\x0f\x10\x02\x0c\x16\x10\x160H\x04\x0c\x01\x08\x04\x04\'\x02\x140\x04\x02\x04$\"`\x0e\x04\x0e\x06\x0e\x08\x04\x02R&d\x06\x04\x06\x02\x11\x06\x0c\x0e.\x04\x02\x04\x02\x0c\x06\x02\r\x14\x06\x02\x08\x02\x06\x0e\x04\x02\x0b\x16\x14\x16&\x14\x08\x04\x04\x1d\x02&\x06\x04\x02\x04\x10\n\x88\x01\x04\x02<\x06\x04\xb2\r\x04\x04\x0bH\x1c\x02\x1c\x06\x1c\x04\x04\r\x028\x06\x04\x02T\xae\x01\x04\x02\x01\xf8\x03\x04\x04\x05\x02,\x06\x04\x04\x17.*8\x1e\x0e\x04@\x02\x04\x14\x02\x12\x04\x02\x01\xb2\r\x06\x02\x0bB\x02\x14\xbc\x01\x04\xc8\x02\x04\x04\x19\x02\xa2\x12\x98\x02\x04\x98\x02\x02\x8e\x0f2\xbc\x02\x02\x18\x02\x08\x04\x02\x01\x08\x04\n\t\x02\x0c\x02\xf6\x04F\x18\x04\x07\x182\x06>\x04\x0c\x07\x084\x0e\x04\x06\x02\r\x1824\x04\x06\x12\x02\x04\x0c\x01\x06\x04\x02%\x06\x02\x14\x024\x02\x04\x02\n\x02\x8e\x01\x04\x0e2$2$\x14\x02\x04\x06\x0b\x10\x1c\x06\x12\x0e\x02\x04\x06\x03\n(\x04\x08\x01\x16\x04\x02)\x16&\x02@\x02\x164\x02\x04\x1eT\x12\x16\x12\x10\x0e\x06\x98\x01\x16\x1a\xa6\x01\x08\x1a\t\x08\x02\x08\x12\x16\x04\x02\x05\n\x02$\x04\x02\r\x12\x04\n\x04($\x06\x04\x02A\x0e\x02$\x08\x18\x02>@$\xd4\x04\x08\x06\x9a\x02\x0c&\x02\n\x96\x01\x0e\x1aZ\x1a\n\xce\x01\x02\x0e\x1at\x08\x026\x02<\x04\x02\x05\x0c\x18\xb6\x01\x04\x02\r2\xf0\x0c\x0e\x164D\xd4\x02\x04\x02\'0\x02\xb4\x01\x04\x02J\x04\xc6\x02\x04\x06\x04&\x04\xc8\x01\x04p\x04\n\x04\x02\x06\x04k\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04(\x04\xb0\x01\x04\x02\x04\xbc\x01\x04(\x04\x8e\x01\x04\x0e\x04:\x04@\x04\x02\x04\x02\xc8\x02\x06\x04+\x12\x04R\x0c\x02\x10,\x04\x02\x1e\x022\xa8\x01@\x02\x98\x02\x02\x84\x02\xb4\x01\x02\x14D\x04\x02\x13,P\xf4\x01>f&FN2J\x06\x02\x0f&\x02\xc2\x01\xbaK\x04\xbaK\x04\xbaK\x04\x0c\x01@\x04\x04\x07V&\x1cR\x04\x04!RL\x92\x01\x1c\x1a\x1c\x1a\x04\x10\x04\x06\"\x02\x04\x02B\x04\x04\x0c\x01\x1e\x04\x04\t\x06\x04\x10\x1a0\x04\x04\x13^\x02\x95\xb1\x03\x8ai*\x12\x04\n|\x02\x06\x04\x17\n\x10\x12\"2\x1c\x12.\x02\n\x06\x08\x08\x02\x04\x08\x19\x02\x0c\x02\x0c\x02\x10\x0e\x12\x024\x142\x06\x04\x02\x04\"\r4\x02l\x04\x14\x08\x0e\x04\x08\x04\x02\x1f\x0e \x02.B\x04*\x06\x04\x0e\x08\x14\x06\x02\x14\x02\x044\x01\x12\x04\x02\x06\x1e\x01\x04\x04\x02\t~\x08:8\x08\x04\x02\x13v\x02\x08\x02\x1c\x04\x02\x1a\x16\x0e\x06\x02-\x1a\x0c\x02\xca\x01\x06\x02&6$\x1a0\x0c\x02\"&\x04F\x02L\x04\x02\x08\x06\x04\"\x1b\x0e\x06\x0e\x04\x06\x04 \x0c\x1a\x10\x1ah\x02$\x0e\x02)\x1a\x0c\x02\x08\x04\x1e\x12\x04\x08\x10\x1c\x18\x16\x12\x0e\x02\x18,\x14\n\xc4\x01\x04\x02#\xee\x02.\x1eB\n@B\x0e&\x02\x1a\x02\x1e\x0e\x06\x0e\x06\xca\x02\x06\x02\x01\x1e\x04\x029j\x02\x06\x08\x0cH82 \x0e\x06P\x02p\x02\xce\x01\x026\x02&\x08\x12\n\x12d\x024\x02Z\x08\x023<\x10\x02\x1a\x0e\x12\x02\x0c\x0e\x04`\xc0\x01\xb2$\x0c\x9b\xba\x01\xd2\x02\xce\x02\xde$\x06\x04.\x88\x02\x02\x06\x04\x8a\x02p\x04-8\x04d\x04\xfc\x01\x04>\x04n\x04&\x04B\x04J\x046\x04F\x04\x02\x06\x9a\x07(\x04\x1f\xa0\x01\x04 \x04 \x04:\x04\x06\x04|\xdc\x16\x06\xb4\x01$\x18\x04\x04\t\x08\x02\x06\x08(\x04\x02\x01\x84\x03\x04\x02\x19\x08\x02,\x8c\x02\x8c\x01\x1e\x08\x14\x1c\x04\x0c\x02\x04\x04\x02\x06\x04\x03 \x08\x04\x02\x03\x14\x06\x04\x04\r\x02\x0c\x04\x0e\x06\x14\x0e\x04\x04\x014\x08\x02\x01$\x04\x04\x01\x02\x04\x04\x1d\x06\x04T \x14\xd4\x02\xfe\x01\x04\x02\x04\x02\x80\x02,\x166\x04\x02\x0f\x16\n\x0cx0\x08\x0c\x02\x04\x04\x01\xb0\x01\x04\x04\x01.\x04\x047\x12\x0e\x12\x0e\n\x80\x01\x10\x16\x12\x0e\x04\x0c\"\x18\xd0\x01\x16\x0e\x04\x0e\x04\x0e\x1a\"\x02T\x0e\x06\x0e\x06\x04\x05\x86\x01\x18\x16\x04\x02\x13\x18\x02\x0c\x04\x16\x02\x0e,\x02\x10\x04\x02\x01.\x04V\x01T\x06\x02).\x0c\xb6\x01\x04F\x02\x8e\x01\x18\x08\n\x10\x02\x0c\x02\x16\x02\"\x04\x0c\x02\x12\x04\x02\x01\n\x04\x02\x03\x10\x1c\x04\n\x01\x18\x04\x10\t\x04\x0e\x02\n\x0c\x06\x04\t\x02\x0e\x02,\x98N\x04\x04\x11\xe2\x01\x16\x1e\x16*0$,\x88\x01\x04\x02\r\"\x1e\n\x02\x0c\x18\x1a\x08\x02\x19\xe7\xca\x01\x04\x02\x04\x9c\x01\x04\x1a \x02 \x02<\x16\x04\x02\x0bl\x02\n\x06r\n\x04\x02\x01\x06\x06\x02\x0b\x04\x02\x1a\x8f\x13\x0e\x1c\x04$\x07\x1a\x1e\x02\x08\x04\x02\x01\x14\x08\x02\x01\n\x04\x02\x0b\x16\x02R\x1e \x1e\x04\x02\x0b\n\x10\x06\x1e\x02\x0e\x04\x0c\x01\n\x06\x02\x01\x1e\x04\x04\x03\x1e\x02\x04\x1e\x15\x16\x02\x1e\n\x14\x04\x0e\x1e\x14\x04\x08\x08\x02\x05\x08\x0e\x1a\x04\x02\x01\xc1\x0c\x12\x04\x03\x02\n\x0e\x04\t\x02\x1aR\x1a\x06\x1e\x04\x05J\x1e\x1c\x06\x04\x07\x06\x02\x06\x04\x04\x06!\x04\xb4\x01\x04\x02B\x04$\x04\x02X\x04R\x04\xfc\x01\x04\x02\xa4\x04\x0e\x04\x05\x02\x04$\x04\x02\x03\xae\x01\x04\x04\x02\x01\x04\x04\x02\x07\xb4\x01\x04\"6\x04\x0c\x07\x1a\x12\x06\x04\x04\x08\x03\x02\x1a\x04\x02\x03 \x10\x04\x06\r\x1c\x04\x02\x0c\n\x14\x1e\x04\x02\x07<D\x04:\x04\x04\x03\x02\x88\x01\x04\x04\x1f\x02.\x04\xe2\x01 \x02\",\"\x02R\x02\x04(\x02\\\x04\x06\x0b&\x0c\x02\x04\xca\x01\x0e\x04\x0c\x01\x1a\x04\x04\x04\x02\x13\x1e\x02\n\x1a\x10\x0e\"&8L\x08\x04\t\x020\x02\x1a\x08\x06\x04\x03\x02\n\x04\x04\x04\x02\x03\x1c.\x08\x04\x0f\x02\x1c&\x04\x06\x0c\"\x06\x04\x04\x04\x02\'\x0c\x1c\x10\x02\x1c\x0c\x02\xbe\x02\x08\xea\xc6\x01\x06\xe4\x04\xe4\x03x\xac\x01\x028\"\x04\xf0\x01\x08\x04\x04\x06#\x08\x02\x10\x08(\x04\x06\x80\x01\nH\n\x06\xd4\x01\x02\x1e\x08\xde\x06\x02\x04\x1e\x0b\xf8\x13\x04\xf6\x01\x04H\x04\x04\x02\x01\xf0\x01\x04\x02\x1d\x06$\x08\x06\x02\xf2\x03\x02\nx\x04\":\x02\xa0\x02\xe4+\x04\x04\x05V\x04F\x04\x02\x01\x04\x04\x02\r*\x0c\x1a\x02\x06J\xc7\xd6\x02\x04\x02\x13\x12\x08\n\x06/\x1c(R\x04\x0c\x0c\x04\x052\x0e\x04\x04\x02\x03D\x0e\x04\x10\x04\n\x01\x0e\x04\x04\x03\x9c\x04\x04\x04\x02\x15\x9c\x04$\x02\x04\x02&\x1a\x1e6&\x9a\x03\x04\x1a\x03\xf4\x01\x02\x04\x1a\x15\xa8\x01&\x1c&\x1c\x16\nf\x1cL\x1c\x04T\x04\x1c\x04T\x04\x1c\x04\x10\x13&\n\x1ex\x9b\x1d\x04 \x02\x0c\x04\x04\x02\x01\x0c\x04\x02\x11\x0c\x02\n\x1e\x02\xdc\x01\xbf\x01\x02\"\x08\x02\x03\xc9\x01\x1a\x04\x1e\x08\x1a\x07\xb9\x01,\np\n\x04\x07\xbd\x01\x08\x0e\x02\x04\x04\x01\x0c\x04\x04\x19\x02\x0e\x02\x04,(\x04\x18\x02\x1eH\x042\x04\x02\x01:\x04\x04\x04\x02\x01\x1c\x04\x02\x19D\x04\x0cN\x02\x0c\x10\x06\x08$\x02 \x10\x08\x04\x1b\x0e\x06\x02\xd2+\x06\x08\n4\x06\xd4\x0b\x06\x0c:\x8a\x03\x0c\x02\r8\xe0\x01\x1a0\x06\x02\x08\x04\x04\x03\x02 \x04\"\x03\n\x18\x04\x04\x07\x02\x04\x0c\x04\x04\x02\x19\x0c\x0e\x88\rd\x04\xa2G\x04\x08\x04$\x16\x02\x04\x06\x08\x13\x02\x06\x12\x02 \x02\x12\x02\x0c\"\x04\x02\x1b\x04\x02\x12\x02\"\x04\n\x06\x148$\x02\x12\x04\x04\x0e\x03\x040\x04\x02\t\x0c \xb0\x01\x06*\x04\x02\x11\x14\x02J\x02X\x08\x0e\x04\n\x04\x02\x05\x12\xd1\xa3\x01\x10\x08\x04\x05\n\x08F\x10\x04\x13\x97\x01H\x04\x10\x04J\x04F\x04H\x06\x04\x0f\xb4\x03\x80\x01$\x0e\x12\xe6\x01>\x04\n\x0e\x11\x12\xe6\x01\x0c$\x10\n.\x16\x06\x08\x1c\x07\x06\x87\x0e\x04\n\x04\x02\x0f6\n\x02z\x04Z\x14\x04\x04\x02\x06\x04\x01\x82\x04\x04\x04\x0b\x06\x0c\x08\x12\x08<\x1a\x04\x05\n\x02\x12\x04\x02\x05P\x0c\x0e\x06\x04\x04\x02\x04\x04\x06\x0c\x11\x08\x0e\x02\x85\n\x06\x1a$\x1ae\x04\x1e\x03\x82\x01\x02\x04N\x01\x1e\n\x04\x01\x08\x06\x02\r\x1e\x08$\x1a\x1e\x06\x0e\x04\x1a!\x1e\x04.\x1e\n\x04\x02\n\x02*D\x04>\x04\x0c\x04\x86\x01\x04\x04\x06\x02\x1d\x1e\x08\n$\x02ZV\x04|\x04\x06\x02\x1c*\x08\x04\x04\x0f\x02\x1a&\x04\x06\x12(\x06\x04\x04\x06\x02\x03\x1e\x0c\x04\x04\x05\x02f\x04\x04\x02\x04\x04\x1b\x10\x1a\x02d\x04\x12\x0c(.\x98\x01(\x12\x0c&\x06\x0c\x05\xb0\x01\x04\x0e\x04\x04\x01\xe0\x03\x06\x04\x05\x86\x02\x04\x02\x04\x04\x01\x0c\n\x02\x07\x1a\n\x16\x0e\x04\x02\'\x1a\x0e8\x1e\x80\x01\x0c\x02T\x04B\x04\x02@\x06^\x04R\x02&\x06\x04\x04\x11\x98\x01*\x02\x04\xba\x01\x02>\x1e\xc0\x03\x04\x02\x01Z\x04\x02\x03&.\x04\x04\x0f\x02@\x0c\x86\x04\x02\x1c2\x04\x04\x1c-\x0c\xc2\x04\x0e\x1a4&\x1a\x08\xf0\x01\x02&4\xb8\x048\n\x02\x0e\x06\x0e\x02\xbc\x02\xa0\x02\xa8\'\x04\x04\x01\n\x04\x0e\t\x1e\n\x04\xc9d\x04\x04\x02\x01\x06\x06\x04\x04\x025\xf5\x05\xda\r\x04\x02\x16\xfc\x03\x02\x9c\x03\x02\x0eL\x0c\x02\n4\x14\x02\xfe\x01\xae\x07\xaa\n\xb0\x02\xd6\x0b\x84\x02\x02\xee\x01\x86\x01\xf8\x01\x04\x02\r\x12\x04\x0e\x02\x8f9\x04\x0e\x04\x02\x01$\x04\x02\x01\x14\x04\x02\x01\x04\x06\x02\x03\x04\n\x04\x02\x05\x06\x02\xee\x05\n\x02\x04\x06\x06\x02\x07\x10\"\x02\x0c\x04\x02\x0b\xe3\n\x0e\x84\t\x0e\x8c\x1a\x9c#\x04\n\x07\x06\x0c\x02\"\x04\x02\x04<\t\x83D\x1c\x16\x1c\x18\x04\x04\x11\n\x16\x1a\x16\x1c\xe2\x04\x02@,\x04\x18\x05\x14,\x02\x04\x04\x05\x02\x8c\x0b\x04\x04\n\x01\x0e\x04\x14#\x12\x14\x12\x14\x12\x0e\x16\xfe\x03\n\x08\xb9 \x08\x02\x14&\"\x06\x0c\x04\x02\x15\n\x08\x06\x04\x1e\x14\n\x04<\x1e\x06\x04\x02\x01N\x06\x02=\n\x12\x1c\x16\x08\x02<\xa3\x04v\x08\x02|\x02n$\x8f\x03\n\x06\x1a2\x042\xa2\x01L\xc6\x02\x0e\x12\xcc\x01x\x06\n\x04\x04a\x12\x08\x04\x12\x08\x04\x12\x08\x04\x12\x08\x04\x12\x08\x04\x12\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04\x10\x08\x04$\x04\x04\x03\xb0\x01\xb6\x15$\x04\x07\x8e\x06\x1a\x04<\x04\x024\x04\x04\x02\x13\x06\x04\x10\x0c$\x08\n\x02\x0e\x08\x04\x02\x04\x08#\x02\x1a0\x02\x08\"\x10\x02\x1a\n\x02$j\x04Z\x04R\x04\x04\x02\x15\x1a\x14p\x02\x04\x0e\x04\x0e\x1c\x04\x1e\x04\x02\x04\x1e\x08\x02\t\x06\x04\x02n\x04\x04\x08\x15\x0e\x04\x0e\x04\x02\"\n\x08\x18\x022\x04\x02\x01\x08\x04\x02\x11\x08.\x02\x876\x04\x0e\xb0\x9e\x08\x1c\x02\x04\x16\t\x18B\x06\x04\x0e\x04\n\x81\x01\x1a\x08\x02j\x16\x02>\x02\xde\x02\x12\xb6\x03\x12\x84\x02\x12\xa8\x02\x12\x02\x06\x1aZ\xc6\x06\x1a\x10\x1a\xf4\x02,\x88\x01\x1a\xe4\x01\x16\x06\xb6\x01\x18\x02\xe2\x01\x0e\x0c\x86\x01T\x06\x18\x04\xb8\x02$\x12\xec\x02\x02\x16\x02\xa6\x0b\x1a,\x08\x02\x1a\x08\x02\x06\x02F\x16h\x02\x84\x04\xb87\x04\x04\x15\xf7\x83\t\x04\x02TF\x10\x08\x18 \x08\x16\x04\x04\t \x02\x0c\x18\x14\x08\x02\x07\x18\n\x02\x1e\x04\x14\x07\x18\x086\x06\x04\xcc\x01\x1b6\x02\x04\x82\x02\x02\x0e\x04\n\x04(\x10\x0e\x04\x0e\x04\x1c\x07\x0e\x08\x0e\x04\x04\x08\x032$\x06\x02\x1b\x0e\x02\x0c\x18\x06\x02\x1cl\x04\x02\x04\x02 \x0e\x04\x02\x1d\x08\x02\x0c\x06\x022j\x02\xc2\x03\x10\x04\x06\xbe\x01\x06\x02\x06\x04;\x1c\x02\x04\n \x14*\x02\x04\x02@\x06\n6\x02\xf0\x01\x04\x14\x0e\x04\x06\x04\x1a\xd5&\x02\"\x02\x04)>&\x04\x03\xec+\x02\x04\x04\xa1\x01\xb4\x01\x04\xa2\x01\x04 \x04 \x04:\x04\x06\x04J\x04\xc6\x02\x04\x06\x04&\x04\xc8\x01\x04p\x04\n\x04:\x04d\x04\xfc\x01\x04>\x04n\x04&\x04B\x04J\x046\x04F\x04\x06\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04$\x04\x04\r\xb0\x01\x04\x02>\x02\x94\x02\x04\x04\x02}\xba\x03\xe8\x01\x02&\x04\x18\x06\x84\x02\x04\x02\xfa&\x06\x10\x02\x12\x04\x02\x04\x14R\x0c,\x024\x02$\x0e\x02\x0c\x02\x04\xa0\x01\x04D\x04R\x04\xfc\x01\x04N\x04\x06\x04\xe6\x01\x04\xea\x01\x04X\x04\x08F\x02\xde\x01\x10\xda\x01\xc4\x11\x020\x12*4\x02\x18.\x04\x03\x0e\x12\x04\x02\x0f\x06\x04\x1c\x08\x02\x08\x1e\x1c\x04\x02\x15d\x1a\x1e\x16\x1a\x12\xc1\x9a\x01<\x1c\x0e\x12\x04\x0e\x0b\x02\"\n\x04\x08\x02\x04\x04\x01\x0e\x04\x12\x0b\xfe\x06\xac\x01\x14\x0e\x04\x0e\x04\x06\x07\x04\x0e\x82\x01\x0e\x04\x02\x11\x0e\x06\x0eX\x14\x0e\x04\x0e\xa6\x02\x04\x04\x01\xa4\x05\x04\x02\x1f\x04\x1c\x04\x12\x068\xdc\x01\x04\x02\xe2\x01\x1c\x04\x16\x0c,\x1c\x04\x04\x05\xdb\x1c\x04\x02\x04\xe8\x02\x11\xba\x04\x02\x8d\n\x04\x02\x08\x02\n\x06\x04\x02\'\n\x08 \x12.\x14\x02\xf0\t*\x12\xe0\t\x04\n\x06\x02\x1c\x08\x06\x04z\x06\x02\x01\x06\x04\x02\r\x80\x01\x02\x04\x02\x0c\x06\x02\x04\x04\x11\x02\x1e\x02(\x04\x02F\x16(\x04\x06U\x14<\x06\xc0\x04l\xe0\x05<\x04*\x02\xa4\x06f\x02\xa0\x08\x12\xba\x02f\x02\x82\x04\x02\x0e\x02\x04\x06\x02\x1a.\x14\x02\n\"\x04\xac\x01\x06\x02\"\xba\x01$\x1c$\x0c\xf4\x02\x06\x04\x02\x05\xfe\x02\xb6G\xb9\x8d\x01\x04\x02\x1f\x1a\x0e*f\n\x04\x1a\x02\x1e\x0c\x06\x14\x12\x08\x02.\x04\x04\x04\x06\x03\x1eT\x04\x02\x072\x0c,\"\x08\x04_\x18\x04\xc6E\xc6J\xfdG\xa8:\x04\xf39\xd4:\xd1:\xe4G\xbbF\xb88\xac\r\xdf:\xe2:v\xc3;\xe4;\xad;\xce;\xfd:\xe7\x15\xd2\x02\x84\x05\xe2\x01r\xa6\n6P\xae,\x0e^\x08\x04\x02\xbe\x01\x16\x14J$\\0\x1c\x08\n\x16\x0e\x06\x04\x0b\xe2\x07\x04\x06\n\x12\x0e\n \t\x02R\x0e\xd6\x01\x04\x04\x02\x11\x1c\x06\x04\x0e\n\x16$*\x14\x04\x08\xbf\x02\xdb\x99\x01\xc0b\xce\x8c\x01\xf9\xf1\x01\xaa\xf3\x01\xa4?\xbf\x92\x02\x1e*\x04\x01\x06\xdb\x0f\xcf\x08\x8e\x02\xf3\x01\x8e\x02\xbf\x01\xda\x01\xbf\x01\xb2\x17\xe6\x04\xc9\x04\x98\x05\xeb\x04\x86\x05\xdb\x04\x8e\x04\xab\x03\x94\x04\xa3\x03\xd6\x02\x93\x02\xfc\x02\xa9\x02\xae\x02\x8b\x06S\xb8\xd3\x01\x88\x01\xab\xf5\x01\xca\xf6\x01\xd9\xf6\x01\xa6\x02\x83\x02\x15\xd8\x01\xc9\x01\xd0\x01\x1c\x85\x01\xc0\x01\x06\x04\xa5\x02#\xfe\x02\xa21\x8f1\x0c\xd6\x01\xb9\x01\xac\x01_\xd3\x03\x9c\x04\x85\x04\x88\x08\x0edA\x87\x04\xea\x04\xe7\x04\x85\x04\xb2\x04\xa2\x05\xb3\x01rU\xad\x06\xdd\x01\xf0\xf5\x01\x9a\x0b\xef\n\xceQ\x80\x01\xf9\xc8\x02\x96\xc9\x02\xf5\xc8\x02\x92\xc9\x02\xfb\xb2\x02 \x03\x08\xbc\x01\x9f\x01\xa2\x01\xbc\x016\x16^\x01\x9a8\x1e\x1b \x8a\x02/\xaf\x01\xa0\x01\x8f\x014.\x9f/\x0e\xc0,\xe8\x03\xd5\x03\xbf6\xfe6\x934\x984\xc13\xb0\x01W\xd6\x04\x98.\x95.$<\x1f\n\x01\"\xd1\x02\x97\x0f\x9a?\xfbP\xe6\x11\xf3\n\x8eJ\xedI\x03\x08\xcc+\xab+\xfe4\xed4\xdf\x03\xa2M\x9fM\x82\x01\x1a\x12\xfc+\xcd1\xc8Q\xafL\xe7\x04\x04\x03)\x0c\xa4\x01I\xee\x08\xd0G\xcdGZ\xa2\x02\xdf\x01\x9c\x02\xe3\x01\xa2\x02\x99\x02\x8e\x02\x8b\x01\x85\x02\xaa\x1a\xd0,\xcd,\xd8\x01\xa1\x01\x04\x08+\x01\x07\x10\x86\x0c\xdf\nr\xec\x0b\xb7\x0b MQ\xd2\x01\xc1\x01\xc8\x01\xe6(\xe3(VF\x19\xf8\x0e\xf6\x18\xf9\x14\x04\x07\x9f\x01\xe9\x03j]xm\x84\x01,\'P q9\xec\x03\xaa\x14\xd5\x13Q\x18 \x01 \xd6\x13\xad\x12\x03\xa1\x01\xd0\x01\x95\x01\xcc\x01\x9d\x01\xcb\x1d\xe1\x0c\xb3\x0c\x1a\x0f\x1c\xeb\n8\xb2\x01\xa4\x02\x82\x01\x80\n\x03\xf9\t\xec\n\xbc!\x83!\xc6!\xe7\"\xb8\x01\x16\x948\x80\xd6\x01\xf5\"\x87\xfc\x01FX4\x0e\x1c\x02\x068(\x04\x02\x1e\n\xa4\x01D*\xb4\x01\x10\n\x18\x0e\x02&L\x1c*\n\x04B\x04\x08\x07D\x0e\x04\n\x04\x10\x01\x06\x0c\x04\x01\x02\x06\x04\x05\xb6\x02\x02`\x04\x04\x05\x02\x04\n\x06\x04\x03\x02\x0e\x0c\x04\x04\x02\x01\xa6\x05\x06\x04\x05\xc6\x01\x02\x04\x08\x0c\x13\x12\n\x0cl\x0e\x04,\x04&T\x04\x02\x0fh\x04\x08\x04\x02\x08\x06\x93\x1a\x04 \x04\x10\x06 >\x10\x11\xee\xc2\x01\xc4\x16\xf8&\xe4\x06\x06\x04\xb6\x01\x02\x1c\x04\x06\r\x18\x02\x06<\"\x14\x10\x04\x0e\x07\x0c\x06\x04\x06\x04\x02\x01\n\x04\x02\x01\x04\x04\x08)\x06\x04\x06\x04\x06\x04\x06\x04\xf0\x04\x0c\x06\x04\x08\x06\x14\n \x02\x14\x02\x04\x04\x02\x01\x08\x04\x04\x03\x02\x8c\x06\x04\x04\x03\x02\xa0\x06\x04\x04\x0b\x14\x08\x1c\x06\x02\xf0\x04\x08\x02\x05\x1c\x0c\x98\x06\x04\x02\x04\x04\x07\x02\x12\x1e\n\n\x02\x07\x0c\x06\x02\x08\x06\x02\x05\x0e\x06\"\x04\x10\x04\x06\x07\x16\x06N\xec\r\x04\x02!\x0eD\x08\x0c\n\x08\xa0\x01\x18\x04\x0c\x02f\x0c\x1c\x90\x01n\x12\x04\x04\x05\x10\x02\x04\x04\x02\x04\x0c\x11(\x0c\n\x1c\x04\x0e\x92\x01\x12\x1e\x04\x02\x03\x04\x02\x04\x04\x13\x18\x02\n\x06\"\x1a&\\\x02\n\x04\x04\x07\xae\x030\x02\x1e\x0c\x04;\x028\n\x02\x06\x04\x08\x0c\x02\n\x02\x08\n\x14\x12\x02\x14\x18\x02\x04\x10\x02\x04\x14\x02:\x1a\x0c\x06\xef\xff\x01\x06\x02\x05\x04\x02\x18\x08 \x11$.\x04V\x14\x08\x04\x16\x0c\x04\x04\x13\x0e,4\x04*\x04*$H\xd1V\x04\x02\x01\xcc\x01\x04\x04\t\x10\"\x04\xa0\x01\x04\x04\x02\r\x04\xb2\x03\x8c\x02\x0e\xa9\t\x16\x08\x04\x02\x0b\x04\x02\x14\x02\x04\x0e\x04\x04\x1b\n0*\x0c.\x02\n\x02\n\x08\n\x08\n\x06\x04\x0c\x01&\x04\x02\x01&\x04\x02\tJ*2 B\x04\x02\x04\x04\x07&\x02&@\x08\x04\x01|\x04\x0c]\x1a\x02\x04\n\x02\x10 \x08\x10\x08\n$:\x1a\x0e.8\x02*\x02\x0e\x04\x16\\\x04\x08\x02l\x02*2(^(6.0\x04\x16\xc2\x01\"\x16$\n\x04\x0cn\x06\x04%\x02\x04\x0c$\x0c(\x10\x16\x0c \x0c$\x10\x16\x10B\x0e\x14\x02\x04\x04\x07\x08\xc0\x04\x16\xe2\x01\n\x04\x03\x02\xbc\x01\x04\x02\x04\x04\x07\x06\"\x16\x1a\x04\x0e\x03\x1c\x0c\x04\x0e\x13\"\x04\x18j\x166r>(\xa6\x01\x04\x02\x01\x0c\x04\x02\x01\x06\x04\x02\x1b\x04\"\x16\x1c\x02\x16 \x18:$\x02\x06\x02\x10\x04\x16/\"\x168\x16\x1a2\x12\x04\x02\x04(\x02\x06\x0e6<\xde\x01*\x08r\x02\x0eN\n\x06\x02\t\xbe\x04\x04\x1c>D\x04\x02%(\x10\x02B\xa0\x03\"\x16\"\x16\"\x16\" \n4\x1e\x02\x1a\"\x04\x04\t8\x06\"\x10\x04\x04\x02\x03\x1a\x0c\x04\x04\t\x10\x1c\x10\x02>\x08\x04\x01\x02\x04\x04\x06\x08\x0bb\x04:\x02\x0c\x10\x04\x04\x038V\x04\x04\x07@\xbfBB\x80\x01\x1a\x04\t\xb8\x01pn\x1c\x08\x08\x04\x01\x02\x08\x04\x1f\x02\x06\x10\x0c\x16\x06\x10\x0c\x16\x02\x0c,\x14\xa6\x018\x16\x0c\x04\t\x02\x06N\x1a\x8c\x01\x06\x1a\r(\x0c\"\x10\x14\x02\n\x04\x10\x07\x02\x08\x10\x0c\x06\x04\x07\x02\x10\x02\x06\x06\x02\x0f\x0c \x0c\x1e\x16\x02\x16 \n\x04\rR8F\x04\x88\x01\x12t\x04\x02\x05\x0c\x02\x04\x04\x02\x03\x06\x04\x08\x02\x01\x06\x04\x02\x03f\x0c\x04\x04\x03\x02\x16\x08\x04\x05\xd1\x14\x18\x04\x04\x02\x13&\xfa\x01\n\"\x0e\"\x12\n\x02\x04\x04\x02\x11\x06,\x02\x06\x02\x88\x01\"\x06\"\x04\x04\x05\x02\x92\x02\x88\x02\x04\x04\x15\x02\x96\x020\xc6\x0202\x02<,\x04\xcc\x01\x06\x04\x0b\x02<0\xd8\x01\x02\xc2\x02\x06\x04\x04\x08\x1b\x9e\x014N\x02T \x16\x1c\x08\x8c\x01,\x06\x0c\x04\x04\xa8\x01\x03\x90\x01(\x10\x04\x01\x02\x0c\x04\x05\x02F\n\x04\x02)\xe0\x01\x04\x02\xdc\x01\x10\x0cT\x02\x0c\xcd&b\"\n\x0cZ\x0c,\"8\"\xcc\x02\x04\x02\x04\x0c\r>\x0cb\x0c\xa8\x01\xdc\x02\x04\x06\x0c\x03\x1c\x04\x04\x02\x04\x0c\x01\x1c\x04\x16\x1d\x1c\x02\"\x02\x14*\x0c \x02\x0c\x02N\x0c\xa8\x01\x8e\x02\x06\x0c\x04\x02\x05\x12\x06\x18\x04\x02\x04\x1a\x05\xda\x01\x02\x06\x06\x04\x01\x06\x04\x02\x01\x06\x06\x02\t8\x02\xa0\x01\x0c\xa4\x01\x04\x02\x0b\x10*\x0c\x04\x02\x04\x06\x02\x0f\x16\"\x16\"\x16\"\x04\x90\x01\x04\x04\x11\x02\x9a\x01\x16\"\x16\xa1\x1c\x08\x06\xa2F\x04\x04\x03\x02\x84\x01\x04\x04\x07\x12\"\x12\"\x08\x04\x17h$\x02f\x02\x14\x06\x0e\x10>\x02r\x08\x04\x01\n\x04\x04\x05@\x0cp\x08\x04\x0b\x02\x0e\x04\x02,\x0c\x08\x04\x05\x06&d\x08\x04\x13\x02(\x04\n\x02\x16(\x04\nN\x04\x04\t\x02\xb6e\x068(\x04\x06\x03 :\x04\x04\x05(&:\x04\x04\x01b\x04\x04\x0f\x18\x04\x16\x1e\x04\"\x04R\x04\x04\x1f\x02&\x02N\x1e\n\x02\x0e\x18\x02\n\x1c\x02\x0e\x10 \x04\x02\t\x04\x0c8\xaa\x08\x98\x04\x04\x84\x11\x0f\xbc\x04v\xca\x01F\x0eD\xae\x04\xbe\x05\x06\x04\x01\x02\x04\x04\t\x08\x06\x0e\x06\x04\x04\x02\x074,\x16\x1e\x04\x16#\x1c\x08\n\x08H\x02\xfe\r\n\x08\x18*\n\x08\x18\x94\x01\n\x08\n\x04\x04\x016\x04\x02\x01\x04\x08\x02\x05(\x0e\x1e(\x04\t\n\x1e\x02\x1a4\x04\x04\x03\x9a\x07\xb0\x05L\x04\x01:\x04\x04\x05\x10&\x8e\x01\x04\x04\x05\x0c\x02*\x04\x16\t\x1ch\x02*\x16\x04\x02\x0f\x94\x01\x16\x024H\xb0\x02\x02v\x04\x04\x01t\x04\x04\x04\x02\x01V\x04\x04\x03\x02\x06\x0c\x04\x03\x02~\x04\x04\x07N\x04\x064\x04\x02\x04\x0e\x03,\x0e\x0e\x04\x03&\x80\x07&\x04\x01\x9e\x01\x04\x04\x01\x02\x04\x0c\x190\x0c\x8a\x01\x0c\x92\x01\xec\x02\x0c\x02\x0ch6\x160\x06\x04\x01\x02\x04\x04\x01`\x06\x04\x01\x02\x04\x04\x03D&\x08\x04\x05\x02\x04\x84\x01\x06\x04\x0b\x0e\x16\"\x16\x02\x04\x04\x02\x07\x16\x04\x10\x1c\x04\x16\x15\"\x16\"\x16\"\x04\xf3\xcb\x02\x02\x0e\x0c\x0e\x06\x04\r\x1a\x02\xee\x0fP\x02h\x06\x1a\x04\x19\x86\x01D\xc6\x01\xce\x01\xae\x01\xb4\x01\x8a\x02\xe8\x01\x18\xa4\x01\x16\x8a\x01\x18\x06\x04\x01\x02\x08\x04\x15\x14\x06\x02&\x08\x1a,*N\x84\x01.\x04f\x14\x04\x0c\x1a\x0b2P\x16<\x16\x08\x08\x04/\x14\x16Z\x16\x14\x04\x02N\x0e \x082\x0c\"\x0e>\x04\x06\x10\x0c<\x06\x10\x0c\x04\x04C\x02\x12\x06\x10\x0c\x18\x06\x10,\x06\x10\x0c\n\x0e\x10\x14\x06\x10\x0c\x14\x06\x10\x0c\x16\x06\x10\x0cB\x18\x16\"\x16\"\x02\x06\x04\x03\x893\x10\x04\x04a\xc4\xd3\x02\xa3\xd1\x01\xdc\x08\xa9\x8a\x01\x94\x94\x01\x94\x02\x82\x03\x08\xd1\x02\xfc\x06\nF: \x0e0\x01\x90\x01\x1e\x10.*\xeb\xa1\x01\x80\xa2\x01\xfd\xa1\x01\x04N\xb0\xa1\x01\x01\x17\x81\xa2\x01\x16\x01\xd8\x99\x01\nn[\x94\x01\x7f\xc4\x01\x9d\x01\xf6\x01\"\x15\xeb\x01\x89\x03\x8b\x98\x01\x14\x02\x04\x08\x03\x04\x02\x04\x08!\x1e:\x02\n\x97\x01`d\xc6\x08\xb2\x03\xce\x02\x8a\x06H\x04\x06\x04\xf6\x01\x06\x04\x04\x01\x02\x04\x04\x01\x02\x04\x06\x03\x04\x02\x04\x06\x04\x08\x04\x0c\x05\x0e\x08,\x06\x06\x04\x04\n\x06\x01 \x06\x06\x04\x04\x03.\x06\x04\x02\x05\x14\x08\x06\x04\x04\x05\x02\x1e\x06\x04\x0e\x0b\x04\x02\x10\x02\x04\x08\x04\x18\x04\x08\x05\x14\x04,\x04\x02\x11*\x06.\x16\x0e\x04\x02\n\x04\x04\x10\x05\x04\x02\"\x04\xf4\x01\x04\"\x06\x04\x13\x06\x08\x02\x88\x01\x02\x06\x04$\x04(\n\x02\x13.$*\x10\x06\x02\x0e\x02\x18\x14\x04\x02\x15\xbe\x05\x82\t&\x02,\x1a&\x1a&\n\x06\x04\x04\x04\x10\x04\x0e\x01\x0c\x04\x04\x01\x02\x06\x14\x110\x02\x08\x04\x12\x0cV\x02\x04\x04\x0c\x04\x02\x05\n\x06\x16\x04\x02\x13\x04\x14\x02\n\x04\x1e\n\xbb;\x0c\n\x06\x02\x01\xb0\x07\n\x02\x01\n\x06\x06\x03\x02\x04\x04\x08\x04\x0e\x0b\x1e\x04\x10\n<\x02\x04\x0e\x04\x14\x04\n\x04\x0e\x03\x18\x08\x04\x0c\r\x04\x02\x0e\x02\x08\x04\x06\x04\x02\x08\x06\x05N \n\x04\x02\x07\x08\n\x08\xd8\x01\x04\x02\x05\x06\x04\xda\x01\n\x06\x05\x02\x10\x08\x06\x04\x1f\x06\x18\x10&8\x02\x0e&\x04\\\x04T\x06\x04\x06\x04\x04\x02\x07\x08\x18\x02N\x04\x04\x1b\x0c\x16\x18\x04\x02\x06\x02\x08\x02\xa0\x01\x02\x10\x02\xf4\x05\x04\x02\x13\x1e\x14\x02\x04\x12\x02\x0c\x02\x08\x04\x04\x02\'\n\x10\x14\x06\"\x02\x8e\x01\x02\xee\x01\xec\x01\x02\x14\x0c\x04\xb2\x01\x04<\x06\x1a\xcc\x14\x04\x06\x07\x16 \x02\x06\x08\x04\x13,\x02\x0e\xe6\x02\x0e*\xa2\x01\x1e\xa8\x10\x84\x15\x04\x06\x06\x04\x05@\x04\x18\x04\x10\x04\x02\x0f\n\x02@^\x04b\x1a\x02\x06\x1c\x13\x02p \n*\x84\x02\x02\x06\x1c\x1a\x04\x02#*F>\x08\x0e\n\x16<\x98\nb\xf4\x0f\xd4\x0c\x8a\x03\x02\x06\x02\x04\n\x04\x04\t\x10\x14\x1a\x16\x14\x04\x02\x048\x03\x14\x12\x04\x08\x04\x06\x06\n\x0b\x18\n@\x06\x04\n\n\x04\t\x0e\x0c8\x04\n\x04\x06\x04\x12\x03\x08\x1a\x06\n\t\x1e\x06\x0c\x04j\x04\x02\x0b6\n\x0c\x04\x02\x08\x04\x04\x17\x08\x10\x04\x08\x0c\nN\x02>\x14\x02\x04\x06\x02\xc5\x02\xfd\x17\x89\x8b\x01\x96\x15\xb0x\xa9x\xdax\xf7\x8d\x01\x86\x91\x01\xf1z\x12\x016GR\xb8|\xb3|\n:\xb4}\xb0(\xb9&\x14\xc4&\x10\x95&\xd2&\xfb%\xc6\xda\x01\xab\xda\x01\x14\xbc\xda\x01\xfd\xd9\x01\x8f\x99\x01\x04\xb4\x99\x01\xe3\x98\x01\x90\x99\x01\x99\x99\x01\xfc\xf1\x02\xa3\xd8\x01\xf0\xde\x01\xdf\xde\x01\xe7\x97\x01\x8c\x98\x01\xe5\x97\x01\xfa\x97\x01\xfb\x96\x010\x9e\x97\x01\xc3\x98\x01\xaa\x99\x01\xc0\x01\x89\x9d\x01\x86\x03\x81\x03\xda\x9e\x01\xe6\xd4\x01\xa9\xd4\x01\xb4\xd3\x01\xeb\xd2\x01\x8a\xd4\x01<\x15\xa9\xe5\x02\n\xcb\x0f\xcc\x01\x99\x01\x08\x9e\x05\x9a\x02\x8b\x02\xe4\x01s\xff\x04\xd4\tD\x8a\x01\'\xad\n\x98\x01\t\xcc\x04\xe0\x01\x95\x01\xf6\x06\xb5\x07\x90\x01\xd4\x01\x87\x01\xbd\t\xe4\t\xe7\x08\x9c\t(\xfb\t\xec\n\xe6\x9e\x01\x04\xbb\x9d\x01\x12\xce\x03\x0e\x9a\x9c\x01\xa7\xa5\x01\xbe\x19\x8d\x19\xe2\xa5\x01\xf3\x8c\x01\xfb\x15\x83\x06\x8c\x06\xf2\xa5\x01\xf5\x8f\x01\xc9\x12\xe3\x01\xb7\x06\xf8\x06lH7\xcb\x03\x84\x17\x90\x01\xb7\x1d\xe0\x1d\xc3\"\x04\xe0\"\xec\x01\x0c\xb9\x1f\xfa\x1f\x83%\x94&\xab\x12\xbe\x12\xaa\x01\x96\x01\xaa\x01\x89$\xfe$\xd9+\xe4\xba\x01\xb2\xb4\x01\x04\xd3\xb3\x01\xf4\xb3\x01X/<N=\xa7\xb4\x01\x89\xbc\x01\xae\x01\x87\x01p_l\xf0\xbb\x01\x85\xb0\x012\x04\x02\x172\x04\x14\x08\xd8\x02t\x06\x02\x86/\x04\x02\x06\x06\x04\x1b\n\x16\x08\x06\x0ep\"b\"\xba\x02\"*\"\xea\x01\x04\x025\xc8\x01\"\x06\".\".\"\xac\x01\x1af\x1a\xb4\x01\x1a\x06\x1a\x1c\x1a\x06\x1a.\x1a.\x1a\xc4\x03\x02\x8e\x01\x04\x02\x07\x1e\x0e\x02\xc2\x02\x06\x02\x07F\x04\x02>\x04\x02\x01\x0e\x04\x02\x03\x16\x08\n\x02\x1d\x04\xe2\x01\x0c.\x02\n>6\x04$\x12\x02\x062\xa0\x1e\x04\x06\x15\x1a\x02\x0e\x06\x04\xd4\x19\x04\x0c\x18\xcc\x04\xca\x1e\x06\x04\x07\x14\x02\n&\x08\x02\x05\x06\x02\x16\x04\x02\x06\x04\x03\x06\xa2\x02\x06\x02\x03\xa8\x02\xb3\xc1\x01\x04\x02\x01\x04\x04\x02\x04\x04\x05\x02f \x04\x04\x05Z .\x04\x04\x01\x80\x01\x04\x04\x07| * \x04\x04\x01H\x04\x04\x01\x92\x01\x06\x02=\x0c\x02,\x04f\x04\x02\x04\x18 \x06 \x04* \x04*\x0c\x14\x04\x02 (\x08j\x04\xd2\x01\x06\x80\x01\x04F\x04B\x01\x94\x01\x04\x02\x01p\x042\x01V\x04\x02\r\xc0\x02\x02\x06\x02\x10\x0c.\x04\x02\x03P\xe6\x17\x04\x02K\n\x06 \" \" \" \" \" \" \"\x06\x16\"\x14\x1a\x14\x1a\x14\x1a\x14\x1a\x14\x1a\x14\x1a\x14\x1a\x14\x1a\x04\xa8\x03\x08\x04\x02!\x08:\x02\x12\xb1%0\n\x02$\x02\x0e\x04Z\x04:\x02\xd1\x17\x1c\x04\x0b\x06\x0c\x04\x06\x8a\x14\xd2\x01\x04\xce\x01\r\xcb\x19$\xc6\x02\x02\x04\xc6\x02\xa6\x02\x04\x16!:\x04\xc5\x08\xc0\x02\x02\x06\x04a\x04\x02x\x164\x16\"\x1a\x14\x04\x02\x04\x08\x13\x8b\x02\x0e<*\x02.Z\x04\x02t\x04\x04\x0b\x8e\x01\x02<\x04\x12p\x04\x04\t\x02\x06\x90\x01\xd4\x01t\x04\x04\x03\x02\xce\x03\x04\x04\x0f\n\x04\xc3\x0f\x1a\x06\"\x04J\x04\x02\x07\x8e\x01\x06\x04\x10\x04\x1a\x05\xec\x15\xd2\x02\xce\x02\x04\x04\x13\x96\x01\x1c\x06\x04\x14B,*\x1a\x10\x04\n\x04\x08\x04\x0c\x13\x1c*\x16\x1c\n&\x14\x02T\xf4\x01\x04\x10\t,\x04<\x0e,\x04\x02\x1f\x0c\n$\x0e\x12\x08(\n\x0c\x16\x0c<\x02&(\x06\x04\x04\r\x81*\x08\n\x04,\x02\x12\x08\x04\r\x026\x10\n\x02\x14,\x08\x08\x04\x1c\x11\xad\x02\x08\x02\n`\x02\x08\x04\x06\x04\x0c\x01\x18\x04\x045\xc6\x01\n\x0c\x04\x06Z\x06\"\x0ez\x02\x0cTtDT\x96\x01\x10@8T\xd4\x03\x06\x04\n\x06\n\x04\x04\x13\x026\x06\n\x02(\x14(\n\x16\x06\x02\x13,.\x02\x0c\x02\x0c\x12\x02\xb4\x01\xa8\x04\x04\x02\x11<\x0c\x02b\x14\x042\x02\x1a\x04\x02\x08\x04\t\x02\n\x04\x16\x08\x04\x0c\x0b$\x06\x02\x046\x08\x04\x04\x04\x02\x08\x04\x01\x08\x04\x06\x05\x02\x04\x08\x04\x04\x07\"\x12\x04\x16\x04\x02\x03\x16\x04\x04\x16\x1b\x12b\x08J\x04\x14\x04\x14\x10\x020\x0e\x02\x04\x040\x012\n\x02\x11\x12\x020\x1a\x0c\x06\x120\x12\x04\"\x17\x04\x02\x18\x020\x02\x14\x080\x02\x14\x0e\x04\x02\x0b0 \x1a\x0e<\x0e\x04\x02\x1d6\x02\x04\x02$\x06\x02\x16\x02\x04\x02\x08\x02\x04\x02\x04\x06\r\x02\x04\x02\x08\n\x10\x04\x04\x02\r\x180\x10\x82\x02\x0c\xc8\x01\xac\n\x06\x02\x1c\x04\x07\x12\n8\n\x04\x02\x06\x04\x050\x0c\x02\x04\x04\x05\"\x122\x04\x04\x17\"\\d\x1a\x02\x14\"\x14\x04\x14\"\x18\x04\x02\x01\x12\x04\x0c\x05<\x12\x14\x06\x04C\x18\x02<\x04\x14\x04\x14\x0c\x0eL\x14\x04\x02\x14\x0e\x02\x1c$\x04\x18\x10\x96\x01\x04\xbc\x01\x04|\x04\x0e\x02\x18\x10\x02$\x1a\x04\x02\x01\x12\x04\x02\x0f\x14\x1a\x04\x0e(\x14\x0eH\x04\x02\x13\xb0\x018\x82\x01\x02(\x02\xd8\x01\x02\xd2\x01\x82\r\x040\x0b@\n\x04\x14\x0e\x04\x04\x02\t\x12\x0e\x1a>\x02\x04\x04\x01\x02\x06\x04\x04\x02\x01\x80\x01\x06\x04\x0f\"\x14\x062:\x0e\x0c\x06\x06\x04\x04\x0c\x03\x04&\x04\x04\x01\xbe\x0cx\x04\x01\xcc\x01\x06\x04\x010\x06\x04\t\x120\x16\x0e\x04\x04\x16\t \x16 \xe6\x01\x0e\x04\x047\":\x14 \x14 \x14 \x14 \x16\n \x04 \x04 \x04 \x120\x04 \x04 \x120\x12\x040\x07\x120\x12\x04\x040\x04\x04\x0b \x04 \x12\xb2\x01\x04\x04 \x1d\x16 \x16 \x16\x12\xc9}\x02J\x04\x02\x08B\x1a\x14\x04\x04\rB\"\xfc\x02\"\x89\x08\x08\xe8\x02\x04\x08\x11\x06\x04\x06f\x08\x1a\x04\x02\x98\x01\x04\x08\t\x06\x08\x06\x08\x04\x04\x02\x13\x1a v\x1a \x18\x14\x04\x10\x12\x04\x06\x17\x04X\n \x02\x04\x06\x1a\x06 \x122\x04\x04\x01\x0c\x04\x041\x06L\x08\xb7\x0b6\n\x02\n\x02\n\x02\n\x02\n\x02\n\x02\n\x02\xce\x01\x10\x04\x18\x0c,\x04\x02\x05\x12\x08\x02\x06\x04\x074\x08$\xf2\x01\x10\x04\x018\x14\x04\x05\n\x04\x14\x06\x04\x0f\n\x04J>\nD\x04\x88\x01\x06\x04\x03\x9a\x01\xae\x02\x04\x04\r\x026\xa0\x01\n>\x9e\x02\x80\x01\x04\x04\x19\x02\x0c\x04\x02\x0c\x90\xda\x02\x1404\x1a\x0c\x12$\x14\x12\x04$\x07,\x06\x0e\x12\x08\x02\x19\x12\x0c\x04\n\x02\n\x02\n\x04\x12&\x16.\x04\x02\x1d\x14\x10\x18\x04\x06\x04\x08\x06\x0e\x12\x02\x12\x0c\x02\x06\x04\x02\x07\x04\x0c\x14\x0c\x04\x12\x03\x0c\x12\x12\x0c\x07\x0e \x02\x04\x0c\x02%\x1e\x0c\x04\n\xeb\xf7\x02\x12\x02\x04\x02\x06&\xb2\x01\xda\xa8\x01\x04\xbc\x03H\x04\n\x04\x06\x02\x07\x08\x04\x02D\x04\x02\x17V\x02\x80\x02\x04B\x04\x02\x04r\x10:\x04\x04\x02\x05\x12,\x08\x04\x02?\x0c\x12\x02@\x0e<\x02\x12\"\x02\x1a0\x12<\x04\x02\x0e\x04\x02\x04\xfc%\x04\x10\x0e>\x10@\x14\x02\x97\xdf\x01\xed\x01\x04\x04D).\x020\"ZR\"^\"\x1a\x06@\x10\x04\x18\n\x12\x0c\x02\xaa\x01\xce\x02\x04\x02\x01\x06\x04\x02\x03\x16\x12\x04\x02\t6\x02\x08\x12\n\x04\x02\t\x0e\x028B$\x04\x02\x03\x12\x16\x04\x06\x07\x04P\x02\n\x04\x02\x03\x0c,\x04\x04\x11P\x02&\x0c\x04\xa4\x01\x04\n\xe4\x01\x04\x04\x1b\xdc\x01\x08\x10\x95\x14<\x086$\x18\xce\x02\x8a\x01\x04\x06v\x04\x04\x0f\x90\x01\x024\x9c\x06\x02\x9e\x01\x04\x02\x04\xaa\x01\x04\x06\x13 \" \" ,\x06\x85\x14\x16\xe4\xa8\x05\x06\x02\x15\x14\x04\x1c\x02\n\x12*$\xba\x03\x04\x02\x04\x08\tD\x04>\x06\x10\x04\x02\x01\x04\x04\x02\x05:2\x04\x04\x02\x052\"\x02\x04\x04%2\xf6\x01.H\x8e\x01\x02\xc3\xb4\x05\x0c\x0e\x08\x02\x04\"\x9d\x01\x90\x02\x04\x02\x08\xbe\x01\x04\x08\t,\n\xd7\x03\x04\x12\x0e\x02\x11\x8a=\x02X\xec\x01*\"Lf:`\x04\x0b\x02\x06P\x04\x02PX\x04\x04\x02\x05P\x82\x01\x06\x04\x04\x07\x02\x12\x04\x02\x04\x04I\x1c\x08&\x08\"F\x06@0\x10,*\x12\x02\xd6\x01X\x02\x0eD\x18\x02\x08\x12\x16\xce\x01\x08\x04\x02\x04\x02\x10\x040\x1e\x0e\x1a\x04\x04\x06\x0b\x02\xf0\x01$\x14\x02J\x04\x08\x05\x02\x12\x1e\x04\x04\x04\x02\x0b$\x08\x04\x08\x04\x08\x04\x12\t\xc2\x01\x12\x0e\x02\x06\x04\x0c\t\x12\x04\x02,F\x04\x02\x11\x12\x0c<\x02\x06\"\x1e\x14\x86\x01\x04\x04\x01\xaa\x01\x04\x04\x01\x8a\x01\x04\x04\x01\xaa\x01\x04\x04\x01\x80\x01\x04\x04\x01\xe4\x01\x04\x04\x01\xe8\x01\x04\x04\x01@\x04\x04\x01H\x06\x04s\xce\x01\x1c\x04f\x04\x02\x04b\x04L\x04>\x04\"\x04$\x04\xb2\x01\x04v\x04\xd6\x01\x04\x0c\x04t\x04\xd8\x01\x04\x8e\x01\x04\x0e\x04\x02\x04\x92\x01\x04R\x04D\x046\x04\x1cj\x06&\x02l\x04.\x04.\x04\x02\x04\x02N\x04\x04\x04\x02\t\x08\x04\x020\x1a\x04\x04\x04\x02\x11\x10\"\x06\x04\x02\x068\x02\x04\x04\x02\t$\x02\x04\x02\x08\x04\x023\x1c\x12@\x06\x0c\x02\xae\x01\x04\x02\x04\x1e\xcc\x01\x02\x06D\x04\x16@\x12\x10\x02\xc0\x01\x0c\x1a\x02\n\x04\x02?\x08\x16\xbe\x03\x02\xf4\x01\x80\x03\n\xa0\x03\xe4\x05\n80@\x1a8Bh\x10*.d\xe2\x01\x12\x88\x02HV\xac\t\xca\x02p\x8a\x03\xfa\n\x9c\x01\x04\x06\x04\n\t\x0e\x1a\x04\x08\xe9\xbd\x01\x08\x04\x05\x10\x1cX\x04\x04\x01\x9e\x01\x04\x04\x03\x02\x88\x01\x04\x04\x01\x9e\x01\x04\x04\x03\x02\x0e\x08>\x04\x04\x01\x02\x04\x04#\x02\x95\x07\x06\x02\xf6\n\n>\x8e\x01\x04&|\x100\x08\x18\n\x02\xb0\x02\x04\x04\x0b \x1c\xe8\t\x02\x06\x84\x01\x06\x04\x01\x9a\x01\x04\x04\x07\x02$\x0c\xb4\x01\x04\x02\x03\x0c(\x04\x04\t\x02J\x04\x06\x04\x04\x08\x08\x04\x19rX<\x08\xf0\x01(\xa6\x01\x10\xaa\x01\x96\x01\xaa\x01`\xc1+\x04\x02\t\"\x0e\x84\xcf\x01^\x04\x04\x02\x05\xe9\xb3\x01\x04\x02\x04\x0e\t\x02\x0e\x0c\x02\xa1\x08\x1c\x04\x05\x06\x02,\"\x04\x04\x02\x10\x04\x01\x12\x04\xb0\x01\x04\x12\x05\x08\x12\x04\x04\x02\x0c\x04\x04\x10\"\x04\x03\xcd\x15\x0e\x04\x08#\x95\x05\x04\x02\x12\x04\xa0\x02*ZPR$\x14\x1a\x06\x10\xfa\x01\x0cP\x04\n\t\x02(\x02\x14D\x04\x04\x07&\x14\x02\x04\x04\x14\x17\x04 \x06\x86\x0f\x14\xc8\x0b\x14\x9a\x03\x1a\x06\x14\n\x04\x02\x17\x08\x02\x0c\n\x0c\x080\x08\x18.BT\x04\x025\x06\x02 $\x1c(\n2\x0c\x14\x04(\x14\x06\x02dP\x1e\x02\x0c\x0e\x02\x98\x02\xb4\x05\x02F\xd4-\x04\x06\x01\x0e\x04\x02\x19\n\x08N6\n> \x16\x0e,\x02\x0c\x06\x06\x02\x03\x10\x12\x06\x04\r\x12\x04\x1c\x04\x0e\x04\"\x04\x02\t\x04\x16\x14\x10\x0c\x06 \x04,\x05\x04\x02\x90\x1e\x04\x02\r\"\x02\x0c\x08\x04\x10\n\x04\x02\x0b,\x0c\x02 \x168\x04\x04\x06\x02\x1d,\x0e\x12\x02\x18,\x0e\x04\x02\x12\x02,\x0c\x02\x8a\x03\x06\x02\x05\x0c\xb6\x0c\xec1\x06\x02\x0f\x08\xbd\xc5\x0124\x04\x02\xc8\x01\x0e\x04\x08+\x1c\x0e2\xa8\x02\x0c\xe6\x01 \x1c\x08\x06\xc4\x02 \x8a\x02\x08\x04\x06\x04\x06\x92\x01\x0c\x02\x04\x04\x02#n\x06\n\x10\x1c\x94\x02\xce\x03\x04\x06\x96\x01\x1c$\n\xf0\x01\x02\x04B\xec\x05\x04\x02\x150\n \x04\x1a\x12 \x06\x02\x1e\x14\x04 \x0b\x06` \x1a\x042\x04\x02\t\x06\x10\x02\xe4\x03\x0c\x04\x06\x15r$\xd2\x04\x06\x02\x06\x1e\x02\n\x02T\x06\x02\x03@\xce\x01\x08\x02\'\x0e\x06\x0e2\x04\x02\x04 \x02\x1c$\x02\x08\x16\xd2\x01\x04V|\x02\xf2\x01\x04\x02\x03D\x90)\x04\x08\x07\xc9l\x04\x02\x04\x04\x02\x01\x08\x06\x04\x05\x02R \x08\x04\x01*\x08\x04\x01\x02\x06\x04\tL \x0c \x08\n\x04\x03\xb2\x01\x16\x08\x04\x01h\x08\x04\x01\x02\x06\x04\x13\x10\x04\x1a\x02\x04\x02P \x06 \x08\x04\x01\x98\x01\x08\x04\x01\x02\x06\x04\x0b$0\x12 \x1e \x08\x04\x01l\x08\x04\x01\x02\x06\x04\x07^\x16\x06\x16\x08\x04\x0f.\xb2\x01\x040\x12 \x06\x16\x08\x04\x01\x80\x01\x08\x04\x04\x02\x19\x16 \x06 \x046 \x046 \x04\x0e\x1c\n\x04\t\x02\"\x04\x08\x04\x04\x02\x13R\x14\x1a\xbc\x01\x04\x0c\x02\x140\xb0\x02\x06\x02\x05\x0c\x02n\x04:\t\xe6\x03\x04J\xfe\x1f\xc0\x01\x04\x02\x11\xd2\x02\x84\x13\x02\xa2\x0c\x04 \x02 R\x04\x02\x07N\x06\x02\x12\x04\x02f\x04\x05\x06\x02\x80\x02\x80\x01\x04\x01\x02\x04\x04\x1d\x0c\x14 \x14 \x14 \x14 \x14 \x14 \x14 \x0e\x04\x01\xebm\x04\x04Y\x1a\x04\xb6\x0c$\x1c\x0e\n\x01 \x1cS^\xc0\x16\x89\x15\xf0\x15\x97\x11\xa6\x08\x8f\x08\xf6\x08\xe8\x05\xa3\x05\xca\x02\xa2\x03\xaf\x02\xf8\x02\xf5\x01\xd7\x1a\xd2\x02\xee\x02\x02(\x02\x06\x02:\x02\xb0\x01\xda\x0c\x9a\x01\x1a\xe6\x02V\x82\x01V\x10\x06Hw\x1468\x08\xdd\x11.\x1a\xf64\xfc\x03&\xea\x03\xc9\x04\xd9G\xac\n\xc7\x0b\x0e\x01\xc6\x011\xaf\x02\xc0F\xf4\x0c*+\xe3=\x06.\x1a<P\xd5\x01\xf00\x97\x1b\x12\x1a\xe3+\xb4+\xf4!\xd4\x02\xb5\x02\x9dL\xe4\x0b\xf0A\xf6\x07\xafI\xaaB\x18\x894\xe8\x0c\x96+\xfd0\xd2\x02\xce\x02J\xd2\x02\x08\x06\x1c\x02\x14\x04\x04\x13\"\x8c\x16*\x0c\x1e\x02 \x08\x02\x14\x04\x02\x01 \x06\x04\x06\x02\x03\x04\x1a\x06\x04\x01*\x06\x04\x05\x10\n\x1a\x06\x04\x01\x0e\x06\x04\x012\x06\x04\x03\x02\x06\x08\x02\t\x06\x02\x04\x0c\x08\x04\x04\x19\x02\x04\x02\x04t\xf8\x02R\x02\x08\xba\x02\x04\xa2\x01x\x06\x02\x0b\x08\x02\xfa\x03\x08\x12\x89W\x04\x02\x11\x0c\x1e\x14\x0c\x1e\x18\x0c\x1e\x18\x10\x04\x13 \x14\x18*\x04\x06\x02\n\x10\x06\x04\x04\x0b\x90\x16\x16@L\xc4\x01\xb6\x01\x0c\x04!\x02\xb4\x01\x02\xc2\x01\x02\x04*\x02\"\x02\x04\x14\x18\"\x04\xf1\x1d\x0e\x04\x12\x05\x04\xc3\x02\x90\x01\x04\x06\x04\x04\x05\x02\x90\x01:\x04\x02\x11\x16\xd0A\x06\x04\x06\x8a\x06\x06\nj\n\x04\x0b\x02\x14&\x04\x02\x0e\x04\x04\r:\x04 \x0c\x04 \x0c\x08\x04\x04\x02\x07\x06\xf8\x01\"4\x14\x04\x05\x0e\x08H4\x04\x03\x02Z\x06\x04\x01\x96\x01\x06\x04\x01l\x04\x04\x01\x02\x04\x04\x04\x02\x07\x1a\x1e\x1a\x1e\x04\x02\x07\x1a\x1e\x1a\x1e\x06\x02\x01\x06\x04\x02\r:\x040\xe3Y\x06\x04\x06\x04\x04\t\x06\x0c\n\x02\x14\x04\x02\x11\x04\xb4\x042\xa6\x05.\xc2\x02\x02\xa2\x01\x02\x04\x16\x91\x01\n\x04\x02D6\x14\x83\x11\xfe\x02\x9a\r\x9f\x10X\xd8\x01\xe4\r\xc5\r\xe6\x04\xb3\x07\x98:\xce5\x04\x1c\r\"8\x1e<(\x1c\x04\x8b\x02\xf11\x9e1\x120\x04\xff0\xc0\x08\x8e\x14\"V\x1f\xb8\x04\n\xec\x03\xd8\x03\x9f\x03\xaa\x03\xd3\x02\xa0\x03\xa3\x02\x82\x03\xaf\x02\xfc\x02\x85\x02\x0e\xf7\x07\xdf\x0c\xd6\x17\xf9\x15\xfa\x03\x98\x15(\x8b\x15\xca\x13\xd0\x01\xcb\x01\x1e\x0e\xac\x01u\xd7\x12\x8f[\xd2\x02\xce\x02\x04\x02\x07\n\x06\xb2\x03\x06\x04\x02\x04\x08\x07\x14$\x14\x06\x04\x08\x04\x02\x05^\x06\x02\x08\x04\x05\x0e\n\x0e\x04\x04\x04\x10\x04\x16\x06\x04\x07\x02\x16\x02\n\x04\x04\x07\x0e\x04\n\x04\x04\x06\x11\x02\x14\x08,\x04\x02\x0e\x06\x08\x04\x04\x06\x02\x04\x06\x07\x08\x14\x06\x10\x04\x023&\x06\x02\x10\x0e\x06\x02\x04\x08\x12\x04\x02\x04\x0c\x04\\\x04\x06X\x02\x0e\x12\x14\xfe\x01\x04\x84\x05\x04\x06\x05\x0e\x06.\x04\x02\x08\x04\x04\x06\x04\x0c\x04\x06\r\x0e\x06\x12\x02\x04\x06\x02\x04\x06\x04\x08\x04\x02\x04\x16\x04\x1c\x04\x04\r\n\x04*\x08\x0e\x02\x04\x04\n\x03&\x18\x04\x06\x05,\x02\x1c\x04\x08\x03\x16\x10\x04\x02\x0f\x06\x10\x0e\x02\x0c\x06(\x06\x04\x04\x01*\x04\x02\x0f.\x08B\x04\x10\x08\x90\x04\xc6\x06\x04\x06\x05\x16\x06T\x04\x04\x07\x06\x02\x18\x06\x04\n\t\x0c\x08\x14\x08\x10\x04\x02\x04\x04\x04\x02\x0b\n\x04\x02\x042\x0e\x04\x06\x01\x04\x08\x02\x04\x06\x07\x14\x02\n\x02\x04\n\x04\x02\x0b\x04\x02\x06,\n\x06\x04\x04\x01\x12\x06\n\x03\x08,\n\x06\x05\x14\x08\x04\x04\x02\x08\x04\x0b8\x02\x04\x08\x04\x06\x06\x043\x02F\x08\x02>\x02\x04\x02\n\x10\nF\x0c&\nT\x0cF\x0cP\x08\n\x02\x08\x12&\n\x02\x1f\nH\n\x02F\n\x02T\x1c\n\x02F\x06\x08\x026\x08\x02\x1b,\x02\x06\x04\x02\x12$\x02\x04\x08\x06\x12\x04\x12\x04\x04\x07T\x10\xc2\x06\xe4\x0c\x04\x0c\x0f\x04\x1e\x04\x02\x16\x14\x02\x08\x04\x18\x0f\x0e\x0c\x02T\x02R\x06\x04\x04\x06\x03\x14\x06\x04\x04\x04\x14\x076\"\n0\x04\x02\x03\n\x06\x0c\x04\x06\x06\x01\x04\x04\x08\x06\x02\x08\x04\x04\x02\x04\x04\r\"\x04\x1c \x04\x06\x04\x04\x0c\x01\x16\x04\x02\x04P\x04\x02\x13X\n\x06>\x06,R\x12\x02 \x06\x06\x04\x04#\x16\n:\x04\x02\x08\x06\x0c\x08\x04\x02l\x04\xd3[\x04H\x02\n\x06\x06\x04\x04\x04\x06\x03\n\x02\x04\x06\x05\x08\x04\n\x08\x06\x01\x02\x04\x04\x0b\x1e\x06\x18\x08T\x04\x04\x02\tP\x06\x16\x18\x04\x08\x06\x04\x04\x08\x06\x07V\x04\x02\x04\x040\x07\x02\xc2\x01\x060\x04\x02\t\x0c\x06\n\x04\x16\n\x04\x07\x0e\x02\x04\x0c\x04\x04\x11\x02\x1e\n\x02\x04\x02\x04\x08\x18\x04\x04\x03\x02N\x04\x02\t\x08\x0e\x06\x04\x08\x04\x06\x06\x04\x01\x02\x08\x04\x08\x02\x05\x06\x04\x08\x06\x06\x07j\x12\n\x02\x04\x04\x01\x02\x04\x04\x04\x0e\x1d\x04\x02j\x06\x02\x12\xc4\x01\xc2\x01\x04\x02\xc4\x01\x06\x04\x08\x06\x04\x08\x08\x06\x1b6.H\x06\x02\x04\x0e0\x0e\x06\x04\x02\xb6\x01\x04\x04\x02\x13\xaa\x02$\x08\x06l4\x0c\x04,8\x04\x02\x01\xf0\x03\x04\x02\x05\x040\x18\x04\x02\x0f4\x0e\x14<\x08\x02$\xa8\x02\x04\x02\x15(\x0e\x08\x02\x0e\x02@\x08\x02\xb4\x01\x04\x04\x02\x11j\x04\x12\x04\x16\x12P\x02\xc4\x01\x06\x02\x0b\x18\x024\x04\x0e\x04\x04\x02!P\x020\xbc\x01\x02\x06\x1e\xea\x0b(\x04\xf0\t\xf4\x0f\xae\x016\xf6\x03h\xb8\x01\x04\x04\r\n> \x04\xf0\x03\x02\x04\x04\x08\x04\x06\x01\x02\x04\x04\x01\x06\x04\x02\x04\x06\t\xd6\x03:\x9e\x03\x02\x04\x04\x02\x0f\xf2\x01\x04Zz\x02\xa2\x01\x06\x04\x04\x02\x01\x0c\x06\x06\x0f\x08\x068\x02\x04F\nT\x06\x04\r2\x04\x06\x04\x18\x06\x1e\x04\x06\x12\x04\x05\n\x0c,\x04\x02\x11\x0c\x14\x10*\x04\xcbV\xfa\x01\x82\x01\xf3\x08\x04\xf0\x01\xa5\x01\x8c\x01\x02\xfc\x02\x04\x18vf)\x82\x05\xcc\x01$9\x91\x05\xc6\x13\xc9\"\xff\x0e\xc64\x8e\x03\x8b\x03\xcf6\xc4=\x9b\x01\xfe\x01\xd3\x01\x98\x01}\xf4\x01\xc9\x01\x81\x02Y\xad7\xb0H\xd8\x01\xdf8\x18\xcc\x01\x81\x01\x86\x01GL\x0e\xad\x16\xb6\x16\x06\x03\x08(\xd9\x13\xa8\x03\xdc\x19\xb9\x19\xc0F\xa0\x05\x952\xd8\x02\xc5\x1d\xc8\x1d\xb1\x1e\xb0\x02\x80\x03\x8b\x05\xd0\x1e\xe0,\xc6\x01\x85\x01\'V\x13\x16\x9a\x01\xa7R\x04\xe4\x01\x1c\xd21\xbc\x01\xc0\x01\xbe\x01\x04\x14\x04\x14\x04\x04\x14\t\x08F\x14&\x08\x04\x0e\x01\x08\x04\x02\x17\x08\x10Z\x04\x14J\x14\n\x140\x14D\x06&\t\x14:B\x02\x0e\x04\x02\x05\x14\x12\xeb?\x04\x04\'\x02\n\x04.\x06\x02.\x02\x04\x02\x8a\x02\x9eH\n\xbc\x01\xac\x03(H\x0e&\n\x06\x02\x01\x08\x04\x06\x03\x0c\n\x04\x02+\x1a\x0e\x91O\xd2\x02\xce\x02\x90\x02\x16\xf4\x01\x10\x1c\x92\x01\x04\x0e\x04\x0e\x14\x16\x02\x0e\x10\x08\x10\x04\x02\x07\x0c\x12\x02\x04\n\x02\x07(\x08\x04,\x04\x06\x03\x02\x04\x04\x02C\x12,\x044\x0c\n\x06\n\x02\x0c2\x02\x04*\x02\x12\x02\x04&\x04\x02\x0c\x06(\x04\x08\x06\x0e\x14\"\x0e\x06\x0e\xf6\x02\x04\x04\x04\x16\x13\x04$\x1a\x04\x02\x04\x02\x04\x1e\x14\x04\x0e\x19\x1c\x02`\x06\x02\x1a\"\x16\x024\x02\x9a\x02\x04\x04\x02#`\x1a\x12\xca\x01\xa8\x02\x84\x01\x14\x8a\x01\"\x08\x18,\x06<\x0e\x08\x06\x0e\x04\x14\x1f\xd3\"<\x08 \x82\x01j\xe0\x02\x82\x01<\x8c\x06\x04:\x06\x08\n\x12\x04~\t\x06\x02\n0\x06\x06\x04\xad\x01\x06\x04\xde\x01\x048\xfc\x05\x04\xdc\x10\"\xa6\x01\x89\x01\n>?\x15\xcf\x05\xd2\x02\xdc\x02\n\x1a\x10\x02>\x028\xf7.\xd0!\xfe\x1a\xe3\x19\xc4\x12\xbc\x01\n\x08\xfc\x02Z\x0f\xb0\x01\xa1\x03\x81\x15\x945\x04\x01\xa33\xae3*\'\xbb2\x99&\x14\x90(\x8c1\x04\x01\x9b0\xaa0,)6\x810\xe7\x19\x96\x1a\xa20\x04\x01\xc9.\x9a.\x04\x01\xf9-\xdc.\x04\x01\x91.\xbe.\x04\x01\x83.\xa8.\x04\x01\x97+\xc4+\x04\x01\xe3*\x9d1\x0e\x06\x02\x07-\x04\x1a\x1c\x04\x02K\x04\x16\x14\x02\x14\x04\x02\x83\x01\x04\xea\x08\x02\x04\x02\x06\x04\x06\xce\x02\x96\x020\x02\x90\x07\xb6\x05\x02\xe8\x04\x06\x04.4\x02\xaa\x02>\xfa\x01p\xae\x02N^\x8a\x02*\x04D\x07\x92\x03Z\xf4\x03\xd6\x01\x06\x04\x0b\x06\x04\n2\xa8\x01\xaa\x02\x04\x12\x04\x1a\x13\x0ef\x08\xee\x1b \x122:6&\x046\x04&\x17\xa9,\xd6\x02\xce\x02\xe8=\xea\xaf\x01\xd2\xa8\x02\xc1\x13\xd8\x04\xa7\xbc\x04tr\n\x0c\x04\x01\x1e\x10\x02\x05B\x08p\x06\x08\x01\x87\x04\x08\x04\t\r\x06\x0c\x04\x02\x04\x06\x07\x08\x02\x08$\x04\x14\x03.\x06\x08\x027\x0c&\x02\xa8\x01\x06\x04\x12\x14\x1c&.@N\x02\x18\x06\x04\x06\x14.\xb5\x06\x02 \x06\x0c\x8e\x02\x04\x02\x04\n\x04\x04\x0f\x08\x02\x08\x1c\x0c\"\x02\x16\x04\x04\x03\x1a\x12\x04\x04\x03t\"\x04\x0e\t\x16\x04\xbc\x01\x04\x08\x04\x10\t\x1a\n\x1c\x04\x14\x04\x02\x1b v\x10\x02\x08\x02\x12*\x06&2\x04\x10\x02\x04\x10\x03:.\x04\"\x01\n\x10\x02[\x12\x18\x16\x06b\x04\x0c\x04\x02\x1a\x1c\x02\xba\x01t\x04\x9a\x01\x0e\x02\x08\x02\x1c\x08\x06\x04\x02\x04H\x04P\x04\x06\x14\x02,\x02\x14\x04N\x04\x02(\x02\x06\x02\x0e\x1e\x04\x02\x0f\x08\x02\x0e\x02\x16 \x08\xa0\t\x04\x08\x04\x10\t8\x14\x02\x04\xb8\x01\x08\x04!\x02\xe9\"\xd6\x02\x04\x06\x04\x0c\x02:\x04\x0c\n\x1a\x06\x04\x06\x04\x04\x02\x07\x06\x04\x06\x04\x04\x02\x05\x08\x06Z\x04\x04\x01\x16\x08\x02\x07\x14\x0c\x08\x02\x04\x10\x05T\x02\x04\x04\x0c\x01(\x04\x02\x01\x04\x08\x02\x04\x08\x07 \x04\xd1\x07\x0c\x04\x04\r\xa4\x02\"\x1e\"\x1e8\x02\x04\x047\x02 \x1e\n\x96\x02\"\x1a\"\x1a8\x02\xe8\x02\x04\x026\xb1\x0b\x94\x08\x93\x08\xce\xb2\x01\x04\x06V\xea\x01\x02\xec\x01\xfd\xb6\x01\x0c\x12\x04\x04\x07\x02\x08\x06\n\x0c\x04\x01\n\x04\x02\x15\x0e\n&\x02\x16\x06\x08\x04\x0c\x02\n\x04\x02\x0f\x04\x12\x02\x0c\x06\xea\xbb\x08\x0e\x04\x04\x10\x01\x1c\x06\x04\x1d\"\x02\x04\x14\x1eT2\x12$\x12\x06\x02\x1e\x08\x0c\x04\x08+\x026T2\x1a$\x1a\x06\x02\"\x02\x1a\x02\x1cR2\"\x18\x0c\"\x08R\x04\x10\x04\x04\x04\x0c\x04\x14\x1f>\x90!\x06\x14\x02N\x1e\x04\x0c\x02\xfc\x02\x08\x1a,&\x06\x04\x12\x0f\x16\x14&\xc8\x04\x8e\x03\x02\x0c@\x04\x04\x87\x01\xd2\x02D2P\x1c\x06D\x10V>\n\x02\x0c\x8e\x012\xbe\x02\xaa\x01\xb2\x01\x02\xa8\x01\x046\\2\x1a$\x1a\x08`\n\x02\x9e\x03>h4&\x02\x86\x01\"\x98\x06\x02\xb8\x02\x08\x04\x16\x92\x03\x02\x86\x01\"\xb8\x054\xd6)^\n\x06h2(2\x0c\x02\x84\x0f\x02N\x044\x02\x10\x04\x02\x03P\x16\x04\x04\x0f$\x16\x06\x04\xc8\x02\x1c\n\xf2\x12\x04\x02\x03\x08\x06\x04\x02\x19 \x06\x02\x16\x06\x02\x14\x1e62\"\x02\n\x04\x02\x1f\x1c\x06\x10\x02\x06\x10@\x0c&8\x0c.&\xda\x1a\xca\x06\x8e\xd5\x01\x04\x08\x01\n\x06\x02!\x18\x02\x0c\xa8\x02\x12\x16\x12\x16\x18\x02\x0c\"\x84\x01\x02\x0e\x04\n\x04\x02\x13\n\x02\x0c\x86\x01 \x02\xe6\x01\x02>\x14\x06\x06\x03,\x02\x04(\x03*\n\x08\x02\x03R\x0e\x04\x04\x07\x02\x10\x02\x0c\x04\x08\x11\x04\x08\x04\x0e\x02\x08\x040\x04\x04`\x17\x022\x04\x0c\x02\x12\x02\x18\x92!\x86\x01\xf2\x0c\x84\x02\x04\x02-\x18\x02\x12\n.L\xee\x02\x16\x86\x01\x0c\x16pR\xce\x04\x82\x02\x16\xc4\x01\x0c\x164\x02\xd0\x90\x01\x82\xd2\x01\x04\x02#\x08\x0c\x1c\x04\x18\x04@\x9a\x01\x04\x08P\xec\x01\x16\x14\x08\x04>\x06\x04\x0e\x0b8\x04\xd4\x01\x04J\x06\x04\x02\x19\x04\x0c\x02\x0c\n\x84\x01\x02\x12\x16\x1c\x0e\x16\x06\x06\x04\t\x02\xda\x01\x02\x16\x0c\x04\x04\x0f\x02\x16\x0c\x1a\x18\x04\x16\x08\x04\x02\x08\x04\x01\x16\x04\x06/\x16*(\x02\x08\xea.\x02\n\x02\x08\x06\x02\x16\x02\x0e\x18\nL\x02\x18\x02\xe2\x0b\x02\x82\x01\x04\x02\x1b\x0c\x02B\xd0\x01\x02\xda\x0c\x04\"\x16\x1c\x0e\x12\x16\xf65\x04\x02\x0f@\x02\x16\xc8\x01\x1c\n\xeaL\xd4\xd2\x01\x04\x08\x01\x06\x04\x14\x04\x0e\x04|\x1d\x1c\x0e\x1cN\x02\x04\x0e\x068\x06\x0e\x0c\x1e\x08\x14\x04\x02\x04\xec\x01\x04\x02\x0f\x04\x02\n\x0c\xf2\x01\x04\xa6\x06\x04\x06\x02\x04\x06\x1f\x9e\x03\x04\x88\x03\xee\x01\x06\x04\x02\x10\x06\x1c\x022\x08\x02\xaa\x03\x04\x04\x02\x04\n\x04\x02\x07\x04\x02\n\x14\x04\n\r\xb8\t\x02\xb6\t\x9a\x06\x02\x04\x02\x06\x04\x04\x02\x01\x92\x02\x04\x08\x04*\x04\x14\x05^\x08\x84\x01\x04\x02\x04\x06\x1d\x02\x80\x01V\x02\x04\x02\n\x14\xd6\x01\x02\x18\x02\x1c\x02\n\x06\x06\x04\x02\x05\x06\x04\x10\x06\x02\t\x0e\xea.\xd0\x02\x06\n\x04\x0e;\x02\x04\x1a\x16\x04\xd4\x01\n\x04\x02\xe4\x07\x06\n\xf6\x05\x1c\x04\n\x04\x02\xce\x03\xc4\x8f\x01\xf5\xf1\x14\x0c\xaa\x02\x14\x06\x04\x1c$\x9d\x03\x02\x04\x06\x05\x1e\x10\x04\x04\x02\x03\n\x0e\x04\x02%4\x04&\x0e\x02\x06\x02\x1c\x024\x02F\x16\x0e\x0c\x08\x06\x04\xb1\x03\x04\x04\x04\x02\x08\x04\x01\xcc\x04\x06\x04\x19\xa2\x01\xb4\x01\xa2\x01\x02\xc8\x04\xcc\x01\xca\x01D\x04@\x04\xd7\x11\x08\x04\x04\x04\x06\x06\x08\t\x0e\x0c\x02\x0c\x04\x04\x02\x03\x04\x02\x04\x04\x04\x02\x01\x04\x04\x06\x03\x02\x0e\x06\x02\x03\x0c\x06\x04\x14\x04\x04\x03\x18\x08\x04\x06\x04\x08\x05\n\x02(\x06\x06\x04\x04\x03.\x04\x04\x0c\x03*.\x04\x02\x04\x08\r \x08\x02\x0e\x06\x02\x04\n\x06\x01:\x04\x0c\x04\x04\x05\x10\x06\x1e\x04\x02\x07\x10\x06\x1e\x04\x04\x02\x07\x1a\n\x04\x02\x04\x04\x13\x16\x04\x08,\x02$\x0c.\x04\x06\x04\x02\x01\x04\x06\x02\x04\x04\x0f\x02\x08\x06\xce@\x02\x16\x0ej\x04\x02\x19\x04\n\x0e\x08\x02\x0c\"\x0en\x06\x02\x08\x04\x04\x02\x11\x04\x02\x04*\x18\x06\x16\x18\n\x04\x02\x15\x16,\"\x08\x10\x06\x0c\xc2\x0b\x12(\xe0Q\x04\x06\x01\x02\x04\x08\x07\xb9\xac\x01\x04&\x06\x04\x04\x01\x08\x06\x02\x03\x06 \x04\x02\x13*$\x02$\x02\x8a\x01$\x0c\x04\x0c\x08\x06\x11l\x02l\x08\x04|0.\x02\n\x04\x04\x0c\x05\x02\x1en\x04\x02\x03\x04B\x04\x06\x01\x08\n\x04\x01\x02\x14\x04\x0f\x06\x04\xed\t\x02\xa8\x01\xb8\x01\n\xa0\x01\x08$\x0b\x0c\x1e\x08\n\x04,\x18\x04\x04\x02\x05\x8c\x01\x02\x06\x04\x04\x01\x90\x01$\x04\x0f\x02\n4\x04\x02@\x04\\\x06\x04\x04\x02\x05\x06\x12\x1c\x04\x04\x03\x02\n\x04\x04\x05\x02\x04\xba\x01\x06\x04\x03\x02\xd2\x01\x06\x04\x03\x02\xf2\x01\x06\x04\x01\x02\x06\x04\x07 ($\x04\x04\x02\x19\n2\x04\x02\x04 \x1a\x04\x02n\x04P\x04\x04\x02\x15\xb6\n\x18\x08\x16\x08\x02D\x06\x04:\x04\x04\x02\x01\x06\x04\x02\x01\x04\x04\x02\x03@\x04\x04\x02\x03\x06\xd9!\x04\x02\x01 \x04\x02\x05\x0e\x04\x10\x06\x04\x01\xcc\x01\x04\x04\x05\x06\x04~\x04\x04\x114\x02\"\x02\x1a\x02\"\x02|\x08\x04\x05 \":\x04\x04\x17\x02\x08\x04\x82\x01\x02\n\x08\x14\x02\n\x04\x16\x04\x08\x01\x16\x04\x04\x05\x0c\x18r\x04\x02\x06\x04\x01\x86\x07&\x04\x03$\x12\x04\x1a\x01\xd1\x12\x04\x04\x01\x1c\n\x02\x03\x1e\x08\x06\x04\x05\x0c\x08\x1a\x08\x04\x05\x08\x0c\x10\x04\x02\x07\x14\x04\x0e\x08\x06\x06\x01\x02\n\x04\x04\x02+\n\x02\x06\x02\x08\x06\n\x08\x12\x0c\x02\x04\n\x02\x0e\x08\x04\x0c\x082\x1c\x02\x04\x04#\x06J\x14\x04\x1e\x02(\x02\x06\x04\x02\x1c\x08\x04\x02\x10\x02\x0c\x04\x04\x03\x02*\x04\x08\x06\x02\x0f\x80\x01\x1c\x02\x1a\x80\x01d\x1a\x08\x08\x02\x03\x08\x02\x04\x06\x05\x10\x9a\x01\x9e\x01\x04\x12\x06\x04\x05&\x0c\x18\x08\x02\x05\x18\x02\x08\x04R\x11\x08\x06\x04\x12L\x02`\x9a\x02\x04\x04\x0e\x01\x02\x04\x9a\x02\x07\x14\x08\x06\x02\x04\n\x01T\x06\x02\x11\x10\x02\x06\x04\x0e\x082\x06\x08\x04\x02\x03 \x08\x04\x06\x05\x94\x01\n\x04\x06\x02\t\x04\x06V\xc2\x01\x02\x04\x12\t\x02\x04\x0e\x04\x08\x04\x06\x1b\x02\x16\x04\x02\x04\x10\x04\x0c\x08\x04\x02\x06\x02\x06\x06\x04\x01\x06\x06\x02\r\x04\n\x0e\x02\x0c\x1eZ\n\x02\x0b` \x04\x02\x04\x06\x06\x02\x11\xa2\x03>\x02\x06\xc0\x1f\x02>8\xb8\x02\x08\x02\x19\x06\x02\x06\x02\x04\x02\x06\x02\x0c\x02\n\x02\x10\x04\x06\x04\x02\x116\x06Z\n\\\x04\x08\x02\x16\x06\x02-\x04\x02\x08\x02\x1e\x04\x0c\x16\x08\x02\x06,J\x04\x0c\x026R\x02$&\x06\x12\x04\x02\x07\x1aN\xb6\x01\xc6\x03\x04\x02\x11\x04\x02(\x04\x02\x0e\x08\x02\n\x04\x02\x07\x12\x06\x02\n\x04\x02\x04\x04\x01\x02\x04\x0c\x0f\x06\x02\x08\"\x02\x08\x0e\x02\x04\x10\x04\x06\x052\x060\x04\x02G\x1e\x10H\x02\x06\x1a0\x04\x88\x01\x04\xe4\x01\x08b\x04\x0c\x04\x14\x06\x04\x02\x04\xd8\x01\x04t\x04 \x04\xdc\x01\x04\xe6\x01\x04t\x04J\x04B\x04\x04\x19\x02\x0c\"8&\x04\x02\x0c\x08\x02\x04\x024\x04\x02\r\x1e\x02\xe8\x01\xd2\x05\x02\x10.\n\x02O\x1a\x06\x02\x0c\x02\x06\x1c\x02\xa2\x01\x02\x08 \x04\x02\x18\n\x12\n\x80\x01\x04\x10\x06\x04\x18\x1a6\x02\x1e\x02\xca\x01\x02$(\x02|\x02\xf8\x03\x08\x10\x14\x04\x18\x05\x02&\x86\\\x04\x02\x0f\x06\n\x04\x02\x06\n\x06\x0e\x04\x06!\x02\x04\x02\x0e\x8e\x02`\xf1\xdd\x01\xaa\x02\xa0\x02\xc9\x04\x0c\x0e\x06\x02\x0c\x18\x02\x04\x0c\x19\x02\x0c\x02\n\x0c6\x08 \x08\"\x04\x08\x82\x01\x04T\x17R\x020\x02\x04\x02X\xed\x05:*D\xa0\x06\x06\x12\x03\x9f\x08\x8a\x01\x04\x02\x0b\xa2\x02\xa1\x032\"\xf6\x01\x98\x01\x04\x02\x05\x06\x1a\x06\x04\x08)\x0c8\x04 \x06\x0c\x02\x14\x04\x16\x04\x02\x08\x06\x1a\x8e!\x02\x84\x02\x02\x1a\x02\x04\x10\'\n\x1a4\x08\x04\xc6\x07\xe4\x01\xe6\x01\"\xa6\x01\x02\x0e:>\x14$\x02\xd8m\xc4;\xea\xdb\x01\x04\x04\x07\x08\x02T\x04\x04\x02\x05\x18\x02 \x04\x02\x03\x08\n\x04\x02\x0f\n\x08\x0e6\x0c\x02\x04\x06\x06\x04\x04\x06\x15\x16\x02:<\x02\x08\x02\x1e\x12<\xbd\xc2\x03\x16\x04\r+\x82\x02\x04\x86\x02\n\x08\xbc\x07\x18\x04\x05(\x02\x04\x04\x02\x03\x04\x06\x04\x04\x06\x02\x04\x08\x04\x02\x04\n\x03\x02\n\x10\x04\x04\x02\x05\xab\r\x04\x02\x16\x04\x071\x06\x04B\x04\x04\x15\n\x04B\x04\xc8\x01\x04\xba\x01\x048\x02B\x04\x04\x04\x02\x05\n\x02l\x04\x04\x012\x04\x04\x15\x02\x18\x8a\x03\x06\x02\x06\x04\x06\x04\x10\x02:\x04\x01D\x06\x04\x01\xc6\x04\x08\x04\x01\x02\x12\x04\r\x08B\x04B\x164\xc8\x01\x04\x04\x03\xba\x01\x04\x04\x02\x0bB4\x040B\n\x04\x04\x07\x02B\x04B\x04\x02\x01B\x06\x02\x03\x04\xce\x01\x04\x04\x01\xbe\x01\x04\x04\x016\x04\x04\x1f\x02\x04\x02\xb8\x01\x04\xae\x01\x04,\x02\xc0\x01\x04\xb0\x01\x04\x08\x02D\x04\x04\x03\x02\x04\x04\x02\x04\x04\x1b,\x02\"\x0e\x02\x18\x02\x04<\x12\xfc\x04\x08\x14\x1e\x04\x04%\x0c6.&\x04\n\x14\x02\x0c\x02\x06\x046\x02\"\x08\x0c\x06\x1c\x04\x02\x05\x0c\x1c\x06\x06\x02-\x0c\x12\x02\n\"\x08\x02\x0c\x02\x14\x1e\xf4\x04\x04:\x02\x04\x02\x04\x0c \x06\x16$\x04\x02\x05\"\x02B\x04\x02\x05l~\x90\x01\x04\x02+\x98\x01\x8a\x01(\x084\x88\x01\x02^\x10 \x02\xd0\x01x\x04\x1c\xdc\x01\xe8\x01vNB\x02l\x04\x02\r\x04\x0e\x02\x0c\x82\x05\x08\x10\x04\x02\x03\xdc\x04\xc0$\x04\x0e\x07\x18\x02\x18\x02\x04\x04\x0f\n\x90\x01\xf0*\x06\xb2\x01\x10\x18\x16\x04\x0e\x0b$\x02\x08\n\x12\x02V\x04\x01\x060\x04\t\x06\x04\x02\xf3\xa8\x01\x8e\x01\x0c\x02\x04\x06\x03\x08\x0c\x04\x0e\x01\x06\x06\x04\x03\x02\x0e\x06\x04\x08\x02\x07\x08\x02\x0c\x02\x04\x04\t\x1a\x02\x06\x02\x1c\x04\x02\x07\n \x02\x04\x04\x02\x0b\x06\x02\x04\x02\x04\x02\x04\x04\x03\x02\x06\x04\x02\x01\n\x04\x02/\x0e\x06\x02\x08\x0e\x02\x08\x04\x02\x18\n\x02Z\n\"\x06@\x06\xcc\x02\xfc\x01\x04\xfc\x01\x02\x0e\x04\n\x03HF\x06\n\t,.*\x02*\x06\x02\t\x06\x04\x02\x04(\x04\x02\x05\x08\x04\x02\x08\x04\x04\x02\x08\x04\x04\x02\x1f\x10\x18\x04\x06\x1c\x99\x11\x1e\x04F\x02i4B6\xc2\x18\x04\x06\x02\x07\x04\xdc\x06\x18\x02\x04\n\x01\"\x04\x02\x0b\x1c\x08\x16\x04\x0c\x04\x04\x02\x05\xfd!\x1a\x02\x04\x04!*\x0e\x02\x04\x1e\x04\x06\x02\x1a\x02\x16\x1c\x0c.\x0e*\x14\x08\x02\x01\x12\x04\x0e\x03\x0c\x16\x04\x02\x0f\x08\x020$\x02\x0e\x02\x0e\x04\x02\x01:\x08\x02\x0b:\x16\x0cb\x02R\x04\x02\x1b\xbc\x01\x02\x18\x02lR\x04\x14\x04\x02\x12\x02\x12\x04\x04\x02\tj\x02 \x02 \x12\x04\x01\x06\x12\x04\x07\n\x94*\x04X\n\x02\x01\x16\x04\x02\x03\x1c\x02\x04\x08\x04\n\x01\x1e\x04\x04\x01\x08\x08\x02\x01\x08\x04\x04\x04\x06\t\x02\x04\x14\x04\x02\x04\x12\x07\x0e\x02x\x02\x04\x0e\x06\x06\x0b6\x02\x04\x10 \x10\x04\x04%\x06\x10,\x1e\x02\x1c\x02\x10\x1a\x1e\x1av\x1c\x14\x02\xbc\x10\x1a\x18 \x04\x02\x012\x04\x02\x032\x12\n\x02\x03\x04\x87Q\x06\x02\x07\x0c\x02\x0ca\x04\x02\x13\x06\x02\x06\x02\x12R\x04\x02\x1c\x12\x06\x06\x11\x04\x02.\x0c\x06\xc8\x01\x9a\x01N\xde\x01*\x04\x0fL\xb2\x01\x02\x0c\"\x08\x02\x04\x04\x02\x05\"\x08\x02\x04\"\x03\x04\"\x10\x04\x1d\n\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x04\x1aI \x04\x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c \x1c\xff\x13\xf7\x02\x04\x02\x01\x04\x04\x02\x0b\x06\x04P\x04\x1a8\x04\x02\x07$\x02\n\x04\x04\x02\x05\x12\x0c\x04\x04\x02%L\x12\x10\x12\\\x12\x160\x12\x02r6\x04\x8e\x03\x06\x02(\x1e.\x04\x04\x07\x02\xa4\x01\x0e\x1c\x04\x06\x03V\xe4\x01\x04\x02Y\xec\x01\n\x12\x02\x0eJ\x18B\x12r\x1a<F\x02H\x10\x88\x01V\xcc\x01\xbe\x01\x14.\x04\x02\n\x1a\x16t\x10\x02\n\xaa\x01\x1e0\x8a\x01\\J4\x04\x02:\x02X\x0e\x1e\x08\x02\x01\"\x04\x02\r\x16\x0c\x06\x02*\x02,\x04\x04\r\x02\x08\x06\x02\x04\x14$\x04\x027\x1e\x0c\x04D \x92\x01<\x02\x04\x06\x0cR\"lN4\x0c\x08\x0ch\" &N4B\x08\n\x04\x02\x03\x1aL\x04\x02\x1f$L\x1e\x02&\x16\x04\x16\x14V6\x02\\H\x06\n\x06\x02\xa5\x01\x0e\x1a:0\x02\x12\"\x12\x02\x04\x02\n\x08\x0cZ\x1e>.l4 \x12\nZ\x1e>@T<|8\x10^\\\x82\x01\n\x06\n\\r\x1e>.B4 *\x10T\n6\x06\x08\\\x1e>.H,\x184p&\x122bD\x0c6D\"\x0cz,4,\x98\x01\x02\xe04R\x06^\x04\x04\x02\x11\x0c@\x04B\x04\x06\x02\xc2\x05\xec\x10\x04\x04\x13\x08\x048\x04\x1e\x04@\x04H\xba\x04\x04\x02\t\x86\x03\x02\x84\x11\n.\x04\x02\x17\x08 \x02\x0c\x02\x10\x02\x04\x084\x8c\x06\x8c\xbf\x01\x04\x04\x05V\x0cV\x04\n\x1f\x02\x0c\x04\x02\xf3\x80\x03\x08\x04\x12\x02\x04 \x02\x0e\x04\n\x06\x04\x04\x01\x02\x04\x04\x0b\x02\x06\x04 \x04$\x04\x02\x04\x04\x11\x0c\n\x02\x10\x06\x0e\x04\x0c\x04\x18\x02\x11\x06\x04\n\x0c\x06\x0e\x04\x1a\x14\x04\x04\x03\x0e\x02\x04\x08\x01\x0e\x06\x02\x07\xf5\x03V\xe8\t\xc5\x08\x04\x02\t\x08\x0c\x06\x04H\x06\x04\x04\x02\x0f\n\x0e\x89\x03*\x0240.\x08\x04\x06\x02\x05\x04\x02\x1c\x06\x04\x11\x02\x0e\x02\x08\x02\x0c\x06\x14\x0e\x06\x04\x0b(\x1e\x1a\x04$\x04\x04\x16\x01\"\x06\x02\x03\x04\x86\x02\x04\x02\x01*\x04\x02\n\x04\x07( \xb9\x07\x0c\x04\x04\t\x02\x06\x04\x06\x04\x04\x02\x01\xb4\x02\x04\x04/\x14\x06\x04&\x06\x04\x0c\x04X\x1c\n\xca\x01\x02\xe2\x02\x1c\n\x04\n\x0cX\xc0\x01\n\x08\x06\x04\x04\x05\x02\n\x93\x0c\x04\x02+\x14\x04\x08\x16n\x02\xaa\x01\x06\x04\x10>\x08\n\x10\x02B<\x04\x02B\x12\x02\x04\x14\x01\x0e\x04\x16\x1d\xe0\x02\x04\x02\xb8\x02\x02\xbe\x02\\\x04\x02b\x04\x02\x06\x02N\x06\n\x07\x18\"\x04\"\x08\x02\x05,\x0e\x14\x04\x02\x05\x06,\x02\x06\x04\x01x\x04\x04\x15\x02<\x06\n\x12 6\x08\x06\x04\x06\x04\x04\x01\x80\x06\x1c\x04\x01\x06\x04\x04\x07\x08\x14 .\n\x04\x01\x02\x04\x04\x06\x02\x05\x04\xcf\x1c\x10\x06\x02\x1d\x15\xc0\x01\x1a\x040\x02\x06\x02\x98\x01\x02\xb2\x04f\x84\x01\x02\xf4\x03\x06\x02/\x14\x04\"\x04B\x04F\x048\x04\x14\x04\xac\x01\x04j\x04\\\x04\xca\x01\x04\x8a\x01\x04j\x04\x04\x02S(\x16\x0c\x12v\x048\x040\x04\x16\x04p\x042\x04>\x04J\x04\x02\x04\x94\x03\x02(2\x04\x02\x120\x10\n\x06\x86\x1b\xa8\x10\x02\x06.\x16\xce\x12\x02\xeeW\x06\x02/\x0e\x02b\xd0\x01B\x02\xb2(\x8c\x03\x02\xc2\x0e\xe0\x0e\xe0\x06\x90\n\x9e\x01\xea\x04\x02\xc4\x01\xae\x93\x01\x02\n\x02\xc4\x19\xb6\x0b\xde\x07\x06\x02=\xc2\x04\x02\x04\xc8\x04\x02\xae\t\xf4\x07\xc6\x01\x0c\xe6\x01\x0c\xc8\x07\x0c\xf2\x01\x0c\xaa\x02\x0c\xac\x05\x0c\x9a\x0fr\xce\x03\x02f\xe2\x01~\x06\xcc\x01\x02^:\x08\x02\x15\x046\x0e\x18\x10*\x10\n\x02\x1e\x8e\n\x04\x02\x01\x1e\x04\x02;\x0e\n\x0c\x0e\x16(\x02\xa6\x0b\xa8\x01\xa4\x0b\x02\xae\tT\x02\x1a\x02$\x02 42.6>\x1e\\\x08&\x08\x98\x06\x04\x08\x01\n\x06\x02\t \x0c\x1cL\x0c\x04\x02\x01(\x04\x08\x01\x1e\x1e\x04\x03\x02\x08\x04\x04\x0fF\n\x088\x1a\x0e\x1a\x1c\x04\x0c\x06\x04\x1f\x0c\n\x02\n\x02\n\x02\n\x02\n\x02\n\x02\n\x02R\x06\x02\x19*\x0c\x83\xe5\x04\n\x08\x82\x04\x0e\x08\n\x08\x02\x06<\x04\x02\x05\np\x02\x04\x04\r\x02\x04\xe1\x05\x04\x0e\x04\x02\x04\x0c\x01\x1a\x04\x02\x84\x02\x04\x05D\x08*\x04\x02\x11\x04`\x14\x08$\x02.P\x0c\x04\x06\x04\x02\x05\x12\"\x04\x04\x02\tp\x04\x0c*\x04\x06\x02\x0c\x04\x01F\x08\x04\x01\x1a\x08\x04\x07\x14*\x12\x10\x06\x04\x01F\x06\x04\x010\x04\x04\x04\x02\x01\x08\x10\x04\x03\\\x08\x04\x04\x01\x1a\x06\x04\x01\x18\x06\x04\x01\x1e\x06\x04\x01F\x06\x04\x010\x04\x04\x03B\x04\x08\x02\x03\x04\x06\x04\x04\x01F\x06\x04\x01\x1a\x04\x04\x01\x14\x04\x12\x06\x04\x03\"\x10\x04\x04\x01R\x04\x04\x036\x04\x04\x02\x03>\x08\x04\x04\x01\x10\x06\x04\x036\x08\x04\x04\x01\n\x06\x04\x01n\x04\x04\x04\x02\x03\x06\x0c\x04\x04\x13\x02:\x04F\x04\x02\x04\x8a\x02\x12\x18\x04\x04\r\x02X\x04\x02\xbc\x01\x04\"\x04\x04\x01>\x06\x04\x01\x0c\x04\x04\x01\x02\x04\x04\x01v\x06\x04\x01R\x04\x04\x05\x02\x04\xc2\x01\x04\x04\x01\xbe\x01\x04\x04\x01\x0c\x04\x04\x07.\x04\x02v\x06\x04\x01\x06\x04\x04\x01\xa2\x01\x06\x04\x01\x1a\x04\x04\x01,\x04\x04\x01\x86\x01\x04\x04\x01X\x04\x04\x15J\x044\x04\\\x04\x02\x04\x02\x16\x04\x06\x02\x03\x04@\x04\x04\x01\x1c\x04\x04\x01\x8e\x01\x04\x04\x03<\x04\x04\x02\x01V\x04\x04\tH\x04\x06\x04\x06\x04\x04\x01T\x06\x04\x01\x1a\x04\x04\x01:\x04\x04\x01*\x04\x04\x01h\x04\x04\r4\x04 \x04\x12\x04\x06\x04\x04\x01R\x06\x04\x01\x1a\x04\x04\x01:\x04\x04\x01<\x04\x04\x01P\x04\x04\x05<\x04x\x04\x04\x014\x04\x04\t\x10\x04\x02\x04T\x04\x04\x01X\x04\x04\x01~\x04\x04\t\n\x04\x06\x04\x06\x04\x04\x01T\x06\x04\x01j\x06\x04\x01\x1a\x04\x04\x01:\x04\x04\x01*\x04\x04\x01>\x04\x04\t4\x04 \x04&\x04\x04\x0b\x10\x04\x02\x0e\x12.\x04\x04\t\n\x046\x04\x06\x08\x04\x01T\x06\x04\x01\x1a\x04\x04\x01:\x04\x04\x01*\x04\x04\x01D\x04\x04\x0b,\x04\x18\x04\x02.\x04\x04\x01l\x04\x04\x01\"\x04\x04\x05\x12\x04.\x04\x04\x01^\x04\x04\x01@\x04\x04\x03\x0c\x04\x04\x02\x1f\x1a\x18\x04\x02B\x04\"\x04\x0c\x04z\x04,\x044\x04\x06\x02\x05\x1a\x0c\x04\x04\x02\x87\x01 \x1a\x1c\"\n\x04\x0e\x02\x1a\x1c\x1e\x04$\x14\x06\x04\x0e\x04@\x04\"\x04\x12\x04.\x04\x02\x04H\x04\"\x04\x1e\x04\x02\x04x\x046\x04\x06\x04\xb0\x01\x044\x04D\x04\x02\x04\x06\x1e\xb8\x01\x04B\x04\xb2\x02\x1c\x18\x04\xc0\x01\x04\x06\x04l\x04\x02\x04\x04\x02\x11 P\x0e\"\x0c`\x04\x02\x04\x04\x02Y\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x1a\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04\x18\x04(\x04\x8e\x01\x04\x02\x06\x04\x02\x1a\x1c\"2\x04\x04\x11@\x04\x02\x04\x02\x1a\x1c\"2\x04\x04+X\x04\x02\x04\xfc\x02\x04`\x04\xac\x01\x04\xb8\x01\x04<\x04\n\x04X\x04\x06\x04d\x04\x04\x02\x06\x04#\x08\x040\x04\x1e\x04@\x04X\x04\x02\x04\x02\x1a\x1c\x1e\x042\x04\x04\x07@\x04\x02\x04\x04\x02C\x04 \x04~\x046\x04\x02\x04\n\x04\xd4\x03\x044\x04\x02\x04<\x04<\x04<\x04\x02\x04D\x04\x02N\x04\x06F\x04\x02\x06\x04\x9d\x01\x08\x04P\x044\x04\x1e\x04N\x04(\x04>\x040\x04\x02\x04\xd6\x01\x04(\x04\x02`\xa6\x01\x04n\x04\x10\x04$\x04\x0e\x04\x9e\x01\x04\x0e\x04\x10\x04>\x04H\x04@\x04T\x04x\x04\n\x04$\x04\xe0\x01\x04\n\x04\xf4\x01\x04\x82\x01\x04N\x04F\x04\x02\x044\x04\x94\x01\x04P\x04\x1c\x04\x02\x04\x02\x06\x043\x08\x048\x04\x1e\x04@\x04H\x04&\x04\x02\x04\x02,\x04.\x04.\x04\x02\x04\x022\x04\x04\x02\x19(\x06\"\x04*\x04|\x04\x02\x04\x02\x1a\n\x04\x02\x15,L\xe8\x012Z\x1a:F.\n\x1a\x04\x02\x01<\x04\x02\x1b<l\x1c\n6\x86\x01\xa2\x016\nLdbf@\x04\x02\t\xd8\x01\x02(\x18\"\x04\x02\x0b\x1a\x0e\x12, \x08\x04\x02\x19DlV^`x\x18\x142(\x02D\xbe\xaa\x01\x08\x04\x03\x0eB\x06\x04\x01\x16\x04\x04\r\x02B\x04\x02\x04\x02\x0c\x04J\x03\x04\x02\x06\x04\x01F\x04\x02\x04\x04\x01\\\x04\x0e\x072\x0c\x0e\x04\x04\x02\x0e\x04\x01\x06\x0c\x04\x01\x06\x04\x04\x01\xcc\x03\x0c\x04\x04\x02\r\x04\x02\x0c\n\x02 X\x04\x02\rB\x022626\x1e\x04\x04\x03\x08\x06\x04\x04\x03\x0e\x04\x06\x02)\x06\x1a\x04\x16\xcf\xeb\x02`\x0e\x04(\x06\x10,\x02\x04\x02 \x08\x1eX\x02\x16\x04\x04\x07H\x06\x1cH\x04\x04\x04\x02\x04\x14\x0b \xe6)\x12\x9f/\n\x02\x04\x08\x03\x04\x1f\x04\x04\x01\x02\x06\x04\x03\x02\x04\x08\x02\x01\xd6\x01\x04\x04\t:L\x02D&\x04\x04\x07\x02\x04\x02z\x04\x04\x01\x8c\x01\x04\x04\x08\x02\x0b\x1e\x04\n\x08\x1a\x08\x04\x0e\x0b\x1a\x02\x04\x02(\x08\x04\x0c\x05\x144@\x04&\x01\x0e\x04\n\x0b,\x02\x1c\x88\x01\x04\x02\x04\x08\x07*n\x16\x04\x04\x02\x0f\xa8\x01J\x02\x8e\x012$\x12\x04\x06\x02\x014\x04\x02\t\x16\x14\x16J\x04\x04\x02\x15L\x06*\x028\x04\x02\x14 \x02\n\x04\x02\x7fp\x04\x06\x1c*2\x04\x8c\x01\x04\x02\x04BH.\x04\x02>26\x06\x1a\x12\x02t\x02\x1a\n\x02\xd6\x02$\xd2\x01\x04\xe2\x03\x18\x14\x1c\x06\xc0\x01\x0c\x06\x0c\x16\x02\x04\x08\x12\xa6\x01\x02\x0c\x02\x0c\x02\x14\x0cT\x80\x01\x02\x18\n\x0e\x06\x02\xdc\x04\xf4\x1e\x06\x02\x11\x08\x04\x06\x04\x08\x02\x04\x02\x04\x04\x1a\x04\x02\t&\x02\x04\x14\x02\x04\n\x04\x04\x19\x02\x08\x06\x04HF\x04\"\x04\xf0\x02\xe2\x02\x04\xf0\x02\x14\x043\n\x02\x0c\x06\x04\nF\x04\x02\x06\x04\x10\n\x1c\x04\x08\xb4\x02\x10\x9e\x02\x10\x12\x04\x1c\x02\x08\x02\x04\x04\tB\x04\x02F\x06\x04\x04\rB\x02B\x04B\x04\x02\x04\x04\x01\xd7d\x04\x02\x01\x08\x12\x06\x04\x0e\x04\x06\x04\x08\x04\x1a\x0bJ\n&\x04*\x82\x01\x04\x04\x0f\x8c\x01\x04\x9a\x02\x04\x86\x02\x04\x02 \x04\x04\x04\x02\x1d&\nv2\xda\x01\x04\x02\x16 \x020 \x02\xd4\x04\xf8\x04\n\x02\x19*\"@\x02\xdc\x01\x02\x04\x12\x06\x1e\x02\xa0\x04\xce\x1c\x04\x08\x03\x14\x06\x06\x04\x0f\x06\x02\x14\x06\x12\x08\x1c\x08\x04\x04\n\x02\t\x128\x12\x06\x1a\x06\x06\x0b\x0c\n\x0c\xcb>\x04\x10\x04\x08%\x04\n\x04\x10\x04\"\x1c\x06\x04\x12\x04\x12\x10\x12\x04\x0e\x02\x04$\x04\x02\x1f\x04T\x08\xf9\x02\x04\xbc\x030\x020$2$\x88\x172\xd7\x1c\x06\x08\x04\x11\x02\x9eo,\xc4\x02\x0c\"\xa0\x01\xf3s\xdc\x0c(\x04\x01\x06&\x04\x01\n&\x04\x01\x08&\x04/\x9f\t\x04\x02\x86\x03\x04\x1a\x08\xe4\x02V\x04\xf5\x0c\x02\x06\x08\x02\x08\x04\x1c\x04\n\x04M\x00^\x06\x02\x01\xb4\x02\x04\x02\x11\"\x04\x02\x0e\x10\x02\xca\x01&0\x06\x02\x04\x04\x01\xaa\x02\x0e\x04\x07\"\x14&.\x08\x04\x04\x02\x01\x04\x04\x02\x032\x1c\x04\x02\x05\x0e\x02\x10\x04\x04\x03\x10\x12\n\x04\x05\x0c\x0e\x16\x06\x04\x0f\xb1\x07\x0c\xb5\x04\x10\x04\x1c\x02\x04\x04\x02\x15\x08\x06\x02\x04\x10\n\x04\x08\x1e\x084\x04\x08\x0b\x1c\x08\x1c\x08\x1c\x08\x04\x0c\x0f\x1c\x04\x10\x02,\x12 \n\x06\x02\x0f\x04\x02\x186\x04\"0\x18\x04\x02\x01T\x06\x02\x07\"\x08\x1e\x04\x04\x02\t\x06:\"\x12\x10\x04:\x04\x08\t\"\x04\x1a\x04\x0e\x08\x02\t\x04\x18\x04\x16\x08\x08\x02\x038\x02\x04\x14\x04\x02+@\xb0/\x02\n\x02@6\x06\x02\x16\x02\x0e\x02\n\x16\x04\"\x80\x05\x1c\x86\x01\x02\x06\x04\x1a)\x02\xf4\x0c\x1cL\x18\xcc\x02\x1c\x9c\x01\"\xc2\x07\x1cJ\x02\x18\x02\xc0\x03\x1c\x8c\x01\x12\xc0\x05(\x04\x02\x1d\x08\x02@\x1a\x02\x06\x8c.j\x1c\n\x9a\x01\n\x92\x0f\x04\xe8\x01\x04\x08\t,6\x02\xe88\xd2\xd9\x01\x04\x04\x13:\xb5\xbf\x03\x04\x18\x04\x08\x14 \x18\x04\x04\x02\x0f\x08\x0e\n\x1a\x02\x10\x0c\x02\x04\x04\x07\x02\x12\x02\x04\x08\x02+, \x12\x1c\n\x02&\x16\x0e6\x02\x0c\x02\x82\x01\x08\x8c\x01\x04\x02t\x08\x88\x01\x04\x04\x02\x01\\\x04\x04\x03\x0c\x04\x06\x02\r\x08\x02\x16j *\x1c\x04\x04\x07\x02\x04\x10\xd2\x01\x04\x04\x05N\x1c\xa0\x01\x04\x04\x01r\x04\x04\x06\x02\r\x08\x02\x16,\x16\x06\x04\x04\x02\x1f \x12\x16\x02\x14\x04\x02j\x04T\x10\x18\x04\xaa\x01\x16\x10\x06\x02\x13F2\x1a\x04\x10\x060\x04\x0e\x1c\x04\x02\x11\x0eD\x1aV^\xd8\x01\x02&\xfe\x19\x04\n\x04\x06\x0b\x02@\x08\"\x02\x16\x04\x04\x034<\x06\x04\t\x06\x04,\x0e\x02\x10\x04\x15\x839\xd4\x02\x1a\xe7\x02\x04\x06\x04\x02\\q\x04\x04\x02!\n\x02X\x06\x14\x08\x02\xcc!\x04\x14\x04d\x04\x0e\x04@\x04\n\x02\x11 \\\x022\x04\x0c\x04\x02\x04\x04\x02\x17H.\x06*\\\x08:\x14\x04\x02\x042\x04\x02\'\x84\x01\x02\x04D\x04 \x04\x94\x01\x04<\x04\xca-L\x0cX\x06\x94\x04\x16*\x08\x04\x02\x01\x04\x04\x14\x1d \x16\xfeC\x02\x08\x04\x02\x0e\x04\x06\x0e0\x04&\x04\x04\x02\x05\x06\x0c\x04\x04\x02\x07\x0cR\x08\x0c\x04\x04\x19\x02\x04\x02\x10\x0c\x04\x02\x1c\x08\x04\x02X\x06\x04\x02!\x04\x1a>\x06L\x02\x14\x026\n\x02\xc0 \x02\xdc\x06\x02\xde\x1b\x8a\xed\x01\x04\n\x04\x04\x05\x0e\x84\x01\x82\x01\n\x04\x17\xe9\xdd\x03\x04\x02\x04\x06\x02\x0c\x12\x1a\x04\x02\x04\x04\x06\x19\x18\x06\x08\x06\x0c\x16\"\x12(\x02:\x02\xc8\x02\x06\x02\x03\x18\n\x04\x02\x03\x04\x02\x04\x14\xa1\x01\x06\x12\x02P\x04&\x04F\x04J\x04<\x04\x18\x04\xb0\x01\x04n\x042 \x12\x04\xce\x01\x04& L\x04n\x04\x14 .\x04R \x0e\x04<\x044\x04\x1a\x04t\x046\x04B\x04, \x06\x04\n\x06\x02\x1a\x06\x02:\x02\x0e *0 \x06\x12 \x12 4\x18\x8c\x01\x88\x06\x18\xcc\x01\x18\xac\x01\x04\x02\x07$($\xe4\x01\x06\x02\r\x0c\x14\x02\x1a,\x14\x06\x04\x10\t \x04\x026\x06\x04\x02\x01\x04\x04\x02?\x18\x12\xbc\x01\x02\x1c\x0e&D\x06R\x02b\x0e\x02\x0c:\x02\xf4\x07\x02\x0c \x06\x18\n\x0e 8\n\x08\x14 \x16\x04\x02\x13\x18,\x02\x182\x04\x1c\x18\x06\x04\x04\x02Q\x0c\x02\x04\n\x04\x08\x04\x08\x04\x98\x06\x04\x08\x04&\x04\x08\x04\\\x04\x1e\x04>\x046\x04.\x042\x04\x1a\x18\x04\x02\x1e($\x1a\x10T\x02\n\x04\x02!\x18\x90\x03 \x9c\x01\x04\x02\x12 R\x06\x02,\"\x06\xfc\x03 *\x06\x02\x17\xe4\x04 \xe0\x02\x02\x82\x07\x02&*\x8a\x01\xc4\x06B\xea\n\x06\x06\x0f\xe0@\x02\" \n\x90\x1c\x80\x01\xce\x01\x04\x06\r\x04\x0c\x04<\x04\"\x04\x04\x02\x15>\x18\x04\x02$\x04D\x04L\x04*\x04\x04\x07\x1a\x0c\x0e\x04\x04\x02\x1d\x1e\x02\x12\x08\x02\x0c\x16&\x02\xe0\x03\"\xc0-&X\n\x04\x02\x17$X\x02T&\n\x02\x14\x02\x12\x0c\x02\x06\x18\x19>\x12\x0c\x16\x12D0\xd8\x01\x10\x1c\x0c\x08\x0c\x04\x02\x03\x1e\x0c\x04\x02\x01\x06\x04\x02\x01\x1a\x04\x02\x0b\x14:\"f\x02\xa6\x03\x06\x029\x08\x02\x082\x02\x08\x02\x08\x1e\x08\x02\x08\x1c\x16\x02\x1a \x8e\x01\x02 X\x02\xea\x04&\xfa\x9a\x02\x96\x0f\n\xbb\xcb\x04\x02\x04\x06\x04\x04\x01\x18\x04\x02\x01\x10\x04\x08\x04\x02\x19\x10\xa6\r\x08\xbd\t\x04\x06\xdf\x04^X\"\xd7\x01h`\x04\x02\x19\x04\x02\x14\x08\xaa\x01\x02\"\x04\x08H\n\x18\n\x04\x02\x0b\x0c\x88\x01\xe0\x01\"\x16\"\x04\x08\t\xd6\x0c\xf1\x12\x04\x06\x8b\x02\x04\x02\x01\x12\x10\x04\x03\x02\x12\n\x04\x04\x0e\x04\x04\x15\x0e0\x04J\x044\x04&\x10\n\x04\x04\x0c#\x06\x1c\x02\x06\x02\x04\x02\x1c\x12\x0c\x04\x02\x04\x06\x0e\xee\x01\x1c\n\x04\x10\x0b\x1c\x08\x12\x10\x0c\x18\x04\x02\x06\x04\x19\x02\x10\x04\x0e\x1e\x02\x04\x02D\n&\x02\x06\x06\x04\x01x\x08\x02\x01\x06\x12\x04\x0b\x06\x02\x06\x16\x10,\x04\n\x01\x12\x04\x02\x03.\x04\x04\n\x01\x10\x04\x02\x03\x1c&\x06\x06\x04\x02#\x95\r\xca\x02\x04\x08\xd5\x02\x16\x18\x12\xa8\x01\x04\xd2\xb5\x01\x0c\x04\n\xe6\x0b\n\x06\xe4!\x04\x02!\x1e\x02 \x02v\x04\x02\x08\xf2\x0e\x02\xb2\t\n\x0c\xea\x1d\xc8eHD\x04\x18\x1d\x0c:\x0c\x08\xff\x84\x03:\x02F\x88\x01\x89\x02\x04\x02\x05\n\"\x10\x04\x07\n\x02\xc0\'\x06\x06\x04\'\x10\x94\x01\x0c\x0e\x04\x08\x0c\x02\x04*\x0c\x04\x0e\"\x18\x04\x08\n\x08\x06\x06\x04\x01\x02\x04\x04\x11\x0eL\x04\x06\x04\x16\x0c\x0eP\x04\x04\x0f\x0c\" \xb0\x01\x1c\x08\x16\x08\x04\x02\x01\x08\x04\x02\x01\x08\x0c\x02\x04\x08\x04\x02\x0f\n\x02\n\x02\x08\x04\x08(\x06\x02\x0b\x1a\x1c\"\x1a(\x06\x9a\x02\x04\x1b\x026\x04&.$\x02\x0e\x12\x0e\x12N\x0e\x06\x04\x04\x03\x08\x02\x04\x04\x0b\x06\x04\"\x04\x10Z\x04\x02\x0f\x10\x02 \x02B\x12\x04\x02\x04\x04\x04\x02\x01\x1a\x04\x02\x03\"\x0c\x04\x04\x04\x02\x0f\"\x0c\x04\x14\x04\x08\x04\x02\x04\x04\x01\x10\x04\x02\x03\x0e\x02\x04\x04\x01\x10\x04\x02\x07\x10\x0c&^\x06\x02\x1d\x1a\x1c\"\x1a,:\x18\x0e\"\x12\xa5*\x82\x02\x02\x06\x80\x02\n\x04\t\x06\xfc\x16\xd4\x03\x06\x92\x01\x04\x04\x03\x02z\x04\x04\x13\x02\x08\x04\x02\n\x026$6\x06\x06\x04\x0b\xd0\x1c\x0cP\x06\xf2\x10\xb6\x04\x06\x8aQ\x04\x0c\x0f\x020\"\x16\x0e\x06\x04<\x04\x02\x0b\xa6\x01tXt\x1e\x1a\x04\x02\r\x048\x1e@L\x02\xea\x01\x08\x04\x15\nj0\nH\x04\x02\x06\x04\xf0\x01\x04\x04\x06\x13\x04\x0c\x04\n\x04R\xcf\xee\x02\x06R&\x04\x02\x1b$\x02\x06\x1c\"\x02\xfc\x07\xf4\x06\x02\x0exD2\x0e\x04\x02\x19\"\x1a\x022\x18&\x9d\x14\x04\x02\xbe\x02\x02 .\x04\x04\x07\xd8\x01\x06\x04\x0e\x04\x02\x04\x0e\x05\x06\x04\x06\x06\x12\'\x10`\x02\x1c\x100\x9c\x01\x02\x08\x14\x02\x0e\x02\n\x02\x0e\x02\x1c\x02\x10\x04\x02!\x06\x040\x0c^\x04\x10\n\x02<\x02\x06\x12\x08\x12\x066\x04\x02\x01\n\x04\x0c\x08\x02\x0b\x06\x04.\x08\x18\x04\x08\x02\x01\n\x06\x02\x17\x12\x1e\x0c\x02\x04\x06\x02\x04\xa3\x0e\x08\x0e\x04\x04\x02\x01\x04\x04\x02#\x04\x02\x0c\x04\x02\x06\x16\x04\x08\x02\x04\x08\x0e\x04\x02\x04\x0e\x04\x04\x02\x03\x04T\x04\x04)\x1c\x0c&\x04\x0c\x08\x02\x08\n(@\x80\x01\x02\xfb\x04\x1a\x12\x0c\x08\x04\xc8\x01\x16\x062\r\x162b\n\x02\x04\x02\x04\x04\x01\x02\x04\x04\x05\x06\x08\x04\x042\x01\x8c\x01\x04\x02)\x8b\x07\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x04\x1a\x03 \x1e\x04 \x07\x04\x0e\x06\x08\x12\x02\x05\xee@\x04\xc3F&\x04\x03\x06\xf4\x02\n\x04\x05\x06\x04D\x10\x04\x01\x08\x04\x04\t\x0c\x1c\x04@\x02\x04\x04#F\x08\x04\x1a\x04\n$\x04\x10\x0e\x1a0\x08\x0e\x14\x04\x06\x04\x04\x02\x05\x0c\x16\x0c(\x04\x03\x02\x04\x04\x02\x03@b\x04\x04\x01F\x04\x04\x0b0\x04\x02\n\x086\x06\x02\x05(\x02\n\x06\x02\x07\x08\x02\x0c\x04\x04\x02\x11P\x0c\x04\xcd\r\x06\xea\x01\xec\x01\x04\x02\x08\x08\x04\x0c\x03\x0e\x02\x04\x04\x13\x0c\n\x08\x06\n\x08\x02\x1c\x02(\x04\x02\x07\x08\x04\n\x06\x04\n\x05\x02\x1e\x14\x06\x02\t\x10\x02~\x1c\xca\x01\x06\x02\x03\xca\x01x\x06\x02\x05\x04\x0e\x0c\x06\x02!\x10\x1c\x02\x04\x02&\x1a\x06\x02\n\x02\x08\x02d\x1c$\x0e\x04\x02\r$\x1a\x0c\x0e\x1c\x0cx\x04\x02\x0bz\x06\n\x02\x10\x18\x06\x02\x05F\x02\x04\x04\x02\x016\x04\x02\x05\x14\x18\x1a\x04\x02\x0b\x12\x18\x02\x10\x18\x10\x04\x06?\x18,\x18\x1a\x16\x18\x12\x18P\x02V$\x1e$\x86\x03\n@\x18\xd2\x01\x06l\x02H\x18\x82\n\xa0\x01\x02\x1e\x02\x9e\x01\x02(\x04\x02\x0f\n\x16$6$\x08\x02\x0e\x04\x02Q\x068\x02 \x02*$\x02$\x06$\x04\x02@\x04\xb4\x08\nX\x06d\x02\xf6\x01X\x02\xca\x01\x04\x02\x1a\x06x\x066\x0e\xb8\x01\xce\x02\xa2\x02\x08\x1e\x06Ll\x04\x02\x19N\x04\x02$\x86\x02$\\,&$\x16$\x16\x04\x04\x15B$\x08\x024\x0e(\x1cP\n\x0c\x04\x02\x1d\x0e,\x126\x12.\x12\"$\x86\x01\n\x84\x02\n\x02\x1c\x04\x0c\'\n&$\xfe\x01$\xa0\x01\x02 \x02\x10\x94\x01P\n\x10\x02\xd0\x01\x0e\x90\x03\x06\xb6\x03\x04\x02K\x04R\x06:\x06p\x04\x02\xda\x01\x06\x02\x1a\x06\xc6\x01\xea\x01\x02\x0e$\x02\n\x18\x0c\x1e~\x02D\xfe\x04\xa4e\x02\x1e\x02\x1e\x02\x0c\n\x06\x04\x02\x04\n\x05\x02\x08\n\x04\x04\x17\x0e<\x04\n\x08\x0c\x08\x02<\x08\x02\x0c\x04\x02\x01\x0c\x04\x04\x05\x08\n\x04\x04\x10\x04\x02\x1d\x0c\x04\x0c\x08\x04\n\x04\x10\x04\x08\x04\x06\x04\"\x04\x04\x02\t\xc3\n\x08$,.\x04\x02\x01$\x06\x0c\x01\x02\x04\x04\t\x0e\x1a\n\x06\x08\x04\x023\x1a\x0c\x04\x0c\n\x02\n\x02\x08\x89\xd7\x01X\x02\n\x1c\x16.\x06\n\x12\x02\xac\x02\x02(\x06*\x06\x04\x04\x0b\n\xc6B\x02\x12\x08(\x04\x02\x15D\n(V\x18\x02\n$\"\xfc\x0b\xbeQ\x04\n\x05\xf4\x01\x02\x10\x04\n\x1b&\x10$\x04\n\x08\x1c\x04\x18\n\x02\x04\x12\x0c\x06 \x01\n\x06\x02\' \n\x0c\x02\x04\x02 \x16\x0eF\x02\x04\x02\x9a\x05\x02(\x0c\n\x14\x18\x04\x08\x01\x04\x04\x06\x0b\x1c\x08 \x12\x10\x08\x12\x04\x01\xff\xb5\x01\x04\x02\x01\x04\x0c\x02\x03\n\x04\x04\x02\x01\x1e\x0e\x04\x0f\x1e\x06\x1c\x02\x06\x02\x06\x04\x04\x02\x03\x19\x04\x04\x06\x03\x02\x10\x04\x04\x05\x02\x14\x04\x04\x02\x03\x08\xb4\x04\x04\x02\x15\x08\x02\x12\x04\x12\x08\x02\x08\n\x022\x04\x02\x11\x04\x02\x0e\x82\x01\x02\x04\xd4\x06 \xb1\x0e\n\x04\x0fZ\x02\xac\x01\xe2\n\x04\x02\x94\x02\xce\x01\x04\x02\x1f\xd4\x01@(\x02@(\x1a(,(\x08\x02\x04\xa2\x01*\x12\x04(\t\x12(\x12( \x04\x02/\x0e($\x12D\x04l\x04V\x04^\x04`\x04x\x04\x18\x04\x14\x042\x04(\x04\x04\x02\x01\xec\x05\x14\x04\x04\x02\x0f\x06\x04\x1a\x04\x02\x18\x02\x18\x04\x02\x03\x1c\x18\x04\x02\n\x1c\x04\x02\x01\x1c\x0c\x1a)j4\x04\x10\x04|\x04\n\x04R\x04\x02\x04\xfc\x02\x1e\x10\x18\xfa.\x12\x10\xa2\t6\x04\x07\x1c\x12\x16\x12\x04\x02\x04\x04\x17(\x046\xa5lH\x02<\x04\x08\x0c\x02\x04\x06\x02\x04\x0c\x042\x04\x02\x01H\n\x04\x03,\x02\x08\x04\x05\x06\x04\x06\x06\x04\x012\n\x04\x1d*\x02\x04\x06\x18:\x16\\\x1c\x04\x02\x0c\x16^\x06\x04H\x04\x04\x0f\x0eH\x02H\x0c\x04\x8f\n\x04\n\x02\x11\x06\x13\x06\x04\x0e\x04\x1c\x04\xd6\x0b\x04\x06\x07\x02\x04\x1a\x0e\x04\x04\x04\x02\x17$\n\x02*,\x04\x02\x08\n\x02\xe2Y\x9ag\x04\x02\x03\x04\"\x08\x04\x01\xad\xcf\x01\x04\x02\x05\x06\x02\x0c\x04\x04\x07\x06\x02\x16\x10\x04\x04\x1d\x8c\n\x02\x08\x02\x96\n\x08R\x02&\x14\x0e\x04\x0e\x04\n\x06\x02\x07\x08\x02\x0c*\x84\x02\x04\x1d\x06\xbc\x02Z\xbe\x01\"\x02\xf8\x04\x04$H\x08\x12\x0c\x1c\x06\x04\x12+V\x14\xa4\x01\x04.\xfe\x01\n\x0e\x02 .\x04:\x02\x12\x10\x04\x02$*\x08\x0e\x04\x02\x13\x1e\xf2\x016\x08\xab0\x02\x04\x0c\x02\x1a\xc2\x03\x04\x07$\x10$\x18\x04\x02\x11\x04 \x02v\x04x\x0c\x04\x06\x04\x04\x07\x02\x08\x02\x14\x06\x04\x01\x14\x06\x04\x01\x8a\x01\x06\x04\x01\x0e\x06\x04\x01\x0c\x06\x04;P\x04T\xb2\x02\x96\x02\x02T\x04\x02\x04\xc0\x01\x04*\x04\n\x04\xa0\x01\x04\x10\x04\x06\x04<\x04\xc6\x01\x04D\x04H\x04\x06\x02\x05\x04\x02\x04\x04\x02\x1d\x04\xd8\x01\x04\x02\x04(\x04\x1c\x04\x1e\x04\x02\x04\x06\xd6\x02\x0c\x043\x02\x84\x01\x04b\x04\x02\x04\x02\xf0\x01\x04\x02\x04\x02\n2\x0e\x08\x0e2\x0e24\x06\x08\x02*\x04\x1a\x03$\x02\xea\x01\x04\x01\x12\x08\x04\x11&\x0e \x04\x02\x04\x02\x04&\x08\x02\r$\x02$\x18\x02f\x04\x06\"\x05\x1a\x16\x1e\x04\"\x01\x04\x04\x02;L\x04l\x04\x14\x04\x0e\x04:\x04\x86\x01\x04\xa2\x01\x04.\x04\x06\x04P\x04d\x04b\x04^\x04>\x04\x02\xd8\x08\x1a\x04\x03\x08\x02\x04\x08;\x02\x1e\x04B\x020\x04T\x04\xec\x01\x04.\x04^\x04\x16\x046\x04B\x04.\x04B\x04\x02\x04\x02\x04\xa2\x06\x12\x04\t\n\x04\x08\x0c\x02\x04\x04\x04\x02\x07\n\x06\x04\x02\x04\x14\x03\x04\x0c\x04$\x01\x1a\x04\x02\r\x1a\n\x02$\x1a$ \x06\x04\x0b\n\x04\x08\x1a$\x1a\x04\x02\t\x1a\x06(x\x06\x04\x02\x01\xf0\x01\x08\x02\t\x12\x10\x04&\x04\x06\x02\x01\n\x04\x02\x19\n\x04\x02\x0e\x1e\x14\x1a\x02\x1a\x0c\x04\x02(\x04\x02)\x1e\x0c\x04\x02(\x08\x06`\x06\x02,\x02|\x02t\x04\x1a\xfa\x03\x12\x10\xa8\x03\x10\x04\x13D\x16\x12\x0c8\x02\x06\x10\x08\n\x04\x04\x01\x10\x04\x025\x10\x04n\x1c\x04\n\x02\xae\x01\x02\x04\x08\x04:\x04\x1e\x04\x14\x12\x16\x04<\x04N\x046\nj\x04\x02\x01.\x04\"\x0b\x02\x06\x08B\n\x18\x04\x02\x05n\x0c\x0e\x04\x04\x07\x02\x046\x04\x04\x02\x15\x06\x04\x02\n\x08\xce\x02\x95t\x18\n\x0c\x0e\x04\x06\x04\x04\x05\n\x06\x04\x04\x02\x03\x08\x04\x04\x06\x05\x08\x02\n\x04\x06\x08\x02\t\xfe\x9d\x08\x8d\x98\x08\x04*\x10\x04\x18\x01\x1a\x04\x02\x0f\xa1\x08d\x02\x98\x01x\x04*\x12\x04\x0c\x0b\x18\x08,\x02\n\x06\x04,\x04\x04\x01&\x04\x08\x05\x10\x18\x02\x04x\x04\x06\x04\x1a\x04x\x17.\x0e^\xb8/:\xae\x01\x9e\x02\xb8(^ \x8cx\xfe\xd4\x01\x04\x0c\x0fL\x86\xd6\x01\xa4\xd5\x01\x18\x02\x04\x02\x10\x04\x02\x03(\x8f\xe2\x06\x04\x02\x17LF\xe0\x01\x1a\x1c2$Z\x92\x04\x04\x0c$\x08\x04\x07\xaa\x01$\x1c\x04\x04\x02\r$\n \x12\xb3\x0b\x10\x04\x04\n\x11\x0c\x06\x0c\x10\x06$\x0e\x1a,\x06\x02\x01\x08\x04\x06\x01\x08\x06\x027,\x1a\x0c\n\x02\x16\x06\x02\x0e\xd5\x03\x00\n\x14\x02\x12\xba\x01\x12\x1a\x12\x1a\x02\xc8\x01\x1a\"\x1a\"\n\x02\x04\x0c\t*\x04>\x044\x06\x02\x04\x04\x07\x02\xdd\x06T\x04\x04T\x07\x02\xff\x01\x04D&\x04\x0b\x95\x01\x02\x16\x12\x02\x14\x04\x04\x07\n\x02\x16\x02\x04\x04\x03\n\x12\x04\x04\r\xfc\x01\xc6\x01\x06\x04\x0eN\x0e\x04\x02)\x04\nX\x14\x04\x0c\x02\x08\x0e\x08\n0\x02\x0e\x042\x0e\n\x0e\x02&\x04\x04\x1f\x02\n\x02\x12\x02\x12\x02\x0c\x04\x14\x08 \x06\x0e\x02T\x04\x02\x03r\x1a\x04\x02\x07:\x02\x1a\x08\x12\x04\x11\n\x04\xaa\x03\\\x02\x0e\xf5\x10\x04\x02\x04\x08\r\n\x08t\x04\x16\x0c\x1e\x04\x04\x03\x18\x14\x08\x02\x0f\x04\x02\n\x0e\x02n|\x02\x04\x0e\x03\x04\x02\x04\x04\x13\x02\x0e\n\x08\x1c\x06\x02\x04\x02\x06\x04\x02\x11\x06\x1c&\nX\x02\n\x02\x04\x04\x02\x01\x12\x08\x02\t\x04\x02\x0c\x08\x02\x10\x04\x05\xbf\x07\x04\x02\x04\xde\x0c%\x02\x04\x02\xde\x0c\xa7&\x04&\x04&\x04\x88\n\xea\x05\x04\x02\x04\x06\x08\x06\x08J\x04\x03\n\xcc\x02\x04\x04\x03\x02Z\x04\x04\x01\xa8\x01\x04\x04\x01\x90\x01\x04\x04\x03\x02^\x04\x04\x03\x02\x8e\x01\x04\x04\x04\x02\x05\x10*\x04\x04\x02-\x0e\n\x16\x1e\x18*$\x04\x02\x04\xa4\r\x06\x04D\x02F\x12\x16\x10\x02\x04\x1e\x14\x04\x02\x13(\x08\xed+\x04\x0c\x0f\x06\x04P6\x04\x02\x0bT\x02\x04\x02\x0c\x06\x06\x04\x0f\x1c\x02\x12\x04\x08\x14\x1c\x0e\x06\x02\x11\x08\x02\x12\x02\x0c\n,\x0e\x18\x04\x04+\x102\x0e:\x02\x04\x06\x12\x06\x14\x0c\x02\x04\x0c\x04\x14\x02\x18\x04\x1c\x04\x06\x04\x02\x17\x1c\x04\x02\x04\x02\n\x04\x02\x08\x02\x1c\x12\x04\x02\x01\x1c\x08\x02\x03\x14\x08\x04\x02\x0f\n\x0c\x14\x02\x06:\x06\x0c\x04\x02\x05\x0c\x16\x1e\x06\x02\x07\xe4\x01\x02$2\x04\x02\x01\x08\x08\x02\x17\x08(\x02\x86\x15\x04:\x12\xa2\x01\x16\x12\x14\x02\x04\x0c\x03&\x1a\x04\x08\x07\x16\x12\x08\x16\x04\x06\r\x1a\x02\x06\x12\x04.\x12\x04\x08\x05\x1a\x04\xf3&\x08\x02\x01\x04\x06\x0e\x04\x08/\"\x04\x08\x0c\n8\x08\x02\x12\x10\x06\x04\n\x9a\x03\xa4\x01\x06<\xbe\x02\x06\x10L\xc8\x01pb\x04\x02\x17,L\xe8\x012Z\x1a:F.F\x06\x12\n\x1a\x14\x18?,\xb4\x01\x02\x06\x04\x10\x02\n4\xd0\x06\x02\x92\x08\x02\x90\x01\x02\x04\x12\n\x12\x80\x0f\x1a\x16\x1aV\x1a\xe6\x01\x1a\xa0\x03\x1a\xfa\x01\x1a\x92\x01\x08\x02\x01,\x04\x02%\x08\x02 \x0c\x02n\x02\xda\x02@\x9e\x03\x022\x0c\x18\x06,\x04\xa2\x04\x96N\x06\x06\x07\x10\x16\x12\x10\x04\x08\x04\x16\t,\x08\x02\x0e\x02\x04\n\x01\x91\xa0\x01\x14\x04\x04\x02\n\x04\x0b\x02\"\x04\x02\x1e\x04\x04\x02\x01$\x0e\x04Q\xc9\x01\xd2\x02\xce\x02\xc4\x0c\x06\x18\x02\x0c\x04\x06\x02\x14\x8c\x01\xc1\x13\x04\x02\x1e \x1e \x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x04\x1a=\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x04\x02?\x1a\x02\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x04\x1a\'\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x04\x18\'\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x04\x1a\'\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x04\x18\'\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x1a\x18\x04\x1aK$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\x1a$\xe1+\x01\xa8\x03\xa6\x03\x04\xee\x01\x04\x04\x02\x03\xcc\x01\x93\n2\x04\x04\x02\x01\x94\x01\x04\x1c\x056\x08\x02\x12\x04#\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c\x1a\x1c,.6\n\x1e(\x04\x04T\x06\x02\x01$\x04\n\x0b\x02\x0e(\x0c\x04\xa2\x01\x04\x04\x03\x02<\x04\x04\x01\xba\x02\x04\x04\x03\x02\x10\x06\x04\x07D\xc0\x01p\xca\nD\x04\x01\x94\x01\x04\x18\x032\x06\x04\x02\x05\xe9\x1e\xe0\x01\xbc\x01\x04\x04\x11\x02\xa8\x01\x04.F\x04\x9e\x01\x0e\xb6\x01\x06\x04)\xa8\x01\x08\x04\x02\xd6\x02\x02\x06\x08\x04\x12\x02$\x92\x02\xe8\x05\x02\x06\x08\xdc\x08\xf1\x1d\x04\x0c\x04\x02\x0b\x08\x10\x080\x04\x02\x04\x0c\x01\x1e\x04\x02\x01\x14\x04\x04\x07\x02\n\x04\n\x06\x06\x13\x12\x06L\x100\x02X\x04\x16\x10\x04\x08\x01\x04\x06\x02\x1f\x06\x02R.<\x0c\x04\x02\x04\x02\x10\x1c\x02\x0c\x14\x0e\x04\x06\x08\x08\x17&\x10z\x08\x0e\x06\x04\x02\x04\x10\x04,\x04\x02\x1d,\x0c\x02\x0c\x04\x02\xa8\x01\xa2\x01\x04\x02\x06\x04\x06\xa8\x01J\x04\x02#\x1a\x1c\x04\x18\x08\x04\x06\x14\x1e\x02\x1e\x0c\x06\x042\x04\x02\x04\x04\x02#\n\x04@(\x18\x082\x02\x12\x062\x02\x0e\x1c4\xd1\x13\x0e\x08\x04\xf0\x01\x05\n,\x10\x04.+\x06v\n\x12\x040\x08\x02\x1c\x0e\x93\x06\x04\x02\x16\x04\x0c\x02\x18\x02\x08\x16\x10\x06\x02\xeb\x03\x12\x04@\x02\x08\xd7\x02\xc4X\xfb-\xce1\xa11\xfe1\x88]\x9bZ\xa8Z\xe5Y\xcd@hM\x06\x86A\x9aY\xdfX\xecX\xb7X\xc4X\x9fX\xacX\xedW\xfaW\x91W\x9eW\xa1T\xaeT\xcdS\xf6\x01\xe1=\xfa=\xcd=\x9e>\xfcP\xfdO\xd9b\x18\xe4b\xa3d\xcce\xffJ\x8aL\xc3A\xfeA\x81h\xb4\xbd\x01\xa8\x01.2\\\x01\xa9P\xbcY\xb5Y\xfcZ\xbd\xa4\x01\x94\xa5\x01\x86\x01]\x9a\x02\x9f\\\x88[\x85[\x8bK\xbcK\xe4E\xd1E\xccZ\xcfY\xe6^\xb5^\xba^\xb3^\x9eY\x97Y\xb0Y\x04\x01h\xc1Y\xdeX\x18\x05XS\xf1X\x8cY\xfbX\x8aU\xddT\xefM\xe4N\xc6B\xb3B\xd6W\xd1V\xf4V\xe7V\x94S\xd5R\x97P\xc0R\x93R\xbaR\x8dR\xc4Rf\xfdR\xdcS\xafS\xfcS\xcfS\xecS\xbfS\xd8S\xabS\x8cT\xdfS\xfcS\xcfS\xf4V\xc7V\xe2V\x92Q\x16\xeb\x19\xa97\xa6Q\x85Q\xe7V\x8aW\x86Q\xd9\x16\x93:\xb8Q&\xd5P\xbc1\xd3/\x98O&\xf5N\x98/\xdd.\xea.\xf1,\xdf\\\xe2]\xb5]\xd0]\xf3\x8e\x01\xa8\x8f\x01\xd7]\xf8]\xbb\x8e\x01\xf6\x8e\x01\x85^\xbaa\x8da\xa6a\xba+\xa7+\xe3\x91\x01&\xbe\x92\x01\xf6%\xb1$\xbe$\xa1$\xae$\xd5#\xe2#\xbb#\xc8#\xd9!\xd7f\xb6g\x89g\xa2g\x9c%\x89%\x87g\xc8l\x9bl\xbco\x8fo\xdap\xeb\x9d\x01\xe0\x9f\x01\xa1r\xbct\x8ft\xc2t\xd3\x82\x01\x02\xbc\x0e\x99\x0e\x16\x02\xae\x0e\x8b\x0e\xc4\x01&\xb1\x01\xc6\x01\x0e\x06\xc1\x016\xf2\x80\x01\x04\xee\x11\x97\x11\xa4\x11\xbf\x0f\xcc\x0f\xcb\x0c\xd8\x0c\xe5\x0b\x82\x01\x81p\xa2p\x9dp\xbap\xb5p\xf0p\x04\xeb{\xf4|\xee\x08\xf9\x07\xbb}\xa0\x82\x01\xf3\xb8\x01\x04\x0e\x04\x12\x06\x04\x04\x02\x04\x04\x1d\x10\x02\x06B\x0ed\x08\x1a\x0c\n0\x06:\x14$\x04\x0c\x03\x0e\x04\x04\x08\x03\x12\x0c\x04\x04\x07\x022\x04\x08\x06\x04\x01H\x06\x04\x01T\x06\x04\x01\x02\x06\x04\x13\x02f\x02\x08(\x0e\x16\x02Z<\x04\x02\x01\x12\x04 \x08\x04\x04\x02\r\x08\\V\x02\x04\x02*\x04\x1a\'\x08 (\x18\x02<\x02\x04\x02\x1a\n\x0e\x02\x06\x04<\x18\x04\x16\x1e\x06\x04\x07:\x02\x0c\x0e\x04\x04\x03\x02>\x04\x02\x0bT\x18\nt\x02R\x04\x02\t\x1c\x12\x02r\x02\x04\x08\x13\x02\x08\x16\x0e\x04\x0e\x16\x08\x02(\x04\x02\x01\x10\x06\x02\x07\x0c\x02\x0eF\x04\x02\t\x08\x02\x1c\x10\x04\x04\x02\t \x1a*\x0c\x04\x06\x02A\x10\x02&6\x02\x08\x04\x02 \x0e\n(\x02\x16\x14 \xc2\x01\x02\x18`\x02\x18\xe8\x01\x1c\xde\x01\x1c\x88\x02\x1cD\x1c\xfa\x02\x02\xcc\x01\x04\x02\x1f\x040\\4\x04\x0e\x02\x0c\n\x06\x02\x10\"\x16\x04\x10\x06\x14+\x10\x06\x12\x10\x18\x16\x04\x10\n \x04\x10\x14\x10\x16\x10\x06v\x10\x04\x10\x06\x04\x02!\x06\x10\x02\x08\x02\x18\x04\x06\n \x02\x10x\x04\x98\x01\"\xde/\x04\x04\x0b\x0e\\\x04B\x14\x1a\x04\x02\x13\x04(\x04\x02\x120\x02\x08\x02\n\x04\x02\x04\x08\x1b\"\x02\x18.\xc7c\xce\x02\xf2\x03\x02*\x0e0\x04\x18\x04\x04\x02\t\xde\x02\x04\xce\x02\xd4\x01\x04\x04\x02\r\x04\x02\x16P0 P\x04\x02\x078\x1a\x10\x0e\x0c\x02\x0b\x040\x02\n6\x06\x04\x02+\xbf\x15\x04\x94\x02\xd2\x01\x1e(\x0c\x02\x0c\x1e6\x02\x0e\x06\x0c\"\x06\x02\x1c\xae\x01\x024\x04\x02/\n\x84\x01\x02\x06.\x02\x08\x02\x92\x05\x06\x02\x1a\xb4\x01f\x10\x02\"\x02L\x12\n\x16\x02\x04\x04\x02\x112\nJ2\x062\x04\x06\xb4\x08\x08\x02\x01 \x04\x02\x01\x08\x06\x02\x01\n\x06\x02\x01\x08\x04\x02\x1f\x16\x1c\xf0\x01\x08\x04\x08\xc6\x07\x06\xfe\x02\x08\x04\x08\xec\x03\x02\x1a\"\x04\x06\x05\xb0\x01\x02\xc0\x0f\x0c\x02\x01\x06\x04\x02\x01\x1a\x04\x06\t\x02\x16\x02\n\x18\x04\x04\x1d\\\x04\x02D\x04\x02H\x02\x06\x02\n\x02$\x06\x08\x04\x06\x0b\x02\x16\x02\x0e\x18\x0c\x04\x02\x13\x10\n\x02\x08\x1cD\n.\x06n\x06\x02\x01\x06\x04\x02)\x06\x1a\x06\x02\x16\x02\n\x18\x06:\x0c\x02\x1a\x06\x04\x0e$\x1a\x068\x88\n\x04\x04\x06\x02!\x06\x02\x06\x1e\x02\x12\x04\x0c\x02\x066\x04\x02\x0c\x9c\x01\x02\x94\x02\x04\x02\x03\xb4\x02\xa2V\x04\n\'b\x02\x1a\x02\x95\xb2\x01\"l\"lJ\x02\xb9\x02\x04\x06\x02\x08\x02\x06\x04\x08\x06\x02\x0f\x109\x04\"\x06\x04\x12\x04\x08\x02\x11\x7f\x04 \x06\x02\x12\x04,P\n\x04\x05\x02f\x16\n\x04\x05\x02\x08\x1a\x04\x02\x04\x04\x11\x10\x02\x18d\x18 \x02\nd\x04\x1a\x06\x02\r\x18\x0e\x18\x08\xf2\x02\x06j\x04\x02\x05\x12\x04N\x04\x045\x10\x08$\xd7\x0b\xa8\x02\x02\xa8\x02\x1e\x18D\x02n\x0e<\x1ar\x98\x03\xd4\x03\x02\x06\x14\x02\x04\x02\n\x04\xa8\x01\x04\x04\x1f\x02\xc0\x01\x14 \x06\x0c\x0e\x0c\x02r\x06\x1a6f\x02>\x04\x02c\x04\x0c\x08\x04\x94\x02\x8c\x01\x06(TX\x06VNzD\x18ZN\xde\x01h&B&H\x8e\x01,^X`\xce\x01J\xa6\x01zH\x18\nh\xcc\x01n\xa6\x01\xde\x01l&B\x08(,8\x04J\x04\x02\x1b\x88\x01. Z\x10 \x9a\x01$8dZB $\x04\x02\x19\x1e\x16\x04\x0eD\x10\x0e\xa2\x01Vh\\\x82\x01\xa2\x01\x04\x02!\x060\x16\x08\xd0\x01\x02\x06\x02\x10\x0c\xce\x02\n\xa8\x02\xd2\x07\x8c\x04\xd4H\x06\x04\x04/\x02d\x14.6\x04\x1e\x12\x02\x06\xe0\xf8\x01\x04\x02\x0e\x02\x06.Jn\x06\x0c\x02\x04\x9a\x02\x06\x02\x11\xd8\n\n\x82\x04\x08\x926\xb2I\x02\x04\xbf\xae\x04\x0e\x04\x07~\x04F\x18\x04\x08\t\x04\xf2\n\x1c\x06\xc6\x02\n\x04\x1f&,H\x02r\x04\x0e\x14\x04\x10\x02p\x04\n\x04\xfe\x01\x06\x04\x0bV \x04\x14\x04\"\x04\x04\x01\xa4\x08\x1a\x04\x03\x14\x08\x04\"\x01\x0e\x04\x06\x0b\x04\x14\x1a\x0e\x02\x0c\x06\x02\r\x0c\n\x0c\x02\x06\x04\x08\x06\x02\x04\x04\x01\x10\x04\x06\x05\x14\x1e\x04\x06\x02\x07\x04\x06\x02\x0c\x04\n\x17\x02\n\x0c\x02\x04\x02\x1a\x02B\"\x08\x1c\x04\x02\x07\x14\x0c\x12\x04\x04\x0e\x1b\x08\x16\x1c,\x8a\x01\x04,\x12\x1cB\x0e\x10\x12\x10\x06\x02\x01\n\x04\x02\x0f\x04\x08\x02\x04\x02\x18\x0c\n\x04\x04\x08\x02?\"\x04\n\x12\x04\x02:\x04\x02L\x04l\x04\x14\x04H\x04\x86\x01\x04\xa2\x01\x04.\x04V\x04d\x04b\x04^\x04@\x04\x04\x13F\x04\"\x04H\x04:\x04X\x04\x04\x02\x13\x06\x0e\x18\x16D\x02\xa2\x08\x04\xc0\x01*\x04\x02\x01\n\x04\x10\x11\x0c\x02\x14\"\x1e\x1aL\x1c\"\x04\x02\t\x12\n\x06\x04&\x04\x02\x03\x1e\x06\x04\x02\x0f\x1c\x06\x1a\x02\x06\x024@\x04\x02\t\x12\x02\x08D\x02\x0c\x04\x05\x06\x04\x10\x04\x02\x01\x04\x04\x02\x05\x06\n.\x06\x02\x05\x06\x02\x0e\x04\x02\x05\x06\x02\x04\x06\x02\x0b\x0e\"\x02\x04\x1a\x04\x04\x02\x07\x06\x0c\x10\x06\x04\x02\x13\x0e\x02D\x08\x02$\x02\x08\x0c\x04\x04\x1a\x01\x02\x04(\x04\x02\x05\x8e\x01\x0cz\x04\x02\x07\xdfM\x02\xaa\x01 \x04\x02\x0f\x1a$\x10\x02\xc2\x01\x92\x01\x88\x01\xb6\x01\x04\x04\x15\x02f\x02\nfV\x02\x08\x04\x108\x04\x02\x01\x9e\x02\x04\x02\x05\xc8\x05\x0c\x08\x04\x02\x1b\x8a\x02\xa4\x03\x02\x04\xb0\x05\x04\x0e\x0c\xea\x01`\\`\xea\x01\x02\n\x04\x0c\x02\x08\x04\x07\x02\x04\x02\x06\x04\x02\x15@\x02\x04\x08. \x18\x02\xc3\x18\x02\x1c\x04\x02\x1d\x1c\x04\x06\x1e\x02\x06\x02\x04\x0e\x1a\x12\x02F\x04\x02\x04\x08\x06\x02\x01\x16\x04\x02\t\xcc\x01\xec\x08\x02\xe6>\x04\x04\n+\x94\x0c\x04\xa4\x01\x0e\xefe\x04\x18\x04\"x\x02\xde\x02\"\x18`\x02\x06\x02\x94\x03\x02\x040\x04\x02\x03\nD\x06\x02\x05\x18\x02`\x04\x02;\x0c\x088\x02\xf6\x05\x02\n\x04J\x18\x04d\x04\x18\x04\x08\x02,\x04\x8c\x07\x04\x8d\x1b\x04\x02\x96\x04\x04\xbc\x02\x02\xb8\x02\xb6\x01\x04\x02\x01\xc6\x01\x04\x02\x01\xbe\x02\x04\x02\x1b\xc2\x05\xba\x02\xd6\x06\xc2\x05\xd6\x06L\xb4\x02B\x02r\x02\xd6\x06\x02\xe8\x0b\x0c\x04\x01\x06\x04\x04\x01\xe8\x0b&\x04\x11f\x02\x98\x01H\x04\x0c\x0e2\x0e\x04\x04\x03B\xde\x03\x04\x04\x01\x02\x04\x04M\x02\x06\x04\x02\x92\x01\x04\x02\x048\x04P\x04\\\x04\n\x04b\x04R\x04~\x04H\x04\x18\x04b\x04R\x04\xe2\x01\x04l\x04&\x04B\x04\"\x06\x04#\x02B\x08\x04\x02\xd0\x01\xde\x13H\x0e\x8c\x17\x02\x14d\x02\xae\x03\xd6\x06\xc8\x04\xa8I\x08\x04\x05\n\x08\n\x04\x04\x07\xde\x03\x06\x02\x12\x04\x02\r\x04\x06T\x1c\x16\x06H\xa6\x02\x04\x13\xa8\x03:\x02\x10<\xe2\x01\xb7\xf8\x01\x04&\x02\x06\x04\x1b\n\x02\n\x0c\x02\x06\x02\x08\x0c:\x10\x08\x1a\x04\x04\x02\x0f\x0e\x02\n\x8c\x01\x04\x02\n\x02\x04\x06\x05\x08\x04\x02\x04\x04/\x16\x04\x10\x04\x106@\x04\x10\x04\x10v\x10\x04\x10\x06@\x04\x02\x04\x10\x04\x10\x04\x04\x10\x15\x16\x02* \x04x>\x16(\x02\x04\x04x\x04\x04\x01\x10\x04\x04\x07\x10F\x04\x10\x08\x14)\x04\x10>\x16\x04\x10\x02\x0eV\x12\x04z\x0c\x10\x14\x04\x9e\x02\xc1\x10\n\x04\x14\x04\x02\x01:\x04\x02C\x18< \x04\x02\xdb\x04\x16\x0c\x0e\x08\x14\x0c\x0e\x02\x1c\x10\x0e\x02\x0e\x08\x04<\xf5\x01\x03\x04(\x02D\x0c\"\x04\x02\x0c\x14\x04\x02\t\x0c\x14\x02l\x12\x04\x02\x01\n\x06\x04\t\x02\x1e\x08\x0e\x0c\x04\x04\x05.(\x04\x04\x06\x05\x02$\"\x04\x04\x05\x02\x08\x06\x04 \x04\x02\x0b\x04\x08\x0c\x16\x04\x02\x04\x0c\x070\x02\x0e\x06\x04\x127\x06\x04\x99\x07\xc2\x0b\x08\x8e\x01\x10:0\x02\x10\x02Z\"\x82\x01\x04\xdc\xbb\x046F\x02\x04\x02\x04D\xc1\xc9\x04\n\x04\n\x04\x02\x03\xa3\x01\x04\x08\x02\x0b\x0c\x04\x06\x04\x1e\x04\x04\x02\x03\x06\x04\x04\x0c\t\x14\x04(\n\x0e\x04\x02\x04\x06\x13\x04\n\x02\x08\x04\n\x08\x14\x02\"\x10\x04!\x10\x04\x06\x02\x06\x02\x08\"$\x0c\x0e&\x08\x02\x0c\x02\x12\x04\x10\r\x04\x02\x0c\n\x1a\x10\x04\x04\x02\x0f\x16\x08\x1e\x04\x06\x0e\x02:\x04\x02\x04\n\x03 \x04\x04\x02\t\x08\n\x02 \x08\x06\x0c\x15\x1a\x18\x04\x16\x08\x10\n\x10\x08\n\x04\x04\x06\x05$\x04\x06\x06\x04\t\x06\x04\x02\x0c\x02\x14\x04\x04\x0c\x04\x06\x04\x0c\t\x02\x1a\x10\x04\x16\x04\x08\x03\x02\x1a\x06\x02\x04\x04\x05\x02\x04\xc9\x08\x1e\x08\x15\xe7\x05\x04\x02\x11\x04\x06\x02\x06\x02\x06\x04\x08\x02\x04\x1a3 B>\x0e6\x06\x18\xdcG\x8a\x01\x82\x01\xd0\x03\x1a\x02>@\x06\x0c\"0\x14\x06\xe0\x07\x92X\x04\x02\x1c\x04\x02\x0b\x04\x02\x1c>\x04\xdb\xb3\x01\x10\x02\x0b\x16\x14\x04\xc64\x08(\x04\x04\x01\xc0\x04\x04\x04\x04\x02\t\xc0\x04\x9c\x05$\xc5B\x02\x04\x04\x19\x02\x04\x028\x04\x02\xee\r\x02\n\x08\n\x08\n\x04\x04\x04\x02\x04\x04\x0b\n\x02\x80\x01\x9c\x01\xce\x0b\x02\x0c\x04\x04\x02\x07\x0e\n&\x08\x04\x1c\t\x1e\x04\"\x02\x0c\x04\x04\x01\x02\x04\x04\x06\x02\x04\x04\x034:\x04\x02\t&:\x066\x08\x04\x04\x04\x02\x01\x82\x01\x06\x04\r\x02\x04t\x04\x0262\x04\x1c\x13\"\x02\x06\x04($\x0c\n\x02\x0e\x06\x04\x04\x02\x01\x04\x06\x02\x05\x04\x02\x0c\x04\x02\x13\x0c\x02\xfe\xd1\x02\x1e\x91\xfa\x02\x06\x04\x14\x08\x04\x04\x02\x01\x06\x04\x0c#\x16\x02:*\x02\x1a\x06\x16 4*^\x1a\x08l^V\x06\x04\x04\x03\"\x04\x04\n\r\x1aP\x02\nV\x0e<\x04\x08\x13\n\x12 \x08\x02\x14\x06\x02\x0cF\x04\x04#\xab\x08\x04\x02\" \x02\xdc\x02\x04\x92\x08\x04\x10\x04\x14\x12\x04\x10\x0c\x04\x06\x02\x0f $\x08\x0c&\x14\x12\x02\x06\x04\x05\n\x02\x14\x04$\x03\x06\x04\x04\x02;\n , \x14\x04\x02 0 0\x02\xce\x01\x02\x04\x024\x02\xbe\'\x06\xb6\x05\n\x08\n\x08\n\x08\n\x08\n\x04\x04\x08\x02\x1d\x0e\x0c\"\x10\xce\x0c\"\x10\x02\x9a\x01\x02\x9c\x17\"\x0e\x08V\x04\x02\x110\x1c\x02\x0c\x0e\x04\x0e\xea\t\xae1\x04\n\x04\x0c\x03\x1e\x04\x04\x02\t\x04\x14\x16\x04.\x06\x02\x01\xe3\xa7\x01\x04\x02\x01\x8a\x02\x04\x02\x11\x140z\x8e\x01\xa8\x02\x08\xc8\x08\x08N\x06\x02\x03\"4\x04\x02\x19\x08\x02(\x02\x10\x04\x02\x0e&\x08\x02\x12 \x04\x02\x15\x1c(2\x06$:\x04\x02\x10\x02&\x04\x02\x0b$:\x04\x10\x144\x04\x04\x03\x02\x9c\x01\x04\x04\x01\x80\x01\x04\x04\xb9\x02\x02\x8e\x01\x04\x8c\x01\x04\x06\x044\x04L\x044\x04V\x04\x02\x04^\x04N\x04z\x04\x1c\x08$\x04.\x04\x02\x04h\x04l\x04h\x04J\x042(0\x04z\x04H\x04&\x04\x14\x04\x0e\x04^\x04N\x04\xde\x01\x04@\x08$\x04.\x04\x02\x04h\x04N(X\x04n\x042(0\x04\xde\x01\x04l\x04&\x04\"\x04>\x04\x02\x04B\x04\x06\x04$\x04.\x04(\x046\x04\x02\x04\x02\x044(\\\x04*\x04V\x04\x0c\x044(j\x048\x04`\x04V\x04$\x04>\x04 \x04\x02\x04\"\x04 \x04\x18\x04\x02\x04\x02\x10\x04D\x04\x0c\x04\x12\x04\xa2\x01\x04\x1e(\x0c\x04\x04\x0b(@\x04$(\x0c\x04\x04\x07(Z\x04\x1e\x06(\x07\x08\x04@\x04\x06\x02\r\x1c(>\x0c\x18(\x06\x04\x02\x01>\x06\x02\x03(\x0c\x04\x02\x01\x06\x04\x02+$ \x18:\x14\x02\x04\x08X\x08\xf4\x02\x08\xc2\x01\x08f(\xc8\x02\x02\n\x12\x02,\x06\x02\x83\x01\"\x140,0\n\xe0\x06\\\xfc\x02B6\\4$>h\xfc\x02`\xc4\x01:P\x8e\x01\xa8\x01\x8a\x01L>\xd8\t\x18(\x92\x01\x06N\"\x06\x86\x01\x18\x8a\x01\x14\x18\xba\x02&6TpL\x1c\x18`\x1c\xa4\x03\x1a\x18.\x0e\x18v\x8a\x02&\\\xf8\x01r\x1a\x18<\x18\xd6\x03\x04\x18\rh\xe6\x01\x1cX&\xee\x01N\x04\x18\'\xba\x05\xa0\x03\xca\x01\xe2\x01\xac\x022\x1aR\xe4\x01\x80\x03r\x86\x01 \x1c:\x04t\x84\x01\xd4\x04\x9e\x01.\x0c\x0f\x10&\x10&\x10&\x10&\x046\x07\x10&\x10&\x046\x17\x16$\x16$\x16$\x16$\x16$\x16$\x12\x04[\x80\x01.*0\x02X\x02(\x10\x04H\x04\x10\x04\x16\x04\xa6\x01\x04\n&<\x044&,\x04\n$<\x044$\x04&,\x04\n&:$8\x04H\x02\x04\x08\x04L!\x140<:$N\x0c\x10\x02\x1c\x06\x02\x12\x04\x16\x12\x02\x04\x06\t\x92\x03\x18$6\x06\x04\x04\x01(\x04\x02S4\x02\x10\x04BJ\x02\x04J\x02\xe1\xda\x01&\x04\x12&\x04\x12&\x04\x0c&\x04\x0c&\x04\x0c&\x04\x12&\x04\xa8Q\xb8\x01\xe2\x17 \x16\x04\n2.$\xa1:\x04\x06\x0b(\x12\xac\x02\x04\x02\x14\x06\x04\xb7\x01\x02\"\x14\x04\x08\x06\n\xee\x01\"\x04\nP\nV\xd8\x01\xee\x01\x10\x08\x10\x08\x10\x08\n\x14\x1e\x14\x1e\x14\x1e\x14\x1e@\xb6\x02\xa2\x01\x1a \x18\x06\x02\x0e \x1c\x0e\x04\"J\x1e\x16\xb6\x02\xd4\x04\xb0\x0c&\x04\x12&\x04\x0c&\x04\x0c&\x04\x0c&\x04\x12$\x02\x04\x12&\x04\x0c&\x04\xdf_\n\x04\xea\x01\x08\x16\x18.B\x06\xc1\x02\x04\x02\xdcX\x04(\x02\x08\x04\x1b\xb6\x02N\x04\x12\x04B\x04\x0c\x04\x9c\x01\x04\x02$\x120\x04\x01\xb2\x0c\x04\x04_\x08\x04N\x04\x1e\x04d\x04J\x040\x04\x06\x08\x04\x0c\x04h\x04\"\x04 \x04&\x04N\x044\x04B\x04(\x04\x06\x04\n\x04N\x04\x1e\x04F\x04\"\x04V\x046\x06\x04\x05H\x06$\x04\x02\x0f\n\x04\x06\x0468\x02\xb8;\x04\x02\x056\x02\x04\x04\x06\t \n\x02$\xac\t\x04\x02-.\x1c\x90\x01\xb0\x04&\x02\x1e\xa4\x03\xd0\x01\xc8\x02(\xac\x05\x1alF$\x06\x02v\x02$\x02>\x04\x1c\t\x02V\x02@\x08\x06(#\x1eZ(\x04\x0c($@(\x04\x0c(\x1e\xa2\x01\x12\x0cD\x10\x06\x02%\x18 \"\x02 >$V`8j(4\x0cV*\\(4\x04\x02m6(.$\x06B\x02>\"&l\xde\x010(2nX(Nh\x02.l\xde\x01N^\x0e\x14&Hz0(2Jhlh\x02.HzN^\x02V4L4\x06\x8c\x01\x8e\x01\xfe\x01\x02\xf0\r\xa6\x01\x04+\x10\x04<\x04\x02\x04\x06\"\x18\x04\x0c\x04\x89\x96\x02\x04\n\x08\n\x06\x12\x06f\x02\x06\x08\x03\x06\x0e\x08\x04\x06\x02\x0bF\x0e\x02\x1c\x0c\x04\x04\x02\x03\x06\x04\x06\x02\x07\x04\x96\x01\x06\x10\x04\x02\x01\x04\x08\x02\x04\n\x11&\x06\x04\x06\x04\n\x06\"\x02\x04\x04\r&\n\x02\xcc\x07\x04\x02\x1e\x04\x04#\xae\x04\x06\x02\x04\x02\xa8\x05\x02\x90\x01\x86\x01\x06\x04\x02z\x06\x84\x01\x06\x02\xe4\x02\x04\x04\x03\x12\x10\x06\x04=\x02\xea\x05&\"\xe8\x03\x08\x04\x02\x04\x10\x08\x12\x02\x92\x07\x12\x14b$l\x0c\x16\xc6\x02\xb4\x03$\x8e\x08\"\x1c\xae\x03\x02\x08\xc4\x01\x04\x02\x13&\x0e\x0c\x04\x02\x04 \x02\x06\x08\x04\x02\x05\x82\x01\x02\xdc\x0b\x06\x02\x15\x04\x02\x1c\x02\xb6\x02\xfaI\x04\xfaI\x04\xf4I\x04\x04\x08\x01\x04\x04\n\x05\x06\x04\xa2\x01\x04\x02\x1b\n\x08\x0e\x02\x1eZ\x08\x0e\x84:\x0e\x06\x9a\r\xb4\x02\xe2I\x04\x02\x04\x04\x0f\x16\x06\x048\x10\x0e\n\x1c\x04\x04\x0b\x02\xfc\xdc\x01\x08\xd0\x01\x06\x04\x04\x06\r\x02L\x04\x02\xb0\x04\x086\x04\x02\x11\x0c\xe9\x81\x05\"*\"(\x1c(\x1c0(\x03\xe8\x04\x02\x04\x04\x13\x022\x12\x04\x022\x1e\x02\x04\xff?\x0c\x02\x01\x04\x04\x02\x0b\xe8\x16\xc2\x01\x02\xda\t\x02\x98*\x04\x02\x01\xba\x04\x06\x02\x0b0\x02\x90\x01\x02\xc0\x05\xe8W\x04\x02\x01\x04\x04\x02\x01\x94O\x06\x02\x07\xa2\x01\x02\xaa\x07\xe8W\x10\x02\x01\x04\x04\x02\x01\x9c\x15\x06\x02\x13\xa2\x01\x02\xbe\n\x02\xca\x07\x02\xac\'\x02\xe8\x07\xe8W\x04\x02\x01\x04\x04\x02\x01\xac\x01\x06\x02\x07l\x02\xc8U\xe8W\x04\x02\x07\xd6\x02\x02\x90U\xe6W\x16\x02\x01\xac\x01\x04\x02\x05\xa6\x01\x02\xc4\x12\x04\x02\x0ff\x02\x90\x01\x02\xb4\x10\x02\x980\xe6W\x06\x02\x03\xdd\x9b\x08\xe1\x02\x0e\x04\x010\x04\x02\t\x14\nF\x04\x16\x040\t2(\x0e\x0c\x0e\x06\x04\x04\x02\x06\x047.\x04\x10\x16\x02@\x02\"\n\x02F\n(\x04\x02\x0e\x04\x18\x02(0z\x0e\n(\xa6\x01*\\\x04\x02\x03\x0e\x04\x04\x88\x02\x13\x08\x02\x0e\x04\x1a\x02\x1e\x0c\x02\n\x04\x02\x05\x0e\nf\x04\x1a\r\\\x0e\x04\xb4\x01^\x0e\x06\x04\x04\x1f\n\x04&\x1c\x0e\x10\n\x02\x10\x0c\n\x04\">\x140\x06\x04\x07\x0e\x06P\n\x04\x02\x11\\\x0e\x08\n\x1c\x0e\x10\x1a.\x04\x04\r\n*R\x10,\x02(\x04\x04\r\n\x02(\x04x\x08\x04\x06\x02\x03&0\x04\x02+\n\x1c*\x02\x10&\x1c\xa6\x02\xca\x01\x04v\xfa\x0e\x08\x04\xfa\x0e\x04\xe4\x0e\x08 \n\x02 \x04\x06\x05\x10&\x1a\x04\x02\x01\x1a\x06\x02\x05\x06\x10\x04\x04\x08\x01\x0c\x04\x02\x03\x08\x04\x04\x08\x0f\x0c\x02\x10\x04\x02\x16\x02<\x04\x02\x0b&\x12\x02\x10\x04d\x04\x1a\x0b\x12\x04\x1e\x04\x08\xa8\x02\x08\x04\x01\x16\x04\x04\x03\x0e\x0c\x08\x02\x11\xbe\x01P\x1e\x02\x04\x0c\x02\"\x04\x04\x0e\t.\x062\x1c\x16\x08\x04\x03b\x02\x08\x04\x0b\x02\x04\x0c&\xd2\x01\x0c\x04\x02\x05\x1c\x0c\x0e\x06\x04\x04\x02\x01\x14\x06\x04\x03\x02 \x04\x02\x03\x0c\x18\x04\x02\x06\x0c5\x18\n\x02\x04\x02\x04\x08\x0c\x12\x04\x1aT\x04\x16\x1c\x16\x1c\x16\x1c\x16 \x08\x06\x04\x10\x0c\x96\x040\x04\x01T\x06\x04\x0f\x02\x16\x1a\x06\x166\n\x08\x0c\x04\x11>\x1c\x04L\x02\x04\x02\x06 \x04\x02\x1b\xdb=\x06\x04\x18\x02\x9a\x01 ^L^\x1a\x06\"x\x04\n\t\x1c\x06x\x12\x10\x06\x04\x11\x14\x10\x0e\n\x1c\n\x04\x0e\x10\x04\x02\r\x10\x0c\x02\x08\x1a\x02\n\x04\x0c\x03\x02V\x06\x04\x07\n\x12&\x12\x04\x0c\x0b\x02\x1a\x08\x02\x1c\x08\x06\x04\x07\n\x04\x02\x06\x04\x02\x0bd\x02$\"\x04\"\x04\x02\x11\x08\x18\x02\x1c\x0c\x1c\x12 \x08\x04\x04#\x06\x02\x0c\x08\x16\x08\x16\x08\x16\x08\x16\x08\x02\x08\x1a\x02\x12\x1a\x04\x02\x01\x04\x04\x02\x13\x16\xfc\x8d\x01\x04\x02\x06\n\x02\x81\xd0\x01\x0c\x04\x06\x02\x07\x0e\x04\x02\x08\x04\x04\x04\x02\x01(\x06\x02\x03}\x04\x04\x02\r*\x02\xdc\x01\x04\x02\xea\x06\x0c\x04\x04\x15\x10\x02\xfc\x05\xba\x02\xf0\x02\xcb\x14\"\x02\x06\x0e\x04\x06\x02\x03\n\x1c\x04\x04\x03\x08\x8a\x0c\x06\x02\t\x08\x02\x0c\x040\x04\x02\x01\x14\x04\x04)\xf1\r($($($($(&$($($($($,\x04$\x04L\x1d\x04( \x02\"\x02\xe2\x16<\x08\x02\x04\x06\x0c(\x18\x04\x0e\x04\x1a\r\x0e\xf4\x05:8\x1c\x148\x04\x12\x11\x02\x12$\x02\x04\"\x02\x046F,\x0b\xd6\n\x06\x04\xc75\x04\n\x04\x02\x11\x06\x02\x0c\n\x02\x08\x02\x0c\x04\x08\x02\x01\n\x04\x02\x01\n\x06\x02\x01\x1c\x04\x02\x05\x08\x0c\x08\x08\x02\x07\xc2\x01\x04L\x0c\x04\x02\x03\x9e\x10\x1a\x04\x02?\xfe\x1b(<\x1e\x1a\x14\xa8\x01\x1e\x8e\x01\xca\x02\xe6\x014\x02\x0c\x02l\nJ\x16<\x1e\x14\x02v\x08\x04\x08.\x08\x16<\n\x04\x02%\n\x02 \x04\"\x16\x1cV&\x02\x12\x02D\x02\x0c\x02\x94\x01\x08\xa0\x01\x06\x02\x11\xa8\x02\x12\x1c.\n\x0e2r\n\x04\x02o\x12\x02\x04\x02\x0c\x02\xb6\x02\x02\x0c\x02\xa4\x03\x02\x12\x02R\x02\x0c\x02\xf6\x05\x02\x0c\x02t\x02\x0c\x02:\x02\x12\x02t\x02\x12\x02\x04\x02\x0c\x02:\x02\x0c\x02:\x02\x12\x02B\x02\xe8\x02\n\x06\x16\xee\x01\x02\x0c\xe4\x01\x06\x02\t<\x04\x14\x02\x06\n\x02\x01\x10\x04\x02\x05:\x02\xc6\x05\x04\x02\x05\n \x0c\x04\x02\x13(\x0c\x02\x12\x08.P\x04\xb6\x02\xecW\x0c\x02\x07\xd5\xb9\x01\x04\x0c\x02\x04\x0e\x07\n\x02\x06T\x04\x04\x07\x06\n\x04,\x04\x04%\x0e\x0c\n\x04\xe8\x03 \x0c\x12\x0e\x0c\x14\x02\n\x02\x18\x08\x04$&\n\x04\x01\x06\x04\x04\x05\x12\x02\xf6\x02\x04\x04;\x02\x04(\x04\x06\n\x04z\x90\x01\xb6\x0b\x1e\x02\"\x1e\x04\x02$\xfe\x17\x06\xaa\x03\xe4\x02\"\x10\x0e\n\x0e\x12:\x02\x06\x06\x02\x05\x10\xa4\x01\x02\x08\n\x01\xae\x01\x06\x04\x01\x02\x04\x04\x13\x02\x08.\x0e\x1c\x1a\x04\x06\x04\x98\x01\x04\x02\x03\x0c\x94\x01\x04\x02\x05\x08\x10\x16\x06\x02\x07\x96\x01fR\x94\x01\x06\x02\r\x08\x02\x06\x1a\x0e&\x08\x04\n\x07\x0e\x0c\x14\x02\x04\x04\x03\x06\x02\x04\x06\x11\x04\x1e\x14\x9e\x01\x02\n\x04\x9c\x01\x02\x04\x04\x03\x02\x9c\x01\x04\x02\x0f\x04\x02\x06\x04\x06\x02\x06\x18\x0c\x02\x11\x06.\x02,(\x02\x04\x12\x1c\x04\x04+\x84\x01\x084\x026\x02\xe9O\xde\xd1\x06\xc6\xd6\x01,@\x04\xcd\xb2\x01\xf5\x88\x07\xd4\x05\xd0\x05\xf2\xd5\x01\x06\x04\n\x04\x08\x06\x04\x04\x06\x0b\xa2\xb1\x01\x04\x06\x02\xce$\xfe\xd5\x01\x04\x04\x01\n\x06\x06\r\x04\x02\x10\xa2\xb1\x01\x10\xbaI\xaa\xb1\x01\x04\x0c\x04\x0e\t \nH\x04\xf9\xbd\x08\x06\xf8\x01?\xf0\x01\xed\x01\xcc\x02#,\r\t+\xed\x01\x82\x04@\x06.DZ\xa1\x0c\xb2\x01=Xz\x05\x1e(\x12&,-\xb2\x02$\xca\x01N\x04\x04\x06\x03\x02\x06\x06\x02\x15\x84\x02\x02\x04\x02$\x06F\x02X\x02$\x04\x08\x81\x01\x16\xed\x0c\x02|\x1c\xc4\x01\x02&\x02\x10\x02P\x027\xe6\x04\xf1\x07\xf6\x07\xd0\x01\x9f\x01\xcc\x01\x95\t\xbe\t\x80\x01bQ4\x15)n\xc3\x03>\xd9\x02\xdc\x02\x81\t\xc4\x0b\\\xae\x02\xab\x02.\xda\x034.\xcb\x02\x0cE\x84\x07\xcd\x03\xa8\x01\x03\xa1\x01\x0c\x80\x02\x14P@\x0c\x9d\x02\xf1\x02\xc4,\x82\x1163\x8a\x02\x06\x03\x04\x08?\x06\x1c\x14-\x03>\x10\x01\xef\x11\xc0\x0f\x03\x08\x9e\x01a\xf5H\x93\x04\x06\x03\x08\xd4\x02\xb1\x02\xb4\x02z\n\x06\x03\x08\xc0\x06\x0e\x0b\x10\xc2\x03\x06\x0b\x07\xf5\x02\xd4\x04\xab\x04\xf6\x02\x06\x0b\x1d\xb7\x02f@\xa3\x0b(\x94\x0b\xa4\x04\x93\x02\x1d \x96\x02\x95\x04\xbe\x01\xab\x01~\x06\x0bgQ\xe8\x01\xa1\t\xf4\x01lg\xec\t\x08\x01)\x8b\x01\xbc\x01\xf5\tc\xcf\x02\n\x06\x03\x08\xcc\x06\x9f\x06\x08\x96\x0b\xbd\x05\xc4\x05\xe9\n\x80\x0b\xaf\x03\xdf\x05\x80\t\xe9\x02\xf4\x02\xd5\x08\xd6\x06\xfd\x05\xe4\x01\x1e\x0b\x0f\x903\x99,\x04\xcf\x06\xea\x07\xe0\x06\xfb\x07\xad\x112\x01\x98=\xd7>\x07\x04\x06\x0b\x02\x06\x02\x0c\x16*\x06\x02\x07\x16\x02@\xe2\x03\x08\x04\x03\xf0\x03\x06\x06\"\x05\x04\x02\x1a\x04\x02\x03\x06\x02\x0c\x04\x07\x02\x06\x02\x12\x06\x02\x04\x04\t\x12\x10\x0c\x04\x0c\x04\x02\t\x0c\x02\x04\x02\x12\x0c\x02\x19nDBF\x14\x18\x8a\x01\x12\x02\x0c\x02&(\x04\x14\x05\x0e\x04$\x08\x04\x05\x02\x048\x0e\x04\x01\x06\x0c\x02\x03&\x04\x04\x02\x08\x04\x15\x10\x02\x04\x02\x04\x02\x04\x02\x06\x02\n\x08\x06\x05\x02\"\x02\x04\x1a\x03\xea+d\x04\x02\r\xf5=\x042\x02\x86\x03\x04\n\x06\x08\r\x02\x08`\x88\x01\x14(\x0c\x04\x12\x0b 20h\x14\x0e\x04\x02\x0b\nJ\n\x04\x12\x04\x08\x02\x06\x04\x13*&\xd6\x01\x10\x04\x80\x02\x04.\x02\n\x0e\x04\x01\x02\x04\x04\x15\x0c8j\x04n\x022\x10L\x02\x06\x06\x02\x0f\xa5\x15\x06\x04\x06\x04\x08\n\x12\n\x04\x0f\x026\x0c\x02\x06<\x18\x0e\x08\x02\x1f\x08$\x04\x02H\x02\x0c\x02\x08\x04\x86\x07\x10\x084$\x02\x12\x04\x03\x1a\x06\x04$\x13\x1c$\x1c$\x1c\x0e6\x06\x04\x85\x0e\x06\x02\x07\x08\n\x02\x06\x04\x02\x1b\x10\x1c\x04\x02\x06\x04\x12\x02\x04V*(\x08\x04\n\x02\t\x0e\x04\x10(\x02\x04(\x04\x1e\x05\x08\x06\x08\x04\x04\x03\n\x0c\x04\x02\x05\x06\nH\x08\x02\rL\x02\x0e\x02\x06\x04\n\x06\x04\x08\x02\x05\x0e\x06\x04\x04\x02\x0b\x06\x14\x02\x06\x0c\x04\x18\x02\x01\x04\x04\x02\x07H\x02\x08\x04\x04\x02\x03\x0c\n\x04\x02\x03\x08\x10\x04\x04\r\x06\x16\x02\x06\x02\n\x04\x04\x02\x03\x06\x04\x04\x02\t\x10.\x08\x04\xbd\t\xd4\x01\x04\t\x06\xc25\xef8\x04\x86\t\x0e\x04\x19\n\x04\x02\x04\x8e\x01\x02\xd2\x05\x02\xa0\x03\xb0\x01\xd6\x05\xc1\x1a\x04\x06\x08\x05\x06\x02\x08\x04\x06\x05\x10\n\x14\x04\x02\x0f\n\x02\x06*\x02L\x08V\x04\x02\x01\x06\x04\x0e\x01\x04\x04\x02\x04\x04\r\x02(\x0e\x02\x04\x08\x02\x06\x04\x17\x06 \"\x082\n\x04\x06\x08\x02\x08\xfb\x04\x04\x02\x01 \x04\x04\x0f\x06\xce\x08*\x1e\x12\x1c\x16\x02\x04\x049\x1eb|\x02\xce\x01\x02\x04\x86\x026\x04\x1c\x0c\x1c\x044\x1c\x04t\x04\x02\x04\x02\xf6\x01\x1e\x14\x1c\x0e\x1c\x06\x04\x02\r\x04\x18\x04\xf0\x01\x04>\x04\x06\x02\x13$2\x08\x02$\x14\x02\x04\nF\n\x02\x07$\x06\x02\x0e\x04\x02\x1b\x14\x02<\x04\n4\x02\x04\x02\x12\x02\n\xb6\x12\x88$\x04\x0e9\x02\x04\x1a\x04\x14\x02\x08\n\x0e6\x0e6\x0e6*$\x1c$\x1c4\x044\x04\x18\x10\x16\x10\x08\x06\x04\x04\x0b\xf3W\x04\x06\x04\x1c\x06\x04\x02\x11\x06\x040\x04\x1c\x06\x02\x046\x04\x02+\x04\x14\x1c\x14\x1c\x06\x16\x088\x1c\x02\x1c$\x02\xc8\x01\x1e\x08\x06\x1c\x02\x04\x02\x04\x06=\x0c(\x04\n^H\x1a\x04\x1a\x0e\x04\xa2\x01\n\x04\xe4\x08\x06\x04\x08\x80\x01\x1a\x06\x0c,\x18\x14\x82\x01\x06(\x02\x0c\x18\x04\x02M\x04\xdf\x16\x02 \x02\xe0\x04\x1a\xe8\x0e\x04\x10$\x04 \x02 .\x0e\x1c\xe4\x01\x02\xe4\x01\xa5\x19\x12\n\x12\x08\x12\x04\x02\x04\x08\x04v \x12\x1c\x06\x1c\x04\x04\x02\t\x06\n\x026\x02\x04\x04\r\x08\x1c\x04\x02\xea\x02\x02N\x04\x04\x15\x0c\x1a\x16\x1a\xbc\x05\x02\x16\x88\x01\x08\x02&\x04\x02\x0fL\nP\x04\x06\x02\x82\x01\x0c\x04\x04\x03\x02\x04\x04\x02af\x04\x80\x01\x04\x02\xad\x13\x8e\x01\x04b\x85\x01q\xd2\x01\n\x04\x06T$\x1c$\x1c\x0e\x08\x0e\x08$\x1c \x1a$\x1c$\x1c\x0e\n\x04\x0e\x0cf\x04@\x04\x06$\x0c\x16\x06\x0c\x8c\x01\x1a\x04\x041\x162\x02>@\xef\x06\x04\xab\x04\xd0\x05\x04\xd0\x05\x04 \x16\x04\xe1\x0b>\x02><\x02>\x02<\x02\x04<\x15\xcc\x02\x0c\n.\x0e\x1c\x02\x1c ><\x06\x02\x07\xa9\x08\xd0\x05\x02\x08\x04\x04\x1d\x08\x04\x06\x04@\x0cB\xe4\x01@d\xc8\x01\x04\x08\x04\x08\x04\x02\x1b\x1c4\x0c\x06\x02\x06\x02\x06\x02\xe6\x01\\\x0eL\xbe\x01\x06\x04\r\x16\x02\xc4\xe7\x02\x1e\xc5\xf9\x02\x10\x02\x04\x10\x03\x02\x10\x06\x02\x01\x10\x06\x023\x10\x02\x10\x02\x10\x02\x10\x02\xa7\x01\x02\n\x04\xec\x02\x04\xa6\x02\x046\x04\x02\x06\x1c.\x04\xa0\x01\x04X\x04\x04\t\x1a \x02\x10\x04\x04\x02\x87\x03\x1a\x020\x04\x02b\x04\xae\x01\x04\x8c\x01\x04:\x04$\x04D\x04X\x04J\x04:\x04f\x048\x040\x04\x0e\x04\x9a\x02\x04\"\x04\x1c\x04\x0c\x04\x10\x04<\x04&\x04H\x04&\x04@\x04H\x04\x98\x01\x04\xa4\x01\x04@\x04\xd4\x01\x04$\x04\x10\x04.\x04X\x04\xec\x01\x04\xf0\x01\x04r\x04P\x04\xe4\x02\x04X\x04|\x04\x16\x040\x04\"\x04\x18\x04V\x04\x0c\x04x\x04,\x048\x04\x8a\x01\x04\x1e\x04\x12\x04 \x04\xf8\x01\x04F\x04f\x04p\x04\x02\x06\x0c,\x04\x02\x12\x04B\x04\xdc\x01\x04\x02\x06\x10\x04F\x04 \x04\xac\x01\x04:\x04<\x04\x14\x04\"\x04:\x04\x1e\x04l\x04^\x04\"\x04N\x04\"\x04D\x04`\x04Z\x04*\x04j\x04@\x04*\x04\xfc\x01\x04\x18\x04\xba\x01\x04\x18\x04F\x04J\x04\x92\x01\x04\n\x04\xa8\x01\x04B\x044\x04\x04\x07\x024\x14,\x04\x04!6\x1e\x08\x04\x024\x04&\x04>\x06\x0e\x06\x042\x020\x04\x04\x0b\\B ,2\x02\x04\x0c!\x1c\x02<\x0c\n\xb9;<\x1c\x02\x06\"4\x0424\"\x02\x04\x04\x03V\x1c\x98\x01\x04\x0b\x02\x04\x02\x04\x02 \x04^\t\x02V\x02\x04\xb6\x01\x04\x0c\x11@\x14\x0c\x0e\x06\x1e$lF\x04\n\t\xac\x03\x02^@X\x04\x02M\x14^\x04\x02\x04\xa4\x01\x04\x88\x01\x04\x02\x040\x04\x02\x04\x02\x04\x14\x04@\x04T\x04\x1c*\x046\x04\x02\x04\\\x04\x02\x04.\x04,\x04\x02\x06\x04Y\x96\x02\x04\x1e\x04\x02\x04\x12\x04\x08\x04\x0c\x048\x04\"\x04D\x04\"\x04<\x04\x02\x04>\x04\x94\x01\x04\x02\x04\x9a\x01\x04\x02\x046\x04\xd0\x01\x04 \x04\x0c\x04*\x04\x02\x04\x04\xd3\x01\x02H\x04\x02\x04F\x9c\x01\x04\xec\x01\x04*D\x04L\x04\x02\x04\x02\x04BvBZ\x04T\x04x\x04\x06\x04\x08\x04,\x04\x1e\x04\x14\x04R\x04\x08\x04\x12$>\x04(\x044\x04\x1cj\x04\x1a\x04\x02\x04\x08\x04\x1c\x04\xf4\x01\x04B\x04b\x04\x02\n\x1c (\x02\xcc\x03\\\x10\xd0\x0c\xa6\x01\xd4\x04\xb4E\x0e\x0c*\n6\x04\xae\x01\"\x1e0,<\n\x04\x83\xaf\x01\x04\x02R\x02\x0c\x04P\x02\xf6\xd1\x03\x04\x06\n\x04\t\x1c\x16\x04\x16\x06\x06\x04\x03\n\x1c\x06\x02\x0f@\x08\x04\x1c\x04\x1c\x06\x1a\x06\x02\x05\n\x02\x12\x04\x02\t\x1a\x02\x10&\"\x04\x02\rP\x08\x04\x1c\xc2\x01\x02\xe4\x01\x04\x02\x07\x1c \x04\x12\x04\x02\r$\x02\x10\x02\x1a\x06\n\x04\x02\x03\x1e\xc6\x01\x04\x02I&\x02\x04\x08\x02\n\x18H\x04\x1c\x1a\"\x1c\x06\xe8\x02\x02L\x02\xea\x02\xd8\t\x02\xfc\x036\x80\x01\x14h\x0c\x02(\x0c\x02,\x0c\x02\xf6\x06\x02\xfa\x01\x08\x02\x05\\\x0cb\x04\x02\x03\x1a\x08\x04\x02\x05\x16\x02\x06\x04\x02\x0b\x8c\x01\x02\x0c\x06<b\x04\x02\rt\x02\x98\x01\xbc3\x14\x028\x08\x02!D\x1c\x16\x04\x16\x10\xa0.\x10\x02\x16\x02\x06\x028\x12\xd2\x04\xec3\x04\x04\x05\x14\x02\x16\x04\x02\rH\x04\x10\x04H\x04\x10\x04\x0c\x1b\xf8\x0b\x04\xad\xb3\x05\x04\x0c\x16\"\x16\"\x14\x1c\xc8\x01\x04\x12\x04\x1c\x11\x12\x02\x04\x84\x01\x12*\x04\x02\xcc\x01\n\x04\x15F\x04\x02\n\x02\x08\x12\x02*\x02 \x04\x02\x03\x18 \x04\x02!\x1c\x0c*\x0c\x12\x1c$\x1c\x02\x08\x04L\x06\x04b$\x0e\x06\x04ub\x04|\x04\xd0\x01\x04\x06\x0e8\x028\x06\x08\x04\x1c<\x02\n\x10\x04\x1c\x8e\x01\x02\x1c\x12\xd2\x01\x08 ,\x0c\x14\x1c\x06\x1c\x06\x02\x04\x10\x04\x02 \x04\x028\x04$\x040\x04\x066\x06 2\x04\n\x0c\xc4\x03L\x04\x02\x01B\x04\x04\x11\x16\n\x02\xda\x10\"\x1e\"\x8c\x04\xfa\'\x06\x04\x07\xd3\"\x0464\x04\x02\x05\x06\x044\x04\x02!2\x02,\x02\x06d0\x04\x02\xbc\x02\x06\"\xa2\x01\x02\x08 \x02\x04\x06\x07\xd7A\"\x048\x04\x08\r\x02B\x02\x86\x058\x06\xec(\x06\x02\x05\n\x02\x0e\x06\x02\x11\x14\x12|\x02*\x0e\x02\xd0\x04\xcc5\x04\x02\x17\xcc5\xd25\x02\x04\x02,\x02\x04\x06,\x0c\x08\x04\x04\x0f4\x14\x1e\x06\x04\x06\x10\x0c\x04\x02\x07\x06\x04\x10\x02\x04\x04\x01\x1a\x04\x04\t*\x08\x16\x02\n\x04\x02\x11\"\x06\x02\x14\x08\x14\x02\x08(\x04\x02m\x1e\x18\x04\x1a\x0e\x06\xda\x01\n\x04\x08\n\x06\x08\x04\x02\x06\x04N\x04\x1c\x1a\x04\x06\x04\x06\x14\xd9\xe0\x01h\x14\x1c\x16\x08\x10\x0c\x18>\x02\xc0\x01\x8c\x01\x02\x04\xb1\x04 \x0c\x02\x1c\x98\x01\x04\x02\x04\x9a\x01\x02&\x1e\x0e\x04 \x04\x1e\t \x10 \x06\x18\x04\x02\x07 ,\x12\x04\x04\x08\x13\x1e\x02\x0c\x1c\x04\x02\n\x1a\x16\xf69\x1c\x04\x1b\x06\x04\x02\x044\x02\x04V\x02\x04f\x02\x04F\x04\x02\r\x04\x02\x04\x0c\x08>\x02\x04\x0c\x1b\x06\x02\x16\x02\x04\x08\x06\x040\x04\x14*\x02F\x04\x02\x1d\x14\x12\x08\x02\x08\x02\x14\x06\x12 \x02\x04\x14\x06(\x04\x02\t\x14\x02\x1e\xbc\x01\x02\x04\x04\r\x02\x06V\"\x1c\x1a\"\x06\x02\x07\x14\x04\x1a\x1c\x04\x02\x03\"\x14\x14\x04\x01\x0c\x04\"\x03$\x98\x01\x08\x02\x07\x16 * \x06\x02\x03 \x0e\x04\x02\x05\x0c\x02\x06\x06\x02\x01\x08\x08\x02#\x0e\x02\x04\x02\x08\x02\n\x1e\x0e&\x02\x046\n\x16\x08\x14\x06\x04\x02\x0b\x16\x1e\x08\x06\x0e\n\x04\x02\x0b\x14 6\x06\x02\x04\x04\x02\x03\x84\x01\x10\x04\x02\x0f\x08\x02\x14\x04<\x02\x08\n\x04\x02I\x1e\x0c,\x04\x08Z\x04\x1e\n*\x1c\x10\x02\x94\x01\x02\x14\x06\x02\n\x02\x08\x06\x02\x16\x02\x08\x04\x02\x04\x14\n\x028\n.\x02\x1e\x04\x08\x06\x02\x19\x06\x02\x8a\x01\x02\x98\x01\x02\xb6*\xb2<\x02\x12\x0c\x12\x14\x04\x02\x03\x04\x08\x04\x14\x05\xcc\x01\x14&\x04\x02\x07\x08\x02\x12~\x08\x04?\xf7\xcb\x01\x16\"^\x02\x08\x1e6\x04\x02\x06\x04\xa4\x078\x02l\xcb\n2\x02\"\x0e\x02t\x08\x0e\x04$\n\x1a\x12\x04\x02\x04\x0c\x11.\x0c(\x02\x12\x04\x1a\x08\x04\x04\x10\r\x04 \x14\x12\x08\xc6\x0c\x98\x01\x04\xea\r\x04\x02\x0b\x08\x14\x08\x02\x04\x0e\x06\x04\x0b\x1c\x06\x04\x06\x0c\x04\x04\x02\x04\x0c\x03\x04\x0c\x04\x02\x07\n\x18\x04\x0c\x04\x02\x19\x0c\x18\x04\xae\x01\x10\x02\n\x1c\x04\x1c\x06\x8b2\x04\x04\x02\x03\x14\x08\x04H\x04\x02\x13\x08\x12\x04\x86\x01\x1a \x02 $\n\x06\x02\r\n\x08\x04\x02\x04\x02\x14\x04\n\x04\x06\x01\x14\x04\x04\x01\x16\x04\x08\x06\x02#\x06\xd1\x05\x04\xa8\x02\xa4\x01\x18>\x02\x10\x02\x16\x02\x16\x0e\x18>\x024\x06\x06%\x0e\x06\x0e*\x02\xc6\x01\x1a\x1c\x06\x02\x0e~r\x14\x08\x12\x02\n\x12\x04\x0c\x17\x08\x1a\x06\x02\x1a\x06\x1a\xc0\x01\x02\x06\x10\x0c\x04\x06-\x02\x044\x02\x94\x01\x12\xa0\x04\x12\x82\x01\x96\x03\xa4\x02<\xb2\x02\x02\xa4\x03\x02\xe2\x03v\x04\x96\r\x02\xc4\x18\xa6@\x04\x02\x19F\nr\x06*\x1e\xf1\x8d\x01\x08\x02\x04\x08\x06\x02\x04\x0c\x0b\x02\"\x02\x12\x04\x06\x04\x1e\t\x06\x16\x0e\x08\x04\x08\x02\x04 \x01\x06\x04\x02\x07\x06\x04\x0c\x04\x04\x02\x01\n\x04\x02\x04\x06\xe7\x02NH\nL\x02\xc0\x0b\x06\xa7\x10\x01\xe2\xe8\x01\x9b\x01\xc6\x01wVS\x86\x01\x97\xe9\x01\xd4\xea\x01\xaf\x01\xc8\x01c\xd5\x02\xd6\r\x83\xf5\x01\x8a\xf5\x01\x88\x03\xe5\x02\xa7\xf5\x01\xb0\xf5\x01\xd7\x05\xd3\xef\x01\xdc\xef\x01\xaaZ\x81\xca\x02\x86\xca\x02\x1a\r\x14\x0c\x01+\xdbX\xa3\xf1\x01\xaa\xf1\x01\xbcZ\xe1\xcb\x02\xe4\xcb\x02\xea\x06\xc9\xd2\x02\xcc\xd2\x02>\x01\xd1^\xb1\xf4\x01\xb4\xf4\x01\x16\xf1\x02\xd3\xf1\x01\xda\xf1\x01\xb6\x06\xe9\x05\xec\x05\x8d\xf8\x01\xa8\xf8\x01\x0f\x14\x0c\xb3\xf8\x01\xb6\xf8\x01\xea\x01\xf5\x01\xf6\x02\x9b\xfb\x01\xf0\xfc\x01\xc9\x01\xe2\x01c\x89\x01\x97\x07\xfd\xf3\x01\x9e\xfd\x01b/\xccN\x97\xcc\x02\x9a\xcc\x02\xc6\x04\xa3\x04\x1c\xa2\x04\xf5\xd0\x02\xf8\xd0\x02T\x1e\x14\"/\xcdS\x9d\xfe\x01\xa0\xfe\x01:\xd5\xfe\x01\xd8\xfe\x01.\xbc\x01\xa8\x01\x83\x01\xb0\x01\x91\x82\x02\x94\x82\x02\x14\x18\xbb\x82\x02\xbe\x82\x02\xae\x02Q\xeb\x01\n\x07\xe3\x03\x91\x01\xcb\t\xb9\t\xc9\x03\xe5\xe6\x01\xbe\xe6\x01\xb9D\xff\xa1\x01\xbe\xe6\x01\xa1C\x97\xa3\x01\xbe\xe6\x01\xffB\x9e0\n\xe1\xd3\x01\xbe\xe6\x01\xd9\x12p\x06O\x93.\xf1\xa5\x01\xbe\xe6\x01\x9d\x12\xab.\xb0@\xab@D\xb2\x02\x16\xc9\x01\xf0\x01\xc9\x01\xbc<\x97\xe4\x01\xbe\xe6\x01\xa3\x02\xda\x01\xc9\x01\xe2\x01c\x99\x01\x85\x1a\xf2\x04\xd9\x01\xf9\x01\xfb!\x81\xaa\x01\xfa\x9f\x01\xca\x06$Pl (h\x02\x1a\x10\x06\x04\x01\xcc\x08\x12\x04!\x12\x0e\x0c\x16\xdc\x07\x12\xd4\x01\x10\x1e\x02\n\x1a\n\x0e\x06&\x14\x04\x125\x0e\x12\x0e\x90\x01\x04\x02\x04\x8a\x02\x04^\x04\x02\x04\xf0\x01\x0e\x06\x0e\x048\x12:\x04\x02\x04\x02$&\x04\x02\x0f\n\x1c\x14\x0e\x08\x1c\x02\x0e\x04\x04\x19\xdc\x02\x9e\x01\x1c\"\x0e\x04\x02\x0e\x02\x06\x04*\x1c\x04\x12\x11,\xd2\x01\x04\x0e\x04\x0e,\x1c\x10\x04\x0c\x0f&\x10&\x1a\x0c\x08\x1e\x04\x04&\x03\x0e\n\x08\x04\x05\x18&\n\x04\x0c\x0b\n\x0e\x0c\x1e\x04J\x10\x04%\n\x04\x02\x0cD\x0c\x1c\x1aD\x1c\x1aB\x1a\x90\x06\x04\x0e\x1c\x02\xd0\x02\x06\x04\x03\x02\n\x04\"\x01,\x14\x04\'\x08\x04\x02\x08\x04\x02\x0e\x12\x0c\x06\x0e\x1a\x0c\x066\x06\x02\x0c\x1a\x0c\x04\x04\r\x02(tV\x0e*\x1e\x04\x04\t\x06\x04JR\x04\x04\"3ZV\x0e(\x08\x04\x02&\x1e\x06\x0c\x1c\x04\x0c\x0e\x0c\x04&\x14\x0e\x16\x02\x06\x14\x04\x0e\x06\x043\x02\x06\x02,\x06\x04\x02\x04\x02D\"\x0c\x02*\"\n\x04\x06\xd0\x01\x068\x08N\xec\x01\n\x02\x08\x04\x0b\x0e\x06&\n \xbe\x02\x04\x04\x038\x06\x04\x10\x05\xc8\x01v(\x04\x04+\x08tV\x0e&\x02\n0\xae\x01\xa4\x012D\x14(\x04P\x08\x04\xce\x01R\x14\x0e\x04\x02\r\x04\xd8D.\x02\x08ZP\x04\x04\x0b\x84\x01*\xb2\x04\x18*\x04\x06\x02\xe5\x01\x04\x02\x04\x06$\x02F\x02,\x02\xc3\xac\x02\xa5$\xaa$\xa1\x07\xfa\x9b\x01\x0e\x8d\xb8\x01\xf6\x01\xb6!\xf9\x06\xb5\x1a\xc4\xb6\x01\x8d\xb6\x01\xfe \xf9\x06\xdb\x19\xb0\xb6\x01\xd5\xb4\x01\xca\xab\x01\xc9\x8c\x01\xa9\x07\x84\x9a\x01\xef\x05\x8c\x05\x93\x04\xcc\x04\x85\x04\xed\xb3\x01\xca%\xa9\x07\x97\x1e\xc8\x01mpG\xa5\x02\xc6\x02\xee\x02\xb6!\xa9\x07\x87\x1a\x12\xa4!\xa9\x07\xc9\x19\xb8\x02\xe3\x08\xc8\x0f\xdc\x17\xa9\x07\xa7\x10\xd6\x17\xa9\x07\x9f\x10\x1a\x08\x01\x07$:\xd8\x16\xa9\x07\xab\x0f,\x0e\x16\x17\xad\x10\x90\x14\xc0\x12\xa9\x07\xcb\t\x1a\xc5\x01\x84\x02\xa3\x01\xd8\x01\xee\x0f\xa9\x07\xc1\x08\xc4\x05\xa1\x05\xce\x0f\xa9\x07\x8f\x08\xb2\x05\x9f\x05\xc0\x05\xaf\x04\xdc\x04\xb9\x04t\x89\x17\xc9\x02\xdc\x02\xf4\x010\x82\x02`\x9c\xab\x01xH.\x9e\x03:\x04*\x07,\x1a,\x1a\x06\x04\x04,E\x02\x04J\xaa\x01\xef\xbd\x01\xf2\x02<\xf9\x023$\xb0\x01\x04\x06JR\x18\x04\x10\x14\xb6\x02\x0c\x06\xae\x02B\xf2\x01\xf6\x01\x04\x10\x1a\x10\x04(\x1a\x06\x04\x08\x02\x01$\x04\x04\x04\x02\x1f\xb0\x01\x06\x04$\x02\x06\x02z\x14\x02\x12\x04\xd0\x03Ff*\x04\x02)\x04\x0cr4\x8a\x01\x16TB\x9c\x01\x9a\x01\x022\x1a 6\xad\x1d\x02\xb4\x01\x94F\x06\xa2\x04\x04\x04\x01\xec|\x04\x04\x9b\x02\xde\x02\x04\xe1\xc1\x01\xb6\"\xa7(\xf0*\xe3*\xdc+\xcf+\xbe/\xfb3\xe0\x14\x8a \xcb0\xde0\xf94\xe45T\x84\x04\xaaA\x1ar\x8dF\xa8F\xfbE\x90F\xe3E\xa4F\xbbA\xbb\x04\xf6\x04\xc9\x04\xe6\x05\xb9\x05\xd6\x05\xa9\x05\x86\x07\xd9\x06\xb4\x07\x945\xaf3\xe7=\x92>\xfa1\xcf1\xbf\t\xf0\t\xc3\t\xde\t\xe26\x9d6\xf5\t\x90\n\xea2\x972\xa8;\x1c\x01\x8b}\x10\x0e\x14\x08\x01\x0f$/\xbcp\xa3.\x93A\xf2D\xfd\x0e\xf0\x15\xc3\x15\xc4\x16\x97\x16\xd6\x16\x95M\xaeM\xc1\x16\xe2\x16\xb5\x16\xd2\x16\xa5\x16\xf6\x17\xb6\x01\xff\x18\xb0\x19\xcf\x14\xf8\x14\xed\x14\x14\x08\x01\x07\xe0\x14\xaf\x19\xc6\x1a\x95I\x04\x8e\x04\xea*\xcb*\xf3\x03\xd4\x05\x8b\x04\xba\x01\n\xc5\x03\xc0I\x99\x1a\xc0\x1a\x93\x1a\x8a\x1b\xdd\x1a\xfe\x1a\xd1\x1a\xd2\x1b\xcc\x18\x18\x16\x13\x12\xbf\x18\xdd\x1b\xc6 \xbbW\x8cX\xe9 \xa0!\xf3 \xdc!\x9c\r\x18\xd9\x0c\x89\"\xc4\"\x97\"\xcc-\xc7n\x16\x08\x04\x04\x04\x0c\x15\x9a\x01\x16\x08\x16\x08\x04\x02\x04\x02\x16\x08\x0e\x04\x05\x06\x18\x08\x08\x02\x01\x08\x04\x14\x0b\x0c\x02\x06\x08\x02\x04\x04\x08\x04\x0c\x03\x1c\x02\x04\x04\x04\x02\x04\x04\x0f\x08\xa6\n\x04\xb8\x03\x02\x06\x04\xb8\t\x0e\x04\x04\x02\x19\x9a\x01\x04Z\x04&\x046\x04B\x04\xcc\x01\x04J\x04\x04I\x02\x04\x02\x1c2\x04\x86\x01\x04\x8c\x01\x04f\x04\xc6\x01\x04\x92\x01\x04p\x04\x88\x01\x04\xf6\x01\x04b\x02\x04\x02L\x84\x01\x16\x06\x16\x04\x08\x02f\x02\x0e\x06\x04\x19\x02\x1c\x04v\x0c\x10\"\x02\n\x08(\x0c\x04\x04\x02\x03&\x02\x04\x0c\x01\x82\x01\x08\x04\t$\x16\x0c\x0e\x0c\x04\"\x1b\x04v\x1a\x02\x0c\x10\x0e\x0c\x08\x0c@\x02\x12\"\x04\x0c\x0b\x06\x0c\x08R\x1a\x12\x06\x0c\x0f\x10\x0c\x02\x0c\x0e\x14\x12\x0e\x04\x04\x05\x02Z\x18\x04\x04\x05\x02\x0c\x02\x06\x10\x04 \x13d\"\x0c \x0c$\x04$\x04\x1a\x04\x04\x04\x02\t\x1a\x04\x08$\x1a\x04\x04\x01\x02\x04$\x03\x02\x0c\x04 \x04\x04\x07\x02X\x954\xc4\x95\x01\x04\xaeI\x05\x06\x02\xc4\x13\x04\x02\x17\x06\x02\x04\x02\x04\x02\x04\x16(\x16\x06\xa6\x0c\x04\x02\x13\x06\xe6\x05\x02P\x02\xaa\x0b\xce2(\x04\xa7\x9b\x03\xba\x01\x04\x01\xcc\x02(\x10\n\x02\x01\xb9\x04\x0e\x04\t\x96@\x04\x9d3\xe7\x10\x10\x04\x04\x01\x08\x04\x1e\x01B\x04\x04\x04\x02\t\x12\x04,\x06\xf1\x01\x04\x02\x04\x08C\x02\x9c\r\x06\xea\x01\x02\x06<\x06\x0c\x06 \x04\xec\x01\x04\x02\x04\x18\x046\x04\xd2\x07\x02\x8e\x14\x06\x04\x06r\x02\x06\x04\x02\x06\x02\\\x04\x02\x0b\x0e\x02:\x891\x02\xa4\xd6\x02\x04\x02\x07\xce\x02\x08\x04\x18\x08\x02\x07\x12\x04P\xbb\xcd\x02\x04\x02\x13\x08\x02\x0c\x0e\x04\n\x02\x0c\x04\x10\x04\x02\x0b:\x12\x1c\x08\x86\x01\x02\x04\x041\"\x08J\x0c\x0e\x02&\x82\x03\xca\x02T\x02\x04\x108>\xf4\x01\x1a\x1e\x08\x0c4\x04\xbc\x0c\\\x06\x06\x04\x01\x02\x04\x04\x06\x06\x05\x14\x18\x14\x06\x02\x0b\x06\x08\x1e\xbe\x02\xac\x01\x12\x04\x0e\x07\x12\x02\x04\x14\x06\x02\x0b\x18\x12\x02\x1e\x06\x0c\x06\x02\x01\x04\x04\x02\r\x06\x04$\x12^\x02\x8a\x01\x04\x04\x07\xb6\x1f\x02\x10\x0e\x04\x02\x11\x10\x0e\x02\xdbP\x06\x12_\x02\xdc\x04\x04\x02\x01\x08\x04*\t\x18&\x18\x1a\"\x04\x02\x03\x16 \x04\x02\x0b&\x04,&\x06\x1e\x04\x1a\t\x02\x1a4\x06\n\x04\x04\x014\x04\x02%\x1e\x1a\x0e\x12\x02v\x1a\x06\x02^\x04r\x04*\"0\x06\n&\x04\x04\x07@\x04\x02P\x04\x04\x016\x04\x04\x01<\x04\x04\x01\\\x04\x04\x01L\x04\x04\x01\x02\x04\x04\x01r\x04\x04\x01j\x04\x04\x01 \x04\x04\x13\x18\x08\x04$\x08\x04\x92\x01\x08\x042\x04\x04\x01T\x04\x04\x01\xca\x01\x04\x04\x014\x04\x04\t.\x04\x1e\x04\x18\x04\x04\x04$\x1b\x08\x18\x04\x02B\x04\x02(\x12\x1e\x04.\x16\x1c\x06\x04\x17\n\x02\x04\x02\x1e\x06\x04\x02\x04\x02&\x1a\x04\x06\x03\x90\x01\x04\x06\x02\x0b$\x02\x1e.\x02\xc8\x02\x04\x0c\x050\"4\x04\x02\x17\x1cXr\x02Z4\x02\n\xb8\x01\x04\x02\xc0\x01\x04\x02s\x1c\x1e8\x12\x08\x02\xba\x03x\xee\x03p\x14j\xc4\x04\xfa\x01(\x9c\x01\x1c\xdc\x01Z\xf8\x01&.\x1c\x1aX\x06\\t\xda\x03\xe2\x06\x80\x01>(\x10\x1c\xd0\x014\xb2\x018\x8a\x01Rv \x80\x01B\xde\x04d\"hNF\xb4\x0bH6\x02Z\x04\x0e\x04\x02\x04\x04\x06\x02\x05\x04\x02\x0c\x04\x18\x01\"\x04\x02\x05\x14\x08\n\x04\x02-F\x02\x0c\x08Z$*\x08\x18\x02P\x10\x0e\x1a\x08\x0e\x18\"\x08\x16\x02\x16\x0c\x04\x02\x0b\x08\x18\x04\x1a\x14\x02\x04\x08\x01\"\x04\x02\x05\"\x12\x18\x04\x0e\x01\x08\x04\x04\x01\x16\x04r\tX\x02\x18\x02\x04\x06\x02\x01V\x04\x18\x04\x02\x04\x04\x04\x0c\x04\n\x1d.V\x14@\x92\x01N\x12\x16\x12\x16\x12\xd7\x80\x01\xda\x01\x02\x1a\x04\x02\x07 \x02\x18\x1c\x04\x02\x05\x08\x04\x08\x06\x04\t\x08\xe3\x02\n\x96\x03\x18\x04\x0c\x0f\x16.\x16\n.\x16\x0e\n\x04\"\x0b\n\x0e\x16\n\"\x18\x06\n\x03\x164\x04\x02\x03\x16\x14\x04\x02\x114\x14\x02\n\x16\x02\"\x14\xe9\x06\x0c\x04\tB\x04\x02\xb5\x01&\x04\x04\x05@\x04T\x04\x04\t\x16\x02\x0c\x02\x0e\x04\x04\t&\x02\x04\x02\x0e\x04\x04\x01\\\x04\x04\x01L\x04\x04\x01\x02\x04\x04\x01j\x06\x04\x01 \x04\x04\x04\x02\x05\x04\x02\x0e\x08\x04\x07\x02\x0c\x02\x10\x06\x04\x11\n\x02\x04\x02\x04\x02\x0c\x02l\x06\x04\x012\x04\x04\x06\x02\x03\x18\n\x04\x02\x07\x04\x02\n\x18\x04\x04\x112\x02\x0c\x028\x02\x0c\x02@\x06\x04\x03\x10.\x04\x04\x15.\x04\x1e\x04\x18\x04F\x04\x18\x02\x0c\x04\x02\x05\x14\x1e\x04\x04\x02\x19\x0e\x0c\x06\x14\x18\x02\x12\x02\x08\x02\x0c\x14\x1c\x04\x04\x0f\x02H\x04\x02\x14\x1c\xb4\x10^\x04\x04\x01|\x04\x043\x02\x04\xf6\x03\x04\x89$\x04\x0262\xfb\x02\x026\x06\x0c\x1c\x06\x04\x066 \x06\x04\x06\x1c\x10\x18\x06\x06\x17\x0e\x04\x02\x04\"\n\x02\xf7\x03\x08\x06<\x08\x04\x06\x07\x16\x04.\x06\x04\x02\x03 \x0c\x04\x04\x04\x06\r\x16\x08\x10\x02\x14\x04\x08\x04\x02)\xc3\x02\xb0\x01\x08\x16\x08\x16\x08\x162\x16 \x16\x1c\x16(D\x04\x06\x020\x04\n\x0c\x03\x97\x04F\\\x04\x07\x12\x04\x0c\x06\x04\x04\x03\xd2\x05V\x04\x08\x15\x10\x08\n6\x12.\x02\x0c\x02T\x06\x04\x02\x04\x06\x07\x0c\x8d\x0c\x04\x18\x04\x04\x15\x1c\x0e\x04\x14v\xc4\xb2\x01\x04\n\x04\n\x04\x04\x02\x0f\x04\x02\x16\x02&\x02&\x14\x04\x02\x1fB\x04\x18$\x02@\x02\x08\xd5\xb6\x01\x04C\x06\x04\n\x04\n\x04\x04\x04\x02\x04\x0c-\x04\n\x1a\x04\x08\x02\x12\x0c&\x04\n\"\x02\x1e\x1c\x16\x04\x02\x06\x02H\x08\x16\x04\x02\x03\"\x0e\x04\x02\x114\x04\x08B\x08\x0c\xc0\x01\x04\x02\"\x04\'\x02\x12\x0e\x0c\x16\x06\x1a\x02:\x10\x14\x1c\x06\x02&\x08\x14\x0c \x06\x04\x02\x1bX\x0e\x04\x02&\x02\x16X\x02@$\x02<\x0c\x04\n\x0f&\x08\x06\x02\x0e\x08\x14\x08\x04\x04\r\x02\xb0\x02\x08T\x08\x06\x08\x04\x04\x06\x02\x03\"J\x08\x02\x05\x0c2\x16\x04\x023\x16\x18\x02\x06\x02\x0c\x02\"2\x02\n\x04\x12\x02\x1a\x02\xb2\x01\x06\x12\x04\x1e\x0c\x0e\x1c\n\x08\x04\x02\x04\x04\x15\x96\x10p\x06P\x04\x02\x1c\n*\x048\x06\x04AD\x04\x06N\x04|\x04(\x04:\x04F\x04\xca\x01\x04:\x04\xfe\x01\x04:\x042\x04\x1e\x04\x08B\x04p\x04\x06\x02\x04\x06\x02\x01\xa74\x04\x10\x0f\x02\n\x1a\xd4\x14\x02\x06\x0e\"\x04\x02\x05\"\x0c\x04\x04\x06\t4\x04\xdb\x0c\x04\x06\x04\n\t\x02:2\x02\x06\x04\x0c\x0fR\x10T\n\x028&\x04\x04\x0c)\x14\x06\x04R\x04.\x06J,\x02\"\x06.\x14\x12T\x1a\x06\x12\n\xde\x01\x04\x04\x08\x02\x07\xc2\x01\x02\x0e\xd2\x01\x04\n\x07\x0c\n\x02\x10\x04\n\x0c\x02\x1f\x18\x082\x04\x80\x01B4\x18.($8\x06\x04\x02\xfa\x01\x04\x04\x0b\x1a\x02\xd2\x02\x96\x01\xe2\r\x0e\x04\x02\x17\xd6\x04\x06V\x04>\x04X\xac\x01,\x06\x02B\x04\x02\x01\x06\x04\x02\t\x0c\x06\x02\x16\x02\x04\x04\x19\x02\x1e\x02\n\x1c\x12\x06\x024\x06\x08\"\x02\x04\x0e\x05\x066\x92\x03\x06\x02\x078\n(\x10\x04\x04\x07\x06\x08>\x02\x04\x0eG\x06*\x06\x02\x04$\x06\x02\x04\x06\n\x10\x0c\x0e\x02\x04\x02\x04T\x1c\x04$\x02\x16,\x10(N\x08\x04\x06\"\x028FB\x04\x02\x03\xd8\x06\xb81\x04\x02!\x04\x1a\x020&$\x04,\xe8\", \n\x18|\x04\xd4\r\xa82\x04\x08\x1b\x1a\x10\x06T\x06\x0c\x04\x02\x08\x0e\x06<\x18\x06\x04\x08\x01\x06\x04\x02\x0f\x16\"\x02\n\xe8\">\n\x14\x04\n\x11\x02\x06\x02\"\x0e\x16\x14<\x04\x04\x0e\x11\x08&\x08\xf6\x0e\xc24\x02*\x1e\x02\x04\x08;*\x02\x18\x02\x18\xe4\"\x18\x16(\x06\x1c\x12\x02\x9c\x11\xc0\x01P\xb8\x01\xea\x0e\xc8\x02\x02\x1a\xa2\x07\x02H\x06(\x02\x04\x02\x10\x06\x04\x11\x1c\".\x04\x1e\"(\x06B\x04\x04\t\x18\x04\x1e\x04.\x04\x04\x014\x04\x04\x01\xca\x01\x04\x04\x01T\x04\x04\x132\x08\x04\x92\x01\x08\x04$\x08\x04\x18\x04\x04\x01 \x04\x04\x01j\x04\x04\x01r\x04\x04\x01\x02\x04\x04\x01L\x04\x04\x01\\\x04\x04\x01<\x04\x04\x016\x04\x04\x01P\x04\x02\x03\x04@\x04\x04\x01&\x04\x02\x03\xe0\x08\x02\x04\x04\x07:\x0cD\x1e\x04\x02\x07$\x028\x08\x04\x02\x0b\\\x08\x06\x02\xa4\x0b \x06\x04\t\x08\x18\xf6\x04\n\x04\x08\xa4\x0b\x03\xfc\x0b\xdd\x8a\x04\x04\x04\x01\x02\x04\x04\x13\x02\x04\x0cV\x02\x18\x08*\x04*\x04\x08\x0c\x04\x0f\x81\x02\x08p\x08\x16\x08\x16\x0c\x04\x02\x04\x04\'\"\x04\x8b\x02\x06\x10\x02\xba\x07\xaa\x07\x8e\x03\x14\x02\x04\x0e\x02\x1e\x04(\x0e\x02\xf8\x03\n\x04\x1d\x02\x04\x0e\x048\x04\x82\x01\x02\x9e\x02\x0e\x16\x83\x1b\x021\xce6\x06\x02\x07\x04\xd3\x14\x04.\x04\x04\x1f\x0c*\x04\x02\xce\x03\x042\x14\x02\n\x06\x0e\xd0\x02\xca\x02\x84\x03\n\x04\x02\x17 \x0c\x1a\x1ed\x02>\x04*8\x18.\x06\x02\x13&\x0c>\x1a\x84\x01\x14(\x02\x10\n\x04\x08\x04\x02\x198\n\x06\x020\x14\"\x14\"\x14\"\x14\"\x0e\x04\t\xc6\x06$\x02\x12\xca\x02\x06\x96\x02\x04\x04\x01\xda\x02\x1e\x04\x01\n\x04\x04\x07\x02V\x12\x04\x04\x0c\x11\x04\x12&\x04$\x02\x04X\x02\x04X\x1d\x0e\x04\x08\x0e\x0c\x0e\"\x02*l\x02\x04\x06\x02\x06\x04\x02\x15\x04\x8e\x03\x9a\x01\x0e,\x04\x06\x92\x02\x04\xdc\x01\x04\x04\x02\x07H\x08(\x06\x04\x02\x0b T$\n,0\x04\x04\x058\x10\x88\x02\x04\x04\x05\x06\x08\x0c\x04\x04\x04\x02\r\x04:\x06\x0c\x02j0\x06\x04\x06\x02\x04\x04\x07\x08\x02\x0c\n\x06\x02\x04\"\x07\x02\x10:X\x04\x02\x03\x10\x1c\x06\x04\x01\x02\x04\x04\x07\x02\x04\x088\x04\x04\x1d\x02\x04\n\x8c\x01\x06(\x02h\x02\xea\x01\x04\x12\x0c\x02,\x04\x02)\xb6\x03\x02\xc2\x02\x02\"\x04\x0c\x04\x08\"\x0e\n\xf6\x05\xa6\x02\"P\"t\"\x1c\x04\x08\x02\x03\x0c2\x04\x02\x01\x04\x04\x02\x11<\x02\x08\x04@\x06*\nB\x04\x02)\"\x1c\x04\x12\x1a4X.`\n\x84\x03\x02\x08\x02\xca\x02\x04\x0e\x04\x12:\x9e2\x04\x06\x01\x81\xbc\x01\x1a\x04\x03\x06\x04\x04\x06\x04\x04\x01\x024\x04\x0f\x06\x04\xbe\x02\x04\x10\x16\x04\x0e\x04\x04%\x06~\x92\x01\x02\x12\n\x1c\n\x02\n\x06\n\x06\x0c\x1e\x0e\x02\x0e\x06\x04\x02\x01\x12\x04\x06\x01*\x06\x02\x0b\x1e\x10.\x1e\xb2\x02\x04\x04\x02[\x12\x0e\x02\x1a\x04,\x0e\x96\x01\n\x02\n*^\x12\x02R\n\x02\n\x1eP\xa6\x01\\2\x10\n \x04P\x04\x02(\x02\x18\x06\x08\x1e\x08\x06\n\x06\x020\x0e\x06\x16\x04\x06\r\x02R\x06\x10\x02\x06\x10\x04\x06!\x10\x04\x06\x02\x10T\",\x10\x04,\x04\x06\x0e\n\x02\x12\x06\x04\x04\x02\x15\x06*\x04\x10\x08\x04\x06\x02*\x02(\x04\x04\x04\x02\x01\x0c\x04\x02\x0f\x1c\x04\x0c\x04\x02\x10\x1a<\x06\x04\x07\x02F\x04\x06\x04\x02\x05\x104\x1c\x04\x04\x05\x06\x02\x16\x04\x04\x07\x06\xb4\x01\x04\x06\x04\x10#\x08\x044\x10\x06\x04>(\x02\x08\x02\x04\x02(2\x10H\x06\x04\x02\x15\x1e\x04j\x04H\x04\x88\x01\x04\x1c\x0e\x02\x04\x0e\t\x04\x02\x1e\x86\x1f\x18\x04\x0e\x06\x18\x03\x08\x18\x04\x10\x1b\x06\x16\x02\x10&\x08\x1e\x06\x04\x06 \x0c\x12\x04\x04\x06+\x04&\x12\x02.&:\"\x14\x0e\n\x02\x04\x06\x14\x04\x02\x0e\x12\x04\x02 \x04\x02\x1b\x04\x06\x04\x02\x1e\x12\x024\x12\x02\x0c\x02\x18\x06\x04\x04)\x10\x02 \x04*\x06\x04$\xd2\n$\x02N\x06\x02\x18\n\x1e\x02\x04\x10\x1c\x06\x02\r\x06\x02\x1e*\x1c\x0e\x04\x04\x02\x1d$\x1e\x1a&\"\x16\n\x18\x10\xc6\x01\x06\x02\"\x1e\x06\x04\x02)\x10\x02&\x10\n\x14\xfe\x10\xae#\x1c.\x08\x02\x08\x10.\x04\x0e\n\x02 \x02\x14\x04\x13\x06\x04\x02\x04\x06\x04\xae\x03\x04\x0e\x16&\x04\x0b\xf8\x01\n\x16\x0e\x16\x02\x0c\x04\x07\x0e\x16\x1a\x14\x04\"\x03\xb2\x012\n\x04\x13\n\x08\x04\xfe\x04\n\x08\n6\x04@\x04\x0c\x05\x04\x06\x8c\x01\x08\x16\x03\x12\x10\x04\x02\rX\x02\x0c\"\x06\x04\x1c\x04\x02\x0bZ\x14\x0c\xfe\x01\x02\xca\x01\x04\x04+\n\x08\n\x08\xd4\x01\n\x08\n\x02\"\x046\x04B\x04\x8a\x01\x164\x04\x1c\x16\x1c\x04\x04\t\xce\x03\x16\x08\x16\xb9f\x04\x02\x13\"\x08$\x02\x04\x0c&\x04\x0c\x1e\x04\x04\x05&\x04\x0c\x04\x02\x01&\x04\x02\x01\x0c\x04\x02\x05\x1e\x04\x1e\x04\x04\x05&\x04\x0c\x04\x02\x11&\x831\x0e\x14\x0e\x14\x0e\x98\n\x88\x1eD\x04\x11\n\x08\x06\x04H\x0c\x08,\x14\x04\x02\x03^\x04\x06\x02\x0bB\x08\x10\x0e\x08\x06\x04\x10\x03,\x08\x04\x12\x05(\x02\x04\x04\x02\x01\x10\x08\x02\x04\x0e\x05\xc2\x02\x10\x80\x02\x04\"\x05\x82\x01\n\x08\x04\x02\x04\x08\x05:\x02\n\x06\x08\x0f\n\x02\xb7]\x04\x0c.\x02\x04\x0c\x02\x11,\n\x02\xf04\x18\n\x0c\x02*\x04\x02\x04\x04\x13&\x12\x02$\n\x16\x02\xb4\x01\n\x16\x04\x02\x05\n\x14\"\x06\x02\x15\x16\x0c\x1e\x02\x18\x04\x08\x04\x16\x12\x04\x04\x02\t\"\x0c\x12\x08\x1a\x06\x02\x05,\x02\x04\x04*\x05&\x08\x04\x04\x02\x15\n\x02\n\x04\x0c\n\x1c\x16H\x08\x12\x04\x02\x03\x0cL\x06\x04\r\x12\x04f*\x06\x02\x0c\x04\x02\t\x1c\x04,&,\x08\x04\x1b\x02\xba\x01\x02\x10\x02&\x02\x12\x1c\x08\x02r\x04\x16\x04\x02\x03\x1c\x08\x04\x04\x1d\xd1F&\x024\x04\x12$\x90\x01\x04`\x04r\x04|\x04\x04\x02\x03\x16\xea\x03\x06\x04\x0b\"\x1c\x04\x06\x04\x02\x04\x04#\x06\x04\x90\x01|\x04\x06\x02z\x02\x04x\xee\x1c\x04$\xde\x02\x84\x01\x04\x02\x04\n\x04\x0e#\n\x0e\"\x02\n\x0e\x1e\x02\"\x04\x94\x01^r*\x1a2\x02\x06\x04\x04\t0\x1a*r^\x04\x04\x04\x1a\r\x94\x04\x186\x02\x06\x02\x90\x01\x04\x02\x04\x04\x07\x06\x1av\xec\x04\x0e\x04\x19<\x02\x06\x12\x16&\x04\x02\x16\x02\x12\x04\x12\x06\x04\x01\x02\n\x04\r\x0c\x04\x92\x02\x04\xec\x01N\x02\x04\x04\x03\xdc\x04\x1a\x04\xdc\x04\x05\x1a\x1e`\x04\x02\x1d\x08\x148 \x1c\x14\x12 \x1e \x02\x16\xb9V\x04\x08\x08\x02\x01\x04\x04\n\x01\x16\x04\x06\x01\x04\x04\x06\x07\x02\xc2\x01\x82\x01\n\x04\x06\x07Z\x04\x02\x1c\x04\x02\x01\x10\x04\x02\t\x08\x10\x08\x0e\n\x04\x02\x01\x14\n\x02\r\x08\x0e\x02\x08\x0e\x1a\x0e\x06\x02\x07\x12\x08\x04*\x06\n\x07\x08\x0e\x08\x10\x04\x04\x03\x08\n\x04\x02\x05\xf0\xa8\x02\n\x04\x06\x02\x15\x08\x0e\x02\x08\x0c\x02(\x04\x02\x14\x08\x06\x02\x17\xcc\x96\x01\x04\x0e\x04\x0e6\x026\x02\x0e\x02\x0c\x06\x02\t&\n\x08@\x10\x04\x02\x01\x06\n\x04\x07\x10\n,\xec\x01\x04\x04\x0b\xf9\xcf\x03\x06\x04\x82+\x1e.\x06\x04\x014\x04\x02\x04\x04\x01\n\x04\x04\t\xd1/0\x1a<&\x04\x02\t\n\x02\n\x90\\P\x04\x04\t\xec\x15\xe2\x02\x06\x04\x02\x04\x04\x05\x06\x04\x06\x04\n\x01\x1a\x06\x06\x0f\x02 \x1e\x16\x04\x02\x0c\x82\r\x04\x04\x05\x02\x04\x0c\x04\x0e\x01\x04\x04\x02\x0f4\xda\x01Z\x1cr\"X\x18\x04\x02\t4\x0c\"\x0c0\x04\x0c\x05\xf8\x06\x0c\xf8\x06\x04\x02\x1b\xf2\x02\x02\x04&\x02\x84\x01\x04\x02\x04.\x022\x1c\x1ej\x04\x11\"\x12\x06\x04\x12\x04t\x04\x02\x04\x04\x11\\\x04B\x04V\x04\x96\x01\x04\x02P\x04\r@\x04\x1c\x1e\x0c\x10\n\x04\x04\x05\x1e\"\x16\x04\x1e\t\"\x12\x1e\x02\xc6\xe5\x07\x04\x06\r\x1e\x06\x16\x06\xde\x01\x04\x02\x04\x9e\x02\x0b\x06\xea\x01\x06\x04\x02\x04\x04\x06\r\x9b\x89\t.\x02`\x86\x01\x12\x16\x04h\t\n\x16\n\xca\x12\x06\x06\x04\t\x02\x04\x06\x04\x02\x06\x04\x03\x02r\x04p\x04x\x04p\x01x\x06\x04\x04\x08\x04\x02\x19\x08\x96\x01j\x08\x1a\xc514$\x02\x0e\x02\x1c\x02\x06\x04\r\x1a\"\x0c\x18\x04&\x0c\x04\x1a\t\x14\x02\x06\x04\n\x0c\x04\x05\x02\x04\x08\x04\x04\x04\x02\x11\x0e\xc7\x03\x02,\x04*\x04\xe4\x9b\x01x\x04\x04\x17@\x1e\x14\x04\xb9\x9e\x01$* \x14\x0e6\x02\x04\x06\x01\x02\x0c\x06\x01\x04\x04\x06-\x89\x02\xe0\x0f\x06t\x87\x08\x06\xee\x02\x16\x1e\xca\x02\x1e\x0e\x02\x0c\x84\x01\xec\x01$\x02\x08\x0c\x02\x04\x02\x04\x04\x17F\x10&\x082L\x02*\x02\x0e.\xc6!:,\x07\x8c\x01&\x02\xef?\x06\x02\x07P\x02\x10\x14\x04\x04\x04\x02#\x1c\x02\x04\x0c\x04\x02\x04\x02\x1a\x0c\xc0 \x94 \xe4\x02\x04\x10&\x10\xda\x04\x04*\x03V\x02\x04\x045\x08\x16\x02\n\x08\x1e\x12\x04\x0c\xa0\x03*\x04\x0e\x04\x10\x08\xc6\x1f\x10\x06\x14\n\x14\n\x14\n\x02\xf0\x10\"\x04\x01\xe8\x01\x04\x02G\x06\xe8\x01\x020\x94\x01\x8c\x01f\xd0\x01\x9a\x01\x8e\x01P\xb2\x01\x06\"R\xc8\x01\xd0\x014J\x02\x04\xc2\x0e\x08\x1c\x08\x1c\n\"\x02\x16|\nZd\x0e\x06\x04\n\r\x02\x08\x06<\x1e\"\n\x04\x04\x13.\n\x14\x06*&\x04&\x14\x0e\x04\x06\x06\x04\t\x02*&\x02\xe8\x06\x0c\x04\x0f\x8e\x01\x04\x8e\x01\x04\n\x0e\n\x0e\x04\x02\x01\x16\x04\x02\x1b8\x06\x02\x1a,\x9e\x11\xca\x01\x0e\x08\x04\x10\x04\x02*\x04\x04\x19\x02*\x08\x0e\n\x0e\n\x0e\n\x0e\n\x0e\n\x08\x02\x0f\xca<\xf4\x01\n\x04\x02\x06\x04\x06\x04\x04\x05\x84\x02\xfe\x01\x06\x04\x04\x01\x06\x04\x04\t\x02\x81\x81\x02\x0e\x1a\x04\x04\x02\t\x04\n\x0c\x18\x82\x0f\x04\x02\x04\x04\x07\x02\xe3\x16\x92\r\x04\x0c\x02\x03\xf5\x15\xb8\x0b\x04\x02\x0b\n\x02\xec\x04\x04\x18\x04\x04\x02\x05\xaa\n\x04\x1c\x04\x04)z\x0e\x06D0.\xca\x0b\x04\n\x06\x1a\x08\x10\x08\x04\x02\x04\x02\n\x06\xe8\x1d\x04\x02\x05\x06\x02\x0e\x04\x02\x1f\x87$\x9f\x05\xd2\x02\xa8\x04\xf8\x0f\x12\x0c\x02\x12\x0e\x02\"\x04\x08.&\x04\x1a#\x14\x08\xe0\r\x08L\x0c\x1a\x04\x08\x1eH\x12\n\xa2*\xd2\x02\xce\x02\xca!\x06\x06\x04\x05\x0e\x08D\x04\x02\'\x08\x8c\x01\x08\x02B\x06\x02\xc6 \xd2\x02\xce\x02\x9e\"L\x04\x02L\x02\x92\x01V\x02L\x04\x02\x0b\xda%\xc3\xff\x01\x82\xc3\x02\xb3\xd0\x02\x00\xa0\x08\x10\x84\x01\x03\xbd\x10\x16\x04\x04\x05\x10 \x1c\x04\x1a\x0b\n\x06\x18\x06\x1a\x06\x04\x0e\x03\x06\x04\x04\x08\x04\x02\x1b\x16\x06\x0c\x06\x0c,\",(\x04\x10\x18\x04\x08\x04\x0c\x03\x06\x10\x04\x12\x04\x04\x1b\x02,:\x08\x14\x08T\x84\x01\x06\x02\xc2\x19\x10\x88\x06\x9e#\x04\x06\t\x1a\x16\xee\n\x06\x04\x04\x02\x0b\n\x06\x02\x06\x02>\x04\x0e\x05\n\x0e\n\x04\x04\x03j\x0e\x04\x08\x05\"\x06\x04\x04\n\x04\x04\r\x0e\x08\x18\x02\x12\n\x1c\x08\x02\x01H\x04\x04\t\x06\x04\x06:\x0c\x04\x02\x03:\x0c\x04\x06\x06\x02\x08\x06\x05\x0c\x06\x04\x04\x06\x04\x14\x04\x04\x0b\x06\x02\\\x06\x08\x06\x04\x08\x11.\x02\x1a\x06\x04\x0c\n\"\x06\x06\x02\x11\x12\x10\x16\x06\x02\x1a\x04\x1a\x04\x04\x02\x08\x08\x04\x0c\x05\x12\x04\x0c\x04\x02\x06\x04\x05\x02\x18H\x08\x02-\x1a\x06\x04\x16\x02\x1c\x06\x02\"\x02\n\x06\x1a,\x02\n\x12\x06\x10\"6\x02\x06\x08\x02\x07\x1a\x08\x16\x06\x04\x023\xbe\x01\n\x1a\n\xc2\x04\x02\x18\x02\x04\x0e\x02\xd0\x01\x02>\x02\x8a\x01\x1e\x0e\x02\n\x02z\xb6\x01\x16\xc2!\xc22\x04\x06\x05\x02\x08\x02\x0c\x0e\x0b\x0c\x02\n \x06\x08\x04\x06\x01\x04\x04\n\t\x0e\x08\"\x04\x12\x06\x04\x03(\x02\x0e\x04\x01\n\x06\x06\x04\x1c\x08\x06\x04\x18\x0f*\n\x12\x0e\x04\x18\x10\x02\x04\x08\x0b\x10\n\x02\x0c\x12\x02\x04\x08\x1f\x02*\n(\x08<\x04\n\x08\x02\x06\x10\xc9\xb4\x01\x0e\n\x0e\x04\x08\x07\x14\x02\x14\x0c\x04\x04\x01\x10\x04\x04\x07\x14\x02\x14\x0c\x04\x02\x05\x06\x02\x06\n\x02\x01\x0c\x12\x04\x04\x10\x03\x0c\x04\x04\x06\x0b\x08\x14\x04\x1e\x04\x08\x04\x02\x04\x04\x15\xbc\t\x0e\x0c\x18\x06 \x06\x18\x06\x1c\x06\x04\x10\x01\x1c\x04\x02\x0b\x04\x08\x02\x08\x04\n\x04\x06\x010\x04\x02\x01\x04\x04\x02\x01\x14\x04\x06\x04\x02\'\x0c\x0e\x08*\x10\x1cH\x1a\x06\xa2\x02\x02 0\x04\n\x04\x02\x1c\x1a\x06\x04\x02\t\x14\x02(\x0c\x06\x04\x02?\n\x04\x06\x02\x1a\x16\x12\x1a\x12\x02\xd4\x01\x04.\x04\n\x04>\x16`\x04d\x04\n\x04\x12\x16B\x04b\x04\x02\x84\x01\x04\x02\x0b\x08\x04\x02\x16\x04\x0c\x04\x04a\x02\x0e\x06\x18\x02\x1a\x04\x0c\x04\x02\x10\x0c\x04\x02\x10\x0c\x04\x02 \x0c\x04\x026\x048\x04\n\x04@\x04@\x04\x02\x0e\x10\x08\x06\x04\x06X\x04\x02\x04\x02 4\x02 \x0e\x04\x08\x15\x02\xb2\x03\x0c\x8e\r\x02\xe2\x02\x02\xd0\x06\x04\x06>\x044%\x06\x04\xcc\x04\xea\x01\x04\x02\x04\x02\x14\x10\x08x\x06*\x06:\x02\xfe\x01\x8c:\x04\x02\x01\x04\x04\x02\x01\x04\x08\x02\x04\x04\x08\n\x04\x04\x05\x1c\x0c\x06\x06\x02\x01\n\x04\x02\x03\n\x0e\x04.\x03\x0e.\x06\x04\x05\x0e\x18\n\x04\x02\x04\n\x01\x0e\x04\x02\x03\x0c\x1c\x04\x04\x04\x02\x01\x0c\x04\x04\t\x08\x02\x08\x02\x14\x06\x02\x08\x04\x1d\x14\x02\x04\x0e\x0c\x18\x06\x18\xe2\x03\x0e\x18\x12\x02.\x06\x06\x02\x05\n\x02\x12\x06\x02\x15&\x02\x0c\x14H\x02\x0c\x02\x12\x8e\x01\x0e\x04\x02\x07\x0c\x08\x02\x18\x04\x02\x0b\x0c\x08\x0c\x0e\x884\xb2<\x04\x06\x0f\x08\x04\x0c\x08,\x0c\x1c\x04\x04\x02\x03\x14\x06\x04\x02\x05\x04\x0c\x06\x0c\x02\x04\x06\x08\x08\x03\x0e\x16\x06\x06\x13\x0c\n\x02\\\x0e\n\x10\x02v\x10\x04\x08\x01\x0e\x04\x0c\x1d\x02\x14\x04\x0eH\x0e\x1e\x0e\"\n,\x02\x04\x12\x04\x06\x02\x04\n\x01\x10\x04\x02\x03\x1a \x04\x04\x07\x18\x08\x06\x0e\x08\x04\x04\x10\x04\x08\x07\x18\x06 \x06\x04\x0c\x0b@\x0e\"\n\xa0\x01\x18\x06\x06\x13\"\x06\x02\x16\x0c\x08\x02\x04\x1c<\x04\x02\x05p\x04\x0e\x04\x04\x04\x02\x07:\x04\x08\x0e\x04\x06\x01 \x04\x04\x05\x06\x02\n\x06\x02\x01 \x04\n\x03\x02\x04\x08\x02\x04\x1e\x05\x0c \x12\x08\x18\x07\x12\x18\x04\x02\x04\x04\x0c\x02\x04\x12\x0f\"\x06 \n\x04\n\x14\x06\x04\x0c\x04\x12\x04\x04\x15\xae\x03\x12\x1c\n\x06\x02\n\x06\x02 \x1c\x04\x02\r\x12\x18\x0e\x02&\x02\x0e\x04\x02\x1b\x04B\x182\x1a\x12\x02\xb0\x03\x0e\x864\xba>\x0e\x02\x10\x06\x02\x0f\x0e\x04\x08\x02\x14\x04\x0c\x18\x06\n\x01\x0e\x04\x08\x1f,\n\x02\x1c\x02\x12\x0e\x02\x1a\x02\x0c\n\x028\x02\x1a\x04\x02\x0b\x1a \x0c\n\x04\x02\x04\x04\x01\x02\x048\x05\x0e\x0c\x1c\x04\x0c\x07\x12\x02\x12\x18\x04\x02\x018\x06\x04\x01\x12\x04\x04\x04\x12\x11\x18\x04\x1c\x02\x10\x0c\x10\x02\x0e\x04\x04\x03(\x06\x04\x0e\x04\n\x07\x0e\x02\x0e\"\x04\x0c\x04\x02\x07\x04\x0e\x0c\x1c\x04\x0c\x03\x12\x18\x06\x12\x012\x04\x02\x01\x06\x04\x02\x04\x06\x04\n\x04\x08\x15\x16\x02\xae\x03\x12\x1c\n\x02\x12\x1a\x02\x8e\x01\x06\x02\x13\x16\x040\x02\x1a\x02\xf8\x01\x04\xc27\xce?\x04\n\tL\x0e\x0c\x14\x06\x04\x0c\x01:\x04\x02\x01\x04\x04\x02\x05\x16\x06\x04\x04\x02\x01\x08\x06\x02\x03\x06\x08\x04\x04\x08\x06\x01\x0e\x04\x02\x01\n\x04\x02\x07\n\x08\x0e\x02\x04\x04\x03\x0e\x12\x04\x02\x01\x06\x04\x02\x01\x18\x04\x08-\n\x16 \n\x0c\x02\x06\x16\x1c\x02\x0c\x04\x02\n\x02\x1e\x02\x10$\x04\x06\x14*\x04\x02\x07 ,\n\x0e\x04\"\x15\x12 \x18\x12\x08\x0c\x02\x04\x02\x08\x06\x04\x02\r\x04\x02\x1c\x08\x12\x02\x06\x0c\x02\x0b\x04\x10\x06\x1a\x02\xdd\xc2\x04\x04\x02\x01\x06\x04\x02!\xe2\x02\x18\x02\x94\x05\x02\x1a\"H\x04\x1a\n\x08\x02\x04\x12\x1c\xdc\x02\x04\x04\x17\x12\x1a\x02\n\xe4\xf9\x01\xd2\x02\xce\x02\x9e\"\n\x02\x08\x02\x04\x10\x04\x06\t\x84\x01\x02\x04\n\x9b\xb0\x02\x10\x04\x05\x02\x08\x0c\x06\x04\x04\x02\x03\x10\x18\x04\x02\x07\x04\x0e\x0c\x1c\x04\x0e\x01\x18\x06\x04\x05\x0e\x0c\n\x06\x04\x05\x06\x1a\x02\x04\x18\x04\x02\x05\n\x02\n\n\x02\x05\x1a\n\x0c\x04\x02\x07\x04\x16\x08\x04\x04\x0e\x0f\x1a\x02\x0c\n\x02\x04\x02\x0e\x04\n\x1dN\x06\x02\x1a\x02\n\x04H\x02\x1a.\x1aH\x02<\x04 \x04\x0e\x01\n\x04\x04\x04\x02\x15\x18\n\x02\x10\x0e\x16\x08\x04\x02\x0e\n\x04\x04\x03\x84\x01\x0c\x04\x12\r\x16\x0e\x0c\x12\x04\n\x0c\x04\x02\x01\x16\x04\x02\t\n\x0c\x02\xd3\x0c\x04\x04\x0c\x07\x1e\x14\x02\n\x04\x04\x01\x02\x04\x14\x15\x02\x0e\x06\x14\n&\x0c\xa4\x01\x14\x02\x8c\x01\x08\xbc\x02\x0b\x8e\x01t\xe2\x02\x08\x04\x02\x08\x06\x0bP\x08.\x0c\xbf\x14\x10\x04\x06\x04\x04\x04\x0e\x01C\x06\x02?\x06\x16&\x02\x1c\x02\x04\x12\x10\x02\x1c\x02\x04\x08\n\x08\x04\n\x1c\x02\x04\x0e\"\x0cZ\n\x02\x12\x06\x12\x06\x02\x06\x10\x07\x046\x04\x06\x06\x02\x11\n\x04\n\x02\"\x02.\x02\x04\x04\x02\x058\x0c\x02\x1c\x04\x0b\x08\x04\x0e\x08\x1a\x04\x04\x08\x05\x16\x06\x0e\x04\x04\t\"\x02\"\x0c\x04\x04\x0c\x0e\x04\x01\x08\x06\x04\x11\x08\x028\x04<\x08B\x04\x08\x04\x02\x07&\x0c\x1c\x02\x12\x04\x08\x02\r\x06\x04\x06\x04\x02\x12\x06\x04\n\x08\x02\x13\x10\x06.\x16\x0c\x06\x04\x08\x02\x04\x04\x02\x07\x06\x04\x06\x04\x04\x02\x07\x0c\x18\n\x04\x04\x06\x01\x0e\x04\n)\x10\x02\x10\x04\x08\x0c\x04\x18\nT\x026\x02\x06\x02\x06\x02\x06\x04\x02\x0e\x1e\x04\x01\x16\x06\x10\x0b\x06\x08\x02\x10\n\x12\x04\n\x07\x10\x02\x10\x0c\x04\x04\x07(\x08\x04\x102\x04\x07\x1c\xdd\x13\x06\x0c\x06\x02\t\x0c\x04\x06\x0c\xb0\x01\x04\x04\x04\xb0\x01\x05\x04\xb4\x01\xb0\x01\x04\x04\x04\xb0\x01;\x04\xb4\x014\x02\x0c\x04\x8c\x01\x04\xd6\x01\xd2\x01\x04\xe6\x01\x0c\x06\x18\x06\x18\x06N4\xe6\x03\x90\x01\x02(\x8e\x01\x80\x01(Fb\x1a\x04\x12\x03\x06\xc2\x04\x06\x02\x05\n\x04 \x04\x04\x03\x02\x04\x04\n\x13\x04\x0c\x02\"\x08\x02\x18\x04\x0c\"\x04\x02\x0b\x04\x02\x06\x0e\x02\x12\x04\x02\x1d8\x0e\x024\xb0\x03\x02\n*X\x02(V\x06$\xa6\x02\x04\x02!\n\x1e\x08\x04\x88\x01\x0c\x1a\"\x06\n\x16\xa8&\xb4\x01\xd4\x01\xd6\x01\x8a\x06\xbeG\x08\x02\x03\x04\x14\x04\n\x07\x18\xc8\x01\x180\x04\n\x04\x90\x02\x06\x0e\x04\n\x03\x126\x04\x02\x03\x12\x0c\x04\n\x03\x0e\x14\x04\x04\x04\x98\x0b\x19\x02\x14\x0c\x02\x04\x8c\x05\x98\x83\x01`\xac\x0c\x86\x0c\"\x02\xd7\xe9\x02\x04\x02\x04\x04\x07\x06\x04\x06\x04\x04\n\x05\x02\x06\x04\x04\n\x01\x0e\x04\x08\x07\"\n\x18>\n\x02\r\x04\x02\n\x06h\x02\x16\x04\x02\x01\x04\x06\x02\x06\x04\x03\x02\x04\x04\x02\x07\x04\x02\x08\x06\x04\x04\x04\x02\x01\x1e\x06\x02\x01\x1c\x06\x02\x01\n\x04\x06\x07f\x10\x08\x04\x04\x06\x17\x04\x10\x06\x04\x14\x0e\x18\x06\x0c\x06\n\x04\x06\x06\x05\x14\x02\x04\x04\x06\tZ\n\x06\xb8\x01\x04\x04\x02\x08\x04\x01\x0c\x04\x08\x03\x1c\x0c\x04\x02\x04\x04\x01\x1c\x06\x04\x05\x0c\x1c\x0c\x04\x1c\x1b\"\x1c\"\x1c\"\x10\"\x0c\x02\x08\x02\x12\x02\n\x0c\x02Y\x82\xa1\x01\xd6\x1d\x04\x88\x07\x8f\xd0\x01\xb6\xd0\x01NBL\x8f\xd2\x01\xe0\xcc\x01\xdb\x03\xa1\x1b\xe3\xac\x01\xc0\xb0\x01\xa7\xb1\x01\x9e\x01_\x12t\xaa\xb1\x01\xa6\x1f\xe9\x1b\xdf\xb7\x01\x04\x01\x94\xb9\x01\xdf\xb8\x01\x04\x01\xc8\xb9\x01\xd9\xbb\x01\xfa\xbd\x01\xad\xbb\x01\x04\x01\xbc\xbc\x01\x84\t\xd3\xc4\x01\x1eB<:\x06\x02\x04\x06+\x02\xa9\x05\xb8\x016<6\x0ez\x0c\x04\xfe8\xe6n\xd4\x08\xd0\x01\xba\x03\x94\x01j\xc2\x02n\xc2\x05\xee\x03\xde\x03\x04\x04\x95\x016\xae\x03\xee\x03\x18V\x02J\x02\x18\x8dJ\xff^\xfaf\xc8\x02\xa1\x95\x01\x04\x01\xee\x99\x01\xb9\x99\x01\x04\x01\xa2\x9a\x01\xe7\x99\x01\x04\x01\x96\x9d\x01\x9dl\x1a\x8cp\x90\t\x85\t\x8e\x05\x96\x03\xdf\x02\x9c\x03\x9f\x01f\x04\x0c\x01\x0b\x07\x95\x07\xbd|\x86\x0b\x0c\x9f26<\xcc>\x86\x0e\xec\x01\x02\xb4\x026\x14$\nL\x026\x020\x0264\x14*\n2\xa8\x084\x9e\x02\x02(\x94\x0b\x04\x02\x07\x10\x04\x02\x06.\x04\x15\xfe\x01\x08\x02 \x08$\x0e\x16v\x08\x02\x04\x1e5\x02\x16>\x90\x010HX\\\nZR\x94\x01H\x1c^R\x88\x02l*F\n 0:\x04\x02\x04\x04\x02\x1f\x16\nJ\x04>4\x16J\x18\"\xb6\x0b\xfa\x04\xee\x06j\xb0\x03\xc8\x05\x04\x02\x07\x08\x02@\x02\x04\x0e\x06\x04M>\x06\xc0\x02\xac\x02\xa0\x01\xa9\xab\x01\xce\x02\xee\x05\xcc\x01:\xa1\x01\x82\r\x04\n\x01\x08$\xb5\r\xbe\r\xbb\r\xde\r\xc1\r,n\x1a\x1e\x10\x0e\x04\x14\x06\x1b\x03\x1d\x8b\x0b\xd2\x02\xce\x02h\x12\x04\x02\x03\x12\n\x04\x02\x01\x10\x04\x02\x01\x06\x04\x04\x01 \x06\x02\x13\x0e\x08\x10 \x04 \x96\x014\x04,\x04\x02EJ\x02\x1e\x0c6\x02\n\x02\x0e\x10\x02\xfa\t&h\x02\x06\x02\x06\x0c\x0e\x87\x06\x94\x03\xf3\x01\xc8\x02\"\x88\x02\xff\x01\xb1\t\xd2\x02\xf0\x03\xa2\x01L\x02\x04P\x06\x08\x03\x06\x08\x04\x02\x0f\x04\x02\n\x06\x0e\x18\x02,\x04\x02\t\x16\x0c\x04\x02V\x06\x02u\x0c\x84\x81\x01\xe7\x93\x01\x04\x9c\x02\xdf\x01\xb8\x02\xd9\x01\x86\x96\x01\xe8\r\x04\xb5\x0c\xc6\x0b\x91\x0b\x90\x0c\xa2\x04\x99\x048\xf8\x03\xf1\x03\xb0\x02\xff\x01\x84\x02\xe9\x01\xea\x02\x1b\x9d\x02\xfc\x02\xed\x02\xb0\x02\x1b\x8f\x02\xb0\x02\x1b\xf1\x01\x92\x02\x1b\xb5\x01\xd6\x01\x1b\xab\x01\x95\x03\x11\xe3\n\x89\x8e\x01\x04\xc7\x05l\'\x92\x05\n\x14\x16\x04\x01\x03\xaf\x05\xb8\x9d\x01\xfdA\x1c\x04\x03&\x14\x04\x02\x04\x06\x1bp\x02 \x02 \x02\x1a\x02\x0c\x02\x1a\x0e\x06\x1a\x08\x02\x0b\x04@\x02Z\x0c\n\x04\x18\x1d\x02*\x94\x01DV\xfc\x01R\n\xde\x01\xea\x01\\\n>\xda\x01\x06\x04\x02\x01*\x04\x02\x1b\x18\x04Z>\x1en\x12$<\x04\xac\x01\x04H\xb0\x11\x04\x04\t\"\xd6\x0b\"\xda\x05\xd0\x11\x04\x04\x13\x08\xc5\xa8\x01\x04\x8c\x01\x1c\xae\x014\x04\x02\xa0\x05\x06\x02\x11x \x02\x08\x04\x088\x02\x08\x04\x02\t\x12\x04\x12\x06\"\x04\x04\x07F\x1c\x02\x08\x04\x02\x11\x12\x16\x02\x10\x02l\x04\x02\xbc\x01\x04\x02\x13P\x02\x12(\x02\x0c\x02\x18\x02\x18\x04\x02\x0bH\xd2\x01\x04\x18T\xe2\t\x06\x02\x05\xe2\t\x02\xdc\t\x04\x9e\x01!N\x04\x02\xfc\x01\xed>\x08(>\xea\x1e\x04\"\x08\x04\x02\x1c\x02\x0c\x04\x04\x04\x02\x0f\x16\x06\x02\xd5!\x06\x03\x07\x06\x04\x02\x04\n\r\x06\x04\x06\x08\x02\x1a\x1c\x04\x02\x01\x04\x08\x02\x0f\x0e\x04\n\x024\x04\x0e\x04\x04\x02\x13\x9e\x01\x1c\x044\x14\x04\x02\x06\x02\x08\x04\x04\x17<\x02\x06\x04\x0e\x06\x1a\x02\xd6\xa4\x01X\x06Z\x04\x02\x03\x04\x0e\x04\x02\x172\x1a\x04\x08\x02\x16\x0c\x1a\x02\x1a\x02:\x06\x04\x11\x0c\x02\x04\x12\x02\x12\x02\n\x02\x04\x04\x03\x0e\n\x04\x08\x1b\n\x04\xe8\x01\xbc\x01\n\x184\x04\x9c\x01\x04`\x02\x04\x08\x04\x06\x11\x18\x06\x0c\x02R4\x04\x18\n\x04\x02\tFJ\x16\x0c\n\x04\x04%\x1a\x18\x04\x16402\xab\xb6\x01\x14h\xa4\x01\x14\x04\x14\x06\x14\xce\x02\x02N\x08\x04\x03\x02@\x18\x04\x01B\x08\x04\x05N\xba\x04\xb8\x04\x04\x02\r@\x12\x02\x14\x02\x14\xc8\x01\x0e\x04O\x0c\x02\xa2\x01\x97\x14^\x82\x01XZz\x022&$\x12\x16\x12\x0c&4(\xfe\x04\x04\x10\x04\x87\x10,\x02=\x04\xf2\x04*\x18\x9a\x02\xd2\x01\xc8\x01\x06\x08B\x9c\x01\x94\x02\x06\x02\x07\x14\x96>\xe90D\x0e\x04)\x02L\x10\x02.\x04\x02\x06\x14\"\x14\x12\x14\x124\x08\x02:RL\x04\x04\x02A2\x02\xcc0\x04\x0e\x14\x0e\x14\x0e\x14\x0e\x14\x0e\x14\x04\x16\x0c\x04\x08\"\x04\xe3-\x0e\x14\x0e\xf6\x07\x16\x02\x04\x83/B\xbc\x01\x02\x04*\x05\x16\xa6\x9d\x08\x12\x04\x1a\x04\x06\x11\xe7\x9a\x07\xce\x02\xc9\x88\x01\xca\x1e\"\xc9\x16\x06\x90\\\x04\x06\x02\t\xe6\x01\x02\x06\x02\x06\x04\x02\x0f\n2\x04\x02\x16\x02\x0e\x18\x04\x04\x04\x02\x1d4\x08\n\x08\n\x14\x10\n\x06\x14\x02\n\x1a\n<\x06\x02\x01:\x06\x02\x13\x14\x18\x08\x02D\x08\x04\x02\x08\x04\x06\x02A\x0c4D\x06\x02\x1a\x02\x1e\n\x12\xe8\x01\x06\x04\n\x022\x02H\x02\x04\x02\xd6\x01\x1a\x02\x18\x06\x044\xa0\x0e\x1a\x02\x16(\x04\x04\x01\x0c\x04\x04\x050\x04\x0c\x04\x12\x07&$\x0c\x02\x04\x18\'\n\x02\x12\x0e\x04\x10\x04\x0c\x02\x0e&\"\x04\x02\x0c\x02\x1a\x06\x08\x06\x04\n\x0f\x08\x12\x08f\x08\n\x06\x04\x04\x107\x02\x08\xc6\nD\x08\"\n\x02\n\x02\x14\"\x0e\n\x0c\x02\x0c\x02\x14(\x02\xe8\x02\xbe\x05\x82\x01\xc6\n\x04\x1a\x04\x04\x02\x05\x06\x04\x14\x04\x02\x11\n\x1aX\x04\x06D\x068~\x040\t.\x04\x18\x04\x18\x04\x04\x04\x025\x04\x10\x04\x02\xa7\x9d\x01\xd0\x10\x1a\x9b\x10\xb4\x10\\)\x80\x01m\x92\x01\x8c\x03\x0e\x81\x01\xcf\x08\xf0\t\x04ZM\r\xef\t\xed\x1c\x02\x08\x04\x06\x15B\x06\x1a0\x06\x02\n\x02&\x16\xb0\x02\x06\x02\x19(\x04\x024\x18\x8e\x02\x18\xae\x08\x06\x02\x92\x01\xd4\x0b\x96\x04\x04\x0c\r\x12\x06J\n\x12\x02\x06\x04\x02\x05\x04 \x0e\x04\x08?\x0e\xc0\x03\x066&\x02\"\xdd%\xd2\x02\xd0\x02\xa8\x0cd\x04\x1a\x0e\x1c\x08\x16\x02\n\x06\x08\xd2\x01\x02\xd6\x01&\x10\x16\x06\x04\xb8\x01\x04\x04\x02\x05\x0c\x06\x16\x04\n\x0b\x06\x12\x04N\x0e\x08\x06\x04\x08\x02)\x0e\x18\x02\x162\x0e\x04\x02\n\x14\x06\xb4\x01\x02\xba\x014\x16l\xb2\x014\x08\x04\x04\x14\x0f\x0c\x02\xca\x06\x9a\x0e\x04\x96\x0e\x98\x0e\x02\x04\x06\x1f\x02r\x160\n\x04\n4\x06<\x04\x08\x1aB\x04\n\x06\x06\x04\x0e\x03\x91Y\x16\x04\n\x03\x18\x16\x04\x06\x1b\xfa^\xd7_\x00\xda_\xd9_\x01\x08\xbe\x02\xd3\x02\x02\xc6I\xf5F\xac\x01\x06\n\x02)\xf7\x03\x0e\x0f\x03\xda\x18\x91\x13\xd5\x05\x02\xd2\x05\xe0\x02\x02\xd3\x02\x02\xd3\x05\x84=\xaf\x15\x02\xac\x15\xf4\x9a\x01 \x91\x81\x01\x04\x02k\x04\x9dW\x02\xa0\x07\x02\xea\n\xff\x11\x82\x12\xbd\x0f\x02\xd3\x02\x02\xd0\x02\x02\xd3\x02\x02\xaa\x05\x02\xd3\x02\x02\xb8T\x8bO\xd3\x02\x02\xd0\x02\xd6\x1f\xdb\'\x9c\x13\x9d\x13\x08\x8e\x1f\x02\xd3\x02\x02\xe8\x9c\x04\x02\x06\x02\x06\x02\x83\x9a\x04\xcf\n\xe7\x14\x02\xf2\x03\x84@\x02\n\x02\xae\x01\xcd0\x9d\x11\x9a\x02\xe0\xc7\x04\x04\x02+\xfb\xc3\x04\xf5\x06\xd3\x02\x02\x06\t\xd4\x02\x88\x03\x89\x03\x02\xd3\x02\x02\xfc\x0c\x02\xd3\x02\x02\x9a1\x0b\xbb;\x02\xb8;\x04\x08\x02-\xc2;\x02\xbb;\x02\xf4\x8a\x01\xe1I\xd3\x05\x02\xd0\x05\x06\xbbw\x02\x06\xaf\x05\xb2\x05\xb3\x05\xda\r\xcd\x05\xd3\x02\x02\xb9\x05\xaa\xb3\x01\x95\xa1\x01\x12\x02\x01\xa7\x12\x06\x02\x03\x04$\x0c\x02\x05@\x96\xda\x01\xb1\xc0\x01\x04\x02\x03\x0c\xc2\x02\x04\x02\x03\x08\xf4\x01\x04\x02\x03\x08\x8a\x01\x0c\x02\x01\xbe\xfa\x02\x12\x02\x01\x0e\x12\x02\x01\xc1\x9b\x03\x16\x02\x01\x15\x0e\x02\x01\xc0\x10\n\x02\x03\xbb\x0b\xae\xa4\x01\x10\x02\x01\xd9\xa9\x01\x0e\x02\x07\x08\x13\xa4\x03\xfeT\x08\x02\x01\xa1X\x18\x02\x01\xa0\x05\x12\x02\t\xb8\x02\xbc\x0b\xc7\x13.\x04\x10\x02\x03A\x10\x16\x02\x07\x11\xf0\x9d\x01\xa4\x03\xea\x01\x04\x02\x03\x08\x9f\xa0\x01\x0e\x02\x05\x8f\x02\x02u*\x02\x01-\x12\x02\x01\x0e\x06\x02\x05\x04)\x08\x16\x02\x01\xe2\x18\x16\x02\x03\x97\x19\x01\x14\x02\x01\xe8\x04\x12\x02\tP\xdd\x05\x02\x00\x01\x06\x02\x05\xb6\x06\xdc\xd6\x01t\x06\x02\x01n\x12\x02\x0b\x85\xd7\x01\x12b\xa6\x13\x02\xa5\x1c\x12\x02\x03\r\xf2\t\x12\x02\x01\x8a\xae\x02\x12\x02\x01\x1a\x12\x02\x01\xe6\x9a\x01\x12\x02\x01\xd0\xd2\x01\x12\x02\x01N\x12\x02\x01\x8a\x01\x12\x02\x05\x0e\x02\x1a\x12\x02\x01\xd4\x01\x12\x02\x01\xf0\x02\x12\x02\x01\x9e\x05\x12\x02\x01\xb6\x02\x12\x02\x01\xb3\xb5\x05\x16\x02\x01%\x06\x02\x05\x06\x02\x0b\x1a\x02\x01\x0b\x16\x02\x01\xb4\x0b\x0e\x02\x010\x16\x02\x03\x0c\xea\x15\x04\x02\x07\xec\x01\xf2\x01\x04\x98\x01\x0c\x02\x03\xab\'\x0c\x1a\x02\x01\'\x12\x02\t\x0f\x88\x8e\x01\x87\x8e\x01\x9a\n\x14\x16\x02\x01\xae\x05\x16\x02\x01\xfa\x05\x16\x02\x01*\x16\x02\x0b\xf9\x10\x90\x19\xe9\x1e\x03\x02\x14\x12\x02\x03\xe2\x02\x88\x04\x08\x02S,\x82\x01\xea?\xa5H\xa8H\xafH\x86K\x02\xd3\x02\x02\xca\x16\x02\xfe@\x02\xd3\x02\x02\xa7\x9d\x01\xe0\xca\x01\xd3\x02\x02\xd0\x02\xe6\x13\x02\x06\x02\x9ep\x02\xae\x07\x02\xd3\x02\x02\xd5\xd3\x02\xde\x0c\xd3\x02\x02\x8f\n\x04\x02`\xba\x12\xbf\x06\xdd\x0c\x04\x02%(\x02!\xa2\x1b\xd3\x02\x02\xcd\x18\x02\xa8\xa8\x0f\xab\xa8\x0f\x00\xae\r\xb0\x04\x84/\xe4{\x04\xd3\xbc\x01\xbe\x15\xc1\x15\x0e\x02\x03\x00\xa8\x02\x0e\x02\r\x87\x02\x08\x80\x04\xf8@\xc2\xbb\x02\xed\x80\x03\x1c\x0e\x02\x07\xf4\x15\xe5\x12\xc8\x01\xda\x13\x04\x02\x1b\xf1\x17\x02k\x03\r\x02\xe6\x02\xd5\x01\x9c\x1a\xb3\x1ak>-\xbc\x02\x18\x02\x01\xe3\x02\x06\x00\x07n\x08\xc0\n\x0e\x06\x02\x05\x0e\xd7\x0b\xf4\x11\n\x02\x0b\xb0\x1b\x97-\xf8\x14R\xbc\x01\xe8\xd7\x02\x06\x02\x03\x04\x86\x04\x04\x02\x0b\x08\xc2\x02\x06P \x9f\xef\x02\x08\x02\x07\xbd\x07\xfa\x04\xcb\x03\xf6\x03\x0c\x02\x01\x06&\x02\x0b\xdb\x05\xf2\xab\x01\xb23\x02\x0c\xd1\xdd\x01\x08\x02\t\x84\x0b\x0c\xf9\x0c\t\xf2\x13\x08\x02\x15\x06\xef\x13\x05\xd4\t\xbc\xa0\x05\x04\xba\x03\xf8\x04j\xde\x01>\x0e\x02\x0b\xa1\xb5\x05\x18\x1c8\xad\x01:\n\x02\x0f\x04\x0c\x04\xa6\x14\xce)\xc3>\x02\xe2\x01\x0e\x02\x0f\xef\x01$\xb6\x08\x90\xc7\x01\x02\x1e\x89\xd0\x01\"\x0c\x02\x07\xfa\x1b\xa7\x07\xf7\x14\xacj\x08\x02_\x14\xc4e\x91\xd0\x01\x82\x8e\x01\x83\x8e\x01\xb6\x0b\x9c\x04R\x02\x0c\xb2\x05\x9e\x01\x02T\xfd\x11\xe5\x05\x0cD?\x05LI\x14\xc0\n\xd3\x02\x02\xd0\x02\xcf\n\x04\xca(\xd3\x02\x02\x89&\xda(\xe2\x1c\xca\x03\x950\xf3\x14\x04\x02\xf1\x03\x02\xf4\x02\xe3\x02\x11\xba\x05\x04\xe0\x0b\x04\x02\x19\xa5\x11r\x02\x80\t\x02\xd6\x02\x02\xd9\x0c\x02\x06\x02\xbc\x02\xb7\x02\x04\x00\x03\xba\x02\xb9\x02\x16\x00\x03\xd4O\xd7O\x12\x00\x03\xdaO\xd9O\n\x00\x03\xac\x11\xa9\x11\x04\x00\x8d\x01\xac\x11\xe3\x10\xbe\x14\x8f\x15\x02\x8c\x15\x8d\x15\x1c\x19\x10\xee\t\xd3\x02\x02\xd0\x02\xeb\t\x88!\x89!\x9a\x11\xc3\x0b\xd9\x05\xb4\xd8\x01\x02\xef\xd5\x01\x02\xd3\x02\x02\xa4\x15\x02\x8c\x15\xaf\x03\x01\x04\x06\xb2\x1a\x02\x06\x02\x06\x02\xdd;\x02\xf3\x05\xe4\x05\xd3\x02\x02\x8d\x03\xde\x05\xf4\x04\xcf\n\xd2\n\xcb\n\xde*\xd3\x02\x02\xd0\x02\xd5*\x842\xd3\x02\x02\xd0\x02\x8cC\x02\xd3\x02\x02\x8e\xdb\x03\x8b\xcb\x04\xd3\x02\x02\x03r\xe4\x01 \x02\x03\x08\xfd\x02\x04\x06\x07\n\x96!\xb8\x01\xe1\"\n\x02!\xd6\x02\xe1\x02\x0c\xe8\n<\x9c\xa7\x01\nT\xec\x01\xee\x01\x06\xf7\xb6\x01\xce\x01\x0c\x9e\xfd\x0b4\xbe\xa6\x03\x04\x02\x05\x0c\xa6\x02\nB\x02\x07\xec\x01\x9a\x06\x04\x87\xb1\x0f\x08\x02\x07\x0c\x13\x00\x94\x01(\x02\x11\xb5\x01\x96\x01$\xd0\x05\x04\xd4\x02\x04\x06\xfc\x07&\x02\x0b\x91\x12\x04\x1c\x9e\x05\x04\x84\n\x04\x02\x03\n\xb8\x01\x08\x02\x03\x9e\x02\x8e\x0b\x04\x02\x03\x04\xc9\x1e,\x02\x01%*\x02\x0f\x114\x0c\xae\x01\x04\xd7\x01:\xce\x1f\x04\x02\x03\xfd\x1c\xc5\x03$\x02\x032\x88\x02\x10\x02\t\x98\x01\x81\x04\x86\x11\x02\xe3\x0f\x04\x02\x03\x0c\xe0\x0e\x04\x02\t\x04:\x1c\xf5\x10h\x0c\x02\x046T\x02\t\xb3\x02\xee\x18\x02\x80\x01\x91\x10L\x02\x03\x04\xf6\x01\x04*\x04\x02\x03\x04\x82\x03 \x02\x07\xf2&\xd6\x180\x99P\x04\x02\x05f\x98\x01\xde\t\x04\x02\t\x92\x03\x80\xf2\x02\x0c\x81\x81\x03\x00\x10\x02\x07\x08Z\x06\xea\x01\x04\x02\x03\x0c\xf1\x02*\x02\x03\xe4\x01\x8aV\n\x02\x01\xa1X\x1a\x02\t\x0c\x9a\x03\xea\x02\xeb\x04\xa4\xe3\x04\x18\x02\x03\x0c\xcb\xdf\x04\x06\x02\x01\xbf\x05.\x02\x05\x04\xd8\x04\x086\x02\x03\x08\xd6\x02\x08\x02\x03\x06\xf6\xd5\x02\x10\x02\x03\x04\xf2\x03\x10\x02\x03\x0c\x9e\x08\x04\x02\x07\x06\xe7\xea\x02\x0eh\x04\x02\x03\x06\x8b\x01\x04\x00\x03\x02\x18\x0c\x02\x11\xe4o\xa6\x02\xffdR\x02T\x02R\xd7\t2\x02\x07\x04\x89\x06\x08H\x1c\x02\x07k\x00\x02\x01\x0e\x02\x03N[\x04\x02\x05\xb0\x04\x0e\xc1\x04\x0c\x02\x11\x10 \x06\x12 \x04&\x9d\x01\x00\x04\x02\x0f\x0e\xe8\x02\x02\xfb\x02\xd2\xdc\x03\x82\x01\xd3\xdd\x03\x00.\x02\x01\x90\xcb\x04\x04\x02\x05\x8c\x02\x02\x04\x0c\x02\x01\xdf\xcd\x04\x06\x02\x01\xfe\r\x06\x02\x03\x08\xad\n\x04\x02\x01\x04\x0e\x02\x03^\xd7\x04\x04\x00\x06\x02\x01\x05\x04\x00\x03\x02\x16\n\x02\x07\xe8\x01\x89\x02\xf8\x01\xf7\x01\n\x02\x03\xbe\xb7\x01\x8e\xcd\x01\x14\x02\x0b\x0c\xbd\x84\x03\xda\x01\x02\x91\x02\xa0\'\x04\x02\x0bv\xca\x01\x0c<\x0c\xb8\x01(\x02\x0f\x04 \x0cl\xf8\x01\xfa\t\x06\xd8\x02\x14\x02\x01v\x0e\x02\x07\n\x02\x04t\x18\x02\x0f^\x83*\\\x02\xba\x03\xa2\x02\x8cQ\x82\xfd\x01\x04\x02\x07\xec\x01\x8a\x02\x06x4\x02\x01\x8b\xd6\x02\x06\x02\x05\x81\x19\x06\xb0\x14\x14\x02\x05\xc7\x14\x01\x00\x14\x02\x03\x08\xe2\x04\x04\x02\x01\xd3\x04\x08\x02\x07\x08\xcc\x04\x08\x1d\x06\x02\rS~\x042\xee@\xc7F\x00\x04\x02\x07R\x8e\x03\x04\xe0\x02\x04\x02\x01\x06\x1e\x02\x03\x04X\x10\x02\x03\x08\x16\x0c\x02\x03\n\x8c\x06\x0c\x02\t\x9b\x0e\xea\x01\xec\x01\x04\xde\x03\x0c\x02\x0f\xca\x01\xf8\x05\x0c\xde\xcb\x01\x1a\x80\x02\x12D\x04\x02\x03\x12\x04\x04\x02\x03\x0c`\x08\x02\x01\xf9\n\x0c\x02\x07\n\x93\xd4\x01\x02\x07\x06\x00\x12\x02\x03\x8e\x01\xb4\x0e \x02\x0b\xf3\x0f\xee\t\x9c\x04\xc1\n\x04^$\x02\x03^\x98\x01\x08\x02\x05t\xbd\x07\xe2\t\x12\x02\x01\x8a\xae\x02\x12\x02\x01\x1a\x12\x02\x01\xe6\x9a\x01\x12\x02\x01\xcc\xd2\x01\x16\x02\x01N\x12\x02\x01\x86\x01\x16\x02\x01*\x12\x02\x01\xd4\x01\x12\x02\x01\xf0\x02\x12\x02\x01\x9e\x05\x12\x02\x01\xb6\x02\x12\x02\x01\xaf\xb5\x05\x0e\x02\x01\xf6\xce\x01\x18\x02\x03\x16\xab\xcf\x01.\x02\x07\x0f\xd6\x14\x10b\x18\x02\x03\x14\x1c\x04\x02\x03\x048\x18\x02\x03\x8e\x04\xc0\n \x02\x03\x08\x86\x06\x04\x02\x0b\x04\x8f,\x02\x01\x04\xc4O\x04\x02\x07\x0cX\x04\x96\x02\x04\x02\x03\x04\xa2\x01 \x02\t~\x91U \x0c>\x04\x02\t\x04\xa8\x06\x99\x07d>@\x02\x07\x98\x01\xb0\xdf\x06\xa9\xe2\x06\x00\x0e\x02\x07\xdc\x08\x02\x04\xe4\x02\x04\x02\x01\x12\x06\x02\x03\x12\x0c\x08\x02\x03\x95\x0c\x00.\x02\x034a2\x02\x011\x0e\x02\x01\xfe\x05\x08\x02\x13\x04\x97\x06\x04DR\x99\x01\x04\x01\x00\x01\x0c\x02\x01\x0b\x04\x02\x01\n\x12\x02\x05F\x0e\x08\x12\x02\x03r\x82\x01\x04\x02\x03\"\x80\x03\x04\x02\x07\x04&:\xe6\x06\x18\x02\x01\x8a\x11\x18\x02\x05\xb6\x02\xa6\x05\x96\x1a\x16\x02\x01\x1e\x1a\x02\x19\x89A\x04i\x88\x8e\x01\x87\x8e\x01\xd4\x02\xd1\x02\xe4+\xe1+\x03\xc2\x08\xd8\x01\x06\x0e\x02\x01\xb6\x05\x0e\x02\x01\x82\x06\x0e\x02\x01&\x1a\x02\x13\xe5\x10\x10\xeb\x05\x02\x01\x00\x02\x04D\n\x12\x02\x03\x04\xd4\x05\x08\x02\x03\x14\x9a\x01P\x02\x03\x08\xc2\x06\x14\x02\x07\x08\x94\x03\x92\x01\x04\x18\x02E\xeb\x13\x02\x84\x01\x85\x01\xd6\x02\x02\xd3\x02\x02\xcc\xcd\x04\x9f\xc8\x04\xd3\x02\x02\xd5\x02\x07\xb4\xa8\x0f\xad\xa8\x0f\x00\xee?\x02l\x02\xb5@/4\xee\x01\x02\x94\x06\x02r\x02\x87\x07\x8c\xa0\x01\"&\xce\xf8\x01\x06\x02\x03\x04\xbb\x9b\x03\x06\x02\x0f\x13\x94\r\xf2\x1c\x04\x8a&\xbfK\x02\xdb\x04\x06\x02\r\xe8\x03\x04\xc6A\xc0\xbb\x02\xef\x80\x03\xda\x10\xd0G\x04\x02\x07\x04\xf7T\x95\x03\xac\x05\x04\x02\x0b\xf6\x05\xb0\x08\xf7\x0e\x89\x05\x04\\\n\x02\x11\x04\x02a\x07\x84\x03\xf5\x02bo(\x06\x02\x05\n%\xa0\x0b\x06\x02\x19\x08\xa2\x04\xe1\x0f\x00\xf0\xcb\x04\x9d\xc8\x04 \x02\xb3\x01\xe8\x03\xa7\x06\x002\x04\x02\x05\x049$\x06\x02\x0f\x04\x86\xb7\x01\x81\x8a\x01\xa1\x18\xa6\xe5\x02\xb3\xfa\x02\xfc\x04\xf3\x02\x08\x02\x03\x04\xfc\x02\x06\x02\x07\x95\x05\xd0\r\xc0\xcf\x01\x86\x02\n\x02\x05\x97\x0b\xf2\x03\xeb\xd7\x01\x08\x02\x1f\x17\x12J[\xbeY\xc3Y\xde\t\xe8\x03\xb6\xaa\x02\\\xc8\x9a\x01.\x02\xa6\xd2\x01\x028\x06\x02\x01Z\x06\x02\x01\xd2\x01\x06\x02\x01\xe0\x01\x06\x02\x05\x10\xbe\x02.\x06\x02\x05\x80\x04z0\x06\x02\x01\xc2\x02\x06\x02\x01\x9f\xb5\x05\x06\x02\x0b3$\xd8\x14\x82\x1c\xf70\x1e\x08\x02\r\xba\xde\x01\x02\xe1\xde\x01\xa8\x05\xa7\x05$\x04\x06\x02\x01\x941\x06\x02\x1b\x06\x8a\x07\x10>\x04\xa79D=\x0c\x96\x1c\x9f\x1a\xbc\x12\x02\x9d\x14\n\x02%\xc0\x05\x02\xd5\x05\"\x0e\x1e\x04\x82\x02\xfe\x02\x98;\x04&\xb1A\x86\x8e\x01\x87\x8e\x01\x07\x08\x96\n2\x06\x02\x05\x82\x01\x8a\x042\x06\x02\x01\xca\x06\x06\x02\x0b\xfa\x08\xdb\x1fFA\x03.\x06\x02\x03\xbe\x15\xecD\x04\x02K\xa0\x01\x81\\\x07\xbc\x17\x02\xd3\x02\x02\xfd\x12\x02\x8a\x01\xdf\x02\xe2\x02\xe1\x02\x0e\x0f\x15\x02\xce\xe3\x01\xc1\xdb\x01\xd5\x05\x02\xd2\x05\x8b\x08\x02\xf6\x01\x02\xf6\x01\x02\xf6\x01\x02\xc8\x0c\x02\x04\x02\xc5\x0f\xef\x020/\x08\x00\x03\xf2\x02\xf1\x02\x16\x00/\x04\x03\x05\x06\x03\"\x1f\xbaA\xb3+\x85\x16\x02\x06\x04\xa8\xa8\x0f\xaf\x92\x0f\xfd\x15\x00\x05\x1c\x0c\x92\x01\xe2\x03\xbc;\x0c\x04\x02\x07\xfd=\xeb\x02\xaa\x06\x8e\x0f\x04\x02\x01\xf9\x13\x08\x02\x0b*0\x04\xea\x04t4\x0c\x02\t\x18P\x0c\x8f\x06\x8d\x03\x06\x02\x03\x19\xa0\t\x04\x02\x07\x04\xb1\t\x04\xf0\x02\x04\x02\x07\x04\x0c8P\x14\x02\x01\x18\x06\x02\x15*\xeb\x04:\x06\xbc\x80\x03\xef\x80\x030\x02\x90\x19\x02\xcb\x10\x04\x02\x07H\xa0I\x1e\xf8\x04\x10\x02\x07\x1a\x02\xebT\xc5\x03\x0c\x02\x03\n\xa0\x16\x08\x02\t\x18\x08\x06\x02\xbf\x16\x04\x02\t\x8e\x05\x84\x0f\x04\xb1\x0f\xaa\x0e\x0c\x02\x01\xcf\x12\x06\x02\x07of\x96\r\x97\r\x06\x02\x03i.\x12\x02\x0f\xac\x05\x04\xcf\x01\x0c\x99\x04\x11\x00\xf2\r\x06\x02\x07\xc5\r1\x00B&\x02\x03g\xba\x0c\x08\x02\x11\x04\xca\x08\xd8\xe4\x02\x97\xee\x02\x02\xcf\x0b\xfc\x04\xf9\x04\x94\x05\x10\x02\x07\x10\x02\x92G\x06\x08\x02\x05\x06\xddL\xf6\x0f\x0e\x02\x03\xf2\x05\xf0\x95\x01\x0c\x02\x03\x12\x9c3\x06\x02\x01\x06\x06\x02\x03\x99\xdf\x01\xbc\x01\x0c\x02\x0b\xe1\x01\x00\xd2\x17\x02\xf8\xbb\x03\xa6\xd2\x01\x04\x02\x07:\x02\x04 \x04\x02\x076\x02\x04T\x08\x02\x01v\x06\x02\x01\xe0\x01\x06\x02\x01\xac\x08\x06\x02\x054\xd6\x018\x06\x02\x01\x9f\xb5\x05\x0c\x02\x01\x04\n\x02\x03Q6\x06\x02\x053\x02\x06\x06\x02\x03\x04\xd2\n\x04\x02\x05\x04\x8c\n\x94%\x06\x02\x03\x04\xd0\x03\x08\x02\t\x94\x02\x02\x06\x87@&\x06\x02\x03\"\xd6\xda\x01\x0c\x02\r\xd4\x01\x02\xd4\x01\x02\x12\xed\xde\x01\xda\x01\n\x02\x05\xe3\x01\x9c\x02\xed\x01\x10\x02\x03 \"\x08\x02\x03\x9c\x01\xca\x03\x14\x02\x012\x1e\x02\x05\x16\xf4\x01\xea/\x0e\x02\x03\xe0\t\xe0\x8c\x01\x18\x02\x03\xa9\xcf\x012\x0c\x02\rI8*\x02adj\x0c\x02\x07\x08l\x04\xea\x0e\x08\x02\x03\x98\x01\x88\x1c\x08\x02\x03\x04\xb3.\x06\x02\x07\x04\xce\x01\x04\xa4\x02\x04\x02\x03\x04\xba\x01\x10\x02\x01\xaad\x06\x02\x05\xb3j\t\x80\x8e\x01\x04\x02\r\x85\x8e\x01\x0e\x08\x14\x1f\x00\xce\n\x06\x02\x01p\x06\x02\x01\xc8\x04\x06\x02\x03\x06\x04\x04\x02\x01\xbc\x06\"\x02\x01\x06J\x02\t\xd3\x17FA\x034\x16\x02\x15I(\x96\x04\x02\x06\x02\x06\xcb\x04\xce\x04\xcb\x04\x01\x04\x02\x0f\xd2!\xdf!\x8a\xef\x02\x8b\xec\x02\xcf\x02\x021\x02\x10\x00\x03\x8c\xef\x02\x8b\xef\x02\x0c\x00\x04\x02\x04\x00?\x02\x01\x0c\x0b\xd8\x02\x02\xd3\x02\x02\x03\xba\n\xdd\x07\x02\xda\x07\x08\x02\x06\x02\xd8\x02\x02\xd3\x02\x02\xca7\x9d2\xd3\x02\x02\xad\r\x06\xa6\xa8\x0f\xad\x98\x0f\x81\x10\x00\xea?\x06\x02\x05\x9a\xdb\x02\x18\x04\x04\x02[\x16\x02\xb3\x9b\x03\x02\x0f\xfcC\x04\xf4\xbc\x02\xef\x80\x03\xa6X\xebT\x94\x02\x02\x93\x05\x02\x18\x10_\t\xf4n\x90\x01\x06\xe8\x02$\x9c\x01\x10\xedraq(\x02\x15\xf8\x02\xa8\x08\xb3\x0b\x000-B\x08\x9a\x03 \xa4\x01\xa9\x05\x000\x04\x02\x01<\x06\x02\'u\x08\x1c\x02\xf8\xb3\x01\x98\x03\xf7\xb6\x01\xf6,\xa1\x18d\xae\x01\xdb\x0c\xd0\x0e\x04\x97\x19\xfc\x04\xed\x04\x02\x08\xf2\x04\x06\x02\x03\x8f\x05\x90\xdf\x01\x06\x023\x9b\xbd\x01\xc4\x04\xaf&\x11\x10\x02\xe0\x0f\xf1\x0f\xcc\t\x04\x9c!\x04\xea\x06\xc6\x02\xa5.\xde\x030\x02\x04\x9c\xac\x02`n,\x02\xd8\x95\x01\x9a\x05\x04\x02\r,\x02\xe0\xd2\x01\x02^\x02\x9a\x01\n\x02+\x06\x02*\x02\xe4\x01\x02\x80\x03\x02\xae\x05\x02\xc6\x02\x02\x9b\xb5\x05\x02\xea\x02\x02\x06\xdc\x11\xf6\x19z\xe7/\x1a\x04\x02\x03\x86^\xa7^\x04\x02\x0b\xca\x90\t\x02\xcb\x90\t$\x02\x86\x0c\x06\x02\r\xfe\x1a\xab\'D\n\'\x02\xc4\x05\x06\x02y\xe4\t\x89\x07\xba\x1e\xac\x1aF\xf7A\x86\x8e\x01\x89\x8e\x01\x00\x94\n4\x02\xc2\x05\x02\xce\x06\x02\xfd\x10\xc4\x19\xa3\x1fHC\x072\x02\xb0\x15\xdf\x15\xb2f\x02\x95P\x9f\x16\x00\x04\x9e\x16\x9d\x16zo\x84\x06\x81\x06\x01\x86\x06\x83\x06\x02\xcc\x1e\x02\xd8\x02\x02\xd3\x02\x02\xe0U\x02\xd3\x02\x02\xd8L\x02\xd3\x02\x02\xeb\xbb\x01\xc2\x89\x02\xd3\x02\x02\xb7\x85\x02\x04\x02]\x84\x88\x02\xd3\x89\x02\xd6<\xbf<\xc2<\x04\x02\xc1<\xa8?\xd3\x02\x02\xd0\x02\xd1;\xac>\xd3\x02\x02\xd0\x02\xffA\xe6\x16\xab\x14\xd3\x02\x02\xd0\x02\xb8\x03\x94\x10\x04X\x0c\xdf\x08\xd3\x02\x02\xd0\x02\x94\x05\xc4\x03\xf9\x16\xd4\x02\xd3\x02\x02\x01\x03\xf8\t\xf2\x07\xdc\x01\x89\x13\xac\x01\xee\x1e\xd5 \x04\x02c\x06\xcc\x02\xc5\x02\xec\xab\x01\x08\x9e\x01\x04\xa1\xad\x01$\x02\x13\x8e\x04\x9c\x03z\xfc\x02\xb8\x04\xc9\x0f\x02!\x8c\x05\x8b\x05\x90\xdf\x01\x02\xe5\xc2\x01L\xef\x1c\xd2\t\xb5\t\x02\x05\n)(\'\x88\x8e\x01\xf5\x83\x012\x02\xc2\x05\x02\x8e\x06\x02>\x02\xfb\x10\x90\x19\xeb\x1e\xca\x08\x94\\\xb0D\x10\x02\x03\x0c\n\x04\x02\x03\x08\xa2\x04\x04\x02w\x04\xeb\xad\x01\x02\xdc\'\xb7#\xd3\x02\x02\x88&\xb7#\xd2\x02\xa8\x0ch\x83\x14\x04\xcc\x15\x02\x04\x02\xa9\x12\x02\xec\x03\xa1\x07\x8a\xef\x02\xd7\xe1\x02\xd5\n\xe8\xca\x04\xc1\xcd\x04\xe6\x05\xfaI\xd2\x16\xdfP\x06\xd9\x15\x00\xd8\x02\xd4\x07\xd8\x02\x83\r\xd2\x0b\xd1\x0b\x06\xb2\x02\xcc\xbb\x08\x83\xbe\x08\x02\x06\x02\xd8\x02\x02\xe2\x07\x02\x06\x02\x06\x02\xd8\x02\xaf\r\xf4\t\x87\x08\xbc\x01\x04\x02\x85\x01\xab\x03\x00\x02$%\xd8\x02\x02\xd8\x02\x02\x8e\x17\xea\x9c\x04\x06\x02\x06\x02\x06\x9e\t\x99\xc0\x04\x06,\x06\xfb\x02\x01\xcc;\x02\xc0;\xbaO\xe3\x9e\x01\x02\xd9\x1f\xfc\x1d\xc1!\x06\x02\x06\x02\x97\x04\x96\x01\xd3\x01\x06\x02\x82\n\x02\x8b\n\x02\x01\xf6\x01\x02\xf6\x01\x02\xf6\x01;\x06\x02\x06\xfaB\x06\xcc\x16\xae>\xe6*\xb8\x16\x06\x02\xa0p\xde\x04\xf1\xcd\x02\xe3\x05\x04\x00\x15\x06\x02\x06\x98\x14B\xe7\x14\x02\xd8\x18\xab\x11\xfb\x03\xb1\x03\x04\x02\x15\xf2q\x86J\x02\x82K\x02\xa9\x85\x02\xc4%\xb4\x0c\xa6\x0c\xca\x16\xbfV\x10\x02)\xe4\x02\xd8\xca\x04\xe3\xed\x03\xcb^\xb4\r\xbe\x03\x06\x93\x12\x96!\x95\x17\xd6\x02\x02\xb8\xe2\x02\x8f\xef\x02\xa0\x07\xc8H\x96(\x02\xffw\x02\xd4<\x04\x06\x0f\x0e\xd8\x02\x99#\x9b\x19\xc6\x07\xc0\x1d\xac\x07\xa3\x0e\x04\x02+\xa3!\x02\x01\x02\xc0\xd8\x01\x06\xc7\xd8\x01\x02\xd8\x02\x84\x1c\x06\x02\x90)\x81B\xf3\x05\x02\xcer\x99a\x06\xa9\x0b\x96\x0f\xd8\x11\x04\x02\x17\xbc\x1a\x06\x02\x06\x02X\xda\x10\xe0e\x02\xe3\xb8\x01\x02\xb0\x12\x04\x06\t\x02\xe0\x03\x06\xc8\x08\xc1\x1e\x06\xad\x06\xcd\x02\x86\x05\xc5\x03I9\xa0\x01\xb5\x01\xb6\x01\xb5\x01\xb6\x01\xb5\x01\xb6\x01\xb5\x01\xb6\x01\xb5\x01\xb6\x01\xde\x026\x99\x01\xeb\x02\xa6\x03n\x81\x03\xb0\x02\x8b\x02\x10\xce\x01\xcd\x01\x97\x01\x9c\x02qB\xb3\x01\x13\x99\x01\x8a\x01\xae\x03\xf1\x02\x8c\x03\xf9\x01\r\x84\x01\xdb\x01\x93\x01g\xe8\x02\xa9\x01\xca\x02\x87\x04\x88\x04\x87\x04T\xbe\x03\xf1\x01\xdd\x01\xd6\x02\x1c\xc7\x03B\xce\x02\x9b\x01\xfa\x02\x8d\x03\xb6\x03\xf5\x04\xb8\x04\x03\xcb\x01\x99\x02\x0b\xf6\x03\x15\xdf\x02\xdb\x01\xca\x04\xc9\x04\xfc\x02\xb3\x01\x8e\x02\xed\x01\x84\x03\xb1\x01\x0e\t#\x95\x03\xba\x01\x9c\x01\x03\xa1\x01n(\xcd\x02\xfa\x04\xe3\x03\xc2\x02\xa2\x01\x85\x01\x86\x01\x91\x03\x16A,\x14\xa6\x01\xa4\x01\xbb\x03]\xb6\x02\x0eC\xad\x01\xd8\x02\xa7\x01\x7f?v\xb4\x03\xbb\x01\xc5\x03jA\x94\x03\x85\x03\xc4\x04\xb3\x04~Z+Lbap\x94\x01\xbb\x03\x00XW\xb4\x01\'\x92\x02\xc7\x03\x9a\x04w\xdf\x022\x00\x8c\x03\x8b\x03\x00\x8c\x03\x8b\x03\x8c\x03\x00\x8b\x03\x8c\x03\x8b\x03\x00\x8c\x03\x8b\x03\x8c\x03\xd3\x03\xd4\x03\xd3\x03mn\x00m\x04\x00wn\x00mnmnmnmn\x00mn\x00m\x00nmnmnm\x00nm\xb2\x03\xb1\x03\xa4\x03\xba\x01\xb9\x01\xba\x01\xb9\x01\x00\xba\x01\x00\xb9\x01\x00\xba\x01\xb9\x01[\x00\x96\x02\x95\x02\x96\x02\x95\x02\x96\x02\x95\x02\x96\x02\x95\x02\x96\x02\x95\x02\x00\x96\x02\x00\x95\x02\x96\x02\x95\x02\x96\x02\x95\x02\x96\x02\x04\x00\x8f\x04\x95\x02\x96\x02\x95\x02\x96\x02\x00\x95\x02\x96\x02\x95\x02\x00\x96\x02\x95\x02\xbf\x02\x00\xc0\x02\x00\xbf\x021\x00\xb0\x02\xaf\x02\xb0\x02\xaf\x02\x00\xb0\x02\xaf\x02\xb0\x024tsts\xc7\x02l?b\xd0\x02>\x9f\x02O\xb4\x02\x1a\x8f\x02\xa2\x02\x8d\x02\x1f7\xde\x01\xe1\x01\xe2\x03\xcf\x04\x84\x04\xfd\x02\xce\x02\x8d\x01\x84\x02\xd7\x01\x95\x03\xc0\x03\xf7\x03\xbe\x02\x95\x01_\x0e(\xda\x01\xad\x01/?\x8a\x01\x00rqr\x8b\x02\xde\x04\xd1\x01#|\xb5\x03\xaa\x04\xe7\x03\x04\xc8\x03\xf5\x03\xa8\x04\xd7\x02O\x91\x014\xac\x02t\xc3\x01,\x8e\x02\xc3\x04\xac\x04\xad\x02\x9a\x01\xdd\x01\xdc\x02\x0f\xb9\x03\xcc\x03\x13\xff\x03\xac\x03\x97\x01\xe1\x02\xa8\x03}\'\x96\x01\'v\xa2\x01\xe7\x01\x9f\x01\xf8\x01\x1f[*B\xa9\x02\xfc\x016\x91\x01 l\xf3\x01]B\xa9\x01\xf4\x03WH\xa1\x03\x1d!\xf0\x03\x95\x01\xa2\x01;S\xa1\x02\xb0\x01<\x83\x01J\x88\x01L\x88\x01\xfd\x03\xce\x01:\x94\x01\xaf\x04\x1a\xc0\x03:\xf7\x03\"\x1b\xf4\x03\x0e\xd7\x02\x03Nh\x8f\x01},\xe8\x02\xaf\x01\xc7\x020\xd0\x03\xed\x03\xfa\x04\xf1\x03\x97\x01\x8a\x02ce\x94\x03\xeb\x02\x80\x02\xf7\x02\x88\x04:\x85\x02C\xce\x02\xc9\x02\xc2\x02\x03\xb3\x04\xb4\x04\x11\xc5\x01\x92\x02_\xd9\x01 \xb6\x02\xb5\x01\x9b\x01\x81\x01J\x86\x03\x83\x03\x95\x02\xe2\x04\xb9\x01L\xf9\x02\xf2\x02\xcb\x01\x93\x01\x85\x01\x96\x03\xc4\x01\n\x1e\x93\x03\x98\x03\xbd\x02\xc5\x01\x16\x8b\x01\xf8\x04\x81\x03Rj\x85\x03\xae\x04\xdf\x01\xe0\x01\xdf\x01\xe0\x01\x00\xdf\x01\xe0\x01\xdf\x01\xe0\x01\xdf\x01\xe0\x01\x00\xdf\x01\xe0\x01\xdf\x01\xe0\x01\xdf\x01\xe0\x01\xdf\x01\xe0\x01\x00\xdf\x01\xe0\x01\xcd\x01\xdd\x02\x9c\x02>\xb4\x01\xfd\x01\xbb\x07\xfd\x03\xd4\x14\x86\x08\xa3\x1c\xa8!\xac=\x81_\xf8@\xa5>\x86\x11\xfb\x0b\x90#\xe3*\xc0w\x9br\xcd\x01\xe1\x03\xf2\xcb\x02\xe9\xad\x02\xf5\x03\xbd\x18\xbb\x01\x0b\xa2S\xefH\x89\x07\xaf\x03\x84\x06\xbc)\xad\x08\xc8\x1b\xcd8\xfd\x03\xe0\xab\x03\xef\x95\x03\xa1\x19\xd5\x01\x80V\x81$\x87\x1e\xe5\x13\xa8Y\xc1Y\x0b\xe0\x01\xc3\x02\xb0_\xe9\\\xd7\x02\xd8\x02\xa2\x10\xbd\x10\xf2l\xf6\xc0\x01\xc9\xa4\x02\xda\x0f\xe6\x9f\x01\xc9y\xaa\x8c\x01\xeb\x89\x01\xcf,\xe5\x14\xc6L\xf5A\xf3\t\xf2q\xb9a\x8f\x07\x84\xb6\x04\x87\xc0\x04\xe8&\xc7#\xa2\x15\x9eK\xb1f\xfcK\xeb*\xce\x9e\x01\x95b\xbf]\xca\xe9\x02\xf1\xc1\x01\xfbG\xc8u\xd5\xc0\x01\x82\x01\xfa%\xdcg\xe9\x9d\x01\x97\x05\xd28\x819\x10\xf2\x10\xab\x0f\x1dS\xae\x14\x9d\n\xfe@\x91K\xe4X\xb5Y\x8e\x1d\x9aM\xb1i\x8c\xdb\x01\xcb\xdb\x01\xce\x0b\xb1\n\xf2\x01U\xd5\x02J\xe6\x06\x86\x06\x92\xc9\x02\x89\xc4\x01\xc1V\x99%\xfe>\xffM\xcd\x03\xdcb\xe7%\xff@\xb4\x11\xdeD\xbb,\xe85\xe5_\xba\"\xd0\x99\x01\xb3\xa1\x01\xed\x16\xe9\x03\xe8\x14\x80?\xdbO\xf4\x05\xf0\x12\x80\x8c\x01\xdc&\xe2\xcb\x07\x95\xa5\x08\xe2u\xed\xea\x01\x8d\x01D\xe0\x01\xa3\x02\x98\x02\xbd\x01[\x06\x04\x9c\x03\xdb\x02\x0c\x9c\x02\xbe\x9b\x01\x85\x9d\x01\x8d\x01\x98\x0b\x91\x0b\x1f\xc4\x05\xb7\x05\n\x17\x14\xf4\x0e\xfd\x0e\xe0\x01\xdd\x01\x06\x90\x03\x9f\x034/\x18\x07\x15@7TY\x10\"\x01\x045\x16\r\xa6\x02\x88\x04\xc6\x9d\x01\xea\x08\xe1\xac\x01\x04\xfa?\x81@:\x84\x01\xbb\x01\x82\x07\xdd\x06\xaa\x02\xab\x01\xa1\x01z\xaa\x1e\xdf\x1c\xc3\x02\xd0\x02\xb3\x02J\x0eI 5\x05\t\x0e\x05X74a\x04\x03\xfc\x04\xf9\x040D\x0f\x00$o\x192/\xda\x01\x9a2\x871\xad\x02%\xf4\x03\xd0\x07\xe3\nw\xcc\x13\xa9\x12%B\xad\x01\x04\x07\xdb\x02\xb2\x0c\xea\x14\x85\x1f\x93\x02\xba\t\xcc\x0c\x85\x16\xf2\x10\xdcG\xa0\x04\xa1R`\xf6\r\xb1\x15\xa9\x03\xb4\x01\xe5\x01(\xd0\x02\xfc\x01<\x9e\x11\xb3\x16\x8e\xae\x04\xa7\xfb\x03\x9b\x11\xf5\x1b\xeb\x05\xc60\xd1+\xa8\xbc\x01\xb2\xf4\x03\xcd\xb5\x05\x04\x0b\xf2\xdf\x01\xa7\xbe\x01\xea\x97\x01\xad\xab\x01\xa1\n\xa4\r\xa9\x0f\xeb\x01\x03\x00\x1c\x19\x01\xe6+\xe7%\xf5\x04\xd8\xdf\x01\x9b\xd7\x01\xdf\x04\"\x9b\x04\xac\x05\xef\x05\x8a\x90\x01\xa2\x13\xd1\xa2\x01\xf8\x05\xaf\x065\x8c\xd0\x01\xdf\xc3\x01\xe2\xfe\x03\xa1\xdd\x02\xef\xad\x01\xdel\xcbc\xed\x07e9\xc8\x10\x8c\x0b\xacr\x90B\x93\xd0\x01\x0b\x8c\x02\xfc\xb4\x01\x86*\xbd\xd0\x01\xcf\x10\xea\x05\x96\xff\x02\xcf\xb5\x01\x9d\xcf\x01\xecw\xfbw\x88\xab\x01\x80k\xb7\xd4\x01\xc6x\xf7\xb5\x01\xb0\xe7\x02\xc1\xeb\x02\x82\xc0\x01\x81\xc0\x01\xae\xfa\x02\xcf\xf9\x02\x9a\x0c\xe1\t%\x85\x02\n\x84\x13\xe4\x17\x8d+\x88>\xa9=\x8e\x02\xab\x01\xb9\x01W\xf6P\xad5\xdb\x0f\x9c\x06\xe7\x01\xa9\x04\xc8\x08\xa5\x0ci\xcc\xf9\x02\xd3\xf8\x02\x95\x01=\x90\x05\xea\x05\xaf\x0e\xcc\x01\xe3\x04\xc4\x17\xbb\x03\x8f\x14\xde\x03\xb3\x03\xd0\x0c\xb9\x06\xb3\x04\xba\x03\x81\x03\x8d\x02-\x00\x9e\xc7\x16\xe3\xc2\x16\xe0\xdd\x06\x99\xe2\x06\x00\x8c\x0c\xfd\x08\xaa\xbc\x03\xaf\xbf\x03\xe0\xc2\x03\xe7\xb8\x03\x96\x18\xad \xe0\x05\xa7\x06\x90\x06\xae\xd6\x03\xe1\xdc\x03\xf81\xd7#\x91\x0eG\x8c\x0e\xaf\r\xb0\x05\xdd\x06\x10\x06\x00e\xdc\x13\xf5\x03\xe5\x0f\xf8\xe4\x04\x8d\xe4\x04i\x00\x9e\x04\xab\x04\x88\x05\xf1\x04\x07\x00\xdc\x0b\x82F\xb3K\x90\x0e\x9f\x14\xe4\r\x89\x0e\x0c\x00&\x92\xc6\x01\xb1\xaf\x01\xf7\x06\xa7\x06\x9aw\xdfz\xb4\xd4\x01\xb7\xd7\x01\xde#\x89\'\x00\x04\x03\x00\x02\x01\x0065\x00 \x0bto\n\x1f:;\x04\x1e\x0f9\xec\x17\xaf\t\xa4\x04\xf5\x10\xb8\x06\xd6\x08\xe8\xbc\x04\x03\xde\x07\x00\xb4\x01\x03\x00\x02\xba\x01\x00\x07\x01\x02\x01\x02\x06\x00\x03\x02\x01<\x00\x03\x01\x02\x12\x00\x11\x01\x02\x00\x01\x02\x01\x02\x01\x02\x04\x00\x03\x01\x02\x06\x00\x0f\x01\x02\x00\x01\x00\x02\x01\x02\x06\x00\x07\x01\x02\x01\x02\x04\x00\x0f\x01\x02\x00\x01\x00\x02\x01\x02\x04\x00\x07\x01\x02\x01\x02\x0e\x00\x01\x01\x04\x00\x01\x02\x04\x00\x03\x01\x02\x04\x00!\x01\x02\x01\x02\x00\x01\x02\x00\x01\x00\x02\x00\x01\x02\x01\x00\x02\x04\x00\x03\x01\x02\x04\x00\x11\x01\x02\x01\x02\x00\x01\x02\x01\x02\x04\x00\x03\x01\x02\x06\x00\x03\x01\x02\x06\x00\x03\x01\x02\x06\x00\x03\x02\x01P\x00\x05\x01\x02\x01\x04\x02\x01\x01\xf2\x01\x00\x05\x01\x04\x01J\x00\x05\x01\x00\x02\x08\x00\x05\x01\x00\x02\x04\x00\x03\x01\x02\x1c\x00A_\x01\x01\x01\x03\x01 \x01\x01\x01\x08\x01\x01\x02\x01\x07\x01\x01\x02\x02\x01\x07\x01\x04\x02\x02\x01\r\x05\x07\x01\x01\x01\x01\x01\x14\x01\x08\x01\x01\x01\x01\x01\x01\x02\x01\x01\x01\x02\x01\x01\x01,\x01\x01\x02{\x01\'\x04\x03\x04\x01\x08\x08\x03\xde\x07\x00\x03\xe0\x82\x01\x01\xa2\x01\x06\x00\x01B\x1c\x00\x01\x02\x04\x00\x01T2\x00\x03\x8c\x02\x8b\x02<\x00\x01\x8c\x02\x08\x00\x03\xe1\x02\xe2\x02$\x00\x03\x16\xd3\x03\n\x00\x01X<\x00\x01O\xb2\x01\x00\x01\x8e\x04\x04\x00\x05\xbb\x01\xd1\x02\x8e\x04\x06\x00\x01\x8d\x04\x04\x00\t\x8e\x04\x00\x8d\x04\x00\x8e\x04\x0e\x00\x03\x8d\x04\x8e\x04\x10\x00\x01\x8d\x04\n\x00\x05\x8e\x04\x00\x8d\x04*\x00\x01\x8e\x04\x84\x03\x00\x01\x81\x02\x08\x00\x01\x152\x00\x01\x93\x02\x1a\x00\x01\x88\x01\x04\x00\x0bWXWX\x00Wb\x00\x01\x18\x06\x00\x01\x17\x0e\x00\x03\x18\x17\x16\x00\x01\x18\x16\x00\x01\xb6\x01\x06\x00\t\xb5\x01\x00\xe0\x02\x00\xf7\x02\x06\x00\x01H\x08\x00\x05\x97\x01\x8a\x04\x89\x03\x04\x00\x01\x8a\x03\x18\x00\x01\x89\x03\x06\x00\x01\x8a\x03\x08\x00\x01\x89\x03^\x00\x07\x18\x00\x04\x03\x04\x00\x03\x17\x1c\x1a\x00\x01\x1b$\x00\x01\x188\x00\x03\x17\x18\x16\x00\x03\x17\x18R\x00\x05\x17\x00\x18 \x00\x03\x17\x18\"\x00\x03\x17\x18\x0e\x00\x03\x17\x18\n\x00\x05\x17\x18\x17\x08\x00\t\x18\x00\x17\x18\x17D\x00\x01\x18$\x00\x01\x17\x1e\x00\r\x1c\x1b\x1c\x1b\x00\x1c\x1b\x08\x00\x01\x1c\x0e\x00\x07 \x00#$\x08\x00\x03\xbc\x01\xdf\x01\x0c\x00\x01\xe0\x01\x10\x00\x03\xa8\x01\x15\x12\x00\x01\xd1\x03\x04\x00\t\xf2\x01;<\x00\xbf\x01\x04\x00\t\x99\x01\x9a\x01\x99\x01\x00\x9a\x01\x08\x00\x01\x99\x01\x06\x00\x01\x9a\x01\x04\x00\x03\x99\x01\x9a\x01P\x00\x0f\x99\x01\x9a\x01\x99\x01\x00\x9a\x01\x00\x99\x01\x9a\x01\x08\x00\t\x99\x01\x18D\x00l\n\x00\x07\xa5\x01\x00BA\x12\x00\x01B\x06\x00\x01=\x06\x00\x03\xd2\x03\xd1\x03\x04\x007\xd2\x03\x93\x03\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xed\x01\x00\xa5\x01\x00\xa6\x01\xa5\x01\x00\xa6\x01\x00\xa5\x01\x00\xa6\x01\xa5\x01\x00\xa6\x01\xa5\x01\x00\xa6\x01\xa5\x01\xa6\x01\xa5\x01\x04\x00\x17BABABA\x00BA\x00B\xd2\x02\x04\x00\x05\xd1\x02\x00\xd2\x02\x06\x00\x13\xd1\x0234\x0034AB\x00A\x0e\x00\x11BABAB\xd2\x02\x00\xd1\x023\x1e\x00\x03\xc8\x03\xc3\x03\x18\x00\x05\r\x00\x0e\x10\x00\x03\r\x0e\x08\x00\x05\xc4\x03\x00\xc3\x03\x16\x00\x0b\xc4\x03\x00\xc3\x03\x00\xc4\x03\xc3\x03.\x00\x0b\xc4\x03\x00\xc3\x03\x00\xc4\x03\xc3\x03(\x00\x01(\n\x00\x0b5\xd2\x03\x00\xc3\x03(\'\x0c\x00\x17\xc4\x03\xd1\x03\xd2\x03\x00\xd1\x03\x00\x0e\r\x00\x0e\xc4\x03\xb7\x02\x1c\x00\x13\xc4\x03\x00\x8b\x01\xa9\x01\x00\xaa\x01\xa9\x01\xaa\x01\x00\xa9\x01\x04\x00\x05\xaa\x01\xc3\x03\xc4\x03\x04\x00W\xa9\x01\xaa\x01\x00\xa9\x01\xaa\x01\x00\xc3\x03\x9a\x02\x00\xaa\x01\x8c\x01\x8b\x01\x00\xc3\x03\xc4\x03\x00\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\x8c\x01\x00\x8b\x01\x8c\x01\x8b\x01\x00\xc3\x03\xc4\x03\x8c\x01\x00\x8b\x01\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\x1e\x00\x17\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\x8c\x01\x8b\x01\xc3\x03\xc4\x03\xc3\x03\x08\x00\x15\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\x8c\x01\x00\x8b\x01\xc3\x03\x1c\x00\t\xc4\x03\xc3\x03\xc4\x03\x00\xc3\x03\x04\x00\x0f\xc4\x03\xc3\x03\xc4\x03\x8c\x01\x00\x8b\x01\x00\xc3\x03(\x00\x0b\xc4\x03\xc3\x03\xc4\x03\xc3\x03\xc4\x03\xc3\x03\x0e\x00\x05\xc4\x03\x00\xc3\x03\x0e\x00\x03\xc4\x03\xc3\x03.\x00\x05\xc4\x03\xc3\x03\xc4\x03\x04\x00\r\xc3\x03\xc4\x03\x8c\x01\x00\x8b\x01\xd1\x03\x0e \x00\x0f(5\x0e\r\x0e\r\x0e\r\x06\x00\x07\x0e\r\x006\"\x00\x0f\x9c\x03\x00\x8c\x01\xdd\x04\xd2\x03\xb7\x02\xb8\x02\xc3\x03\n\x00\x07\xc4\x03\xd1\x03\x006P\x00\x01l\x16\x00\x01W\x04\x00\x07\x10\x00OP\x04\x00\x17\x1a\x0f\x00\xe4\x03\xdf\x03\x00\xe0\x03\x00\xdf\x03\xe0\x03\xcf\x02c\x16\x00\x01\x1f\x06\x00\x05 \xa8\x01\xa7\x01\x04\x00\x1f\xa8\x01\x00\xa7\x01\x00\xa8\x01\xa7\x01\x00\xa8\x01\x00\xa7\x01\xa8\x01\x00\xa7\x01\xa8\x01\x00\xa7\x01\x12\x00\x03\xa8\x01\xa7\x01\x06\x00\x07\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x10\x00\x03\xa8\x01\xa7\x01\n\x00\x03\xa8\x01\xa7\x01\x04\x00\x0f\xa8\x01\x00\xa7\x01\x00\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x0e\x00\x07\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x12\x00\x03\xa8\x01\xa7\x01\x04\x00\x07\xa8\x01\xa7\x01\xa8\x01\xa7\x01\x04\x00\t\xa8\x01\xa7\x01\xa8\x01\x00\xc7\x01\x16\x00\x01 \x06\x00\x01\x1f\x04\x00\x01 \x04\x00\x03\xa8\x01\xa7\x01\n\x00\t\xa8\x01\xa7\x01\x00\xa8\x01\xa7\x01\x06\x00\x01\x1f\x04\x00\x01 \x04\x00\x11\xa8\x01\x00\xa7\x01\x00\xa8\x01\xb3\x01\xb4\x01\x00\xc7\x01\x10\x00\x03 \x1f:\x00\x03 \x1f\xa4\x01\x00\x03 \x1f\x0e\x00\x01 \x9c\x01\x00\x03\xa8\x01\xa7\x01\x0c\x00\x05TS\x1f\x14\x00\x03\xc8\x01\xa7\x01\x1e\x00\x01\x1f\x04\x00\x05 \x00\x1f \x00\x07\xa0\x03\x89\x03\x8a\x03\x89\x03\x06\x00\x01\x8a\x03\x04\x00\x01\x89\x03\x04\x00\x05\x15\x16\x15\x04\x00\x03\x16\x15\x08\x00\t\x16\x15\x16\x15\x16\x08\x00\x03\x15\x16(\x00\r\x15,+\xa0\x03\x9f\x03\x00,\x10\x00\x01\x88\x02\x04\x00\x01\x87\x02\x0e\x00\x01\x88\x02\x14\x00\x01\x87\x02\x0e\x00\t\x01\x02+,\x01\x12\x00\x0f\xf6\x02\xf5\x02\xf6\x02\x00\xf5\x02\xf6\x02\xf3\x02\x15\x0c\x00\x0f\x16\x01)\x00\x16\x00\x15,\x06\x00\x01\x88\x02\x10\x00\r\xb3\x02\x99\x01\xc6\x01+,+\x16\n\x00\x05\x15\x00\x16\x06\x00\x19\x15,\x00\x15\x16+\x00\x16\x15\x16\x15\x16\x15\n\x00\x01\xa0\x03\x06\x00\x0b\x89\x03\x00\x8a\x03\x00\x89\x03\x8a\x03\x08\x00\x07\x9f\x03\x00\x16\n\xde\x02\x00\x03\xbe\x02\xb7\x02\x1a\x00\x07\xfa\x02\x15\x16\xf5\x02\n\x00\x03\xf6\x02\xf5\x02\"\x00\x03\xe0\x02\xdf\x02\x04\x00\x05\x02\x01\xc3\x01\x10\x00\x03\x9a\x01\x99\x01\x08\x00\x01\x9a\x01\n\x00\x01\x99\x01\x06\x00\x07\xc6\x01+\x00,\x04\x00\x01+\x06\x00\x0f,+\x00,+,+,*\x00\x13+\x00,+,+\x00,+,\x1c\x00\x01+\x0e\x00\x0f,\x00+,+\x00,+\x08\x00\x0f,+,+\x00,\x00+\x06\x00\x0b,+,+\x00,\x06\x00\x01+\x04\x00\x0f,+\x00\x99\x01\xc6\x01\xc5\x01\x00\xc6\x01\x04\x00\t+\x00.\xbe\x01\xbd\x01\n\x00\x07\xbe\x01\x00\xf5\x02\xf6\x02\x0c\x00\x01u\x04\x00\x0fv\xbd\x01\xbe\x01\xbd\x01\xbe\x01\xbd\x01\xbe\x01\xbd\x01\x10\x00\x03\xbe\x01\xbd\x01\x0c\x00\x03\xbe\x01\xbd\x01\x0c\x00\x01V\x0c\x00\x03\xc0\x02\xfd\x02\x04\x00\t\xc6\x01\xb8\x01\xfd\x02\xc6\x01\xc5\x01\x06\x00\x05\xc6\x01\xc5\x01\xc6\x01\x04\x00\x01\xc5\x01$\x00\x01\x12\x10\x00\x03Wv\x04\x00\t\xdf\x01\xe8\x01\xe7\x01\x00\xc8\x03\x06\x00\x03~\xd7\x02\x08\x00\x03\xd8\x02\xd7\x02\x08\x00\x05\xd8\x02\x00\xd7\x02\x10\x00\x03\xd8\x02\xd7\x02\x08\x00\x03\xd8\x02\xd7\x02\x04\x00\x03\xd8\x02\xd7\x02\x0c\x00\x05\xd8\x02\x00\xd7\x02\x1a\x00\x03\xd8\x02\xd7\x02\n\x00\x05\xd8\x02\x00\xd7\x02R\x00\x01,\x04\x00\x1b\xae\x01\xdd\x01\xde\x01\xdd\x01\xde\x01\xdd\x01\xde\x01\xdd\x01\xde\x01\xdd\x01\xde\x01\x00\xa9\x01\xaa\x01\x08\x00\x1b\xa9\x01\x00\xaa\x01\xa9\x01\xaa\x01\xa9\x01\xaa\x01\xa9\x01\x00\x0c\x94\x02\x93\x02\x00\x9f\x01\x08\x00\x0b\xa8\x01\xa7\x01\x00\xa8\x01\xa7\x01\xa8\x01\x06\x00\x07\xa7\x01\x00\xa8\x01\x85\x02\x04\x00\x07\x84\x01\xc6\x01\x00\xb8\x01\x04\x00\x01\xd7\x01\x04\x00\x1f\xd8\x01\xb7\x01\x1f\x00 \x00\xb8\x01\xb7\x01\xb8\x01\xb7\x01\xb8\x01\xb7\x01\xb8\x01\xb7\x01\x00\x1f\x0c\x00\x0b \x1f \x1f \xb8\x01\x06\x00\x1b\xd7\x01\xa5\x01\xfe\x02\xfd\x02\x00\xa6\x01\xa5\x01\xfe\x02\xfd\x02\xfe\x02\xd7\x01\xd8\x01\x00\xd7\x01\x06\x00\x11\xa5\x01\xa6\x01 \x1f\x00\xa5\x01\xa6\x01\xa5\x01\xa6\x01\x14\x00\x03 \xc5\x01\x04\x00\x0b\xa6\x01\xa5\x01\xa6\x01\xa5\x01\x00\xa6\x01\x06\x00\x07 \x1f \x1f&\x00\x01 \x04\x00\x0f\xc5\x01\xa6\x01\xa5\x01\xc6\x01\xc5\x01\xa6\x01 \xc5\x01\x06\x00\x0b\xa6\x01\x00\xa5\x01\x00\xc6\x01\xc5\x01\x0c\x00\x03\xc6\x01\xc5\x01\n\x00\x03\xc6\x01\xc5\x01\x04\x00\x03\xc6\x01\xb8\x01\x0c\x00\x05\xb7\x01\x00\x1f\x04\x00\x01\x0e\x06\x00\x01u\x0e\x00\x01\xf2\x01\x08\x00\x07\xf1\x01\xf2\x01\x00\xf1\x01\n\x00\x05\xf2\x01\x00\xf1\x01\x04\x00\x01\xad\x01\x08\x00\x03\xae\x01\x82\x01*\x00\x0b\xce\x01\xdf\x03\"\xf6\x01\xf5\x01\xf6\x01\x08\x00\x05\xf5\x02\x00\xf8\x02\x04\x00\x05\xf7\x02\x00\xf8\x02\x04\x00\x01\xf7\x02\x06\x00\x01\xf8\x02\x0c\x00\x05\xf7\x02\xf8\x02\xc3\x02\n\x00\x01\xd2\x02\x06\x00\x03\xd1\x02\xd2\x02\x08\x00\x17\xd1\x02\xd2\x02\x08\x8d\x02\x8e\x02\x00\x8d\x02\x00\x9e\x02\xb3\x02\xb4\x02\xb3\x02\x12\x00q\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\x9e\x03\x9d\x03\x00\xb4\x02\x00\xb3\x02\x04\x00\x01\xb4\x02\x04\x00\x01\x87\x02\x04\x00\x0b\x88\x02\x87\x02\x88\x02\x87\x02\x00\x88\x02\x0c\x00\x01\x87\x02\x0c\x00\x03+\xb4\x022\x00\x01*\x0c\x00\x01O\x16\x00\x17\xf7\x02\xe8\x01\xe7\x01\x00\xe8\x01\xe7\x01\xe8\x01\xe7\x01\xf8\x02\xf7\x02\xf8\x02\xf7\x02*\x00\x05\xf8\x02\xf7\x02\xc8\x03\x0c\x00\r\xc7\x03\xc8\x03\xc7\x03PO\xc8\x03\x18\n\x00\x03\xf1\x01\xf2\x01\x1a\x00\x03\xf1\x01\xf2\x01j\x00\x01\xc9\x02\x04\x00\x05+\x00\xb4\x02\xaa\x01\x00\x17j\x9d\x03\x9e\x03\xc5\x02\xf1\x01\x02\x98\x01\x00\x99\x01\x9a\x01\x00\x99\x01\x06\x00\t\x9a\x01\x97\x01\x98\x01\x00\xa0\x03\x0e\x007\x9f\x03\x99\x01\x9a\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\xaf\x01\xb0\x01\x00\xaf\x01\xb0\x01\xaf\x01\x00\x99\x01\x06\x00\t\x9a\x01\x00\x99\x01\x00\xba\x04\x14\x00\x03\xf3\x02\xf4\x02\x04\x00\x03\xf3\x02\xf4\x02\n\x00\x01$\x06\x00\x01\xb7\x01\n\x00\x05\xb8\x01\xb7\x01\xb8\x01\x1a\x00\x0b\xb7\x01\xb8\x01\xb7\x01\x00\xb8\x01\xb7\x01\x04\x00\x01\xb8\x01\n\x00\x01\x10\x04\x00\x01\x08\x08\x00\x01\x99\x04j\x00\x03CD\x06\x00\x01\x9a\x04\n\x00\x07\x99\x04\x9a\x04\x00\x99\x04\x10\x00\x0b\x94\x02\x93\x02\x94\x02\x93\x02\x00\xb8\x02\x04\x00\x03\xb7\x02\x8a\x03\x06\x00\x03\x12\x8c\x01\x08\x00\x01\x8b\x01\x0e\x00\x03\x8c\x01\xc9\x03J\x00\x01q$\x00\t\x86\x04\x99\x01\xeb\x02\xec\x02\xeb\x02\x10\x00\x03\x86\x04\x85\x04&\x00\x07\x86\x04\x85\x04\x00\x86\x04\x04\x00\x01\x85\x04\x04\x00\x01\xec\x02\x0e\x00\x0b\x9a\x01\x99\x01\x00V\x00\xcf\x02\xf2\x01\x00\x01f\n\x00\x01Y\x14\x00\x03\xcc\x01\xbc\x01\x04\x00\x19\x0e\r\x0e\r\x0e\r\x0e\r\xcf\x02\x00\xb5\x01\x00\xca\x02\n\x00\x05q\x00\xd7\x01\n\x00\x01\xd8\x01(\x00\x01\xd7\x01\x04\x00\x05.-\xd8\x01\x06\x00\x01r\x0c\x00\x07qr\x00q\n\x00\x01\xd7\x01\x1a\x00\x03.-\x08\x00\t.-.-\xd8\x01r\x00\x03\xd7\x01\xd8\x01\x1e\x00\x03\xd7\x01\xc6\x01\x04\x00\r\xc5\x01\x00\x86\x04\x99\x01\x9a\x01\x85\x04\xd8\x01\x1e\x00\x0b8\x00\xf6\x01\x85\x04\x86\x04\xf5\x01\x10\x00\x15\x8f\x02\x00\x90\x02\x00\xf6\x01\x99\x01\xbd\x02\xbe\x02\x00\xbd\x02\xbe\x02\x08\x00\x01\x93\x01\x0e\x00\x05YZ8\x04\x00\x01\\\x04\x00\x03\xbd\x02\xbe\x02\x04\x00\x03\xbd\x02\xbe\x02\x04\x00\x0b\xbd\x02\xbe\x02\xeb\x02\x90\x02\x00\\\x14\x00\x19[\\[\\[\x00\xf6\x01\xf5\x01\x00\xf6\x01\x04\x00\xf9\x01\x1c\x00\x017\x08\x00\x05YZr\x80\x01\x00\x01\xbc\x01\x12\x00\x01\x99\x01\x12\x00\x05\x9a\x01\x99\x01\x9a\x01\x06\x00\x01\x99\x012\x00\t\x9a\x01\x99\x01\x9a\x01\x99\x01\x9a\x01\x0e\x00\x05\x99\x01\x00\x9a\x01\x08\x00\x01C\x06\x00\x03DC\x04\x00\x05UVDZ\x00\x03C\xcf\x02b\x00\x01\x94\x03\x98\x02\x00\x03\xad\x02\xb2\x02n\x00\x01\xb1\x02\x0e\x00\x03YZ\x08\x00\x03YZ\n\x00\x03\xb2\x02G\x06\x00\x03\x93\x03\x94\x03\x04\x00\x03\x93\x03\x94\x03\x04\x00=D\x99\x01\x00\xbd\x02\xbe\x02\x00V\x00U\x00\xbd\x02\xbe\x02\x00\x9a\x01\xd7\x03\xd8\x03\x99\x01\xbd\x02\xbe\x02\x9a\x01\x99\x01\xbd\x02\xbe\x02\x9a\x01\x99\x01\xbd\x02\xbe\x02\x9e\x01\x00\x9d\x01\x9e\x01\x06\x00\x01\x8f\x02\x08\x00\x0b\xc7\x01\xc8\x01\x00\xc7\x01\x00\xc8\x01\x04\x00\x01\x9b\x01\xc0\x01\x00\x01\x9c\x012\x00\x01\x9b\x01\x04\x00\x01\x9c\x01\n\x00\x01\x9b\x01\x16\x00\x01\x9c\x01\x1a\x00\x01\x9b\x01\x04\x00\x01\x9c\x01\x10\x00\x01\x9b\x01\x16\x00\x01\x9c\x01\x0e\x00\x01\x9b\x01\x0c\x00\x01\x9c\x01\xb4\x01\x00\x07\xcc\x01\x00\xe1\x02\x95\x01\x0c\x00\x01\x06F\x00\x07\xc8\x01\x00\xc7\x01\xc8\x01\x06\x00\x137\xe2\x02\xf1\x03\x90\x03\x8f\x03\xe8\x04\x00\xe7\x04\x00\x05\x0e\x00\x03\x9c\x01\x9b\x01\n\x00\r\x06\x00x\x00wxw\x06\x00\x01\x05,\x00\x01\xdc\x044\x00\x0b\xd5\x04\xd6\x04\xd5\x04\xd6\x04\xd5\x04\xd6\x04b\x00\x01\xd5\x04,\x00\x13\x12\xba\x03\xb9\x03\x00\x9c\x03\x00\x1e\xb9\x03\x00\xde\x03\x0c\x00\r#$#$#q\x96\x01\x04\x00\x0bGH\xfd\x02\xe0\x03\x00\xd1\x04\x04\x00\x01x\x06\x00\x05\x18\x17\x1e\n\x00\x03\xc4\x01r\x06\x00\x13\x8b\x02\x8c\x02\x00qr\x00\x05\x06qr\x04\x00\x05qr\x8b\x02\x04\x00\r\x9a\x01N$qr\x8b\x02)\x08\x00\x07\x1dP\x00\x084\x00\x076~}\xa4\x02\n\x00\x05\xa3\x02\x00\x04\x0e\x00\x01\x9e\x01\x08\x00\x01$\x04\x00\x03\x8b\x02J\x04\x00\x039L\x06\x00\x01K(\x00\x01L\xde\x03\x00\x03\xb6\x02\xad\x02\x06\x00\x05\xae\x02\xad\x02\x0c6\x00\x01\x9c\x01\x1e\x00\x01q\x04\x00\x01r\x12\x00\x01q\x04\x00\x01r\x04\x00\x03qr\x04\x00\x03qr\x04\x00\tq\x00r\x00q\n\x00\x05r\x00q\x10\x00\x0br\x00q\x00rq\x06\x00\x01r\n\x00\x05qrq\x0e\x00\x01r\x08\x00\x01q\x08\x00\x03rq\n\x00\x15rq\x00r\x00^\x00\xb5\x01\xb6\x01\x00\xa7\x01\x0e\x00\x01\xa8\x01\x04\x00\x15\xa3\x02\xa4\x02\xa3\x02\xa4\x02\xa3\x02\xa4\x02\xa3\x02\xa4\x02\xa3\x02\xa4\x02\xa3\x02\x08\x00\x01~\x0e\x00\x01\xa6\x01\x04\x00\x03\xa7\x01\xa8\x01\x04\x00\x07\xa7\x01\x02\x00y\x06\x00\x03\xc2\x01#\x0e\x00\x0b\xd9\x02\xda\x02$qNM\x04\x00\x07r#\x00M\n\x00\trq\x00NM\x08\x00\x07r\xc1\x01\x00\x88\x01\x06\x00\x13:9^#\x05\x06qrq\x96\x01\x04\x00\'#qr\x00q\x96\x01]\x00^\x00#q\x00N$qr\x00\x05\x06\x08\x00\x01#\x06\x00\x03$\xd1\x03\x16\x00\x01\xc0\x03\x0c\x00\x01\xbf\x03\n\x00\x03\xd8\x04\'\x08\x00\x0b\xa3\x02\xa4\x02\xa3\x02\xa4\x02\x00]\x06\x00\x05qrI\x04\x00\r\xa8\x01\x00]^\x00]^\x04\x00\x05\xa7\x01\x00\xa8\x01\x18\x00\x03]^\x04\x00\t]^]\x00^\x16\x00\x03]^\x08\x00\x05]^]\n\x00\x03^]\x04\x00\x03^]\x14\x00\x03^]\x1e\x00\x03^]\x0c\x00\x03^]\x06\x00\x93\x01^\x00]^\x00]^\x00]^\x00]^\x00]^\x00]^\x00]^\x00]^\x00]^\xb5\x01\xb6\x01]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^]^\x00\xb5\x01\x04\x00\x19\xb6\x01]^]^]^]^\xa7\x01\x00JI\x04\x00\x1bJI\x00\xa8\x01\x00]^]^]^]^]*\x00\t^]^\x00] \x00\t^\xa7\x01\xa8\x01\x00]\n\x00\x039^\x16\x00\x0f\x95\x01\x00\x96\x01\x95\x01\x00\x96\x01#$\x08\x00\x01]\x04\x00\x07^]\x00^\x0e\x00\x0b#qr\x00qr\x04\x00\x05qrq\x04\x00\x03lk\x04\x00\x13rqrqNM\x00N\xaf\x02\xaa\x03\x04\x00\t\xa7\x04\xc0\x03\xbf\x03\xc0\x03H\x08\x00\x01\xe5\x01\x06\x00\x01\x84\x02 \x00\x07\x83\x02\x84\x02\x00\x83\x02\x04\x00\x01\x84\x02\x0c\x00\x03\x02\x08\x1c\x00\x0b(\x93\x01\x94\x01\xad\x02\xae\x02\xad\x02\x04\x00\x03\xae\x02\x93\x01\n\x00\x01\x99\x01\x06\x00\t\xae\x02\x00\xad\x02\xae\x02\'.\x00\t(\x00\xdf\x03\xe0\x03\'v\x00\x07o\x98\x01\x97\x01\x98\x01\x14\x00\x03\xd7\x04\xd8\x04\x04\x00\x03\xd7\x04\xd8\x04\n\x00\x03\xd7\x04\xb6\x02\x04\x00\x03\xb5\x02\xb6\x022\x00\x03\xb5\x02\xb6\x02\x08\x00\x03\xb5\x02\xd8\x04\x0c\x00\x05\xd7\x04\xfa\x03^\x04\x00\x03\xd7\x04\xc0\x03\n\x00\x03\x98\x01\x97\x01\n\x00\x03\x98\x01\x97\x01\x04\x00\x01\xbf\x03\x0c\x00\x01\xc0\x03\x04\x00\x03\x98\x01\xb5\x02\x10\x00\x03\x84\x02\x83\x02\x06\x00\x03\x84\x02\x83\x02\x16\x00\x03\x84\x02\x83\x02\n\x00\x03\x84\x02\x83\x02\x06\x00\x03\x84\x02\x83\x02\x0e\x00\x05\x84\x02\x83\x02\x84\x02\x04\x00\x01\x83\x02\x06\x00\x03\x84\x02\x83\x02\x06\x00\x03\x84\x02\x83\x02\x18\x00\x03\x84\x02\x83\x02\x06\x00\x03\x84\x02\x83\x02\x14\x00\x03\x84\x02\x83\x02\x14\x00\x03\x84\x02\x83\x02\x06\x00\x03\x84\x02\x83\x02\x10\x00\x17\x84\x02\x83\x02\x00\x84\x02\x83\x02\x00\x84\x02\x83\x02\x00\x84\x02\x00\x83\x02\x08\x00\x03\x84\x02\x83\x02\x1a\x00\x0b\xba\x02\xb9\x02\xba\x02\xb9\x02\xba\x02\xb9\x02\n\x00\x01\xba\x02\xd2\x01\x00\x05\xd5\x04\xe8\x04\x8d\x04$\x00\x01\xd8\x02\n\x00\x01\x8f\x02\x04\x00\x07\x90\x02\x00\x8f\x02\x90\x02\x0c\x00\x03\x8f\x02\x90\x02\x04\x00\x03\x8f\x02\x90\x02\x08\x00\x03\x8f\x02\x90\x02\x04\x00\x03\x8f\x02\x90\x02\x04\x00\x03\x8f\x02\x90\x02\x08\x00\x01\x8f\x02\x14\x00\x01\xe6\x02\x06\x00\x01\xa3\x03\x06\x00\x05\t\x00\xae\x03\n\x00\x17\xa3\x03\xce\x02\x00\xd7\x02\xd8\x02\xd7\x02\xd8\x02\x8f\x02GH\x00\x02\x10\x00!?\tHG\xc8\x03\xc7\x03HGHG\x00\xd8\x02\x00\x8f\x01\x90\x01p\x91\x01\x04\x00\x05xw\x92\x01\x04\x00\x01o\x06\x00\x01\xd7\x02\x06\x00\x01\xd8\x02N\x00\x05\xd7\x02\x00\xd8\x02\x0c\x00\x01V\x08\x00\x01\x1a\x10\x00\r\xff\x01\x90\x01\x8f\x02\x9a\x02\x00\xcb\x01W\x88\x04\x00\x01b\xa8\x01\x00\x01a(\x00\x01bV\x00\x01a\x06\x00\x01b^\x00\x01\xb6\x02\n\x00\x07\xaf\x03\x8a\x02\x00\x8d\x016\x00\x01.\x0e\x00\x05`\x00\n\x14\x00\x01\x0e\xa4\x01\x00\x01\xa0\x01 \x00\x01\x9f\x01\x08\x00\x07\x1b\x85\x02\x00t\x0e\x00\x01\xae\x01\x06\x00\x01\x1b\x04\x00\t\x1c\x00\x1b\x1c\x1b\x08\x00\x03\x1c\x1b(\x00\x05\x1c\x93\x02\xc9\x01\x06\x00\x0f\x06\x86\x01\x00\x85\x01\x86\x01\x85\x01\x86\x01\x85\x01\x12\x00\x01\xf6\x02\x06\x00)\xf1\x02\x00\xf2\x02\xf1\x02\xce\x03\x00\xcd\x03\x00\xce\x03\xcd\x03\xce\x03\xcd\x03\x00\xce\x03\x00\xcd\x03\x00\xf2\x02\xf1\x02\x00\xf2\x02\x10\x00\x05\xf1\x02\xf2\x02\xf1\x02\x10\x00\x05\xf2\x02\x00\\\x08\x00\x03\xcd\x03\xf2\x02\x04\x00\x01\xf1\x02\x04\x00\x01\xf2\x02\x0c\x00\x01\\\x1c\x00\x05\xcd\x03\xce\x03\xcd\x03\n\x00\x05\xce\x03\x00\xcd\x03\x04\x00\x11\xce\x03\xcd\x03\x00\xce\x03\xcd\x03\x00\xce\x03\x00\xcd\x03\n\x00\x05T\x00O8\x00\x01\x02\"\x00\x03\xba\x01\xb0\x01\x04\x00\x05\xcb\x01\x00\x91\x01&\x00\x0f\x88\x01\x88\x02\x94\x01\x93\x01\xdd\x02\xde\x02\x94\x01\x93\x01\x06\x00\x0b\x8f\x03\x00\x88\x01\x9c\x03\xf1\x03\xf2\x03\x12\x00\x03\xf1\x03\xf2\x03\n\x00\x03\x9b\x03\x87\x01\x06\x00\x03\x88\x01\x93\x01\x0e\x00\x1f\x94\x01\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x0387yzyzy\x04\x00\x07z\x80\x03\xa5\x02\xa6\x02\x04\x00\x01\xff\x02\x0e\x00\x05ZYZ\x04\x00\x03Y\x93\x01\x0e\x00\x01\x94\x01\x06\x00\x15\x87\x01\x88\x01\x9c\x03\x00\x9b\x03\x00\x87\x01\x88\x01\x9c\x03\x9b\x03\x87\x01\x04\x00\x15\x88\x01\x88\x02\x87\x02\x87\x01\x88\x01#$\x00\x88\x02\x87\x02\x88\x02\n\x00\r\x87\x02\xce\x01\xa3\x0212\xa4\x02:\x04\x00\x019\x04\x00\x03\xd5\x02\xd6\x02\x04\x00\x15\xd5\x02\x88\x01\x87\x01\x00\x88\x01\x82\x01\x81\x01\xce\x01\xcd\x01\xce\x01\xa3\x02\n\x00\x11\xa4\x02\xb2\x01\xb1\x01\xa3\x02\xa4\x02\x00\xd5\x02\xd6\x02\xd5\x02\x0e\x00\x13\xd6\x02\x00\xcd\x01\x00UV\x87\x01\x88\x01\x00\x87\x01\xf6\x03\x00\x01\x02\x06\x00\x01\x04\x18\x00\x05\x08zy\x14\x00\x03\xcc\x04\xc1\x04h\x00\x01\xc2\x04\n\x00\x01\xc1\x04\x08\x00\x01\xc2\x04\x08\x00\x01\xc1\x04.\x00\x01\xc2\x04\x04\x00\x01\xc1\x04\x04\x00\x01\x02\x0c\x00\x05\xa2\x03\x00\xa1\x03\x16\x00\x01\xa2\x03\x04\x00\x05\xa1\x03\x00\xa2\x03\x06\x00\x01\xa1\x03\x06\x00\x05\x88\x01\x00\x83\x01\x08\x00\x01:\x16\x00\x03J\xc6\x03\x04\x00\x11\xc9\x04\xca\x04\xc5\x03\x00\x83\x01\xca\x04\xc5\x03\x83\x01\x84\x01\x04\x00\x03\x83\x01\x84\x01\n\x00\x03\x83\x01\x84\x01\x04\x00\x03\x83\x01\x84\x01\x08\x00\x03\x83\x01\x84\x01\x06\x00\x03\x83\x01\x84\x01\x06\x00\x03\x83\x01\x84\x01\x0c\x00\x03\x83\x01\x84\x01\x06\x00\x03\x83\x01\x84\x01\x06\x00\x0f\x83\x01\x84\x01\xc6\x03\xc9\x04\xca\x04\xc9\x04\xca\x04\xc9\x04\x14\x00\x07\xca\x04\xc9\x04\x009\n\x00\x1d\x9e\x01\x9d\x01\x9e\x01\x00\x9d\x01\xca\x01\xc9\x01\x9e\x01,\xc9\x01\xca\x01\xc9\x01\x9e\x01,+\x04\x00\x03,+\x04\x00\x1f,+,\xc9\x01\x9e\x01,+,\xc9\x01\x9e\x01,\xc9\x01\x9e\x01,\x00\x89\x01\x06\x00\x05?\x00\xca\x01\x06\x00\x01\x89\x01*\x00\x05\x98\x03\x00\x91\x03\x06\x00\x05\x92\x03\x00\x91\x03\x04\x00\x0b\x92\x03\x00\x91\x03\x92\x03\x00\x91\x03\x12\x00\x03\x92\x03\x91\x03\n\x00\x03\x92\x03\x91\x03\x0e\x00\x03\x92\x03\x91\x03\x0e\x00\x07\x92\x03\x00\x91\x03\x92\x03\x04\x00\x01\x91\x03&\x00\x0f\x92\x03\x91\x03\x92\x03\x00\x91\x03\x00\x92\x03\x91\x03 \x00\x03\x92\x03\xcc\x01\x04\x00\x0f\xcb\x01\xcd\x03\xce\x03\xcd\x03\xce\x03\x91\x03\x92\x03\x91\x03$\x00\t\x92\x03\x91\x03\x92\x03\x00\x91\x03,\x00\x05\x92\x03\x00\x91\x03\x12\x00\x05\x92\x03\x00\x91\x03@\x00\r\x92\x03\x91\x03\x92\x03\x00\x91\x03\x92\x03\x91\x03\x12\x00=\x92\x03\x91\x03\x92\x03\x91\x03\x92\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xcc\x01\x00\xcb\x01\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xa1\x03\xa2\x03\xcd\x03\x08\x00\x05,\xc6\x02\xc5\x02\x0c\x00\x03\xc6\x02\xf1\x02\x06\x00\x0b\xce\x03\xcd\x03\x00,\xa2\x03\x91\x03\x12\x00\x01\x92\x03\x04\x00\t\x91\x03\x92\x03\x91\x03\x92\x03\xcc\x01\x04\x00\x05\xcb\x01\x00\x91\x03\n\x00\x0b\x92\x03\x91\x03\x92\x03\x91\x03\x92\x03\xa1\x03\x04\x00\x07\xa2\x03\xa1\x03\x00\xa2\x03\x0e\x00\x01\x91\x03\x06\x00\x0f)0\xa6\x02\x00\xb2\x01\x00\xff\x02U\x0c\x00\x01\xf2\x03\x08\x00\x05\x1b\x00\xdd\x03\x0c\x00\x01\xe2\x01\x06\x00\x01\xc9\x01\x12\x00\x01\xca\x01\x04\x00\x01\xc9\x01\x12\x00\r\xca\x01\xc9\x01\xca\x01\xc9\x01\xca\x01cd\x08\x00\x07cd\x00\xc9\x01\x1e\x00\x07\x8a\x01\x049?\n\x00\x07@:\x00y\x12\x00\rL\x00\xd6\x03\x00\xb3\x04\x16r\x0c\x00\x03qr\x0c\x00\t\x87\x01\x88\x01\x87\x01\x00\xb4\x04\x04\x00\x05\x9d\x04\x00\x9e\x04*\x00\x01\x9d\x04\x08\x00\x01\x9e\x04\x04\x00\x05\x9d\x04\x9e\x04\x9d\x04\x1e\x00\t\x9e\x04\x9d\x04\x15\xb4\x04\x9d\x04\n\x00%r\x87\x01\xb4\x04\x9d\x04\x15\xb4\x04\x9d\x04\x15\xb4\x04\x9d\x04\x15\xb4\x04\xb3\x04\xb4\x04\x00\x9d\x04\x9e\x04\x9d\x04\x9e\x04\x04\x00\x07\x9d\x04\x9e\x04\x9d\x04\x9e\x04\x04\x00\x0f\x9d\x04\x9e\x04\x9d\x04\x00r\xac\x03\xb3\x04\x16\x12\x00\x03\xde\x01\xdd\x01<\x00\x07\xde\x01\xb3\x01\xf4\x03\x9d\x04\x04\x00\x01\x9e\x04\x04\x00\x01\x9d\x04\x10\x00\x01\x9e\x04\x1e\x00\x01\x9d\x04\x06\x00\x05\x9e\x04\x00\x9d\x04\x06\x00\x03\x9e\x04\x9d\x04\x9e\x01\x00\x01/\x06\x00\x012\x10\x00\x010\n\x00\x03ab\x10\x00\x01a\x04\x00\x01b\x04\x00\tab/1b\"\x00\x05aba\x06\x00\x012\x08\x00\x0b1\x0021\x002\x04\x00\x0312\x10\x00\x011\x04\x00\t8\x00&#\x06\x0e\x00\x01\x9a\x01\x14\x00\x03\x93\x01\x94\x01>\x00\x01\x93\x01R\x00\x03>=\x04\x00\x03Eb\n\x00\x03\x1b\x85\x01\x06\x00\x01\x86\x01\x04\x00\x05\x90\x02\x8f\x02\x85\x01\x08\x00\x03\xe4\x04\xe3\x04\x04\x00\x03\xe4\x04\x9f\x03\x12\x00\x0b+,\x00+vI\x16\x00\x03\xde\x01\xdd\x01\x18\x00\x01%\x04\x00\x052\x00\x1c\x14\x00\x0b\x1c\x00\x1b\x1c\x1b\x1c\n\x00\x017\x04\x00\x01\xb2\x02(\x00\x05\xb1\x02\xb2\x02\xb1\x02$\x00\x01\xc0\x01\x08\x00\x01\xbf\x01\x12\x00\x01\xc0\x01\x04\x00\x0b\xbf\x01\xc0\x01\xbf\x01\x00\xb2\x02\x95\x02\x0e\x00\x01\x96\x02\x06\x00\x0b\xd7\x02B\x96\x02\x95\x02\x00A\x0e\x00\x01&\n\x00\x01\xb2\x02(\x00\x01\xe3\x02\x08\x00\x03\xfe\x03\x99\x01\n\x00\x03qr\x06\x00\x01\xb1\x02\x08\x00\x031\xfe\x03\x10\x00\x03\xfd\x03\xfe\x03\x08\x00\x01\xcb\x03|\x00\x01\xc0\x018\x00\x03\xbf\x018\x04\x00\x037\xb2\x02\x06\x00\x03\x95\x02\x96\x02\n\x00\t\xb1\x02\x1c\x1b\x001\x06\x00\x05\x04\x00a\x0c\x00\x01b\n\x00\x0bab\x00K\xac\x03\xd7\x02\x08\x00\x01<\x0e\x00\x03\x14M\x1e\x00\x01\x04:\x00\x01\xce\x03\x0e\x00\x01\xc5\x03\x18\x00\x01\xc6\x03\x04\x00\x01\xc5\x03\x16\x00\x03\xc6\x03\xc5\x03:\x00\x01j\x04\x00\t\"\x7f\x00\x80\x01\x9e\x01\x08\x00\t\x9d\x01\x8a\x02\x00\x89\x02?0\x00\x01\x94\x03\x08\x00\x01\x93\x03\"\x00\x03@\xd4\x02\x12\x00\x05\xd3\x02\x00\x7f\x06\x00\t\x80\x01\xd4\x02\xd3\x02CD\n\x00\x13\x82\x02\x00\x81\x02\x00\xfe\x01\xfd\x01\xb5\x02\xa2\x04\xeb\x01\x7fV\x00\x01\x04\x1a\x00\x01\x08\x06\x00\t\xba\x02\xb9\x02\x00\xa8\x02\r\x06\x00#\x99\x02\x9a\x02 \x00\xb9\x02\xba\x02\x00\xb9\x02\xbe\x01\x00\\[\xbd\x01\x9a\x02\x00[\xbd\x01\x9a\x02\x04\x00\x11[\xbd\x01\x9a\x02\x00[\xbd\x01\x9a\x02[\\\x06\x00\x13[\xbd\x01\x9a\x02\x00[\xbd\x01\x9a\x02[\xbd\x01\xbe\x01\x04\x00\t\xbd\x01\x9a\x02\x00\x99\x02\x9a\x02\x04\x00\x03\x99\x02\x9a\x02\x04\x00\x03\x99\x02\x9a\x02\x04\x00\x03\x99\x02\x9a\x02\x04\x00\x03\x99\x02\x9a\x02\x04\x00\x03\x99\x02\x9a\x02\x04\x00\x1d\x99\x02\x9a\x02\x00\x99\x02\x9a\x02\x99\x02\xbe\x01\\12\x99\x02\x9a\x02\x00\x99\x02\x9a\x02\x04\x00\t\x99\x02\x9a\x02\x00\x99\x02\x9a\x02\x06\x00C\x99\x02\x9a\x02[\\\x00\x99\x02\x9a\x02\x00\x99\x02\x9a\x02\x99\x02\x9a\x02\x007\x00X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\x06\x06\x00+\xe7\x01\xe8\x01\x05\xe1\x01\xe2\x01\xe1\x01\xe2\x01XW#$X\xb9\x02\xe2\x01#\xbd\x01\xbe\x01$\xe1\x01\xe2\x01\xe1\x01\xe2\x01\x04\x00\xfb\x02X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\x00XW\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01XWX\xb9\x02\xe2\x01\xe1\x01\xe2\x01#|\xb9\x02\xe2\x01\xe1\x01\xbe\x01$\xe1\x01\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01XW\x00\xe1\x01\xe2\x01\x00X\xb9\x02\xba\x02\x00\xb9\x02\xba\x02\x00\xb9\x02\xba\x02\x00\xb9\x02\xba\x02\xb9\x02\xba\x02\x00WX\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01XWX\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01X\x06\x00m\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\x00X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01X\xb9\x02\xe2\x01\xe1\x01\xe2\x01X\x04\x00\x1f\xb9\x02\xba\x02W\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\xe2\x01\xe1\x01\n\x00\t\xba\x02\x00\x1f\x00 \x06\x00\x07\x11\r\x00 \x06\x00o\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11?@\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\xa7\x02\n\x00\xd5\x01\xa8\x02\x12\x11\x12\x11\x00\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\xa7\x02\xba\x02\x11\r\x00 \x00\x11\x12\x11\x12\x11\x12\x00\x1f\x00 \x00\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x00\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\r\x00 \x04\x00\xb5\x02\x11\x12\x11\x12\x11\x12\x11\x00\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x00\x12\x11\x00\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\xa7\x02\xa8\x02\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x00\x12\x11\x12\x11\x12\x11\x12\x11\x00\x12\x11\xa7\x02\x04\x00\x13\xa8\x02\x12\x11\x12\x11\x12\x11\x12\x11\x12\x1a\x00\x01Q\x04\x00\x01R0\x00\x01\x1f(\x00\x01\x99\x02^\x00\x01\x04\x04\x00\x01\x9f\x01\x08\x00\x05\xa0\x01\x9f\x01\xa0\x01\x06\x00\x05\xaa\x03\xa9\x03\x9f\x01\x04\x00\x19\xfa\x03\x00\xd7\x0271\x00@\x00?\x00@?@\x08\x00\x07?@?\x8e\x01\x06\x00\x05MN\x13\x06\x00\t9:9:9\x08\x00\x03?v\x04\x00\x1du\x00z\x03\x00\x04yvuv\x00uv\x00\x04\x06\x00\x07yvuz\x04\x00\x01y\x08\x00)z\x00\x03\x04yzyvuv\x00u\x00@6\x00\x04y@:y\x04\x00\x05v\x00u\x0c\x00\x03vu\x06\x00\x07vu\x00v\x04\x00\x05\x04\x009\x04\x00\x15:9:9:\x009:9:9\n\x00\t:\x03\x049:\x0e\x00\x03FE\x04\x00\x07FE\x00\x03d\x00\x05\xf4\x01\x00\xef\x01\x14\x00\x01>\x12\x00\x01\xd4\x02\x04\x00\x01\xd3\x02\x1a\x00\x11\xd4\x02\xd3\x02\x00\xb2\x01\x00\xb1\x01\xb2\x01\x00\xef\x01\x06\x00\x11>\xb2\x01\x00\xb1\x01\xb2\x01\xb1\x01\xb2\x01\xb1\x01= \x00\x05;B\x1c\x04\x00\t7\x1c\x00\x1b(\x04\x00\x05Y\x80\x03\xd9\x01\n\x00\x01?&\x00\x01\x04\x04\x00\x03CJ\x04\x00\x05I\x00V2\x00\x01\x08\x0e\x00\x01\xf4\x01\n\x00\x03\xf3\x01\xf4\x01\x06\x00\x05\xf3\x01\x00\xf4\x01\x08\x00\x01\xf3\x01\x06\x00\x03\xf4\x01\xf3\x01\x06\x00\x03\xf4\x01\xf3\x01\x10\x00\x03\xf4\x01\xf3\x01\x18\x00\x0b\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xf4\x01\xf3\x01\x08\x00\x17\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xf4\x01\xf3\x01\x04\x00\t\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xf4\x01\x14\x00\x01\xfd\x03\x08\x00\x07\xfe\x03\xf3\x01\xf4\x01\xf3\x01\x04\x00\x0b\xf4\x01\xf3\x01\xf4\x01\xf3\x01\xed\x01\xf0\x01\x0e\x00\x05\x87\x02\x18\xa0\x04.\x00\x11\xb7\x04\x00\x18\x00\xa0\x04\x9f\x04\xa0\x04\x9f\x04\xf0\x01\x08\x00+\xef\x01\xa0\x01\x9f\x01\xa0\x01\x9f\x01\xa0\x04\x9f\x04\xf0\x01\x00\xef\x01\x00\xa0\x04\x9f\x04\xa0\x01\x9f\x01\x00\xa0\x04\x9f\x04\x00\xa0\x04\x9f\x04\xf0\x01\x08\x00\x01O\x04\x00\x05\x80\x03\x9f\x04\xf0\x01\x04\x00\x01\xef\x01\x04\x00\x0b\xa0\x04\x9f\x04\x00\xa0\x04\x9f\x04\xf0\x01\x04\x00\x01\xef\x01\x04\x00\x01\x17\x18\x00\x05\xe2\x04\xa9\x03[\x04\x00\x0b\\\x00\xaa\x03\xa9\x03\xaa\x03\xd9\x02\x16\x00\x01=\x06\x00\x01^\x06\x00\x15\xeb\x01\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\x04\x00\x07\x94\x03\x00\x93\x03\x94\x03\x06\x00\x0b\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x0c\x00\t\x93\x03\x00\x94\x03\x93\x03\x94\x03\x06\x00\x19\x93\x03\x00\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\x94\x03\x93\x03\xa8\x02\x06\x00\x05\xa7\x02\xa8\x02\xff\x01\x10\x00\x03\'\xf2\x03\"\x00\x01\x85\x02\x06\x00\x07\x86\x02\x00\x85\x02\x86\x02 \x00\x01\xc1\x04\x10\x00\x03P(\x04\x00\x03\'\xec\x01\x10\x00\x01)\x04\x00\x01\xcc\x02&\x00\x01\xa1\x03\x06\x00\x01\x89\x01\x18\x00\x9d\x01\x8a\x01+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,+,\x00\x90\x01\x8f\x01\x90\x01\x00\x8f\x01\xfa\x01\xf9\x01+,\x00+,\x00+,+,+,\x00+,+,\xa0\x03\x0c\x00\x07\xdd\x03\x00\xde\x03\xdd\x03\x12\x00\x03\xde\x03\xdd\x03\x12\x00\x05\x90\x02\xce\x01\xcd\x01\n\x00\x01\x8f\x02\n\x00\x01>\x04\x00\r+,+,\x00+,\x06\x00\x07+,\x00\xfa\x01\x04\x00\x05\xf9\x01+,\x04\x00\r+,\x00JI\xfa\x01\xf9\x018\x00\x03+,\x10\x00\x01J\x04\x00\x15u,+,\xde\x01\xdd\x01\xde\x01\x89\x02\x8a\x02\xa7\x03\xc4\x03\x06\x00\x05\xf9\x01+,\x08\x00\t+,\x00\xb7\x01\xf6\x01\x04\x00\x11\xf5\x01\xb8\x01>=\xd4\x01\xd3\x01\xd4\x01\xd3\x01>\x06\x00\x03=\x84\x03\x04\x00\x13\x83\x03\x84\x03\x83\x03\x84\x03\x83\x03\x84\x03\x83\x03\x84\x03\x83\x03\x84\x03\x08\x00\x0f\x83\x03\x84\x03\x83\x03\x84\x03\x83\x03\x84\x03\x83\x03\x84\x03\n\x00\x03\x83\x03\xd4\x01\x12\x00\x07\xd3\x01\x92\x01\x91\x01\x89\x01\x04\x00\t\x8e\x04\x8d\x04\x00\x9c\x02\x9b\x02\x08\x00\x03\x9c\x02\xf2\x01\x04\x00\x01\x8d\x04\x0c\x00\x03\x8e\x04\x8d\x04\x04\x00\x03\x8a\x01\xd4\x01\x08\x00\x03\xd3\x01\xd4\x01\x1a\x00\x03\xd3\x01\xc0\x03\x06\x00\x01\x1f\x08\x00\x01\xdd\x03\x14\x00\x07>+,=\x06\x00\r>\xde\x01\xdd\x01\x86\x01\x00%*\x0c\x00\t\x02\x95\x02\xb2\x02\xcd\x01\xce\x01\x08\x00\x05\xcd\x01\x00\xce\x01\x04\x00\x03\xcd\x01\xce\x01\x04\x00\x05f\x00[\x18\x00\x01\\\x0c\x00\x01[*\x00\x01\\\x08\x00\x01[&\x00\x01M\x06\x00\rX\x00\x0287\x008 \x00\t7\x00a\x81\x01\x82\x01\x04\x00\x01\x8e\x01\x04\x00\x07<\x00[$\x04\x00\x05X\x1f[\n\x00\x01\\\x04\x00\x05 \x00{$\x00\t|\x00\x1f\x00 \x0c\x00\x01W\x04\x00\x05X\x00W\x04\x00\x05X\x00W\n\x00\x01X\n\x00\x03WX\x06\x00\x01W\x0c\x00\x01X\x04\x00\x01W\x06\x00\x0bXW\x00X\x00W\n\x00\x01X\x06\x00\x01W\n\x00\x01X\x04\x00\x03WX\x12\x00\x01W\n\x00\x01X\x04\x00\x07WX\x00W\x0c\x00\x01X\x06\x00\tW\x00X\x00W\x08\x00\x018\x0e\x00\x03[\\\x12\x00\x05[\x00\\\x0c\x00\x07[\x00$8\x04\x00\x01 \x04\x00\rW\x00#$\x00X{\x0e\x00\t$#\x00$#\x04\x00\x05$8[\x14\x00\x05|\x00{\x08\x00\x03|{\n\x00\t|\x00\x1f\x00 \x04\x00\x01\x1f\x04\x00\x0b \x1f[\xbd\x01\x00\xc0\x01\n\x00\x01\xbf\x01\x12\x00\r\xb2\x02\xb1\x02\xb2\x02\xb1\x02\xb2\x02\x00\xb1\x02\x0e\x00\x01\xb2\x02\x04\x00\x05\xb1\x02\x00\xc0\x01\x04\x00\trq\x00\xbf\x01\xc0\x01&\x00\x01\x06\x16\x00\x01\x02\"\x00\x03\xd3\x01\xd4\x012\x00\tV\xa9\x02\xaa\x02\xa9\x02\xde\x01\x18\x00\x11\xdd\x01\xde\x01\xba\x01\xe1\x04\xa8\x03\x00\xa7\x03\xa8\x03\xa7\x03\x04\x00\x05\xa8\x035:\x06\x00\x01\x87\x02\x12\x00\x01\x88\x02\x04\x00\x01\xda\x01\x18\x00\x01\xd1\x01\x08\x00\x01\n\x0c\x00\x05)\x00*\x18\x00\x0bR{*)\x00*J\x00\x032[\x14\x00\x03\\[\x06\x00\x07j\xe5\x03\x00\xa8\x03\x1c\x00\x05\xce\x01\xc7\x04\xfa\x02*\x00\x03\x91\x02\x92\x02\x08\x00\x05\xa7\x03.2\x08\x00\x03\xbc\x02\xbb\x02\x12\x00M1\x00\xee\x02\xed\x02212\xbc\x02\xbb\x021\xee\x02\xed\x0221\xee\x02\xed\x02\xee\x02\xed\x022\xbc\x02\xed\x02\xee\x02\xed\x0221\xc0\x04\xbf\x04\xc0\x04\xbf\x0421\xee\x02\xed\x02ba\xee\x02\xed\x02\xee\x02\xed\x02\x06\x00\x0bbababa\x04\x00\x0f\xc0\x04\xbf\x04\xc0\x04\xbf\x04baba\x04\x00\x1bbaba\xc0\x04\xbf\x04\xc0\x04\xbf\x04\xc0\x04\xbf\x04baba\x08\x00;\xfa\x02\xf9\x02\x00\xfa\x02\x00\xf9\x02212121\x16RQ\x15\x00\xee\x02\xed\x022121\x00ba\xc0\x04\xbf\x04\xc0\x04\xbf\x04\x04\x00\x19\xc0\x04\xbf\x04\xc0\x04\xbf\x04\xea\x03\x00\xe9\x03\xc0\x04\xbf\x04ba\x00\xea\x03\x06\x00!o\x00\xf9\x02\x0e\r\x0e\r\x0e\r\x0e\r\xc0\x04\xbf\x0421\x00\xfa\x02\x08\x00\x0b\xf9\x02\xc0\x04\xbf\x04\xc0\x04\xbf\x04b\x06\x00\x13a\x00\xea\x03\x00\xe9\x03\x002121\x12\x00\t\xc0\x04\xbf\x042\x001\x04\x00\x1b\xfa\x02\xf9\x02\x0e\xb2\x04\xb1\x04\r\xee\x02\xed\x02\xee\x02\xed\x02\xfa\x02\x91\x02g\xfa\x02>\x00\x0f\x04\xf9\x01\xfa\x01\x00\xf9\x01\xfa\x01\xf9\x01\xfa\x01\x12\x00\x01\x14\x06\x00\x05\xa3\x03\x00\xa4\x03\x04\x00\x03\xa3\x03\xa4\x03\n\x00\r\xa3\x03\xa4\x03\xa3\x03\xa4\x03\xa3\x03\x00\xa4\x03\x04\x00\x03\xa3\x03\xa4\x03<\x00\x01\x04\x06\x00\x03\xb1\x01\xb2\x01\x18\x00\x0b\x0c\x00\x9d\x01\x9e\x01\x9d\x01\x9e\x01\x08\x00\x03\x9d\x01\xd4\x02\n\x00\x03\xd3\x02\x9e\x01\x08\x00\t\x9d\x01\x00\x9e\x01\x00\xbd\x03\x06\x00\x0b\x19\x00\x1a\x19\x00\xe0\x03\x16\x00\x03 \x1f\x08\x00-\x0e\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\xf7\x01\x00\xd8\x01&\x00\x1b\x0e\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\r\x06\x00\x05 \x00\x1f\x04\x00\x01\x91\x03\n\x00\r\x94\x03\x00\x93\x03\x00\x94\x03\x00\x93\x03\x08\x00\x07\x94\x03\x93\x03\x94\x03\x93\x03\x04\x00\x01\x94\x03\x0c\x00\x11\xa7\x02\xaa\x02\xa9\x02\xaa\x02k\x00vuv\x06\x00\x05uvu\x18\x00\x03v\xa7\x02\x1a\x00\x07\xb2\x02\x00\xb1\x02\xb2\x02\n\x00\x01\xb1\x02\x82\x01\x00\x01\xb2\x020\x00\x01\xb1\x02X\x00\x01\xb2\x02\x10\x00\x03S\\\x04\x00\rWF\x00\x12\x11\x12\x11\x0c\x00\x03\x12\x11\x04\x00\x03\x12\x11\x04\x00\x03\x12\x11\x04\x00\x03\x12\x11\x04\x00c\x12\x11\x12\x00\x11\x12\x00\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x00\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x0c\x00#\xf7\x01\xe6\x01\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x00\x12\x11\x00EX\n\x00\x0bWXWXWX\x04\x00\x0fWX\x00W\x00X\x00\x11\x04\x009\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12 \x00/\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12\x11\x12B\x00\x0bWX\x00\x11EX\x06\x00\x07WXWX\x18\x00\x03WX\x06\x00\x03WX\x08\x00\x03WXj\x00\x01\x06\x16\x00\x01\x04\x08\x00\x01\xfd\x03\x04\x00\x01\x80\x04\"\x00\x11\xff\x03\x80\x04\xff\x030/\x80\x04\x00\xff\x03\x80\x04\x0e\x00\x01\x08\x06\x00\x01\x0c\x04\x00\x03\xe9\x03\xea\x03\x06\x00\x01\x8b\x03\x04\x00\x0b\x90\x03\x8f\x03\x90\x03\x8f\x03\x00\x90\x03\x12\x00\x05\x87\x01\x00\x94\x01\n\x00\x03\x9b\x03\x9c\x03\x04\x00\t\xf5\x01\xfe\x01\x00\xfd\x01?&\x00\x01\xc9\x01\x04\x00\x03\x8e\x04\x8d\x04\x06\x00\x01\x8e\x040\x00\r\x8d\x04\x00\x8e\x04\xf1\x01\xf2\x01\x83\x03\x84\x03\x06\x00\x03\x83\x03\x84\x03\x0c\x00\x01\x02\x14\x00\x05\xc1\x04\x00\xc2\x04\n\x00\x01\xc1\x04\x08\x00\x15\x88\x04:9:9\x00\x87\x04\x00\xc2\x04\xc1\x04\x88\x04\x0c\x00\x03:\x04\x06\x00\x07\xb1\x04\xb8\x04\xb7\x04\xb8\x04\n\x00\x07\x9f\x04\x00\xa0\x01\x9f\x01\x0e\x00\x03\xa0\x01\x9f\x01\n\x007\xf4\x01_\x00\x8c\x03\x8b\x03\xb6\x03\xc9\x04\xa0\x04*\xc9\x04\xa0\x04*\xc9\x04\xa0\x04\x9b\x03\xc6\x03\xc9\x04\xa0\x04\x9b\x03\x83\x01\x00\xa0\x04\x9f\x04\x00\xbe\x02\xbd\x02\xa0\x04\x9f\x04\x10\x00\t\xa0\x04\x9f\x04\x17\x00\xb8\x04\n\x00\x01\xb1\x01\x0e\x00\x03\x9b\x02\xde\x03\x1a\x00\x07\xdd\x03\xd4\x03\x00\n\x06\x00\x07\t\x00\xc3\x01\xce\x01<\x00\x01\x02\x1c\x00\x05\n\xff\x03\x80\x04\x0c\x00\x05\xff\x03\x00\x9a\x04\x10\x00\x07\x99\x04\x00\x9a\x04\x99\x04H\x00\x03\x9a\x04\x99\x04\x10\x00\x19\x9a\x04\x99\x04\x9a\x04\x99\x04\x9a\x04\x99\x04\x9a\x04\x99\x04\x9a\x04\x99\x04\x9a\x04\x99\x04\x80\x04\x16\x00\t\xff\x03\x80\x04\xff\x03\xa2\x03\xa1\x03\x10\x00\x01\x80\x04\x0e\x00\x01\xf1\x04\x08\x00\x03\xce\x02\xac\x02\x08\x00\x01\xd3\x02\n\x00\x03\xd4\x02\xd3\x02\x0c\x00\x01\xda\x02\x0c\x00\x03\x02\xbf\x04\n\x00\x0321\x04\x00\t212#\r\x1c\x00\x01\xc0\x04\x9a\x01\x00\x05\x1b \xc3\x04\x06\x00\x010V\x00\x01\x9a\x04\x04\x00\x05\x99\x04\x00\x9a\x04\x04\x00\x03\x99\x04\x9a\x04\x04\x00\x07\x99\x04\x00\x9a\x04\x99\x04\x04\x00\t\x9a\x04\x99\x04\x00\x9a\x04\x99\x04\x04\x00\x05\x9a\x04\x00\x99\x04\x04\x00\x01\x9a\x04R\x00\x01\xa7\x03B\x00\x01\xb6\x03<\x00\x03\xd3\x02\xd4\x02V\x00\x01\x04\x0e\x00\x11\xc9\x01\x00\xcc\x01\x00\xcb\x01\x00\xcc\x01\xcb\x01\xcc\x01\x04\x00\x03\xbf\x03\xdb\x01\x10\x00\x03\xa0\x04\xb1\x02\n\x00\x01\x9d\x01\x0e\x00\x05\xd0\x03\xb1\x02\xb2\x02 \x00\x03\xcf\x03\x9e\x01\x06\x00\x03\x9c\x01\xb9\x02\x06\x00\t\xd0\x03\xcf\x03\xd0\x03\xcf\x03\xd0\x03\x08\x00\x01\xcf\x03\x04\x00\x03\x9e\x01\x9d\x01\x16\x00\x01\xd0\x03\x0c\x00\x03\xcf\x03\xd0\x032\x00\x03\xb1\x02\xb2\x02l\x00\x03\x95\x01\x96\x01$\x00\x05\x95\x01\x96\x01\x9f\x04\x14\x00\x19\xdc\x01\xae\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\n\x00\x13\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x18\x00\x0f\x9c\x01\x9b\x01\x00\x9c\x01\x9b\x01\x9c\x01\x96\x01\xb1\x02\x04\x00\x01\xed\x01\"\x00\x03\x96\x04\x87\x04(\x00\x05\x02\xde\x03\xdd\x03\x06\x00\x03\xde\x03\xdd\x03\x04\x00\t\x98\x049:9\xb0\x01\x16\x00\x0b\xaf\x01:9:9:\x12\x00\x039\x98\x01\x08\x00\r\x97\x01\x98\x01\x97\x01\x98\x01\x97\x01\x00:$\x00\x199\x00:9:9\x89\x01\x8a\x01:9:9]\x08\x00\x07^:9\xb0\x01\x04\x00\x03\xaf\x01\x9f\x01\x1c\x00\x11\xa0\x01\x9f\x01\x00\xa0\x01\x9f\x01\x00\xa0\x01\x00\x9f\x01\x1c\x00\x01\xa0\x01\x04\x00\x01\x9f\x01\x06\x00\x05\xa0\x01\x9f\x01\xa0\x01\x04\x00\x01\x9f\x01\"\x00\x13\xa0\x01\x9f\x01\xa0\x01\x9f\x01\x00\xa0\x01\x9f\x01\xa0\x01\x00\x9f\x01\x1c\x00\x15\xa0\x01\x9f\x01\xa0\x01\x9f\x01\xa0\x01\xc7\x02\x00\xc8\x02\x9f\x01\xa0\x01\xdd\x03\x06\x00\x01\xac\x03\x08\x00\x0f\x85\x03\n\x00\xf6\x02\x00\xf5\x02\xf6\x02)\x0c\x00\x01\x94\x01\x10\x00\x01\xcf\x03.\x00\x0b\x92\x01\x00\xc0\x01\x99\x01\xb5\x01x\x06\x00\x03>\xb5\x01\x10\x00\x01\xb6\x01\x04\x00\x01\xb5\x01\x0c\x00\x01\xb6\x01\n\x00\x03=\x18Z\x00\x01G\x04\x00\x01H\x08\x00\x03GH\x0c\x00\x05G\x00H2\x00\x07\x8f\x01\x90\x01\x00\x8f\x014\x00\x01\x10\x06\x00\x03\x86\x03\xe3\x02\x92\x03\x00\x05^GH\x04\x00\x03GH\n\x00\x07GHGH\x08\x00\x01G\x06\x00\x03HG&\x00\x01H\x06\x00\x03G\xd4\x02\x10\x00\x01\x9f\x01\x0c\x00\x07\xa0\x01\x9f\x01\xa0\x01\x9f\x01\x04\x00\x01\xa0\x01\x0c\x00\r\xc1\x02\x00\x042\x00G0\x04\x00\x03\x18\xfc\x01\x08\x00\x03\xfb\x01G\x1e\x00\x03HG\x18\x00\tH\xa8\x01\x86\x01\xad\x02\xae\x02\x12\x00\t\xad\x02\x00\xae\x02\xad\x02\xae\x02\x04\x00\x01\xad\x02\x04\x00\x03\xae\x02\xad\x02\x04\x00\x11\xae\x02\xad\x02\xae\x02\xad\x02\x00\xae\x02\x00\xad\x02\xae\x02\x0e\x00\x05\xad\x02\xae\x02\xad\x02T\x00\x01\xae\x02\x04\x00\x05\xad\x02\xae\x02\xdf\x02\x06\x00\x07\xe0\x02\xad\x02\xae\x02\xad\x02\xbc\x02\x00\x0b\xbe\x02\xb1\x02\x9c\x01\x9b\x01\x00\x9c\x01\x04\x00\x01\x9b\x01\x16\x00\x01\x9c\x01\x06\x00\x0b\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x9b\x01\x9c\x01\x08\x00\x0f\x9b\x01\x00\x9c\x01\x00\x9b\x01\x9c\x01\x00\x9b\x01\x08\x00\x01\x9c\x01\x04\x00\x03\x9b\x01\x9c\x01\x06\x00\x01\x9b\x01\x04\x00\x07\xfa\x01\xe1\x01\x00\xe2\x01\x06\x00\x01\xdf\x01\x04\x00\t=>\x00%BB\x00\x07\xb0\x02\xaf\x02AX\x04\x00\x01\xa9\x02\n\x00\x05\xb8\x02ts\x04\x00\x01\x8c\x02\x06\x00\x01\x85\x02\"\x00\x01\xa0\x01\n\x00\x01\x9f\x01F\x00\x01\x9a\x01\n\x00\t[\x00b\x00m\x0c\x00\x01\xef\x02\n\x00\x05\xaa\x02\xa9\x02\xf0\x02\x08\x00\x01E\x08\x00\x03\xa9\x02\xf0\x02\x0c\x00\x05<\x007\x08\x00\x05\x9c\x01\x00\x95\x01\x04\x00\x01^\x0c\x00\x01[0\x00\x05\\[\\\x0c\x00\x07[\\\x00[\x12\x00\x03to\x1a\x00\x03^]$\x00\x01\x87\x01\x04\x00\x03\x9a\x01\xbf\x01\x04\x00\x01\xd4\x01\x18\x00\x012\x06\x00\x01-\x16\x00\x03\xb9\x03\xba\x03\x04\x00\x05\xb9\x03\xba\x03\xb9\x03\x1c\x00\x01\xba\x03\x0e\x00\x1f.[\x87\x02\xde\x03\xdd\x03\xde\x03\x00\xdd\x03\x00\x88\x029:9:\x00*\x06\x00\x01~\n\x00#\xf3\x03\xf4\x03\xf3\x03\xf4\x03}\x00~}\x00\xf3\x02\xca\x02\x00ts\x00*)*\x06\x00\x01)\x04\x00\x0b*)*\xf5\x02\xf6\x02)\x14\x00\x01\\,\x00\x03\x95\x01\x96\x01\x1c\x00\x03\x18\x17$\x00\x03\x95\x01\x96\x01\x10\x00\x03\x18\x17\x08\x00\x03\x18\x17<\x00\x03\x18\x17\x10\x00\x03\x18\x17F\x00\x03\x18\x17\x04\x00\x03\x18\x17\x04\x00\x03\x18\x17\x04\x00\x03\x18\x17\x04\x00\x07\x18\x17\x18\x17\n\x00\x07[\\\x18\x17\x04\x00\x07\x18\x17\x00\xa5\x03\x04\x00\x15\xca\x02\x00ts\x00\\\xa7\x03\x00\xa8\x03\x00\xe1\x01\x08\x00\x17\xe2\x01\x95\x01\x96\x01\x95\x01\x96\x01\x95\x01\x96\x01\x95\x01\x96\x01\x18\x17\x18\x06\x00\x0bqr\x00I,+\x08\x00\x032+\xde\x01\x00\x01\x01\x0c\x00\x01\x04\x06\x00\t\n\r\x00\x0e\r\x0e\x00\x05\x0e\r\x0e\x06\x00\x01\r\x08\x00\x01\x0e\n\x00\x0b\r\x0e\r\x0e\x00\r\x10\x00)\xd7\x01G\x00HGHG\x9c\x02\x002ghghghghghg\x04\x00ghghghghghghghg\x00hghghghghghghghghghghghghghghghghghgh\x08\x00\x03gh\x10\x00\x05ghg\x0c\x00\x07h\x00gh\x0c\x00\x01\x06:\x00\x0b\x9b\x03\x9c\x03\x9b\x03\x00\x84\x04\x83\x04\x06\x00\t\xca\x04\xc9\x04\xca\x04\xc9\x04\xca\x04\x04\x00\x03\xc9\x04\xca\x04\x14\x00\x07\xc9\x04\xca\x04\xc9\x04\xca\x04\x10\x00\x0f\xc9\x04\xca\x04\x00\xc9\x04\xca\x04\xc9\x04\xca\x04\xc9\x04\x04\x00\x11\xca\x04\xc9\x04\xca\x04\x00\xc9\x04\x9c\x03\x00\x9b\x03\x9c\x03\x1e\x00\x03\x9b\x03\x9c\x03\x0c\x00\x03\x9b\x03\x9c\x038\x00\x07\x05[\x00\\\x18\x00\x01\x18\x04\x00\x01\x88\x01\x14\x00\x15wxwxwxwxwxwz\x00\x01\xad\x03\n\x00\x05\xbe\x03\x00\x91\x04\x06\x00\x01\x92\x04\x0c\x00\x01\xbd\x03\x04\x00\x01\xbe\x03F\x00\x03\xbd\x03\xbe\x03\x04\x00\t\xbd\x03\xbe\x03\x00\xbd\x03\xbe\x03<\x00\x01\x91\x04&\x00\x01\x92\x04\xae\x01\x00\x01\x08\x04\x00\x059\x00:\x06\x00\x039:(\x00\x059\x00:\x10\x00\x019\x06\x00\x01:\x1a\x00\x019\x06\x00\x017\x06\x00\x01~\x04\x00\x15y|\x00\x1e\x99\x01\x00\xa8\x01\x00\xdd\x03\x00\xde\x03\x12\x00\x01\xa5\x01\x08\x00\x01\xa8\x01\x0e\x00\x07\xa7\x01\xa8\x01\xa7\x01\xa8\x01\"\x00\x01\xa7\x01>\x00\x05\xa8\x01\x00\xa7\x01\x08\x00\x01\xca\x01\n\x00\x05]\x00^\x1a\x00\x1b1\x1d\x00{\x0e\r\x0e\r\x0e\r\x0e\x00\r\x04\x04\x00\x11\x03\x0e\r\x0e\r\x0e\r\x00\x0e$\x00\x03\r\x04\x04\x00\x03\x03\x04\x04\x00\x0f\x03\x0e\r\x0e\r\x00\x0e\r\x04\x00\r\x0e\r\x04\x03\x04\x03\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x04\x04\x00\x03\x03\x04\x04\x00\x03\x03\x04\x04\x00\x03\x03\x04\x04\x00\x03\x03\x0e\x04\x00\x03\r\x0e\x04\x00\x03\r\x0e\x04\x00\x07\r\x04\x03\x04\x04\x00\x03\x03\x9a\x01\x04\x00\x154343\x00\xaf\x02\x00\xb0\x02\x87\x02\x00\x88\x02\x0e\x00\x03\x99\x01\x95\x01\x1c\x00\x03\x96\x01\xce\x01\x06\x00\x01\x14\x06\x00\x07\xc9\x04\xca\x04\xc9\x04\xca\x04\x06\x00\x03\xc9\x04\xca\x04\x04\x00\x03\xc9\x04\xca\x04\x04\x00\x03\xc9\x04\xca\x04\x06\x00\x05\xc9\x04\xca\x04\xc9\x04\x06\x00\x01\xcc\x04\x0c\x00\x05\xaf\x01\x00\xb0\x01\x8e\x01\x00\x01\x89\x05.\x00\x01\xbc\x01\x18\x00\x01N\n\x00\x01\xf3\x01\x0e\x00\x01:\x06\x00\x019\x8e\x01\x00\x0f\xac\x04\x00Y\x00\xd1\x03\x00\x0c\x10J\x00\x03\x04+\x08\x00\x01,\x18\x00\x03\x04\xb6\x03\x14\x00\x05\xb5\x03\x00\xb6\x03\x06\x00\x03\xb5\x03\xb6\x03\x08\x00\x07\xb5\x03\x00\xb6\x03\xb5\x03\x06\x00\x03\xb6\x03\xb5\x030\x00\x03\xb6\x03\xb5\x03\x06\x00\x03\xb6\x03\xb5\x03\x12\x00\x03\xb6\x03\xf7\x02\x12\x00\x01\x04\x08\x00\x01\xe8\x03\x0e\x00\x01\xe7\x03\x04\x00\x05\xe8\x03s\xb5\x03\x08\x00\x11\xb6\x03\xf3\x02\x00\xf4\x02t\xa9\x04\x00\xb6\x03\xf3\x02\n\x00\x01E\x06\x00\x03b\x8d\x01\x08\x00\x01, \x00\x0bbababaV\x00\x07+,+\x8e\x01\x1a\x00\x01\xd0\x02\x04\x00\x01\xbb\x02\x08\x00\x17Z\xe2\x01\x00>\x9f\x02\xa0\x02\x9f\x02\xa0\x02\x9f\x02\xa0\x02\x00\xf9\x02\x1e\x00\t\n\xf0\x02\x9f\x02OP\x06\x00\r\xa0\x02\xef\x02\x00\xf0\x02\x1c\x00\xfd\x02\x06\x00\x11\xa4\x02>=\xbb\x02\xbc\x02\xbb\x02\xbc\x02\x00\xbb\x02\x0c\x00\x03\x96\x03\x95\x03\x06\x00\t\x18BABY\x16\x00\x03\xbc\x02\xbb\x02\x04\x00\x03\x96\x03\x95\x03\x06\x00\r\x96\x03\x95\x03\x00\xbc\x02\x00>=\x08\x00\r\xe1\x01\x8d\x01\xb0\x01\xaf\x01E\xd4\x01\xa0\x02\x08\x00\x01\x9f\x02\x18\x00\x07\xe2\x01\x87\x02\x00g\x06\x00\x0b\xb0\x01\xec\x01\x00\xcf\x01\xd0\x01\xcf\x01\n\x00\x03\xd0\x01\xcf\x01\x08\x00\r\xd0\x01\xeb\x01\xaf\x01\xec\x01\x0065&\x00\x03\x88\x01r&\x00\x15\x8d\x04\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02J\x04\x00\x0b\x9b\x03\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\x08\x00\x03\xd1\x02\xd2\x02\x08\x00\x8b\x03\xd1\x02\xd2\x02\x00\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02J\x00q\xa9\x02\x9c\x03I\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02JI\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\xd2\x02\x00JI\x04\x00\x03\xd1\x02\xd2\x02\x04\x00\x13\xd1\x02\xd2\x02\x00\xd1\x02\xd2\x02\xd1\x02\xd2\x02\xd1\x02\x00\xca\x02\x06\x00\x03\xc9\x02\xca\x02\x0c\x00\x01\xc4\x01\x06\x00\r\xbb\x01\xbc\x01\x00\xbb\x01\x00\xbc\x01\xbb\x01\x10\x00\x01\xbc\x01\x12\x00\x01\xbb\x01\x08\x00\xdb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\x00\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xc9\x01\x0e\r\xca\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\x00\xbb\x01\xbc\x01\xbb\x01\xbc\x01\x00\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\x06\x00\'\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\x04\x00/\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\x00\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\xbc\x01\xbb\x01\x08\x00\x07\xbc\x01\x00\xc9\x01\xca\x01\x04\x00\x01\xbb\x01\x08\x00\x01\x0e\x04\x00\x01*\x0c\x00\x01\xd3\x01\x14\x00\x01\xbc\x02\x18\x00\x1d\xbb\x02\xa0\x02\x9f\x02\xa0\x02\x9f\x02\xa0\x02\xef\x02\x00\xf0\x02\x00\xef\x02\x00\t\x00\x96\x03\x0e\x00\x01\x95\x03\x0e\x00\x0b\xfa\x02\x1c\xfd\x02\xfe\x02\xfd\x02\xfe\x02\x0e\x00\t\xfd\x02B\xe2\x01\xb1\x02\xb2\x02\x06\x00\x03>=\x06\x00%\xbb\x02\xbc\x02\x00ZY\x00\xbb\x02\xbc\x02\xbb\x02\xbc\x02\xe1\x01\xbc\x02/abab\x007\x12\x00\x078\x00)\xe1\x01\x08\x00\x07\xe2\x0178\r&\x00\x05\xc1\x02\x00\xd0\x02\x10\x00\x01\xcf\x02\x0e\x00\x01\xd0\x02\x04\x00\x03\xcf\x02\xd0\x02\x04\x00\x07\xcf\x02\xd0\x02\x00\xcf\x02\x0c\x00\x01\xd0\x02\x08\x00\x01\xcf\x02\n\x00\x03\xd0\x02\xcf\x02\x08\x00\x01\xd0\x02\x04\x00\x03\xcf\x02\xd0\x02\x10\x00\x05\xcf\x02\xd0\x02\xcf\x02\x0c\x00\x0b\xd0\x02\xcf\x02\xd0\x02\xcf\x02\xd0\x02\xcf\x02\x04\x00\x13\xd0\x02\xcf\x02\xd0\x02\xcf\x02\xd0\x02\xcf\x02\xd0\x02\x00\xcf\x02\xd0\x02\x04\x00\x17\xcf\x02\xd0\x02\x00\xcf\x02\xd0\x02\xcf\x02\xd0\x02\xcf\x02\xd4\x02\x00IJ\x10\x00\x03IJ\x04\x00\tI8\x00\x16\x15\x06\x00\x03\x16\x15$\x00\x01\x16T\x00\x03\xd9\x03\xf0\x01\x04\x00\x03\xbc\x02\xbb\x02\x04\x00\x01\xe2\x01\x06\x00\x17`W\xb5\x03\xb6\x03$#X34\x00W$\x04\x00\x03#$\x04\x00)#\x00$#\xb5\x03\xda\x03#\xb5\x03\xda\x03#\xb5\x03\xda\x03#\xb5\x03\xda\x03#\xb5\x03\x00\xda\x03#$V\x00\x0b\x97\x03\xf4\x02XW\x00X\x08\x00\x0334\x04\x00\x03W$\x04\x00\x07#\xb5\x03B\xf4\x02\x04\x00\x13\xf3\x02\xe8\x03\xe7\x03\xe8\x03\xe7\x03\xe8\x03\x00\xe7\x03\xe8\x03s\n\x00\x0b\xf3\x02\xf4\x02X\xcb\x03\xcc\x03\xcb\x03\x08\x00\x11A\xb6\x03t\xa9\x04\xb6\x03\xb5\x03\xaa\x04s$2\x00\x01#\x04\x00\x01$\x06\x00\x03#$\x04\x00\x07#\xb5\x03\xb6\x03X\x1e\x00\x1bWXW\xf3\x02AB\xf4\x02XW\x00\xf3\x02\x00\xf4\x02$\x04\x00\x03#$\x1c\x00\x01+\x08\x00\x01>\x08\x00\x03=\xb1\x02\x06\x00\x01\x8c\x03\x10\x00\x0fYZY\x00\xe1\x01\xe2\x01\x00\xbb\x02\x04\x00\x05\x96\x03Y\xbb\x02\x04\x00\x07\x96\x03\x95\x03\xbc\x02\xbb\x02\x04\x00\x07\x96\x03\x95\x03\xbc\x02Z\x0e\x00\x07\x06\xcb\x03\xe8\x03\x1b\x0e\x00\x05W\x00X\x04\x00\x03Wn\x1e\x00\x03IJ*\x00\x01I\x0c\x00\x03\xcf\x01\xd0\x01\n\x00#^]\xcf\x01\xd0\x01J\x00\xa3\x04\x00\xaa\x04\x00\xa9\x04\x00\xb6\x03\x00t\x00\xa9\x04\xaa\x04\x04\x00\x03st\x0e\x00\x07O+\xdf\x03\xb6\x01\xc2\x03\x00\x0b\xb5\x01\xb6\x01\xb5\x01\x00\xb6\x01\xd0\x02\x06\x00\x03\x85\x04\xca\x04\x04\x00\x01C\x04\x00\tD\x00C\x85\x04\xb6\x01\x14\x00\x01\x94\x03\x12\x00\x01C\x1e\x00\x01D\x08\x00\x03\xa3\x01\xc7\x03\x0c\x00\x01\xc8\x03\x12\x00\x01\xc7\x03\x04\x00\x01\xc8\x03\x04\x00\t\xc7\x03\xc8\x03\xc7\x03\x00\xc8\x03\x12\x00\x01\xc7\x03\x04\x00\x1d\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xc8\x03D\x00\x01\xc7\x03\x8a\x01\x00\x05X^\xf2\x01\x18\x00\x0b\xf1\x01]^]^\xce\x02\x04\x00!\xcd\x02]\x00\x84\x03w\xf4\x01\xc7\x01\x00Li\x1e\x00LK\x00LK\x06\x00\x03\xec\x01\xeb\x01\x0c\x00\x03LK\x06\x00\x11L\x00K\x00LK\x00+x\x06\x00\x01w\n\x00\x19x\x00K+\x0ej\x00wx\x00wxK\x04\x00\x03\xec\x01\xeb\x01\x0c\x00\x03+,\x06\x00\x0b+\x00xK+x\n\x00\x01w\x06\x00\x03\x0e\xfa\x01\x08\x00\x01C\x04\x00\x0bD\x00C\x93\x03\x00\x1a\x06\x00\x03\xe4\x01\xe3\x01\n\x00;\x08\x00\x90\x02\x00P\x00OPOPOPO\xa7\x02\xa8\x02\xa7\x02\xa8\x02\xa7\x02\xa8\x02\xa7\x02\xa8\x02\xa7\x02\xa8\x02\xc8\x01\xc7\x01\x94\x01\x93\x01\x94\x01\x93\x01\x94\x01\x04\x00\x1943\x00\x93\x01\xa7\x02\x00\xa8\x02st\x05\xe7\x01\xb5\x01\xb6\x01\x06\x00\x01\x80\x03\x08\x00\x01\xf5\x02 \x00\x01\x02\x06\x00\x03\x88\x03\x87\x03\x06\x00\x01\x88\x03\x04\x00\x01\x87\x03\x10\x00\x0b\x88\x03\x00\x87\x03\x00\x88\x03\x87\x03\n\x00\x01\x88\x03\x04\x00\x07\x87\x03\x88\x03\x87\x03p\x04\x00\tNLW\xa2\x01\x95\x01\x06\x00\x01\x96\x01\x08\x00\x01I\x04\x00\x1d \x1f\x00\x18\x00\x17 \x1f\x00 \x00\x07q\x00r\x06\x00\x0f\x1fOX\x00JIWX\x10\x00\x13[\\\x00[\x04\x00xwxw\x04\x00kxw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xw\x00xwxwxwxw\x0f\x06\x00I\x88\x01\x87\x01\x10xy\x02xwxwxw\x00xwxwxwxwxwx\x87\x01hWx\x1f\x00 wX \x1f\x00 \x04\x00\x03wx\x08\x00\r\x81\x02\x82\x02\x81\x02\x82\x02\x00\x81\x02\x82\x02\x04\x00\x0b\x96\x01\x8d\x02x\x00wX\x10\x00\x01\xe7\x01x\x00\x01\x88\x02\x14\x00\x03\x81\x02\x82\x02\x04\x00\x05^\x00\xbf\x02\x10\x00\x03\xc0\x02\xbf\x02\x04\x00\x03\xc0\x02\xbf\x02\x12\x00\x07\xac\x02\xf5\x02\xe6\x01c\x04\x00\x1bdcdc,Lw,+,Lw,>\x04\x00\t=Lw,>\x04\x00)=Lw,Lw,Lw,Lw,L\x00w,Lw,>\x04\x00\x0b=\x00Lw,>\x04\x00\x0b=\x00Lw,>\x04\x00\x03=>\x04\x00\x0f=\x00Lw,\xec\x01\x97\x02\x98\x02\x14\x00\x07\x9f\x01w,>\x04\x00\x03=>\x04\x00#=Lw,\xd5\x01\xd6\x01Lw,+,+,+,+,>\x04\x00\x0b=LK+,\x1d\n\x00\x05\x1e\x00>\x04\x00%=LKLw,\x00+,L|\xc7\x010[,0[,Y\x04\x00\x0b\n\x86\x01\x94\x01\x00\x93\x01\x94\x01\x06\x00\x03\x93\x01\x94\x01\x06\x00\x01\x93\x01\x04\x00\x15\x94\x01\x93\x01\x94\x01\x93\x01\xa7\x02\xa8\x02\xa7\x02\xbc\x03\x93\x01\x00q\x0e\x00\x01\x04\x18\x00\x01Q\x0c\x00\x01^\x1a\x00\x01\x0e\x04\x00\x01\x14\x08\x00\x03\x10\x0f\x08\x00\x05\x7f\x00\x8a\x01\x06\x00\x01\x8f\x03\x16\x00\x03\x90\x03\x8f\x03\x04\x00\x01\x90\x03\x0e\x00\r8\xc7\x03\xc8\x037\x0087\x0c\x00\x01\x8f\x03\x06\x00\x01\xc8\x03\x08\x00\x03\xc7\x03\xc8\x03\x06\x00\x01\xc7\x03\x16\x00\x01\xc8\x03\x06\x00\x01\xc7\x03\x14\x00\x05\xc8\x03\xc7\x03\xc8\x03\x16\x00\x03\xc7\x03\xc8\x03\x12\x00\x03\xc7\x03\xc8\x03\n\x00\x01\xc7\x03\x04\x00\x01\xc8\x03\x14\x00\x017\x06\x00\x11\x8f\x03\xc8\x0378\xc7\x03\xc8\x03\xc7\x03\x90\x03\x8f\x03\x04\x00I\x90\x03\x8f\x03\x90\x03\x8f\x03\x00\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\x90\x03\x8f\x03\xc8\x0378787\x02\\W\x01\n\x00\x07\x02\x00\xbd\x02\xbe\x02H\x00\x05\xbd\x02\x00\xd6\x03\x06\x00\x05\xd5\x03\xd6\x03\xd5\x03\x08\x00\x01\x9c\x03\n\x00\x03\x9b\x03\x9c\x03\x04\x00\x03\x9b\x03\xfc\x01&\x00\x07\xfb\x01\xfc\x01\xfb\x01\xbe\x02\x04\x00\t\xbd\x02\xfc\x01\xfb\x01\x00\xbe\x02h\x00\x03\xbd\x02\xbe\x02\x8c\x01\x00\x05\x0c\x00\x96\x01\x04\x00\x01\x95\x01\x08\x00\x01\x06\x08\x00\x01\x04\x08\x00\x01\xc0\x01\x04\x00\x01\xbf\x01\x10\x00\x17\x97\x02\xc8\x02\x1b\x08U\x00\xf1\x01\xf2\x01\x00\xf1\x01\xf2\x01T\x08\x00\x01\xe3\x016\x00\x07\xf6\x02\x8f\x01\x01\x8f\x01\x04\x00\x01\x90\x01L\x00\r\x8f\x01\x90\x01\x8f\x01\x90\x01\x027+\x18\x00\x03ba\x06\x00\x03ba\x04\x00\x03ba\x04\x00\x01x\x0e\x00\x05\x15ax,\x00\x0b\x15ax\x00wx\x06\x00\x07\x15ax\x15\x1a\x00\x0b\x16KY\x90\x01\x8f\x01\x90\x01\x10\x00\x17\x8f\x01\x00\x90\x01\x8f\x01\x90\x01\x8f\x01\x90\x01\x8f\x01.\xf4\x01\x8f\x017\x10\x00\x15878cd\x01\x02\x01\x02\x00\x01*\x00\x01\x02D\x00\x01\xa4\x01\x04\x00\x03\xd7\x03\xd8\x03\x04\x00\x01\x87\x03\x08\x00\x01\x88\x03\x06\x00\x03\x87\x03\x88\x03\x08\x00\x01\x87\x03\x04\x00\x01\x88\x03\x0c\x00\t\x87\x03\x88\x03\xd7\x03\xd8\x03\xa3\x01,\x00\x1b`\x00\x93\x03\x94\x03\x00\x93\x03\x94\x03\x00\x93\x03\xb4\x02`D\xd7\x03\xd8\x03\x04\x00\r\xd7\x03\xb4\x02\xa4\x01\xa3\x01\xa4\x01\x7f\x80\x01\x04\x00\t\x7f#$\xbf\x01\xc0\x01\x04\x00\t#$\x00#$\x08\x00+#$\x00\x87\x02\x00\x88\x03_`\x00\x7f\x80\x01\x7f\x80\x01_`\x7f#$\x80\x01\x7f#$\x0c\x00\x03#$\x06\x00\x17#$\x00#$\x80\x01\xd7\x03\xd8\x03\xa3\x01\xa4\x01\xd7\x03\xd8\x03\x04\x00\x15\xbf\x01\xc0\x01\x00C\x00wxD\xd7\x03\xd8\x03\xbf\x01$\x00\x01\x1c\xa2\x02\x00\x017\x0c\x00\x03>=\x06\x00\x07\xc8\x01\xc7\x01\x00L0\x00\x07\n\x00\xb7\x02\xb8\x02\n\x00\x01\x06\x08\x00\x03\x80\x01\x7f\x18\x00\x05\x80\x01\x00\x7f\x06\x00\x03\x80\x01\x7f\x16\x00\t\x87\x02\x00\x88\x03_`\x04\x00\x03_`\x04\x00\x07\x7f\x00\xbf\x01\xc0\x01\x1c\x00\x03\x80\x01\x7f\x04\x00\x19\"wxwxwxwx\x00wx\x1f\n\x00\x01W\x04\x00\x01X&\x00\x05 \x1fW\x06\x00\x05x\x00\x1f\x08\x00\x03 \x1f\x04\x00\x07Wx\x00\x1f,\x00\x03\x95\x03\x9c\x03\x88\x01\x00\x05\xbd\x02\xb8\x02\x18\x04\x00\x01f\n\x00\x01\xd5\x01\x04\x00\x01x\n\x00\x03w\x8e\x02\x12\x00\t\x95\x01\x00\x96\x01\xf7\x03\x94\x01\x06\x00\x05\x93\x01\xf8\x03\x95\x01\x04\x00#wxwxwxw\x00xwxwxwxwxw\x06\x00\x13xw\x00\x0f\x88\x01\x00w\x00xw\x18\x00\x03xw\x04\x00\x0fxwx\x00w\x00xw\x08\x00\x03xw\x08\x00\x19xwx\x87\x01\x100POPO\xc8\x01\xc7\x01P\x04\x00\x05\xf7\x02\xce\x03C\x06\x00\x05\x06\xd5\x03\xd6\x03\x06\x00\x07\xd5\x03\xd6\x03\xd5\x03\xd6\x03\x12\x00\x05?\x00J\x1e\x00\x03IK\x08\x00\x01\xb6\x01\x04\x00\t\x8f\x01\x01\x94\x01\x93\x01\xde\x01\x06\x00\x019\x08\x00\x01\xe3\x02\x10\x00\x01\xe4\x02\x0c\x00\x01\xe3\x02(\x00\x03\xe4\x02\xe3\x02\x12\x00\x03\xe4\x02\x91\x03\x0e\x00\x03\xde\x026\xa8\x02\x00\t\x10!\x93\x01\x00\xed\x02\x04\x00\x01\xca\x04\x04\x00\x01\x8b\x02.\x00\x01\x8e\x02\x10\x00\x01{(\x00\x01\xf3\x01*\x00\x01\xa9\x02\x0e\x00\x03\xaa\x02\xf1\x01\x18\x00\x01\xf2\x01\x08\x00\x05\xf1\x01\xf2\x01\xf1\x01\x0c\x00\x0b\xf2\x01\xf1\x01\xf2\x01\xf1\x01\x00\xf2\x01\n\x00\x05\xf1\x01\xf2\x01\xf1\x01\xac\x02\x00\x01,\x16\x00\x07+,+,:\x00\x17\x9a\x02\x00\xc5\x02\x00\xc6\x02\xc5\x02\x00\x92\x04\x91\x04\x92\x04\x91\x04,*\x00-+\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\xc6\x02\xc5\x02\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\xc6\x02\xc5\x02\x92\x04\x91\x04\x92\x04\x91\x04\xc6\x02\xc5\x02\x04\x00\r\x92\x04\x91\x04\x00\x92\x04\x91\x04\x92\x04\x91\x04\x0c\x00\x07\x92\x04\x91\x04\x92\x04\x91\x04\x04\x00\x03\x92\x04\x91\x04\x04\x00\x03\x92\x04\x91\x04\x04\x00\x1b\x92\x04\x91\x04\x00\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\n\x00\x03\x91\x04\x92\x04\x16\x00\x0f\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x91\x04\x92\x04\x0c\x00\x05\x91\x04\x00,\x0c\x00\x0f+,+,+,+,\xae\x05\x00\x01\xb2\x02\x0e\x00\x03\x95\x03\x96\x03\x18\x00\x05\xdb\x01\xae\x03\xad\x03\x04\x00\x01p\x0e\x00\x01\xa0\x02\x0c\x00\x01\x91\x04\n\x00\x05\x92\x04\x91\x04\x92\x04\x06\x00\x03\x91\x04\xc6\x02\x16\x00\x03\xc5\x02\xc6\x02\x0c\x00\x03\xc5\x02\xc6\x02\x18\x00\x03\xc5\x02\xc6\x02\x04\x00\x01\xc5\x02\x0c\x00\x0f\xd4\x04\xd3\x04\x00\xd4\x04\xd3\x04\x00\xd4\x04\xd3\x04\x06\x00\x0f\xd4\x04\xd3\x04\xc6\x02\x00\xc5\x02\x92\x04\x91\x04\xc6\x02\x04\x00\x03\xc5\x02\xc6\x02\n\x00\x01\x18$\x00\x01~\x08\x00\x01xZ\x00\x0bABAB\xd3\x04\xd4\x04\n\x00\x01\xd3\x04\x0c\x00\x01\x92\x04.\x00\x07B\xd3\x04\x92\x04\x91\x04\x06\x00\x01\x92\x04p\x00\x01\x1e\x06\x00\x05\x83\x04\x00\x84\x04\n\x00\x03\x83\x04\x84\x04\x04\x00\x05\x83\x04\x00\x84\x04\x16\x00\x03\x83\x04\x84\x04\x06\x00\x01\x83\x04z\x00\t\x84\x04\x83\x04\x84\x04\x83\x04\x84\x04:\x00\x01$\x8a\x01\x00\x01\xb9\x03\x06\x00\x05\xe8\x01\xe7\x01\xe8\x01\x06\x00\tghgd\x04\x12\x00\x03\x8d\x01\x8e\x01\x04\x00\x01\n\x04\x00\x01\t\n\x00\x0b\n\t\n\t\x00\n\x06\x00\x01\t\x04\x00\x01\n*\x00\x01\t\x08\x00\x01\n\x06\x00\x05\t\x00\n(\x00\x05\t\x00\n\x04\x00\t\t\x00\n\x00\t\n\x00\x03\n\t\x14\x00\x03\x03\xa7\x03b\x00\x01\xc0\x04\x16\x00\x01\xd1\x04 \x00\x01\xd2\x04\x18\x00\x01\xd1\x04\x18\x00\x0b\xd2\x04\xd1\x04\xd2\x04\xd1\x04\xd2\x04\xd1\x04\n\x00\x01.\x10\x00\x07-.-\xc8\x03\x04\x00\x15\xc7\x03\xc0\x03\xbf\x03\xc0\x03\xbf\x03\xc0\x03\xbf\x03\xc8\x03\xc7\x03\x00\xc8\x03\x04\x00\x1d\xc7\x03\x90\x04\x8f\x04\xd0\x02\xcf\x02\xd0\x02\xcf\x02\x00\x84\x02\xfa\x01\xad\x01\xae\x01\xcf\x03\x00\xd0\x03\x04\x00\x05\xad\x01\x00p\n\x00\x01o\x06\x00\x01\xa1\x02\x0c\x00\x07\xa0\x02\x00\x9d\x02\x1c\x08\x00\x07\x1d\xf0\x04\x00\xef\x04\x06\x00\x05FEF\x10\x00\x03EF\x0e\x00\x05E\x00F\x04\x00\tE\x00F\x00\'\n\x00\x01\x1d\x04\x00\x01F\x12\x00\x07EF\x00E\n\x00\x01F\x0e\x00\x0f\xd4\x02\xc7\x03\xc8\x03\xc7\x03\xc8\x03\xc7\x03\xd6\x03\xd5\x03\x0c\x00\x07\xbe\x03\xbd\x03\xbe\x03\xbd\x03\x08\x00\x0b\x84\x02\x00\x83\x02\x84\x02\x83\x02\xd6\x03\x06\x00\x03\xd5\x03\x84\x02\x0c\x00\x01\x83\x02\x06\x00\x01\xba\x02\x16\x00\x03\x14\x02\x04\x00\x01\xcf\x02\n\x00\x0b\xd0\x02\xcf\x02\x84\x02\x00\x83\x02\x84\x02\x06\x00\x17\xbc\x01\x00\xbf\x03\xbe\x03\x00\xb9\x01\xd2\x01\r\x00\xc7\x03\x00\xc0\x03\x08\x00\x01\xbf\x03\x14\x00#\xd6\x03\xd5\x03\xfe\x03\x00\x8a\x01w\x00\xb3\x03<\xa8\x02\x00\xde\x01\x00\xef\x04\x00\x1e\x1dF(\x00\x1fEFE\x00\x1e\x1d\x00FE\x00\xa0\x02\x8e\x02\xab\x04\x9e\x02\x9f\x02F4\x00\tE\x00FEF\x06\x00\x0fEF\x00EF\x00E\xf0\x04\x84\x01\x00\x03\x97\x042\x18\x00\x0312\x06\x00\x0f\x8a\x03\x89\x03\x8a\x03\x89\x031\x0021\x1a\x00\x012z\x00\x11\x8a\x03\x89\x03\x8a\x03\xc3\x03a\r\x06\x00\xbe\x01\x06\x00\x17\xb5\x01\xb6\x01\xb5\x01\xd4\x01\xac\x03\x97\x03\x8b\x01\x08L\x86\x03\x81\x02\xe7\x01\n\x00\x19\x90\x02\xc4\x01\xbb\x03\x008\'\x00\xf4\x02\xe7\x03\x14+\x18\xb4\x01\x04\x00m\x02\x00\xe8\x01\xd1\x01\x00\x15CD\x84\x02\x83\x02\\\x00\xa8\x01\x00\x1b\xe3\x01\xe4\x017So7\x1dr_\xaa\x01\x95\x01\xd6\x03o\x03l\xdf\x01\x06\x84\x02\xf3\x01\x81\x02Bu\xee\x03\x8f\x01\x1c\xc3\x03\x00\r\x8a\x01\x98\x01\xb0\x02\xc7\x04\x88\x04\x0c\x00\xa1\x04\xb2\x03\xb2\x01\xa9\x02\xaa\x02\x04\x00\x0f\xc7\x04\x00\xb6\x01\x1c\xfe\x02\x00\xb1\x03\xae\x03\x95\xcc\x02\x13\xc8I\x06\xa2\n,\x95T\xe0J\xd8\x01\xd9\x01\x8a\x020\x04\x04\x8f\x02]\xd6\x01\x18\x01\x1c\"(\x95OP\xaa\x01\x80>\x12NT\xc4\x01\x9d\x01\x01\xd8\x01\x06\x086\x8b\x02\x90\x02\x13/\x1a\x1f\xf7\x01\xd4\x01\x19\xc3\x02\xce\x02\xd7\x02\xde\x01\xf1\x01\x0f\xc9>\xa8D\x0e\xfc\x01d:\xaf\x02\x88\x036\x068>;\x8a\x02,\xf9\x05\xc2\x017\xb4\x01C5;8\xe0\t\xef\x02\xec\x04<\x02\x88\x01\x04M>\xfdQ\x1dr\x1d\xf1\x02\xf4K\xebK\x06>\x1e4: \xaf\x01\x1e4: \x91\x01n,T\x17T\xa1\x01\xb2\x9b\x01\xbb\x9e\x01\xe2\x17\x12\xbe\x01\x08\x18\xef\x13\xa0\x05p\"2\x0698\x13\'\x16\x19;(\x04\x02\x03\'\x92\x01\x0b\x02\x03\xc5\x01\xae\x03z4\'\xb8\x01m\x01\x16\x88-\x18\x12\x9e\x01n$\x03}\x01\xb5\x01\xe0\x02\xe9\x07\xbe\x08\x99\x08\xa6\x08\xd5\x08\xe3\x01\xe0\x0c\x1e\x1c\x83\x0b\xca\x08\xff\x08\xa0\x05\xee\x02\xf9\x02\xd4\x02\xa7\x01\xb5\x01x\x99\x01h\x7f\xf6\x06\x11\xe5\x06\xe7\x05\xc4\x0c\x1d-\xbd\x1b\xa04\xf0\x17\xf6/\x0c\x9f\x07\xac\x07\x1d\xe7\x17\xc6H\"\xb3\x05$\x03\xfe\x06\xeb\x06\xaa\x07\x08>\x01\x1e%\x07\x82\x01\n\x0cB@ (\x16\x04\x1c\xab\x01\n^\xc9I2\xc1\x1d\xe38\x9c\x9f\x01\xaf\xdb\x012\x10\x01\x90\xdb\x01\"-\x97\xda\x01\x18\xfc\xd9\x01D\xa5\xda\x01\x0b48\x08 0\x14\xfe\xcc\x01\x97\xcd\x01M\x08(#\t\x08)/\xba\xd7\x01I!\x17\xa4\x01\xf2\x01\x87\xdb\x01\x1d\xe0\xda\x01\t\x07+\x19#\x1b\x11\xa7\x01\xc3\x08\xbc\x07\xc5\x07\x84\x07\xa3\x07\xf6\x06\x9f\x07\xc4\x06\xa3\x08\xca\x07Ls\xa1\x18\xf9~\x95\x04\xbc\x04\x06\x18$\xfb\x04\x86\x05 \x08\x18\x06\x0cD\x08\x0c\n8\x12\n\x04\x0c\x01\x08\x04\x10\xb1\x01\x14\x0c\r:,\xf9\x07f{\xcc\t\xfd\t\xfa\t\xfb\t\xcc\x03\xc8\x06\x97\x07\x94\x07\xf5\x07\xf2\x07\xd5\x08\xd2\x08\xd3\x08\xd0\x08\xd1\x08\xc6\x08\xc4\x05\x1a\xc9\x1c\x8c\x16\xb1\x17\xae\x17\xaf\x17\xac\x17\xad\x17\xaa\x17\xad\x17\xaa\x17\xd3\x17\xd0\x17\xa3\x18\xa0\x18\xd1\x18\xce\x18\xcf\x18\xcc\x18\xcf\x18\xcc\x18\xf5\x18\xf2\x18\xcb\x19\xc8\x19\xf1\x19\xee\x19\xef\x19\xec\x19\xef\x19\xec\x19\x95\x1a\x92\x1a\xeb\x1a\xe8\x1a\x91\x1b\x8e\x1b\x8f\x1b\x8c\x1b\x8d\x1b\x98/\n \xb3&\xe2&\x088\x03\x1e\x7f\x05\x1d\xb8\x01\xbd\x01\t\xe9\x0c)\t\xb9\nH\xac\x01\x04\x02\x03\x04!\xab\x01\x13\x08\x02\x07!A\x0b\x04\x02\x03\x07\x1f\x1e\x1f\x05E2\')\xff\x04\xd8\n\x8b\x0b\x88\x0b\x89\x0b\x98\x0c\xdf\x0c\xce\x0b\xcf\x0b\xcc\x0b\xc3\x0c\xc0\x0c\x8f\r\x8c\r\x8d\r\x8a\r\xcd\x0e\xca\x0e\x97\x0f\x94\x0f\x95\x0f\x92\x0f\xef\x10\xec\x10\xdf\x11\xdc\x11\xdd\x11\xda\x11\xcf\x12\xee&\xa1\x14\xb3\x13\xb0\x13\xb1\x13\xae\x13\xcf\x13\xcc\x13\xaf\x14\xac\x14\xe7\x14\xe4\x14\xe5\x14\xe2\x14\xd7\x15\xd4\x15\x81\x16\xfe\x15\xff\x15\xfc\x15\xfd\x15\x92#\xe3\r\x05\x1d\x11=M\t\xef\x1f\xf8q\xb1\x92\x01\xe8\x03\x82\x01\x98\x02\x14\x95\x07\xec\x1d\x04\x08\x95\x01\x0c\x0e`\x1a\x01\x12\x1d\x01\xdb\x11\xb8\x11\x07(\x03\x13=\xf8\x01\x8d\x02\'\x96\x01\x82\x02\x03\x91\x03\xb5\x18\xa0\x05 \x0c\x04\x107\xce\x01\x90\t\x03\x1b\xb2\x03B\xb4\x03\xd1\x0c\t*\xf5\x0b\x92\x0c\xd1\x0b\x98\x0b\xef\x0f\xfa-\xb7\x04\xcc\x04\xd9\x04\xc8\x02Fr\xee\x02\x08\x8f\t\x84\x010\xa8\x08\t\x89\x15\x82\x17\\\'\x08\xb0\x02\xee\x036\n\xcb \x8c\x01\x80!\x03\xb7\x02\x95\x10\xde\x16\"\n\x04\x7f\x8c\x01\xc3\x16\xc4\x15\xc5\x15\xc2\x15\xc3\x15\xac\x16\x1b\xa0\x02\x02\x03H(\xd5\x1a\x809\x02\x16R\x85:\x80\x1c\xb9\x04\x82\x011\xc2\x03\xdb\x03\x01\xa8\"\xb7%\x87\x08\xa6\x04%\x19G\xd1\x05\xe0\x0b\xe9\x0b\xae\x03\xb1\x04\x03\xfe/\xa6\x01\xc2\x02\xfd\x02f\x02\r\x01\x98\t\xc7\x03\x03\xa2\x07\x8b`$\x01\x85\x02\xeea\xf3\x02\x86\xac\x08\x01\xc1\xe7\x08;\x99\x01\\\xc2\xae\x01\x04\x03\x87\x02\x01\x81!\xc5W\xd5:\xaf+\n\x1a\xc4N\xcd)c\xaf\x01\x97\x01g\x97\x01A\xb9\x01\x07\xc6\n\x04\x82\x03\xc9*Y\r{\x94,\xe9\x02\xb6\x03\xd3\x03\xab\n\xc6@\xff,\xd2-\xa9-\xf4-\xff.\x96/\x8b\x01\x01\xc6\x01\x01\xcb\x01\xb5-\xc0/\x14 \x0e\xc7\x01\r\x01\xee\x01\xdb\x01\xf0\x02\xf4\x01\x0e\xbd(`\xf6$\xbd.\x01@\x94\x01\x86/\x9d.\x94\x01\xac\x01`\x97\x05\xcc0\x04\x16\x07\x03PA\x0bT\xf8\x02\xef\x03\x12\xbb \xc0 \x84\x08\xa3\x04\xab6\x8c\x0e\x08\xb0\t\xce\x01\xd5\x01\xd4\x01\xdf\x02)\x9c\x03\t\x97\x03\xdd\x03\x8f\x04\t\x93\x10\x01\x94\x02\xf0/\xf1/\xe2\t\xca)\x97(\xf8\x07\x01\xfd\nT\x011X\x03\r\x18\x86\x02\xea>\x1c\x18\x01\x0e4C\x14\x02\x07:\x0fG\x0f\x17\x08\x03\x05\x14\x15\x9a\x02\n\x03Ehi\xab)\xae+\"\x04\x06\x0e\nKn\\8\x03\x08\x9f-\xa6+\tX\xa2\x01\x8b\x02\xdc\x01.\x11\x10A@wdk\x17\x13\t\r\x15\x06\x03\x19\xce\x01\xcf\x01\xee\x03\x0f\x0cp\x14\x1c\rx\x89\x01r\xb1\x01\x08\x03\xcf\x01=\xcc\x036\x85)\x03\x8c!\xcc\x07#(\xb6\x02(\xbd\x01\x01\xfe\x01\xc7\x01\"\xf8\x01\x03\x01\x8a\x01\r\x0c\xc3-\x98*\xd6\x01\x12\x19\xd7\x01\xa4\x05\x0c\x02\t\x05\xa3\x05S\x90\x02\xa3\x01\x9a\x015\x12!\xbb2\xe60\x02\x1d\x0f\xb6\x06\xcd\x06\x14\x15\xdd2\xd42\xec\x05N\xff\x01\xe7\x04\x04\xc9?\xc8A\xd1I\x89\x02\r_\x97\x01\xc6@\t\xd1@\xd8@\xe5@)\x1d\x89\x01\x07\xf0.\xc7/\x07\xcc/\xef0\x07\xf40\xff1\x07\x842\x852\xa8.\x07\xe2\x03\xe3\x03\x9f.\xbc2\r\xb1\x03\xfc\x02\x03\x91\x03\xb7/\xba/\xbf/\x99\x01\xbc.@=\x03\xce\x01\x04\xb0\x04\x83\x02\xb1\x04\xa6\x04\x15\xf3\x07\x80\x0c\x83\x08\x8d\x04\x8c\x04\x84\x08\x8d\x08\xb7\x04\x03\x9a\x88\x01\x1c;j\xbf\xbc\x01\x10Z\x800\x13\x0b\x95/\xc8-\x9f-\xd0/\xff\x01\xec\x01\r\x17\xdf\x01\xbf-\xe0\r\xa8\x1f\x85 \xf2!\xd9/\x8a\r\x9f\r\x96/\x0e\x17\xcf/\xce\r\x02\x03\xa4\n\xe5\x01\x01\xc6\x01\x98\x03\xe3K\xc6\x01\xe2\xc7\x01\x91\xc7\x01\xc5\x01\x02\xba\x01\xcf\x01=\xc8\xcd\x01\"\x1e\xb6\x01R\xf0\x198\xdf\xe9\x01\xae\x03R6\xbe\x01=~\xa5\x02\x01\xed\x04\xe4\x1e\xba\x01B\x98\x01h\x98\x01\xb0\x01d\xda\x02\x03\xf2Q\x8a\x02\xd1\x05\x95u\x92R\x8fSz\xa0\xdc\x02\x01,\xf1\xdd\x02\xf0\xdd\x02\xeb\xdd\x02)\xf4\xe6\x02\x8c\x06\xeb\x01\xc4\x02\x03\xe7\xea\x02,\x08;\x98\xe6\x02\x8e\x06\x01\x8f\xe7\x02\xec\xe9\x02H>\x16\x8e\x010\x04/\x8d\x01\x15=G\x05\x9a\x04\xb8\x010\x14\x1c\n\x1eI\x16\x08\x0e\n|\xd4\x01\x1a\x12\xca\x02P\xe7\xf9\x02\xb8\xf6\x02\xb7\xea\x021\xfc\xef\x02\x01\xcf\xec\x02\xec\xef\x02\xd2\x10\x03\xfa\x02\x01\x83\xff\x02\xbf\x1b\x88c\x944\xea\xb8\x012Zz\x14\xdd\x02\xb5\xce\x02\x93\x01\x944\xcb2\x08\x04*\xe5\x01+6f\x0cm\x05\xa22\x01\xa8\x03\x88\x05\xe2\x9f\x01$\xa4\x01\xa7\x01\xcc\x81\x07\xe5\xff\x06$i\xfc\x80\x07\xc9\xa3\x08\xd5:\xd4=\xe7=\xb6=\xfd=\x8e\xd2\x02\x07\x93\xd1\x02\x1f\xa8\xd1\x02\x8b\xd1\x02\x1f\xb2\xd0\x02\x07\x8d\xd0\x02\x1f\xdc\xcf\x02\xbf\xcf\x02\x1f\xae\xcf\x02\x91\xcf\x02\x1f\xac\xcf\x02\xaf\xcf\x02\x80\xcf\x02\xb1\xcf\x02R#\xb0U\xb3U\xb2U\xb5U\xe8T\xbfT+\xc2T\x99T+\x86B\xf7@\xce\x02\xcf\x02\xec?U\x83=\x1d\xb9\x02\x11\x8a>\xad<\xa6:%\xcf;\xda8\xdb1\xf0/\x03\xbb5\x02\x9a\x01\x9d\x01\x94\x01AHI\xb81\xe10\x96.\xed-\xf2(\xb7*\'\xdc&\xb8\x1e\xb4\x1c\xf5\x19\xbc\x1a\x89\x1a\x86\x02\x16\x01\xb1\x01\x01\x18\x19\xba\x1a\xa1\x15,\x01\xd8\xa7\x08\xf9\xf7\x08\x01\xfc\x01\x1a\x04\x04\x11\x01h\x06\x08\xa3\x01\x194\xb8\xd9\x01%\x93\xd8\x01\x07\x84\x01\x1e\"{\xb4\x01V\x8c\x01\x94\xd4\x01\x85\xd2\x01H\x06\x15\x8c\x01\xc0\xd5\x08\x01\xbb\xd4\x08\x06\x18\x0b%.\x0cj\xaa\x01V\x18\x03\xf6\xd0\x08\x01\xd7\xd1\x08J\xe4\xd4\x08\xd9\xd2\x08\x03\x02>\x16:T\x16\xf3\x01\xd2\x02\x06&\x01>\x1eH\t\x05F\x1a,=\x0fn\xf2\xd0\x08\x01\xe1\xd0\x08\x01\xfa\xd0\x08\x8b\xcf\x08f\x06\x0c\x08~\x10\x046\x18\x1eJ\x04x\xf6\x01\x04\x03\xe1\x04\x01\x15\x01`\xf5\x1a\"\x06\x080\x10\xe4\xd9\x01\x92\xff\x06\x03\xb7\xd6\x08\x07\xa1\x03\xae\x02!\x02\x03\xe3\x01\x1d\xbc\xd9\x08\xa7\xff\x06\xb8\xfe\x06\x01\xc3\xff\x06\xbb\x01\x9f\xd6\x01\xe6\xd5\x01\x03\xab\xd3\x01\xe0\x86\t\x99\xfc\x08\x18\xac\x03\x99\x01\xa6\x01\x90\x01\x91\x01\x90\x01)L\x9f\x01t\xd3\x02]\x03\xd3\x0c\x1b\xc4\x87\t\x95\x83\t\xe8\x01\x8a\xff\x08\xe9\x82\t\xc4\x82\t\t\xdb\xff\x08\xa4\x01\xbf\x01\xe8\xff\x08\xa1\xec\x08\x9e\xec\x08{\x87\x02\xa1\x82\t\xfc\x81\t\x0b\xc7\xfc\x08\xac\xfc\x08\x05\xcb\xe8\x08\xb7\x1a\xaf\x03\xba\x82\t\xbb\xfd\x08\xc4\xfc\x08\x8d\x01\xd5\xe2\x08\x84\xe1\x083\x85\xe1\x08\xe4\xdf\x08\xed\xdf\x08\xa8\xdf\x08\xb5\xdf\x08\x82\xde\x08\x99\xde\x08\xe6\xdd\x08\xeb\xdd\x08\xe6\xda\x08\x9b\xf4\x08V\xa6\xf3\x08\xa7\xf3\x08\xd8\xf2\x08\x83\x01\x89\xf8\x08\x98\xf5\x08\x95\xf0\x08\t\xc4\xef\x08\x9b\xd8\x08\x82\xd8\x08\x83\xd8\x08\xd6\xd6\x08\xe1\xd6\x08\xe0\xd6\x08\x9d\xd8\x08\xa0\x01\x14P\x1b\x17\x02\x03\'\x1d%\x06%\x17#`\x8a\xd7\x08\xf9\xd7\x08\xbe\xd7\x08\xc9\xd7\x08\x92\xd7\x08\xb7\xd5\x08\xce\xd3\x08\xff\xea\x08\xcc\xe9\x08\xad\xcf\x08\xa0\xcf\x08\xf7\xd0\x08\xdc\x01\xc9\x01\x0b\xd4\x01\xf0\xce\x08\xd3\xd0\x08\xfc\xcf\x08\x85\xd0\x08\xcc\xcf\x08\xd3\xcf\x08\xbe\xcd\x08\xfb\xe5\x08\x11\xca\xe4\x08\xc5\xd0\x08\xea\x01\xc7\x01\x0c\xc2\x01\xb3\x01\x17\x1f\xe4\x01#\x1c;\x05\x11\x89\x01\x96\xd0\x08\x9d\xd0\x08\x98\xd0\x08_\xdb\xd0\x08>?\xbc\xd0\x08\x9b\xcf\x08\xea\xce\x08\x81\xe3\x08\x02\xfe\xe2\x08\x7f\xdb\xd1\x08\xec\x05\xc9\x05\x08\xc4\x05\x8f\x05\x0b\x1b\x06\x07\r\n\x0b\x1f\x9a\x02\x1f\x19Z\x0bkZ\x84\xcf\x08\xaf\xd1\x08\xe2\xd0\x08\xe7\xd0\x08\xaa\xd0\x08\xd5\xd1\x08@\x11\x15A@\x87\x01\x07\xce\xd2\x08\x85\x01\xdf\xde\x08\x8a\r\x0c\xa0\x02\x11\x0f\x81\x02\x85\x01\xec\xd0\x08\xd9\xd5\x08\xa4\x0e\x8b\r\x0c\xa0\x02\x0fh\xc3\x01\x06\xcc\x01\xd3\x01X\x05\non\x95\x02!+\'\x05\x13^e\xaa\xd5\x08\xb1\xd5\x08\xac\xd5\x08k!\xa3\xd4\x08\xf0\xd3\x08\xef\xdb\x08\r\x96\xdb\x08\x95\x83\x07\xe9\xd2\x01\"\x0c\xa0\x01\x7f\x17\x02\x03\x0f\x1f\xfe\x01W\x05|\x0b\xc1\x01O\xc8\x02\x84\xd0\x01\xd3\xd2\x01\xd2\xd2\x01\xd9\xd2\x01\x9c\xd2\x01\x99\xd2\x01\xf0\xd1\x01\x88\x01\x02\x8f\x01\xef\xd5\x01\xec\xd5\x01\x96\x03\xdd\xd5\x01m\xbb\x01\x13\t\x98\x06\x0c\r\x9d\x05\x99\x017496\x07\x04\x05\xcb\x08%\x96\x8b\t\xd12\xcf\xda\x08\xc6\xdc\x01\x90\xfc\x06\x99\xc8\x08\xc4\xc7\x08\x85\xd9\x08\xae\x01\x1f!i\x05\xec\xd6\x08\xfb\xfa\x06\x02\x91F\x08\t\xcd=\x8c>\x06\x12,\x103\x03\xd58\x9c:\xc3.\xa00\x8b)\xec*\x97$\xac\x13<\x03\xcf\r\x03\x07\x17\x86#:\x8e\x02\x10\x0c\x88\x03\x9f\'\xc8\'&\x0c\n\x0825\x022\x82\x89\x01\xa4$\x89&\xde$\x08T\x1b5\x07IY\xeb+\xfd\xa7\x02\n\x183\x9c\x02\x825\xfd4\x1b\x01\xa0\xf4\x02\x9b\xf6\x02\x01\xec\x06\xcb\x03\x06\xf4\x02\xe6\x01\xdf\x01M\xd6M\xea\x89\x01\\\x02\x07BEyP\x81\x01\x11p\x83\x01\x97\xdb\x01\x14\x10\xdc\x01\xae|\xd9u\xb4u\xd0\x08\xa7\t\x83v\xa4\x01\xf6n\x94\x10\xf9~\x90\x7f)\x9d\x80\x01\xa4\x01\xf8~\xf9~w\xf0\x7f\xf1\x7f\x13\xf4~\x02\xe5\x13\xd4\x13\xdb\x18\xfc\x06\xbb\x08\xa2\x07\x16\xf5\x07\xa1d\x9ed5\"q\x9bc\x9ac\x9dc\xe6s\x86\x01\xff\x01\xd8\x01\xdf\x01\xce\x01\xd7\x01\xc6\x01\xe3\x01\xbfr\x98c\xaf\x07\x9c&\xab\'\xb8\x08\x04\x97c\xd6a\x9a\x0c\xe7\n\x8ba\x0f\xfa`9\xafb\xaeb\xb1b\xd4a\x10e\x088\x02\x0b)\xf7a\x94b\xa5b\x94b\x0b\x07\xb5\x02\xf4\x01%\xff\x02\xf0\x04\x13\xf1\x04\x85]\x84]+\t\xd1\\\xeaZ\xedZ\xdeZ\xb8$\xc7%\xd1Y\xa2Y\xddY\x15\xf7\x05\xaa\x01\xb9\x01\x90\x01\xa3\x01z\xb8\x01\xf0\x1a\xb7\x1b\x10\r\xb2\x1b\x92\x11\x82\x04\xb3\x01\x01\x91!\xbc\x13D\xc8\xb6\x01&O\x97\xd8\x01\x94\xd8\x01\xa3\x01z\xc7\x01\x94\x01\xb7\x01\x81\xd6\x01\xc2\xd5\x01\xff_\x95q\x90Z\x16)\x05\xef>\xb1\x11\x03\x9aN\xb4\x01\x9a\x12\xe9o\x19\xc8n\x95\x12\xcfZ\xb9\x04\xb6\x04\x01\xda9\xe8\x11\xe0\x04\x01}\x01\xa2\x06\x0c\x01\x9e\x07\xc4\x03N\xfc\x01VD\x99\x03\xfc\x01VD\x99\x03\xfc\x01VD\x89\x03X\x08$06\x01\x1aP\x0f\xea\x05\x04\t(\x08\x16<\xcb@\xba:\x82\x05\xe5\x02\xfa\x01\xc6\x01\xa4\x03\x04\x13F*\x04\rL\xb3\x01\xb2\x01\x127\xce\x01\x17dZJ(\x80\x01^t\x96\x01\x85\x08!4\xd3\x04\x96\x01\x05\xba\x02\xbb\x023\x15\x075\x95\x05k\xf0\x08\x8d\t\r\xa4\x05\x15\x14\xff\x05\xb0\x05\xd3\x05\r\x8c\x05\xd1\x05\xa8\x05\xa7\x0e\xca\x1d\t\xd9\x1f\xa2\n\xc7\n\r\xc0\n\xdd\x0b\xb6 \\\xcf\x01\x9c\x01\xbf\x01\xeb \xbf\x02\xee\"$\xad\x01\x13!\xe3!\x98\x10\xd3\x10\xc8\x10\xc9\x10\x15\xc8\x10\xfd\x11\x88\x88\x01\xbf\x8c\x01\xc6\x13\xb5 \xe04 e\xdd4\xeb\x04\xd6\xa0\x01\xf7z\xb73\xa83\xe14\xc0\t\xc1\t\xe9\x02\x94\x0c\xd9\x0e\xd6\x0e\xdb\x0e\xd8\x0e\xfd\x0e\xfa\x0e\xc1\x10\xbe\x10\xad\x11\xaa\x11\xb3\x11\xb0\x11\xb1\x11\x86\x11\xfd\x17\xfa\x17\x93\x18\x90\x18\xa9\x18\xa6\x18\xbf\x18\xbc\x18\xd5\x18\xd2\x18\xeb\x18\xe8\x18\x81\x19\xfe\x18\x95\x19\x92\x19\xa9\x19\xa6\x19\xbd\x19\xba\x19\xd1\x19\xce\x19\xe5\x19\xe2\x19\xf9\x19\xf6\x19\x8d\x1a\x8a\x1a\xa1\x1a\x9e\x1a\xb5\x1a\xb2\x1a\xc9\x1a\xc6\x1a\xed\x1a\xea\x1a\x99\x1c\x96\x1c\x97\x1c\x94\x1c\xcf\x1d\xcc\x1d\xf3\x1d\xf0\x1d\xfd\x1e\xfa\x1e\x87\x1f\x84\x1f\xbd\x1f\xba\x1f\xf9\x1f\xf6\x1f\xf7\x1f\xf4\x1f\xf5\x1f\xd3\x06\xd1\x06\x90-\xc1&\xb8w\x12cQ\xf1S\x93-\xe8,\xcb.\xeas\x02\x035\xb1OC\x05\xc8+\x03\xc7-\xab\x1f\xfe.\xc1$\x99\x01\xc0t\xcfC\xf0\x06W\xfb\x01Em-MU9Q\x0b\xc26>;\xc56\xaf2\xfc\xba\x01\xbaK\xfc\x96\x01T:l^\x9e\x01n\x90\x018\xd7\x06\xa8\x076\x0e\xcd\x1a\x01\x8f\x9f\x02\xad\x0c\xa6\x0e\x99\r\x04\x07u\xde\r5\x1f\xe3\x0b[\x01\xd8\xac\x02\x99\xaa\x02\x82\xad\x02\x01\x0b\xe9\xac\x02\x82\xad\x02\x01\x04\x10\xa7\x06\x11\x93\xac\x02\xde\xae\x02\xf9\xad\x02\xfc\xad\x02\xfd\xad\x02\x07\x80\x02\x10!\x9a\xb1\x02\xa9\xb0\x02p4g\x9e\x01\x16\x04\x15\x90\x01\x04\\|\x10\x8f\x01\x08\x02\xbe\x01:\xff\x01\x1d\xd7\x01\xa4\xb5\x02\x9f\x89\x03\x8a\x89\x03\xc1\x8b\x02\x94\x93\x02\x8d\x0b\xb7\x86\x03\x1a%\xbb\n\xf2\x08\x113\x0eC\xc6\x12%m\xff\x11\xed\x01\xd2\x06\x93\x05\'\xdb\x01\xda\x01\xf3\x02\xea\x1c\x1b\x88\x01\x97\x01l\x93\x01\x80\x01\x89\x01x\xee\x01\xef\x02\x95\"\xde\x01\xe9\x01\x84\x01]\xa6\x01\xe9\x02\x05\xc5\t\xd3\x02\x82\xa1\x03\x97\x99\x03\x85\x04\xa2\x055\x1a\x02\r\x13\x0c\x0f5\xca\x8f\x01\x97\x8f\x01\x90\x8f\x01Z\x97\x96\x01\x8c\x95\x01\xe9\x8f\x01\xb6g\x1c\t)3~\x8f\x01\x9bh\x8b\x02\xc4\xa3\x03\x95\t\xb3\xb0\x02!\x86\xb0\x02\xd5\xa0\x03\xf4\x15E\xc9\x01\xae\x1d\xd4\x01cn\x97\x02z\x83\x01r\xa3\x01\xd2\xec\x02\x8f\x81\x03\x83\t\x90\x8a\x03\xa7\x89\x03\x88\x89\x03\x89\xac\x02\xab\x01\x7f\x94\x02\x0e1\xc8\xab\x02\xdd\x01\x8f\xac\x02G!=\xa0\xac\x02\xb5\xf4\x02\xd0\x01\xc0F\x8dH\xb2\xf4\x02\xdb\x01\xc9\xaa\x02\xa4\xaa\x02\xab\xaa\x02\x94\xaa\x02\xa3\xaa\x02\x92\xaa\x02m\xa1\x0f\x87\x03\xc7\x1d[\xe5\xef\x01.\x14\xe6\x01\xf5\r\x8a\x01\xfe\x0c\xcb\x01\xe5\x0c\xa8\x0c\x03\x17\x11\x05\xee\xbb\x02\xbfT\x87\x9d\x01\x8f\xba\x01\x80*\x9d\x1f\x01\xe2!\xb3\x0e\xe6\x11\xc9\x12\xc6\x12\xc1\x14\xbe\x14\xfb\x14\xf8\x14\xe5\x15\xe2\x15\x87\x16\x84\x16\xc5\x16\xc2\x16\x8b\x17\x88\x17\xbd\x17\xba\x17\xff\x17\xfc\x17\xfd\x17\x88 R:VN.nF\xfc\x01X\xe9\x06R:VN.nF\xfc\x01X\xf5\x18\xde\n\xfd\n\xfa\n\x99\x0b\x96\x0b\xcf\x0b\xcc\x0b\xd1\x0b\xce\x0b\xbf\x07\xdc\x07\xa2)\xb51\x90\x08\x8b\x08\xac3(\xa8\x03n\xf0\x02\xcd\x01(\x0b\x86\x02\n.\x1c\n\xd9\x04\xf6\x04\xf1\x04\xa0\x05:\x04\x05\x9b\x066\x01\xac\x06:\xbfY\xf0!\xf1!\xee!\xf9#\xbc^\x8b\x02\xca\x07\x04\xcf\x06\xbc\x01\x86\x07\x07\x046\x18\xb0\x02\x13(\x06\xbe\x01\x1c\x08d\x91\x01\xeb\x03\xc4\x01\xdb\x01\xbc\x01\xd1\x01\x82\x01\x04\xae\x07A\xe9\x04z\x9d\x01pw>Ox\xb5\x01\xaa\x08\x89t\x96u\x01\xd9u\xd4t\x02\x11\x8c\x03\xd1\x12\xe9\x11\xb4\x01\xec\x01\x8c\x1e\x95\x01]\xdd\x0f\xe8\x06\xf1\x06\x96\x19\x04\x8b\x19\xf8\x18P>\x01\x10\x1a\x03\x011\x01\xb3%\xee\x14\x03\xcc`N\xc4\x01\x8e\x01$&\x01\x0c\xaa\x01\xeb\x01\xb0\x01\xf8\xfd\x06\xd9\xc6\x08\x02\x03\xb5\x01\x03\xa2\x01m\x01\xa4\x03|qd\x02)\xee\x83\x01\xab\x9b\x01\xe0\x9b\x01\x99\x95\x01\x18\x04\x05.8\xce\x93\x01\xc5\x94\x01\x1e\x1b\x0b\x1f\x1e\xd0\x02\"\xa1\x02\xc6\x02\xb7\x01\x02\x1fQ\x88\x02(5\xaf\x02\xf9\x06\x84\t\xda\x02\x06\xcb\x08\xa8\x08\x88\x0f\x10\x04\x03\x84\x82\x03\xff\x81\x03\x08\x04\r\xee\x91\x03T\xc1\x01\x8c\x01\xad\x01\x9b\x01\xbd\x8f\x03\x06\x04\xfd\x03\xef\x18\x8a\xa6\x03\x01\x99\xa5\x03\x10\n\xb8\xaa\x03D\x05\'\x9d\xac\x03\x9c\xac\x03\x89\x07\x95\xa5\x03\xc4\xa4\x03\xc7\xa4\x03\xcc\xa2\x03\xcf\xa2\x03\xb8\x07\x80\x02V^\xb5\x03\xea\x04\xbf\n\x9a\n\x9f\n\x80\n\x8d\n\x94\x0c\x06l\xa2\x01W\x9e\x01\x08\t64\xf6\x89\x03\x13\xeb\x88\x03\xb0\x8c\x03\xaf\x9e\x03\xf6\x9d\x03\x03\xf5\x9d\x03\xf4\x9d\x03\xdf\x89\x03C\xb9\x01_\xac\x04\x01\"\x96\x01vJ0`<\x03\xe4\x01\xc6\x91\x03\xcd\x01\x97\x06\xa4\x07\x1a\x1b\x7f\x9f\x06\xd5\x8d\x03\xd8\x05\xa4\x8a\x03\xd9\xa9\x03\xaa\xaa\x03\xd4\x05\xa3\xae\x03\xfa\xa7\x03\xf6\x05\x1b\x02\t\xc7\xad\x03\xc4\xad\x03\xcb\xad\x03\xca\xad\x03\xe7\x0f\xc9\x9c\x03\xa3\x01\xec\x9d\x03\xda\t({\xbf\xa8\x03\xb0\xa8\x03\xc1\xa5\x03\xca\xa5\x03\t\xdf\xa5\x03a~\x83\x01\xbc\xa6\x03)\xc3\x08\x85\x89\x03\x82\x89\x03\x01\x97\x84\x03\x87\x08\xaa\x081\xa7\x08\x0e\x19\xc4\x83\x03\x01\xcf\xa7\x01\xaf\xaa\x01\xb8\xa9\x01<\x92\r\x12\x0c4\xcf\x93\x01\xe4\x01\xafj\xa6j\r\x9f\x03\xe4\x02\x1e%\xb9\t\xfb^,)\x82K\xa0\xaf\x01\x95\xb1\x01\x92\xb1\x01\xd9\xb1\x01\xd6\xb1\x01\xd7\xb1\x01\xe6\xaf\x01\x02\x03\x82\x02\\+\x17\t\x0f\xd5\xb5\x01\x8a\xa8\x01\xde\x04\xee\x03\xd5\x07\xb4\n\xa5\x0b\x05\xd3\xab\x01\xd0\x91\x02ZL\x08$0\x99$\x89\x8e\x01\x17\x06\r\x11\x05\x01\xc9\x8b\x01\xdd\x16:\x08\x80H\xb3E\xc7\x02\xecG\x97GN q\xb4:\x93;\xb0?\x10\x01\xdb4\x08\xc0\x01B\x01\xaa\x02\x92\x03t\xb8\x01^f:\xa8\x018\xa8\x018\x8b\x0f$?\xeb\x0b\x14\x05\x04\x06\x07\x0b!\x03\xa0\xf6\x02\xdf\xf4\x02\x04\x05\xe2a\x85c\xb2V*\x92\xa2\x08\t\xa7\x12\xa6\"\xd1\xf8\x07\x95\x90\x01\x04\x10\x01\x1c\xe6R\xa7R\x9e\x018?\x84\x01\xd6P\x01\xf1O 6*6\xab\x03\x04\x03\x1b\x80\x04\xcc^\xeb_*\x15S\x07\xe0T\xf5T\nG\xaaR\xabR+\x06\x04\xe3\x01\t9\xb0Q7\xadQ\r\xf2\x03\x13\x07\x04\xf5\x03\xba\x03%\xb5\x03c,ur\x88R\xdfR\x0f\x13\x98\x01\x99\x01\x17\x94\x90\x01\xb5G\xd8R@\x08\x16\x05\xcf?\xbe?\"#\x0f\x8a\x01\x8b\x01\x03\x01\xa0\x01@\x1c\xed@\xce>\x96\x02\x16\x0f\x13\x11\x81\x02\xf1>\xd4@\x1e;C\xa1A\x05\xae\x04\x01,?\x01\xd0\x03\x01\xa2\x0c\x924\x12\xab\xa3\x01\x04\x0e\x92\x88\t\xf9\x86\t\xea\x86\t\xed\x86\t\xa4\x86\t\xa7\x86\t\xe2\x85\t\xe5\x85\t\x9e\x85\t\xa1\x85\t\x9e\x85\t\x03\xc7\x81\t\xca\x84\t0\xa4\x02\x03x\x93\x83\t\x1c\xa8\x83\t\xbd\x86\t\xe2\x85\t\xe7\xff\x08\xaa\x82\t\xc9\x81\t!\xfd\x0c\xce\x07\xd7\x07\x03\x8e3\x01\xda\xa8\x01\xe5r\x06\x83b\xf2\x80\x01\x1e\xf3\x7f\xfa\x80\x01\x8d\x80\x01\x04\x03\xd5\x02\x01\xe2a\x07\xfb`\xeeM\x126\xb9M\xe47\x01\xeb\'m\xd7\x02\x9f\x1492\xdc\x16\xbc.\xf3C\xae\x01\x98C\x8b\x11\x81&\xc4%\xc7%\xbc%\xbf%\xba$\x89\x1f\x86\x1f\x01\xb70)\x02\t(K\x03\xccA\xc5C\xcaB\xcdB\xc8B\x97)\x02+\x1f\xe9\x18\xeb\x01\xd4\x1a\xed\x1a1\xb4\x02\xb9\x02\xa6\x17\xcd\x17\xa0\x17\xc1\x14\xbe\x14\xb0\x02\xc9\x15\x126A\x85\x01\x82\x01\xca$\xe3#\xe6\t\xe0\x07\xcb\x08\xd2\x08\xc3\x06\x18\x9c\x02>\xe2\x01\x03R\x9e\x03\x9f\x03\x99\x02\x03\xd46\x9fB\xbf\x05D\xa6\x03\xbf\x03\xb6\x03\xcb\x03t\xf0\n\x86\x01\x02\x0f\xcc9\xbfD\xa6C\xb7,\xdf\x07\xec\x04\\\x9d\x01\x9a\x01\x9b\x01\xc7\x02\x15a^\xaf\x01\x171\x1d\xb1\x02n\x04-E\xdc2\xd9\x01\'\xbd5\x85\x0b\xa8\x07\xf24\xad0\xeb\x02\x983\xdd$\xfe\x03\xc7\x04?\xe9\x07e\x8e\x08\x1f\xc4\"\xc9#j\xc1\x01\x8e\t\xa9\t\x9c\x01\xcd\x01\x94\x1e\xff \xd2\x02\x9f\x03\x9b\x02\x92\x03\xb3\x03\x9c\"\xc3\"\x025\xc0\x1e\xdb\x1clm`iX\x9f\x04\xf0\x1d\xa1\x02\x82C\x12@\xbdd\x06\x04\x08;\xbel\x03\xdc\r\xf1\r\xa0\x18\x01\xae\x0b\x01\x9bo\x0e\x19\t\x11\xe0t\xf3t\x03\xfar\xcb\n\xa7\x0e\xa3\x10\xa7\x0c\xcf\x02\xa7J\xce\r\xd4;\xbb\x02\x9f\x02\xe1Z\n\x07\x04\x0fW\x84T\xc9M*\x16\x04\x05\x1eY& \n\x0e\x05\x08\r\x03\t\x04\x1b\'du\x03\xcc\x01\xb6\x02\xec\xaa\x01\x89\xb2\x01\xfe\x97\x01\xb5Q$\x0b6\x89\x1f\xd0\r\xba\x19\xa5JI2\xe2U\x01\xdbOXk\xdeT\x04\x03\xc9\x03\x01\xdbR\x80\x0b\x8d\x0b\xb0\x0b\xe3\x06\xca\x03\xdb\x05\xb6Q\x95C\x8e!\x01\xad\x03$N\x01\xf9=\x12\x9c\x01\x0c\xa8>\xab?\x14\x02\x13\x1d\xca?\x89?i\xe4\xbd\x01\xd3\xbd\x01}\xae\xbe\x01\x01\xa7\xbe\x01\xac\x83\x03\x85\x83\x03\xe4\x81\x03O\xc9\x02\x11\x19\xd3\x01{\t\r\x07\xd1\xfa\x02\xbc\xfa\x02\x0b\xb3\xfa\x02\xa2\xfa\x02\x0b\x99\xfa\x02\x88\xfa\x02\x0b\xff\xf9\x02\xee\xf9\x02\x0b\xe5\xf9\x02\xd4\xf9\x02\x0b\xcb\xf9\x02\xba\xf9\x02\x0b\xb1\xf9\x02\xa2\xf9\x02\x0b\x99\xf9\x02\x8a\xf9\x02\x0b\x81\xf9\x02\xf2\xf8\x02\x0b\xe9\xf8\x02\xda\xf8\x02\x0b\xd1\xf8\x02\xc2\xf8\x02\x0b\xb9\xf8\x02\xaa\xf8\x02\x0b\xa1\xf8\x02\x92\xf8\x02\x0b\x89\xf8\x02\xfa\xf7\x02\x0b\xf1\xf7\x02\xe2\xf7\x02\x0b\xd9\xf7\x02\xca\xf7\x02\x0b\xc1\xf7\x02\x9e\xf7\x02\x07\x99\xf7\x02\xea\xf5\x02\xa9\x17\xf1\xde\x02\x0f\xc6\xde\x02/\xfa\x06\xf5\xd5\x02\xa2\x1c\x06\xb1\x10\x01\x0e\x98\x11\x89\x11\x82\x11\x91\x11)\x98\x11\x02#\x1b\t\x1c\x01\xfb\x1e\x84\x01\xe1\x01\xde\x01\xb3\x02\xb0\x02\xb5\x02\xd6\x95\x03\xb1\xf0\x02\x96\x01m\n\"\x8a\x01\x03&#\x1eF\x06\x10la(\x01\x0c\x0e\x01\xd8\x01\xb9\x01\xbe\x01\x023\x01\xce\xe9\x07\x04\x1b\x01\xa6\x01\x0c\x03\x97\x85\x08\xe2\x05\x11\xad\x08\xfa\x03\xc3\x07\x9e\x07\xb5\t\xfc\t\xb1\x0c\xc6\x0b\xd9\x0b\xecS\xe3b\xf0a\xb5\x0b\xd1U\xa8U\xdbU\xceR\xc1D\xbaC\xe9I\xeaG\'\xb4\x16\xfd\x17\xe8\x16\x11\xb7\x18W\x9e\x18\xa9\x19o\x8e\x1a\xb5\x1a\x9e\x1a\xef\x1c\xb2\x1c\x15\x8d\x1f\xa4!\x02\x03\xc7,\xdf0\x980\xde\xe7\x07\x1b\x02\t\x15DO\xdd\xe7\x07\x98\xe9\x07\xff\xe9\x07\x9f5\x9a1\x8e\xdd\x08\xef\x83\t\x90\x01M\xa6\x01\x04&\xbf\x03\xcc\x8c\x01\xf3\x8c\x016\x02\x0b8YFc\'\x1fU\x1d\x82\x04\xb7\x04\xf8\x8e\x01\xed\x86\x01\x9e\x02 Y\xd8\x01\xcf\x02\xfe\x01\x04\x02\x03\r7\r\x17\x9a\x01\xa1\x02\x9c\x01\x9d\x01\xca\x03\x04#\x99\x02\xd2\x01\x04\x02\x03\r\x15\xc1\x02\xfa\x02\xeb\x03\x03\xd8\x0b\x97\x03\xa0\x03\t\xd1\x01\x8c\x01\x18]\x01d\x17-\xf2\x02\x02\x03\xcd\x03\t\xce\x01\xbf\x03\x01\xda\t\n\xa1\x18%\xbd\n\x92\xfb\x02\xf4\x04\x97\xe0\x02\x94\x08\xc7\t\xc4\t\xe5\n\xe2\n\x81\x0b\xfe\n\x9d\x0b\x9a\x0b\xd3\x0b\xd0\x0b\xd5\x0b\xd2\x0b\x9b\x0c\x98\x0c\xdd\x0e\xda\x0e\xdf\x0e\xdc\x0e\x81\x0f\xfe\x0e\xc5\x10\xc2\x10\xb1\x11\xae\x11\xb7\x11\xb4\x11\xed\x11\xea\x11\xcd\x12\xca\x12\xc5\x14\xc2\x14\xff\x14\xfc\x14\xe9\x15\xe6\x15\x8b\x16\x88\x16\xc9\x16\xc6\x16\x8f\x17\x8c\x17\xc1\x17\xbe\x17\x83\x18\x80\x18\x85\x18\x96\x11\xaf\x11\xac\x11\xc5\x11\xc2\x11\xdb\x11\xd8\x11\xf1\x11\xee\x11\x87\x12\x84\x12\x9d\x12\x9a\x12\xb1\x12\xae\x12\xc5\x12\xc2\x12\xd9\x12\xd6\x12\xed\x12\xea\x12\x81\x13\xfe\x12\x95\x13\x92\x13\xa9\x13\xa6\x13\xbd\x13\xba\x13\xd1\x13\xce\x13\xe5\x13\xe2\x13\x85\x14\x82\x14\x98\x08\xcd\x1d\xab\r\xe8\xf5\x02\xa5\xf6\x02\x02\x8c\x06\x8b\x03\xb0\xec\x02\x87\x02\x8f\xe2\x02\xa8\xe0\x02\x03\xed\xe7\x02\x07\x1b\x19\x92\xe4\x02\xa5\xe4\x02\xa4\xe4\x02\xb1\x01\xb3\xf0\x01\x12\x01jB6_\x19\xb8\xef\x01\xcd\xcd\x02\x8e\xfb\x02\x93\x92\x03\xd0\x91\x03\xd3\x91\x03\x82\x91\x03\x85\x91\x03\x8a\x8f\x03\x8d\x8f\x03\xc0\x8e\x03\xc3\x8e\x03\xbe\x8e\x03\xc1\x8e\x03\xdc\x8c\x03\xdf\x8c\x03\xf6\x8a\x03\xf9\x8a\x03\xa2\x8a\x03\xa5\x8a\x03\x9e\x8a\x03\xe3\x8a\x03\x11\x98\x89\x03\xb7\x89\x03\xde\x87\x03\x9b\x01\xfd\xf2\x02.>i\x86\x81\x03\x8b\x0e\x91\xef\x02\x17\xd0\x81\x01\x14\x04\xc3\x03\xf5y\xccz\x03(\x83\x8f\x01\xe8\x8e\x01\t\x03\x92\x014\xd7\x01\xc9\x97\x01\x1c.W\xbeH#\r\x05\x9f\t\x01\x93=\xe0E\xc9E\xa4\x07\x1a\x06\xc6\x01\xbf\x01\xc8\x01\t\xc5\x01\xb2\x01\xbb\x01\xaa\x01\xf4\x01\x1a\xde\x1c\x81\x1f\xa26\x03\x81+\xb0,\x03\x01\x8b)\x03\x98\x01\xf1\x03\x03\x01\xf5\x17\x01\x03\x10\x08\x0c\x06\x1e\x98\x97\x01\xab\nS\xba\x13\xa7\x1d\xc6&\t\x0e\x06A\x1c5\x13\xd9&\xb0 \xe4\x05\xc3\x05\x08\xb6\x05\x83\x01\x02\x03\x83\x02\x1f\x0c\t\x03\x8d\x02\x8a\x02\x8b\x02\x1f\xda\x05\xb3&\xd4 \t\x8f!\xb2\'\xfb\'\x9c \xa1 \xcc!\xab#\xfc!\xbb&\x86%\xd9+\xa4*>g\x03\x8d1\xb2/\x03\xbd8\x81c\xba`\xae9\x03\x9b>\xdb[2\x11\x13\t\x05\xc6[\xddZ.\xaeZ\xb8==6\xdb>\x96>\r%\xa3?\xf3W\xbeW\xfbW\xd6W\xf9\x02\x89O\x15\x07\xaaL\x85R\x10\x02\r\xb2\xdf\x08\x91\xdb\x08H82\x08\xa8\xf4\x08\xf6\x06\x03\xec\x02\x9e\x05(\xb4\x03\x14\xe1\x84\t\xae@\xf0B]t@\x94\x02\xb3\x01\xf2\x01\r\xdf;\xe27\x9f5\x03\xbeB\xa1C\xad\x04\xe2\x01\x98\x0b6P\xce9\x8dC\xb0C\x97E\x8c=\xaf\x05\xa4\x042\x8b\x01\xcd\x03\xa8\x02\xd6\x02\xf3\x02\xa0\x01\x93\x02\xb6\x01\xd3\x01y\xf5\x89\x01\xb6\x01\xfb\x01\xe6\x02\xa8\x02D&\x01:\xb0\x01|\x84\x01^\x07\x1aY\x03\x01\x80\x01\xa0\xaa\x02\x8b\xa2\x02\xcf\x08\xcc\x08\xd9\x07\x04\x031\x01\xc8\x03\xa7\x0cV\xc0\x05\xd7\x03\x90\xf2\x01\xd1\xe5\x01\x01\xbc\x02\x8b\x07\xc0\x01\x12=:_\xc1\x01\xf0\x02\xaf\x01\xa7\x02\xd4\n\xa1\x07\x0c\r\xe9\x0b\x04\x05\x1d\xe0\xf3\x01\x8d\xf2\x01\x92\x03\xbc\xec\x01\x8cV\x1c\xe5\xba\x02&j\x06$\xc4\x06\xbc\x01\x7f\xd8\x01\x048%\xbe\x9f\x02\xcd\x9c\x028\xb6+4\xbe~\xa2D\x01\x10\xce\x01\"\xa9\x01#f\x1c\x82\x02\x8d\x02\x9e\x02&\x06\n\x0f\x86\x05\n\x162\x16\x06\n\x93\x10\x04\x03\r\x01\xde\x1c\x03\x1c\xa1\x13\t^\x08\t[\x86\x13\x1b\xa7\x06\x97\x06\x11\x0e\x0b\x07\x15!\x1d\r\t\xdb\x07\xa0\x02\x16\x9a\x05\x9f\x05\t\x02\x03\x11\x9d\x02\xf4\x01\x87\x02\xb4\x01\xff\x01\xb6\x02\xcf\x02\xd8\x01\x19\xdf\x01\xed\x06\xdc9\x8d\x05\xd8\x05\"2\x03\x99\x06\xb6\x06\x82\x01\xb9\x01\xf6\x02\xf0\x01\x16\x04\x06U4: `\xf1\x0c\x04V\x01\xa2\r\x9d\x0b\xc0\x01\x01\xb2\x0b\x03\x01\xcd\x0e\x01\xa2\x03\xdb\x0c\x01\xfc\x1c\x01\x1c\x0c\x07\r,\x93\x11\xe6\x11\xe3\x11\xa4\x11\xa9\x11\xc0\x11\xc1\x11\xc0\x12:\x8f\xce\x02\xa82\x04*+A\xe8\x1c\x04@\x03R\x98\x01\x04\x03]\x82\x01.a+\xff-\x96\xcc\x01\xf6\x0e\xc1\x10\xff\xf0\x01\xfc\xf0\x01\x93\xf1\x01\xf2\xf0\x01\xdd\xf0\x01\xba\xef\x01\xbd\xef\x01\xd8\xf2\x01\x8f\xef\x01\x06\x85\x02\x0e\xcf\x01\x08\x02\x07\x15\x01>\x04\xac\x06\xe9\x01\x88\x01\x1bE\xb2\x01\xd5\x04\x12 >(\x06\x86\x01\x80\x01\x06\x01\nMC\x06\x03G\x01\xc6\x03&1\xcf\x05\x80\x06,O\x8d\x07\xf6\x06\xcd\x05\x9c\x07Tw\x9e\x19\xfb\n\xe0\x0c\xed\x0c\xea\x0c\x9f\t\xc9\x05\xd1\x12\xca\x12\x01\xf1\x07,2\x86\x01]\xea\x02\x92\x03\xc0\x02\xd5\x02\xe0\x02\xcd\x03\xaa\x01\x04\x04+\xb3\x01\xcb\x01\xf4\x04\x97\x05\x8c\x05\xb3\x05\xdb\x0e\xb6\x0e\xce\x05\xed\x05\xe2\x05\x85\x06\x91\x0e\xec\r\x8b\x0e\xba\r\xb9\x0c\xce\t\x01\xa2\x04\x03\xa4\x0b\x08\x03%\x01\xc8\x03o$\xb2\x01\x81\x01\xc6\x01\xbd\x02\xe5\x0c\x8c\x01\xe3\x01\x90\x0c\xee\x06\xdd\x07\xb6\x03\x0f\x14\x04\x02\x04\x031\x15\xd6\x01\xf7\x01\xb4\x01\xcf\x01\x84\x01\xc5\x01\xfc\x02\xa3\x03\x94\n\x08\x12\x91\x0c\xd4\x0b\xf2\x01\x01b,\n}\x82\x02L\x01\x82\x01\xfb*\x04\x11;\xaa\x12\xe0\x02\x01\x9a\x12\xd4\x0b\xab\n)\x96\x0c|>^\xdc\x02\n\x90\x01[\x9c\x01(\xe7.\x9f\x05\x02\r\xe4\x01\x08\xa4\xea\x01\xb3\xe8\x01\x88\xe8\x01\xf1\xf1\x01\x941\x9d\x1d\xcd\x06\x04\x03\x0b\x01\xd8.\xf9\x02\xfc\x03>\x1a\x06\x03\x17\x188\xdf@7\x88\xb5\x02\xc3\xa6\x02\xc6\xad\x02\x8d\xbc\x02\x03\x01\xae\x03\xec\x01\x06\x03\'\x01\xf0\x05\x08\xc1\t\x0c\xc2\xb3\x02\x9d\xa4\x02\xc1\x0e\xa6\x0e@\xc5\x0e\xaa\x0e\x8e\x01T\x7fR\xf8\x11\x8b\x08\xbe\x0c\xe3\x0c\x08\x03y\xa68\xaf6\xb3\x14N\x1a\xaa\x0eh\x89\x01\xe5\x14\xc2\x14r2\x85\x16\xe6\x15\x13\x87\x01\xe9\x14\xce\x14\xf3\x08\x83\r\x0c\xb2\x11eL\x14\x15]/v\x95\x01\x8a\x01\xa7\x01\xed\n\xca\n\x81\x0b\xc0\n\x89\x0b\x03\x80\xb7\x02\xdd\xba\x02\x0c\x96\xb6\x02\xc9\x85\x028\xf1!\x86\x02\x01\"\xed\t\xe4\x08x\x16\x02\x07\x11s\r\xa2\x01\xa5\x01\xd1\x0e\x19\x06\x03)\xfaP\x95\x1f\xc546\x10\x96\x01\x14\x01\xb4\x01\xa7\x01\xac\x01\x02\x07\xcb\x02\x8c\x02\x9f\x02\xf0\x01\xfd\x01\x03\x01\x9e\x05\x04\x03\r\x01\xc4\x08\xa0\x01or\x05\xe7\x02\x06\x03)\x01k<\x93\x02\x01\xbe\r\x0c\x93\x01\x90\x01\xe3\x01\x8e\x052\xa5\x02\x03\xf8\x03\x08\x0f\x87\x05\x03\x01\xa6\t\n\x04e\x8f\n\xd4\t\x1c\x01\xa0\x01\x03\xd4\x03`\xca\x9c\x02\xa0\x06\xbf\x06\x90\x01\xe9\x01\xdc\x01\x87\x02\xb2\t\xff\t\xc8\t\xe9\xc4\x02AR\xb3\x01\xa8\x01\xcf\x02\xc8\x02\xec\x05u\xac\x01\xfe\xe8\x01\xc3\xe8\x01\x9e\xbd\x02\xe4\x01\xe9\x01\x17\xa9\xbe\x02\x82\x01\xa1\x01\x94\x01\x02\x07\xf7\x01\xb8\x01\xdf\x02\x9c\t\x8e\x01\x06\x8c\x02\x06\n\x04\x02\x04\x03\xbb\x02\t;\xd5\x016E\xd4\x04\xcc\x01\xc2\xb2\x02\xc3\xb2\x02\xba\x9e\x02\xa3\xa5\x02\xca\xa6\x02,*\xa0\x10\x83\x0f\xa2\x01\x14\xb7\x01\xef\x9e\x02h\x84\xe5\x01\x05\r\xb4:\x14\xa9\xf4\x01N\xa6\x01\x04\xb0\xf0\x01\xa1\xf0\x01\x01x\xaf.\x98,\xfa\xe8\x01\xb1\x14\x07\xa2\x1f\xf9\x17L\xfb\x08\xa8\x08L\xb3\t\xfe\x0b\xed\x0c\x90\x19\xc6\x08\xc9\x08XYH\xd5\x19\xa8\x19\x02\r\x9f\x19\xda!\xfd\x17L\xbb\x0b\xce\x0c\xc1\r\xde#\x81\x18L\xe5\x0c\xd6\x1b+\xee\x08\xf7\x08\xce\x08\x96\t\x93\x01\xf6\x05\xff\x05\xd7\t\xee\x01\x14\x83\x02\xab\xf2\x01\xb0\xf7\x01\xf8\x0e\xff\x0f\xee\x12\x11S\xd9\x12\xc0\x10\x0c\xf3\x10\xcc\x0b\x9f\x0c\xb8\x11\x0c\xa5\x12\x96\x12\x0c\xb9\x12\xa0\x14\x19\xf5\x01\xc5\x12\x94\r\x0f\xef\r\xce\r\x04\xf7\x03\x94\x03X\xa7\x01\x88\x01\xa3\x01\xa7\x01\x9a\x01\x1fWN3\x1f\x11\x19\xfd\x01\xd7\x02\x11\x17\x0cK\xc9\r3\x83d\xa8#\xe4\x10\x04\x10\x1c\x01\x99\x0f\xb8\x04\xae\x01B\xe0\t\xe7\x06\xee\x07\x01\xe1\x07\xbe\x16T\xbe\x01V\x08\x04\x05&:\x12\x04\x8f\x02\xcf\x01\x8e\x01C\x0eE\x07\x04\xa6\x03\x92\x0cL\xbf\x0b\x16\xe6\nL\xe9\x11\xf3\x19\xf6\t\xa9\n\xd6\n\xe9\x0b\x90\x1b\x02\x17\x11|\x02\x17\xcf\x1b\x8a \xe7\x13\xad\n\x88\x1b\x82\r\x8e\x03L\x9b\x05\xc4\x04L\x9b\x05\x08\xeb\x01\xa8\x06L\xf5\x06\xe8\x01\xca\x04\xb5\x06\x03\xae\x06L\xfd\x06\xf7\x01\xa2\x08L\xdd\x01\xc2\x01L\xac\x0e\x10\xd7\x16\xe0\x01\x8c\x02\xcc\x13\x8c\x03\xa2\x04\x14\xb9\x043\xce\x06\xd7\x07\xe4\x07\xf5\x08\xce\x02\xd0\x0c\xb1 \xd2\x18\xd9\x17L\x93\x02\xc0\x01L\xeb\x02\xfe\x19\xe1\x17L\xdf\x03\x8c\x03L\x9b\x04\xd0\x13\xd7\x13\xbe\x1b\xe9\x17L\x95\x05\x8e\x05\x9b\x06\x07\xc6\x1d\xf1\x17L\xce\x1d\xec\x06\x06\xe5\x08N\x9e\x08\x83\xa6\x02\xe3#J\x90\x01\x01\x96\x02\x05\xa7\x01\xae\x02\xec\x01\x8e\x02\xb8\x01\xb2\x01\xd2\x01\xca\x01HC\xc9\x01\xd1\x01\xb1\x01\xb7\x01\x8d\x02\xeb\x01\x1b\x91\x02\x19\xdb\x01\x1b\x0b\x04\x04\x03/\xfe\x11\x08\x043\x80\x0f\x04\x07\x84\x02\xb2\x01\xb5\x01\xb2\x01\xb5\x01\xb2\x01\xb5\x01\xb2\x01\xb5\x01\xb2\x01\xd5\x02\xb8\x01\xb2\x01\xbd\x02*\xd2\x01\x94\x01\xdc\x13\x9a\x02\xf7\x02\xc0\x02\xe9\x02\xa0\x07\x04\x08q\xfa\x14\xbd\x1c\xc6\x02\xc1\x03\x8a\x03\xbf\x03\xec\x1d\xed\x1d\xbd\x07\xcf\x01\x93\x01\xda\x01\x87\x02Z\xc8\x1c\xbe\x03\xd1\x03\x8e\x01\xbfD\xa4D\xbf\x01\xa8\x01\xabD\x90D\x19\x04\xea\x82\x02\xe9\xae\x02|\x95\x19\xfa\x18\x8d\x01\xb4/\xa1\x01\xcb.\xac\x01\xfd\x18\xe2\x18\xaf\x01\x9a\x9e\x02\xeb\xb5\x02\xc8\xb5\x02\x99\x9f\x02\xcd\x16\xb2\x16\x8c\x9f\x02\xa7\x9f\x02\xb5\x16\x9a\x16\x98\x9f\x02\xb3\x9f\x02\x9d\x16\x82\x16\xe0\x17B\x93\x19\xb9\x18\x04\x03\x17\x01\xe8\xa1\x01\x15\xae\x01\x16\t\x89\xa3\x01\xf6\xa2\x01\x01\xb7\xa2\x01<\xa0\x89\x01\x04\x01\x1d\x9f\x80\x01\x80\x06H\x90\x06\x80\x02\n\x04\x05\x10\x0e\x04\x0c\x10\x1e6\x04\x0c]\x08%8W\x15\xa0\x01\x0c0\x0c\x1f:\x0c\r0\x0c\x1e\x12\x100 2*B\x03\x01.\x08\x0b\x01\xb9\x07\x90\x08\xe8\x03D\x18\x8d\x0c\x86\x0c\x02\x05\xa5\x0c\xa2\x0c\xeb\x0c\t\xd2\x05\x08\xe8\x01_2\x04/\xab\x02\x17G\x03\x11\x05?c\xed\x01%\x89\x08\x8e$\x03\xb8\x01U\x82\x02\x0c\x080\x18\x19$\x9f\x08\x01\x94\t\x0et\x18\x08 \x1c&\xa5;\x14\x15\x1e\xbc\x07\x0c\x12\x106\x0eY\xac\x01\x1c(\x14<\x05\x012\x08\x0c\x06\x0c\x84\x01\x11\x08\xb8&\x01\xf2\x07\xa1,\xbe\x01*Q\x80\x01\x08\xc4%\xbe\x01\x8f\x02\'\xd0\x01(E\x8f\x02\x92\x06S\x1d\x0b\xf7(\x13\xeb\x05\x08\xec\x01?g\x1a!\x0b\x0f=\x9c\x06\xd7\x08\x983\x1c\x08\xcd3\x0c\xab\x01\xb0\x01\xbf\x01\xbe\x01\xb1\x07\xae\x07\xb1\x07\xa0;\'\x03\t\x15\x03\x11\x0e\x15\x0f\x1f\xf1\x07\xd5\"*=0Wd\xf7\x01\t\xc2\"\x9d\x02\xe8\tNY7\xd5\n\xfd$l\x19!\xbc1\xa3\x04\xe4\x04\xab\x03\xb6\x03\x082\xe9\x03\xee\x03-\xe7\x04\xb0\x04\xed\x14\xec?\xe9\x02\x04\x03W\xc6\x03@\x0c\x81\x04\x03\xaa\x06\xe1\x01\x88\x03\t\xe3\x06\xf6\x02\x0c\xfe\x02S\x1a\xaf\x02\xa2\x04\x99\x01\xf5\x02\x0b\x13\x0f\x17C\xa1\r\xd0\x0f\xc9\x17\x94J\x08\x8f\x03\x01\xa6\x03lW\x14\x1a\x16\xae\x01\x10\x0c\x14\"L\x0e\x04\x08\x85\x03Z\x0e\x0c$\"\x14(\x12\xf3\x01\x0c\x02\x0b\r\x1b\x01\t\xf4\x03\x08\x18\x0ebR\x06\x04\xf7\xa2\x01\x01\x8e\x02\xae\x0b\x14\xf2\x01\xee\x01\x92/\x08*\xbf\x12\xb0\x04\xb1\x05\xf0\x04\xc9\x07\x88\x07\xd1\x07\x90\x07\x99\t\x03\xa6\x07\xed\x08\xa4\n\xc9\n\x88\n\xd5\n\x94\n\xe1\n\xac\x0e\xf7\x0f\xf0\x12\xe9\x13\xbc\x13\x83\x15\xd6\x14\xef\x14\xc2\x14\xf1\x14\xc4\x14\xdd\x14\xb0\x14\xf1\x14\xc4\x14\x85\x15\xd8\x14\xaf\x18\xc5\x1a\x02\xc2\x1a\x9b\x196C\t&\xe5\x01\xaa\x18\xa1\x17\xdc\x16\xcd\x17%\x9c\x17\xf8\x1e\x88\nB\r\x17\x02\t\x11\x05\xff>\xfc\x0e~\x07\xcb\x03\x1b5\xa6)\xa2\x03\xc31=\xd8/\xdf7\xe4:\x12U\xb3\x03\x98G$\x14\x8b\x1a\x88\x1a\x0b\x1b\xab\x1e\xf2[\xd9\x19\xf8\x192\x04\x05\x10\x18\xfb\x1a\x03\xb6\x1a\xff\x1c\x01\xa4\x02\xa5\x02\xd7B\x0e\xb1\x1c\x9e+\xab+\xee\"\xa4\x0b\xc7\x0b\xde\x08\xb7\t\xee\x0b\xaf\x0c\x0f\x86\n\x85\x0b\x0f\x92\x0b\x8d\x0c\x98\x0e\xd5\x0e\xa2\x0e\xc5\x0e\xe8\x0c\xaf\r\x0f\xbc\r\xcd\x0e\xaf\\\xae\\\xaf\\\xa0\\\xa5\\\xf8[\x8a\x0f\xf7\x0f\xf4\x0f\xfd\x0f\xfa\x0f\x91\x10\xcc\x11\xe5\x11\xb2\x11\x89\x01\xed\x10\xc4\x11Y\xaf\x11\xea\x11\xfd\x11\xc0\x11\xc9\x11\xe5,3\x13\xbe\x17\x8c+\xe5,\r\xd5\x16\x0b\x85\x02\x04I\x07\x9b\x01\x03\x9a\x1b\x89\x1c\x0491]\t\xbcC\xfbE\t\x80F\xcd\x01\x13\xa9D5\xf0B\x98\x01S\xd7;\x95\x038N&\xd6\x03J\xda\x02\x82\x01\x9e\x01\xdb\n\xe9\x05\x04B\x83\x02\x1a0\x1a\xc8\x01z\xd4\x13\xfe\x02\xf5\x02\x80\x03\xdf$\xa8x\x9dx\x0b\xa9\x15\x03\x82\x91\x01\x85z>\x96\x0bL\xe8\x01\xe2\x01\xaa\x01\x96\x01\xaa\x01\x82\x85\x01\xe7\xa4\x01\x80\xa6\x01\xc5\xa2\x01\xb6\xa4\x01\xcb\xa4\x01\xf2\x02\x8b\x01\x98\x13\x85\x17\xcc\x1a\x89\x12\xc84\x01\x8f0\x01\xd2\x1e\x870b\xc7\x05\x01/,7J3Pz\x04\xfe\xf4\x02\xdf\xde\x01*\x92\x01c\xfd\x97\x01\xa8\xa7\x01\x8d\x05\xc5\xa0\x01\xc2\xa0\x01\x99\x01\xa1\xa3\x01\xe4\xa2\x01\xed\x9e\x01\xdc\x9e\x01{\x03\xdf\x9d\x01\xde\x9d\x01\xbf\x9a\x01\x94\x01\xd4\x01\x8c\xeb\x02\xe3\xed\x02\xa8\x9e\x01\xd5\x9d\x01\xd4\x9d\x01\xef\x96\x01\x97\x0b\x93\x010I\x8d\x01|C\x18\xa0\x16\xa0\x05\\`2\x8c\x01 \x14\x10wm\xfe\x01e\xf7\x01L\t\xb1\x01\xd4\x07~N*&\xe9\x01\x94\x03%~\xc3\x01\xb3(\xbe\xdf\x01\xb9\xdf\x01\xee\xa6\x018\x01\xda\x06$\x07\x95\xac\x01\x10\xef\x01\x0e\x04\t\xe9\x01\x88\x01\x11B\xce\x01\x92\x02\xee\x0c\xcd\rh\x8d\x01\xe2\x9d\x01\x85\x01\x01\x93\x99\x01\xc5\x01S\xe0\x02\xee\x1f\x9d\x19\x07\x04\x05\x9e\x16\xce\x04\xd7\x04\x8a\x01\xa6\x03c_\x191\x15{z-I\x03\x92\x02\x95\x02\xb8\x02\xdf\x02\xa6\x01\xb9\x03\xf9\x0bQ\x9c\x01v8\x1c\xeb\x02\x03\x01\xb6\x03@B\x037T\x1a\x99\x03\x18\xb0\x01\xb8\x02\x198\x98\x01K \x17\x01 \x01\x98\x03\x04\xff\x07\xa0\x04\xb3\x04\x8d\x01\xa4\x01\x9a\x08\xc1\x08\xae\x03\xd3\x03\xce\x01\xcf\x01\xc2\x05\xf6\x01\x02\x03e\xa9\x01\xd0\x01\xe3\x01\xa6\x01\x11\xf2\x01:7!\xa2\x01\xaf\x01\xff\x01i\x99\x03\xb4\x01G\x03\x07=\x1a\x1f\x17\xbe\x02\xbf\x02\xe6\x01\t\x02\x03\x04\x07#\x02\x07\r\x02\x03\xbd\x01\xeb\x01U\xb0\x02\xed\x02\xec\x02\x1b3\x17\x8f\x04\xe2\x0c\xa9\x0e\x96#\n\x04%6\xf7\x04\x92\x06/\x86\x01\xe8\x01\x97\x01\x8d\x07\xd6\x06\x13\x1c7\xb6\x01\xf5\x01,7-\xa0\x05\x0f\x04\x037\x88\x01]\x163\x19\x95\x03\xcc\x01\xcc\x02\x04\x17\x93\x04\xe8\x04\xff\x08\xbe\x02\xf9\x03\xf6\x03\xf1\x04\xee\x04\xfb\x04\x82\x06\xde\x07\x18A\x02\x1b\x87\t\x04\x02\x04\x03C\xde\x04\xab\t\x98\x0e\xa5\x0e\xe8\x0b.?\xcf\x03\xb3\x02\r\xf5\x06\xb2\x06\xb3\x07\xde\x06\x85\x07\x84\x07\xdb\x08\xda\x08\xab\n\xde.\xf3\x03\x03\xf2\x04\x95\x064\x16\xe0\x054a\xad\x05d\x11\x03\x01\x06\x03\x13\x01?j\x8c\x01\xc0\x01\x1e\x9e\x06\x1a\x10\x90\r\x04L\x03\xab\r\x90\x0c\x04L\x03\xd7\r\xbc\x0c\x04L\r\xa3\n1\xa4\x0e\xff\x0c\x1b\x96\x10\xe1\x01\x04Jm\x1a\xbd\x02\x11\xfd\r\xea\x02\"\x16\xd0\x01\nT.\xc6\x10A\xc1\x0e\xbc\x10`\x8b\x11-\xaa\x01\x8e\x0b\x9d\x056\xc5\x0e\xfc\x07\xa1i\x01Pp\xaaL\xf9L\xa7\x02\x08\xf0\x01\xdd\x02\xce\x02\xe7\x02\x05\x01\xb6\x05\x9b\x04:\xee\x02\x94\x01\xdf\x03\xb4\x04:\x9b\x01\xe6\x02\x0eNC\x16\n\x10\xd2\x01\x04\x04\xe3\x04\\\xb0\x91\x01\x01\xb6\x04\x01\xaa\x01\x01\xfa\x0e\x01\xee\x01\x01\xf0\x02\x01\xc6\x02\x01\xdf\x1b\xbe\x04\xab\x9e\x012f\xe2\xa8\x01\xf6\x01PH\xf0\x01\xec\x01\x88\x01\xb2\x01\x92\x01\xb2\x01\x99\xb1\x01\x1dL\xce\xa7\x01\xde\x06\x07\xe3\xae\x01\xe0\xae\x01\xa5\x01\xb3\x05\x9d\xa8\x01\x9c\xa8\x01\xee\x03\xab\x01\xf5\xa8\x01\n\xd8\xaa\x01\x07\xb1\xac\x01\xca\x0b\xa7\x0b\x0b\x18\x19\xba\x85\x01\x82.\xc8\xb3\x01d&\xc7\xef\x02\x90\x03d\xc0\xec\x02$G\xe5\xd8\x01R\xa3\x95\x01\x02\xdc\x9c\x01\x82\xd3\x01\x02\r\x05\xfb\xc8\x01\x01\xa9\x02\x01\xdf\x02\x01\xba\xcf\x01\xe5\xd4\x01\xbe\xd4\x01\x02\x11\xc2\x01\"\x02\r\x03\xa7\xdd\x01\x01\x08\t\xd4\x17\x9b\x9e\x01\xf4\xe4\x02\x1fb\x1d\xdb\xc4\x01\xf7\x9e\x01\x8a\xe5\x02\x06\x04)$\xa3\xde\x01\x82\xde\x01\r\xf7\xdd\x01\x06\x9a\x1a\x01\x83\xb3\x01\x8e\xc2\x01\xe7$\x9a\x11\xfd\x03\x94\x04\x0b\x08\tK\xbb\x03\xa3\x0b\xc2\x03\xca\x04\x89\xa8\x01\xc8\xa7\x01\xcb\xa7\x01\xca\xa7\x01\xcd\xa7\x01\xdc\xa6\x01\x97\xa6\x01\x9c\xa5\x01\xe3\xa5\x01\xe2\xa5\x01\xa7\xa6\x014-\r\x07\x9e\xe0\x01h\x15A\x02\x0f=\x1d\xad2\x01H\xfc\t\x91\x0c\x03\x01\xee\r\x98&\xbc\x01\xa1\xd6\x01w\xcc\x01\x8b\x01\xde\x9e\x01\x91\x97\x01\xe0\x01\xd9\x02\xa1\x03\xf8\x04\xf5\x05\xb8\x06\xf1\x06\xd1\x0b\x8e\x0b\xc8\x9a\x01\x87\xa1\x01\xcb\x03\xba\x03\x9a\xed\x02\xb7\xed\x02\xb6\xa1\x01\xd1\x96\x01\xe7\r\xf2\xf3\x02\x04\x0c\t\x03\x17\x97\xd3\x01\xcd\x9d\x01\x1b\xcb\x03\xca\x03\x19\xda\xed\x02\x8d\xee\x02\x01\xb6\x9e\x01\xc1\xa0\x01\x06\xc8\t\xa0\x01\x13\x0f\xd8\xa0\x01\x81\xa0\x01\x85\x02\xae\xa5\x01\xc5\xaf\x01\xc2\xaf\x01\xa6\xc7\x01\xdd\xc7\x01\xd9\xa7\x01\xe6\x18\x92\x01\xb5\x15\xf0\xa5\x01\xb6\xc5\x01\xc5\xc5\x01\xaf\x01\xe9\xa8\x01\xe6\x18\x97\x10\x03\xce\x12\x0b\x98v\xeb\x94\x01RO\xb8\xa3\x01\xab\x9f\x01\xa8\x9f\x01\x9b\x01\x8d\xa6\x01\xd8\xa5\x01\xfe\x03\xa9\x01\x03\x01\xd1\xa3\x01\x82\x08}\x9a\x05\xc6\x7f\xe8\x10\xd0\x1a\x03\x15\x07\'\x87\x1a\xf8\x19\x15\x8f\x1a\'\x01\xb8\x8c\x04\x90\x01\x1a\x08\x0efX\xf9\x8b\x04x\x010\x01/\xc5H\xe0R\xac \xad \xa6 \xe5!\xdd\xab\x01\xc6\xab\x01\xc9\xac\x01\xac\xac\x01\x01\xe7\x16\t\xe8\x0f\xbc\t\x9b\x9e\x01\x80\x92\x01\xfe\x07\xea\x04\xeb\x04\x04:\xb9i\xe8j\x87\x03\xf7g\xf6g\x98\x01\xba\x01\x82\x0c\n\xc5\x07\x06\x042\x8f\x05\x88\x02:HV\x96\x01\x06\x12\x92\x01\xdc\x01\xa3w\x9cx\x10\xda\x01\xf5y\xf0z\xe7z\x04\x9a|(&BPf\x06j\xda\x01PH\xf0\x01\xfd\x83\x01\xea\x85\x01\x88\x01\xb2\x01\x92\x01\xb2\x01\x83\x8c\x01\xc4h\x81i\xd8\x02\x92\x03JK\x16\xce\x87\x01\xd9\x8b\x01\x80\x05.\x94\\\x93Zd\x18\x01\xb0\x01\xd6\x01\xeb\x01\xf2\x03\xcf\x01\xcc\x01\x93\x06\xe6Z\x95[\xe6\x07\x03\x14\xa4\x02\xbd\x01\x8c\x02\x8d\x02h\xee\x01*_q\xf6\x03\n\xe7\x01\xd4x\xcf\x87\x01\xd0\x01}WBMC\xa4\x88\x01\xb7\x85\x01g-#\xe8\x85\x01\x07\xcf\x8a\x01\xa6\x89\x01\x07\xa1\x89\x01\x98\x88\x01\x07\x93\x88\x01\xea\x86\x01\x07\xe5\x86\x01\xe6\x85\x01\x07\xe1\x85\x01\xfe\x83\x01\x07\xfd\x83\x01\x96\x82\x01\x07\x91\x82\x01\xd2\x81\x01\x07\xcd\x81\x01\x86\x81\x01\x07\x81\x81\x01\xfe\x80\x01\xdd\xc1\x01\x90\xc0\x01\xb3\x7f\xca~\xcd~\xc8~\xcb~\xe6}\xe9}\x9a}\x9d}\xdc|\xdf|\xba|\xbd|\x96|\x99|\xe4z\xefz\xf6y\xfdy\xa4x\xa7x\x98x\x9bx\xa4w\xabw\xd0u\xd3u\xc2t\xc5t\xb4t\xb7t\xb2t\xb5t\xa0s\xa3s\xcer\xd1r\x8ar\x8dr\xd4q\xd7q\xb8q{\x95\xb2\x01\x06\x0b\xb0\xb1\x01\xd3o\xa2o\xa5o\xf4n\xf7n\xf2n\xf5n\xf0n\xcc\x07\x07\xbbv\xbav\x05\x0b\xabv\xa6v\x83\x01\xe5\n\x07\xb7j\xb6j\xe1k\xe2j\xcfk\xa0k\x89i\x84i\xc9g\xf9\x01\xc0\x10\xfc\x01\xcc\x01\x08\x02\x07@\t\x02\x037\x83\x02\xe6\x02\xf1\x03\xe8\x05\x0f\xfd\x05\xbe\x04\x80\x02\x93\x02\xfcN\xfdS\xeeQ\x03\x8bVn\x7f\xf8\x01\xc9\x02k\x13U\xc4\x04\xb8\x02\x0c\r\xbf\x02\xdc\x01\xdf\x01/\x19\x9cQ\xa6\x0b\x9b\rG\xf2\x1e\x0c\xa5&B\xa0&\xef%\xa5\x83\x01\xda\x13\x96\x01\xaa\x01\xdb\x198\xaf\x01\x07\x92\x11\xaf\x12\xb2\x02\xfa\x0f\xad\x12=\x07\xf0\x12\x8d\x14\xdf\x04\xea\x18\xe2\x91\x01\xe5\xa7\x01\xe2\x17\xd8\x02\xc3\x18\xc4\x1e\x83\x17\x03\x01\xc0\x12\xe7\x19\x01\x87\r\x02\x07\x8a\x0e\r\x01\xec\x02\xcf\x0f\xd0\xb9\x01\x8b\xb2\x01\x88\xb1\x01\x07\x9f\xb1\x01\x9c\xb1\x01\xa5\x01\x07\xf1\xaf\x01\xf0\xaf\x01\xd5\xa4\x01\xc6\xe4\x02\x85\xe6\x02\xa5\x11\xa2\x11\xda\xe5\x02\x8d\xe6\x02\x8c\xa4\x01\xb5\xad\x01\xac\xac\x01\xdf\xab\x01\x86\x0b\x93\x0b\xe4\x01\xb6\t\x97\x11\xaa\x02\x12\x1d\x8a\xa0\x01\xba\x8c\x04\xf9\x8b\x04\xf8\x8b\x04\x87\x95\x05\x02\r\x01\x03\x82C\x06\xeb\x10\xa0\x12\x9dL\x1c\x04\x11x\x08\x96f\xe7e\xe0\x02\xc6b\x93\x11\x13\xa7T\x08\x04\xd9\x03\xa0\x038\xdb\x14\xf1\x04\x14V\x98\x03\x98\x01\x0fr\xb9\x05\x01\xa8\x06\xbc\x02W\x9d\x01\xbe\x02\x03\xa4S\x95\\\xacP\xdfK\xa4H\x85E\xdf\x04B\xfag\xf7k\x0c\t\x08\x15\x0b\xa0\x03\x12A\r\x94i\xe9\x1e\xd9H\x86H\xf3L\xbc\x07\x8c\x03gHk\xdf\x02\xd6\x01\x15\xc1\x02\xe6\x01\xf9\x01/_Lu\xce\x04\x85\x07\xe8\x01\xdf\x02\r5\x15\x05\xe0J\x83\x07\xc3-\xfe,\xe6\"\x18\x08T8\x01\x08\x90\x02\xdd$\xda$$s\xb1\x02\xd0\x04\x9a\x01\xb5$\x86\"\x04\x02\x03\r\x0f\x0c\x1b\x15G-\x02\r7\x02 Y\xea\x01\x04\xef\x01\xe4\x04\xc5\x01\x9a\x01\xa7\x01\x13\xfd\x02a\xf0\x04\xc3\x02 !\x10\x13\x83\x02M\x11\xb7!\xb8%\xbb%\xba!\x0f\xdf-\xd4\x97\x01\xa1 \xae\x81\x04\xd3\xa5\x05\xe8\xa4\x05\x8d\xa3\x05\x8f\x02\xd4\x05\xb6\x01\xea\x02\xdc\x02\x0c\xaa\x01\x9b\x01\x0f2\xae\xa3\x01\xa5\xa6\x010\xe3\x02\x8c\xa5\x01\xd9\xa5\x01H\xe5\x01\xc2\x01\x85\x02\x0b\xd8\xa5\x01\xdb\xa9\x01\nS\xba\xa4\x01\x97\xa6\x01\x03\x8e\x01\xa9\x01x\x81\x01byNa\t\xaf\x01p\xa7\x01p\x8f\x01\x93\x04\xf4\x03\xa7\x04\x86\x04\xbf\x04\xb6\x04\x03\xbf\x04\xf0\x06\xbd\x02\xfa\xa5\x01\xa5\xa3\x01\x0c\x11\xcf\x03%\xd0\xa2\x01\xf5\x8f\x01\x96\x01\x86\x01\x91\x02\xa2\x01\x13\xad\x01\xb8\x8f\x01\x86)\xd1\xc4\x01\x05\xc8\x02\x88\x95\x01\xa0\x8b\x04X\x08\x05\x13\x11\x9b\xa1\x05\xea\xa0\x05\xae\x02\xb1\x02\xae\x02#3\xd7\xa2\x05\xda\xa2\x05\x07k\x97\x8c\x04\xe2\x1c\xd2\x01\xa7\x02\x87\x1d]\x99\x04\xd2\x90\x04\x03\x16\xb5\xc1\x04\x91\x19\x0e\xca\x07\x92\x06\x04\x04\t\t\xfa\x0b\xa0\x12\xcfd\xcaS\x04L\x05\xdf\x02\x85R\xcaS\x04L\x03\xdd\x02\xc2\x01\x04L\r\xa5\x03\xb4\x11\xc3\x11\xa0\x11\xab\x11\x9fQ\xc6S\x04L\t\xc1\x03\x86\x12\xad\x12\xf7P\xc6S\x04L\x05\xcd\x04\x93P\xc6S\x04L\x03\xcb\x04\xb0\x03\x04L\x17\xd7\x04\xf5P\xc6P\xd9PTY\xfeO\xd0\x10\xd9\x10\xb6\x10\x9f_\xc2S\x04L\x05\x8b\x07\xd1M\xc2S\x04L\x03\x89\x07\xee\x05\x04L\x0f\xa9\x07\xc4\x11\xe7\x11\xb6\x11\xd7\x11\xb4\x11\x9d^\xbeS\x04L\x05\xdb\x08\xfdK\xbeS\x04L\x03\xd9\x08\xbe\x07\x04L\x0b\xb3\t\xc8\x1a\xe3\x1a\x9a\x1b\x9ff\xbaS\x04L\x13\x8f\n\x86\x1c\x9b\x1c\x90\r\xb3\r\xfa\x13\x83\x14\xb6\x1b\xb7e\xbaS\x04L\x05\xe5\x0b\xefH\xbaS\x04L{\xe3\x0b\xfd\x01\xfe\x13\xb8\x02\xd1\x02\x9e\x02\xf5\\\x8eZ\xb4\x02\xc5\\\xc8Y\xca\x02\x95\\\xaaY\xd7\x12\xedJ\x98\x04\xaaF\x04 )\x86\x15\xad[\x9a[\x0c\r\x89\x15\xf9\x05\xf4\x04\xaf\x05\xbf\x01\xca\x06\xd9\x06\x81\x01}1\xb3\x02\xafS\xaeS\xafS\xa0S\xa5S\xb6R\xb4\r\xfc\x15\x95\'\xe4\x10\xb1\x11\xd9$\xf7\x02\xbc\x06\x01\xda6\x04\x92\x01\xd1D~\x01\xc2D\xa7D\xca\x02^\x04:\x01\x90\x02\x04J\r\x92\x02\xe4\x16\xda\x01\xad\x1742\xc2,\x04F\x17Pn\xe2\x01X\xde\x01\x90\x01\xac\x01\xcb\"\x08\xe7\x1e\xca\x02^\x04:\x01\x90\x02\x04J\r\x92\x02\xe4\x16\xda\x01\xad\x1742\xc2,\x04F\x15Pn\xe2\x01X\xde\x01\x90\x01\xac\x01\xcb\"\xac\x17\xc3*\xc6<0\x04\xcf\x02\xa7=W4\xba-F\x1a\xde\x03>\xde\x02~\xfd\x04X\xe8\x0c\x89\x0b\x90\x01\xac\x01\xcb\"\xc5\'\xd5\x17\xb8\x07\xc0\x05*\x08<\xa6\x12\xe5\x02\xbc\x03\x82\x01\xcb\x12\xda\x0c\xb8\t=8\x97\x08\xa8\x08\xc4\x08\"\x9f\x03\x90\x1e\xfe\x05\xc0\x08\xd9\x0e\xfa\x05\x85\x06\xb9I,-\xa0I\xf2\x05\xb7M\x8eL\x8c\x06\xc3\x0b\x8e\x06\x84\x0b\x07\xa7\x11\xbbF\xb8F\xde\x0b\x87\x0c\x91F\x8eF\x88\x0c\x97\x0c\xa4\x05\xc3\x05\xe1E\xdeE\xb8\x0c\xc5\x0c\xd3E\xd0E\xc6\x0c\xf7\x0c\xa1E\x9eE\xf8\x0c\x87\r\xb0\t\x01\xa3M\x12\x10\x02\x03\n\x15\t\x0703\x81\x02\x01\x10\x01\xd4I\xca\x03\x95\x03\x03\xc3\x1d\x03\xd3,H\x08\x02\x03\x15\xeaU\xbd\x07\xb8\x08\xb5+\xaa,\xcb+\x84,\xb7W\xf8*\xa7+\xb6\x01\xbc\x16\x1a<P\x8f\x01\x8c\x01\xc6\x01\xcc\x01\xcd\x01\x84;\xeb)\xeb*\xc4*\xe9\x1b\xc8\x1b\xc7)\xb4)\xd3+\x8c+\x96\x03\xfe$\x89\x02\xebM\xeaM\xe1G\x91\x07\n\x0b\x85\x02\xac\x03\xd2\x01\xd6\t\x83\n\x82Ath\x03\xf9\x18\x85\x04\xdc\x03?\xfe\x1f\x03\xa7\x05(\xb8\x06\x0c\x84\x035\x12\x04\xa5\x01\x83\x03\x95\t\xa8\r\xa9\r\xb6\x05\xde\x03\xf9\x01\x8c\x06\x85\t\xf0\x04\xf9\x01\x8c\x06\xed\t\xde\x03\x8c\x06\xeb\t\xdc\x03\x8c\x06\xf7\x03\xdd\x06(\xb4\t\xef\x08\xf3\x1d^\xd6*\xd3\x07\xcd\x07\x92\x11\xe9\n\x13\xb0\x05\x9fS\x0e\x10\x01,\xd8\x08\xc3\x02\x01\xa1\x01\x01%\x18\x01\xf8\x03\xaf\x05\xf4U\xabX*\xe4\r\xdf\x08\xab\x07\xa0\x05\x08\x8a\x02\xba\x01\x04\xa5\x01\xfc\x01\x0c\x10\x04j\x03\x14\x1e\x0c\x95\x03\xe6\x03Q\"#\x11\x92\x01 \x08\t\\\x01\x14\x10\n\x04\x04?\"\x87\x01\x08\x02\x07v\x1c\x19\x07\x15\x0b\x13M\x1b\x05\x02\r\xb1\x01\xd1\x02\xcc\x03\xe7\x03\xfe\x01^\x91\x01\xff\x01\xc8\x01\xcb\x03\x0f\xd8\x12\x14\x19X\x04\x08M\x0c\x18\x14\x1c\x0c\x04\x0c\x10\x04,8\x0eF\x08\"0Sp:\x16\xdb\x01\x08\xce\x01YI\x17\x0f\x07)\r\x93\x01\xc1\x01+~\x7fR\x13\x7f\xae\x02\x04\x13\x11\x95\x06\x92\x17\x1c`\x0c\x16\x0c\x18<\x04\x03\'\x14\n\x014\x1c\x0e\x04\x05\x0c\x1e\x06\x18\x02\x06>\x0c\x10\x14\x1b^\x04\x0ca,\x04\x08>\x16\x08\tRS\x16\x17\x05\x01\xc6\x01\x82\x01\x8e\x02\xb5\x05\x02\x13IM\xb6\x01R\x08\x86\x04ZW\x0bG\x02\x0b\x85\x012/\x0ba\x1c\x19\t\xb9\x019\x17\xb5\x01\x93\x02\x08\xe0\x01\xab\x01\xa6\x01\x13\x04\x15\tc\x03\x0f\x1f\x07\x04\x1331\x07\x87\x01,\x1b\xd1\x06\x84+OH\x01n\x10\x1dfVQ\t\x03\xc0\x01\x1a\x0c\x08v\x19f\x0c\x06\x08\t\x0e\x08\t\x1c\x04\x04\x085\x04\x0e\x1cF\x08,\x06\x01\x05\x88\x02D\x9f\x01\xbd\x01!#A\xaa\x05\x0c\x14J\x01\x0e\x10\x03\r\xa7\x18\xc1A\x04\x0c%\x08\x14\x04\x0b/X\x0c\x10\x04 |Y\x08\x02\x07\x17#\x0f\xb8\x02\x04\x0c\x15\x08\x0c^\x01\x10\x9e\x02\xbd\x01a\xe6\x02\x12\x1a\x04\x08)/\x0fJ\x1e\x1fP\t\x0e\x0b\x19\x03E\x01\xda\x01\xe5\x01\x9c\x02\n\x0e\x08\t\x14\x04\x08\x89\x021\tF\n\x0c\x90\x01\x04\x05\x10\x08\x1b\x01\xae\x01\x18\x86\x03\xca\x01\n\x0c\x10\x0c\x14\\\x06\x9c\x01\xc4\x01\x8eA\xae\x03g\x1f\xad\x06\xe2\x04C\r\x94\x04\x02\x03\x93\x04\xef\x08\xae\x04+\xa9\x03\x88\x04\x93\x01I\xbd\x02\x85\x01\x8f5%\x02\xa9\x02\xbf\x01\t5(/\x0f\x02\x03Gk5\xc8\x02\xb4\x01\xb5\x01\xcf\x02\xd3\x05U\xc8\x01\x07\xd5\x01\x1ai\x19\xe6\x05\x05\x85\x03\xe3\x02u\x1aO\xa9\x01\x84\x02\x97\x02\x13\xe1\x02[\x89\x03\x94\x06\xc7\x01\xcd\x04\xe2Lh\xd5\x0c)\xebA\x04\xaa[\x08H\xe3\x06\x01\x80\x0b\x10\x13\xdf\x0c\x86\r\n\x04\x83\x1d\x03\xa4!\xa4\x03\x05\xfc\x01\x9b\x15\xa8\x04l\x86\x13\x08\t\x1a\x0c\x0e>\xdd\x14\xaa\x15^\x086\n\x1c$\x0c\x08\x08U\x0e8\x04 :\xbf\\\xea\x04\x89\x01\x8a\x04$\x07\xb3\x1d\xf8L\x03\x9d\x19\x8a\x03J\x16l\xc7\x01\xb0\x01\xc1\x01t\xb6\x02\x1c.\x04P]\xda\x01D-\x01D\x9f\x05\xd4\x02\n\x0b\xdb\x02\x80\x01\x95\x01\xbe\x01\xe38\x04\x08c\x02\x03\t\x05\x03\x92\x03\x03\x90M\x9a\x01\x14\x15\x1e\x01\x16\x01K\x02\r\xaf*\xc7#\xbc\x05\xf4\x01\x8f\x02\xc6\x04\n&\xae\x01\x93\x010\x9e\x01\xb5\x01\x01\xde\x01\x04\x05\xdd\x01\x98\x02.\x10\x06\xad\x02\xb6\x03\r\x023\x05\x02+\x13\x02\x04\x07\xe9\x031\x0b\xe7\x01\x92\x01\xa7\x01\xd6\x01\xef\x01\xa6\x01\xbb\x01\x9e\x01\x17\xbb\x01\x9a\x01\xa3\x01\x92\x01\xa4\t\x08\x11\x197\x94\x026\xf3\x01`\x02#W\x9a\x01\xd1\x01\xd8\x01\xf5\x03\xf8\x03 \x14<\x1d/\x1d\x82\x0b\xb8\x01\x19n;\x07\x15\xdd\x04\xa4\x06\xf9\x03\x01\xcb\x1d\x1f\xee\x04\x01\xfe\x074\x11\x19\x10G:=\xb0\x03\x0e\xe2\x01\xe7\x01\xa0\x08\xc0\x0b\xae\x054@O\xb1\x05\x95(\x04\x0c\x1d\x15\x03X#\x06\x1b\xd24\x04\x05\xa2\x14\x93@B\xde\x04\xf8:\xb9\x05\xe1:\xfa5\xed5\xd0\x02\x9a\x02\xe3\x04\x0f\xe44\xb7\x1a\xb6\x13\x04\x0e@\xd2\x03$4\xef\x18\x94\x14\xd9\x11\x01p\xfc\x02^\xb4\x02)nD\x92\x03Z\xc7\x01\xb6\xea\x03\xd9\x97\x04\n\x90\x018\xf5\x03\xc4Q\x02\xadQ\xd4Q\xc7Q\xa4Q\xedP\\\x14(B\x01P\x1e\x16\xb3\x02\xd4\x0b\x086I\x83\n\x14\xea\x04\xff\x04\xcc\xb2\x01\x1b\xb7\xb1\x01\x1a\xda\xb1\x01\xbb\xb1\x01\xd2\xb1\x01\x95\xb1\x01x\x9a]\x03\xd1_\xba\x04p\x13\x1a\xce\x03\xb9\x02\xf8\x02\x1d\'+\x16?%\x04\xcd\x01\xe8\x01Z\x89\x07\x01\x86\x01\x88\x07\xbf\x04\x15\x1f\x16!\xa0\xab\x01\xfc\x02\x87\x03\x84\x03\x85\x03\xa9\xab\x01\x1d\xb6\x03\x8b\x06\x85\x03t\x8d\x02\x8a\x0c\xeb\x07\xae\x02=\")\x89\x02\xb8\xb1\x01\xcb\x04\xc8\x04\x8f\x05\x8c\x05\xdb\x05\xd8\x05\xdd\x05\xa4\x04\x15\xe1\x04\xb8\x04\xcb\x04\xea\x06\xb7\x07\xeb\xa8\x01\xe6\xa8\x01\xe1\xa9\x01\x80\x08\x8b\x07\x94\x07\xa1\x07\xb1\x01\xb0\xb1\x01\x13\xc1\xb1\x01\xf8\x08\x85\t\xce\xb1\x01\xeb\xb1\x01#\xd0\xb1\x01\xc1\x94\x01\x10\xd2d\x01\x9bh\x08\x03w\x01\xca\x81\x02\x03\xb9\x9b\x02\x12:\n0\n\x01\t\x1a\n\x01\t\x1af\x1c\x1d\"\x17\x15Z\x04r\x08>\x08\x04\x05\x0c,\xc3\x07\x03(F\x8a\x01\x01\x17\x98\x02\xab\x03\x8e\x02\xb9\x02\xac\x04F\x8a\x01\x01\xf2\x01\xb7\x01m\x96\xba\x03\xfb\xbd\x03\x04\x06\xfa\x08\x01\xe1\n\n\x06\x16\x04\x04\xcf\x04\x11\r\x05\x15\x0b\xb6\x01\x16\x04\x01\x034\n\x80\xbc\x08\x08\xfd\x82\x06\x95\xb4\x02\xf9\x06\xd2\x06\xbf\x03\x8e\x03\x89\x06\xe4\x05\x88\x01\x8f\x01o\x9a\xbc\x08\x14\xd3\x80\x06\xaf\xbf\x02\xba\x02\xeb\x02\xa6\x01\xdb\x01\xb0\x01\xc7\x01\x01\x90\x02\xb0\x01\xde\x02\xf9\x02l\x9d\x01\xbe\x01\xef\x01\x9e\x02i\xe1\x01\xb6\xc6\x02\x96\xfe\x05 \x08\x18\xc3\xe9\x05\xd9\xdb\x02M\x92\x02\xe3\x02\x88\x02\xad\x02W\x13\x90\xdb\x02\xd3\xd8\x02\xb2\xd8\x02\xa3\xd8\x02\xd2\xd7\x02\xdd\xd6\x02\xc6\xd6\x02\xaf\xd6\x02\x8a\xd6\x02\xbf\xd9\x02\x86\xd9\x02\xb7\xd0\x02\xaa\xcd\x02\xe1\xc8\x02\xd6\xc8\x02\xbb\xc5\x02@C\xee\xc2\x02\x87\xd1\x02\xec\x02\xed\x03\xe0\x01\x8b\x03\xf2\xd2\x02\x11\xa4-U\xac\x01\x16\xcd\x01\xcf-\x8d\xcd\x02\xac\xca\x02\x8b\xcd\x02\xe1\x01\x03\xca\xcd\x02\xf3\xc6\x02\xde\x04\xa3\x03\xdb\x02\x84\x02\xc9\x02\x8e\x02\xb7\x02\xa6\xc8\x02\xfc3\n\xa37\xac\xfe\x05\xe5\xff\x05\xbb\xc2\x02-\xe8\xc2\x02\x91\x01\xf0\xfc\x05\x87\x83\x06\xb5\xc0\x02\xfc\xbd\x02\x9c\x83\x06\x13%\xf3\x85\x06\x93\xb4\x02\x8c\xb3\x02\xcc\x84\x06\x83\x8a\x06\xaf\xb3\x02\xa6\x89\x02i\x85\x85\x02\x94\x84\x02\xd1\x87\x02\xaa\x02\xe7\x02\xa0\x02\xc1\x02\x0b\xb2\xf9\x01\xb7\xf2\x01\xe3\x04\x8e\xbc\x08\xc1\xbc\x08\x96\x05\x93\x07\x10\x11\xac\x06\xd8\x01\xfd\x01\xb8\xb8\x08\xdb\xb8\x08\xda\x01\x81\x02\x80\xb9\x08\xb9\xc8\x06\x9e\xc8\x061\xdd\xda\x06\xef\xde\x01\xec\xde\x01\xe3\xdf\x01\x92\xdf\x01\xbb\xdf\x01\xab\x01\x02\x07!\x02\x07\xd8\x01\xc8\x01\xef\x01\xe5\x01\xb4\x01`\xed\x01\x82\x01]$(\x11\x13\x03\'\x1b@\x1b\xda\xe0\x019\xf7\xe0\x01\xbe\xe0\x01\xb1\xe0\x01\xd8\xc5\x01\xcb\x06\xc4\xb2\n\xbbD\x01\x0c\xe8D\xd9@\x93\x02\xbe\x0b\xce:\xe9%\x01\xb0\'\x04\x02\x03\r\xa5\x01\x01\xdb7\x01\xb3\x05\xceB\x0c6\x04-!\x01\xd8\x01\xd9\x01\xbc\x02\n\x12\x08\xff:\x90;\x13\x11\x05\x0f\x01\x89=\xb0>\x03\xf4\x01\x12\xfd/\xd6&\xcd4\x87\x02\x94@\x95@\x98@\x99@\x86@\r5\xbd@\xd5\x04\x90:\xa7;\xd8;\x19\xad<\xe2C\xedH\xa9\x04\xa6E\xfbF\xb6D\x19\xcfD\xceD\xab\xd5\x01\x82\xd7\x04\x99R\xfa\x83\x01\x81\x84\x01\x01\xd6D\xf2C,@\x0cC\x0b\xf8\x02L\xf3E\xf2E&\x96\x01\xd3V\x8eW<\x03\xd3;\x01\xca=\x04\x03\xbd\x01\x016j\x06\x08)H$\x01\xd1=\xca<\x10.\x9e\x01\xa7\x01\x17VW\x17\x19!\xb7>\x961\xad1\xac1\x8f=\x92F\x18\x15\x0f\x02\x03S\xd7\x01\xd1\x01\xc9P\xdeV\xffV\xeaV\x85W\xdcV\xedV\xd8V\xdf\x8c\x01\xfa\x82\x01\x04\x02\x03\x17\xcf\x85\x01\xb0\x85\x01\x0b\x8d\xd2\x01\xf0\x86\x05\xfd.\x94/(\x1c\xd1/\xca1\x9d2\x01\xc23>\x0eP\x06\x01\x05\xe6\x03\x88\x02\x91\x07\x8a\x01\x08\x80\x04\x0c\x84\x05\x9e\x03\xa5\x06\xf5\x01\x0b\t\x05\xf3\x03\x07\x1d\x19=\x13\x03\xa9C\xc2]\x06\x01\x05\x04\"-\xca\t\xb5\t\xf4\x12\x1e\xfa\x05\x06\x0c\xa5l\xbcn\x10T~\x8bn\x9eo\x06\x07\x7fe\xc9o\xa0s\x90\x02\x1e\x08\x04\x0c\x83\x01\x06\x16\x04\xc3p\xb3\x03\x92q\x10\xda\x02\x15\t\x1f\x1d\x19\x03\xd3\x01\x13\t\x05\x81{\xc0Z\x10\xb2\x13\x1d\x05\x97\x13\t\x05\xada\xc3\x8f\x01\xc1\x85\x11\x03\x97\x01\x01\xad\x01<\x11\x16\x05T\x10\x014\x1e6b\x1a\xa1\x03\xf4\xd2\x02\xd1\xd2\x02D\xa8\x01\xb8\x01\xb3\x01\xa5\x01\x01\xce\x0c\x91\r\x07\x01\xf8\x9f\x01\x8b\xa0\x01\x08\x0c\x1a\x01*\x04\x0e\x15\x03\x1e\x04\n\x0c(\x18\x10\x0c\x18&\x04\x0c\x0f2\x081\xa0\x01\x06(\x01\x1c\x06\x0c\xd9\x01: \x16*\x0e&\x08!\x15\x07\x01p\xa1\x01\x0fC\x01\xe8\x02B\x0c\x08\n\x8cU\xee@\x02\x0f\xcfA\x96B\x85\x9e\x01\x05\x0b\x11#\xe6\x9f\x01#5K\xf5B\x9dS\xdf\x07\xd8\x07\x05\x03\x0b\x08\x05\t1/\x85\x03\xb6\x02\x8f\x01\x15\x91\x01;\x12A\xb5\x01\x0b;A\x13\xacO\xa6N\xcdN\x94\\\xb3C\xc2C\x85\xac\x01\x0c\x0e\x04\t3\x03\xc2x\x01\xa5v\x82\x01\x0e\x0c\x11e\x8a\x013}*W\x01\x8eY\xa8\x07\x03\x81[\x08\xc8\xa4\x01\xc7Is\x01\x99X\x14\x08_\"\xc3\x07\xac\x01\x16N\xd4\x01\x99\x01\xef\x03\x16\x04\x85\x02x\xa4\n\x9d\x02\x01\xe1\x01\xaa\x06\xc1\nC\xa8\x06\xbe\x05\xff\t\xca\x04\xb2\x05d\xe8\x02\x8d\t\xdc\x03\xf4\x04\x02\x177\x88\x01\x8d\t\x84\x08\xad\x04\xb4\x05\x8d\t\xd8\x03\xf6\x0f\x97\x03\xd2\x01\x1c\xa7\x12\xb8\x10\xd3\x01\xa0\x03\x1c\xa3\x12\xe6\x0e\xf3\x01\x8e\x05\x1c\x9f\x12\xf4\x0c\x8c\x05\x1c\xdd\x05\xa0\x06\xdb\x06Y\xab\x0b\xaa\x0bC\x08?\xb1\n\xb0\n\xc9\x07\xa8\x08\xd3\x08\xbd\x02\xbc\x02x\xb7\x03\xe8\x02\xeb\x02\xea\x02\xf7\x05\xe0\x19\xb9\x08\xce\t(#\x05\x0c*\xff\x02\xed\x14\xe0\x04\x8d\x05\xf0\x18\xa9\x1f\x08\x02\x07\x03\x11\xc4\t\xd3\t\xd0\t\x03\xcf\t\x8a\xa0\x04\x8d\xa0\x04\xd0\t\xb8\x96\x04\x8b\xa0\x04\x8e\x9f\x04\x91\x9f\x04\xd4\t\x8a\x95\x04\xbd\x95\x04\x02\x03\x9c\x95\x04\x8d\x96\x04\x02\x07\x8e\x95\x04\xef\x93\x04\xec\x93\x04\xb3\x9d\x04\xd4\t\xc0\x93\x04\x95\x95\x04\xd0\x94\x04\xd1\x9c\x04\xd4\t\xfc\x92\x04\xd7\x9c\x04\xd8\t\xfe\x91\x04\x01\xc3\x95\x04\"\n\x1e\xcd\x07r\xd4\x9b\x04\x83\x1e\x04\x03\xe3\x02\xe7\xf4\x03\x94\x01\x1aF\x1c `.\xf8\x01\x16`\x81\x05F<`.\xf8\x01\x16`\xdf\x05&\xf6\x01\xe4S\x01\xe5`\x04.6\xe8o\xfc\x03\xafs\x14>\xbcr\x02\xb3r\xacr\x01\x91r:\x10\x16\x0c\\\x04hT\x01\x8eZ\x81^\xb8\x04\x0c\n&\x18\xc6V\xa5U\x198\x84\x02\x04\x05\x12\x04\xect\xe7rp\x08T\x1b\x02\x18!\xdcr\x01\x9ds\xc4m\x01P\xedg\x03\"\xc0\x04\x14\x04f\x04\x12\x04\x11\x0fnGZ\x1e\x10<\x03\x0f\xa2d\xc9n\x88m\x01\xad_\xa1\x02\xa4c\x9d`\x01:\x08\x06\x08\xf1\x04\x12\x88\x01\x95\x01*\xd4\x04\xeb\x03\xf4\x03\x87\x05\xb0\x07\x0e\xd2\x82\x01\xc9\xa2\x01H_\xa2\x83\x01\xf7c\xa4c\xf1c\xbaa\xc5b\xc4b\xb3c \x0c\x1c\"\x11\x07\x05\x07\r\x02\x03\x0f\x03\x1b\x13\x0c\r\x03\x96c\x89c\xb0b\xfb\x01\x81^\x86\x01\x11\x0c!232\x91\x01\x95\x05\xf0\x03\xa4\x01\x7f)\x91\x051\xa8\x04\xa9\x04\x0b7\x8b\x01\x04\x1b\xb7\x03\x9ac\x83\x01\xfbkMyT\x15\xc0\x02\x03\xc3\x02O_\x88m\xe9\x03\xf7r\x1b\x1e\x15\xa0\x03\xff\x01\x1b\x0e\x0b\x03\r\xd4\x02\xe7\x02\x02\x0790\r#!\x1e\x1f\r\x136\xd8\x04\x0b1\x05\x0f\x11\xab\x04\x13\xb0s\xe7r\xe2rE\xa1r\xf2q\xd5n7\x1a\x17I-(%1\x13\xc0o\xc7q\xe4o\xdbo\xf6n\xaff\xa4f\xa7f\x94f\x8fn\x18\xecm\x8bf\xb4d\xb7d\xc4c\xc7c\xa8c\xabc\xd0a\xd3a\xee_\xf1_\xfe^\x81_\xb8^\xbb^\xfa]\xfd]\xfa]\xd7[$.\x89\x01\x8d\x01az\xa9\x01\x18\x19j\x03\x99\x01\x03)\xec\x17\xea\x02\xd1\x04\x99\x07\xd2\x9d\x01\xe9\xa9\x015\xf3\x01\xe0X\xdf`\x08 \x02\x07\x15\n\x0b\x07\x1d\xfa`\xbd\x01\x03\x81Z\xc6Y\xbdY\xbcY\xf5]\r\x19\x94^\x83\x01\x8bU\xa8\x01\x15\x0f\x99\x01\x80\x01\xeeR\xdf\\\xc2\\\xc5\\\xfcZ\x89ZRO\x86Z\xc7U\xc9\x03\x98U\xd6]\x1f\xc9]\xd6T\x1f\x11\xc9T\x84Z\xf0)\xd3Q\x01\xd8\x8a\x15\x91\x91\x16\x96\x02%X\x01\xf6\xdc\x01\xad\xe1\x01\x10\r&1\xb4\x01\x07\x84\x05?>A\x03\x91\x02\x01\xba\x9c\x01\xd6\x06\xae\x02\x8c\x07\x03\xde)\xfd+\xc2\xe2\x01\xe2\x0b\x01\x9a\x01\xbd\x99\x03\x0c\x17h\"\x16\x14\x1a\x01\x0e\xf2\x97\x03\x03\x9b\x03\xb5\x96\x03\xf0\x01\r\x1b\x17\r%\x04;+\x05\xf4\x8e\x03\x85\x92\x03\xa0\x90\x03\xc1\x90\x03\xec\x8e\x03\xaf\x8f\x03\xa2\x8f\x03\xc6/\x830\xbe0\xe10\xc1\x8e\x03\xd8\xa0\x02\xc7;\xce\xd8\x01h\x068\x16\x08h\x04\x08+ \x9b\x01\x0b\t!\x13\xa6\x02\xe7\xf6\x02\xeb\x14\xf70/\x16\x8a\x02\x9e\x02\x90\x01\x8a\x01\xe7\x03\xae2\x01\xf3,\x0c\n\x04\x04\x04\ts(\xdb\x08\x9a\t\xac\x0f\x01\xd6 \x03\x91=J\xc0L\xc4\x14\x81\x16\xfe\x15\xb9\x16\xd8\x03\x86\x14\xd9a\xd2a\x05\xb9\x12\xd2\n\x15\xcb\x10\x07\xf1I\xc0I\xebI(\x86A\xd7\x19\x01\xb1\x1d\n\xbe\x1dp\x06FRz\xec\x01\xe0\x01$L|\xde\x01\xb4\x01\xc4\x01\x08$\x14fH0\xb2\x01\xbc\x01\x933\xd4\x01\xcd\x01\x04\x06\xcb\x02\x964\x82\x01\xf7\x05\xa96\xa26\xf1(J,\x8e\x01\xff\x01!\xc1\x04\x07\x9e\x08\xd7\t\xd4\t\xeb\t\xdc\n\x02\x90\x05/\xe0&\xa9,\xe1\x10\x8a=\xaf<\x0b\xa6\x06\xa0\x10\xcb\x05\xcd\n\xe0G\xbdN\xbc?\xe9.\xd5\x10\x82>\xaf-\xd5\x10\xd0=\xfd,\xd5\x10\xd2=\xd5=\xd4=\x93\x05\xd5\'\xa4&\xa7&\xf8%\xed\x01\xc3\x01\xb9\"\x86!\x89!\xfe \x01\x97\x03\xdf.\xd8.\xfd\x1d\xe9\x02\xee@\xc3\x11\x93=\xc6$L\xca\x05^~$\x14\n\x12T\xe1-\xd6%\x08\x90\x08\x11\xff\x07\x92\x07\xcb\x01\xc0\x01\x15\xa5\x01\x9c\x01)c\x0f\x04\x071\x14\x97\x05\x11;\x7f|+\x0e\x0b!\t<_\x03\x9b$\xf0\x02\xa6:\xe5$B\xa5\x18\xd2;\x81\x01\x93\x01\x873\x80\x05\xb0\x03\x8d\x01+U\x84\x05\xa1\x06\x03\xbe)\x13#\x05\xd7\x04{\x07g\xdf\x01\xeb\x01yQE\x05o\x05\xbd\x1d\x18\r\x13\xbc\x1d\x89\x05\x8c\x0bU\x03\t\x83\x0f\xa0Y2\x04\x07\xfa,\x1c/x\xb3\x1d\x01Z\x0c\xb8\x010\x14\x1c\n\x1e+\x16\x0eR:VN.nF\xfc\x01X6j|\xd4\x01\\\x1a\x12\xca\x02F\x12>\x04$+\xa6\x01\xaf\x11R:VN.nF\xfc\x01X6j|\xd4\x01\\\x1a\x12\xca\x02F\x12>\x04$\x11\xa6\x01\xb6\t\x08\xcf\x07\x01\xfa\x04\x04\x89\xa5\x01>\x04\x03\x01\x01\x06\x03)\x01c\x0e\x04\x02\x03\r\xdc\x93\x01\xff\x92\x01\x04\x1d\x01B\x08%\xa9\x01|\xea\xc2\x01\x01\xc8\x12\xf1\xd3\x01\x04\x02\xed\x01\xce\xd6\x01\xcb\xd6\x01f\xda\xa5\x01\x9d\xa6\x01\x82\x01Q\x0c@\x0f\x02\x07\x19\x12\x0f\x03\x15\x12\x13\x19\x11V\xe8\xa4\x01\xcf\xa5\x01\xae\xa5\x01\xb82\xf72I\xaf\xa0\x01\x03\xb8\x04\xca\x01\xc7\x01\xaa\xcc\x01\xe6\x01\xed\xd5\x01\xe0\xd6\x01\xaf\x01\x87\xc9\x01\x01\x81\x05\xc0\xcf\x01\xc1\xcd\x01\xb6\x01\x14\x82\x02\x99\x02\x9c\x02\x87\x02\x8c\x02\x0e\xb8v=\x01\x93\x86\x01L\xc2\xb3\x02\xf3\xb3\x02\xbe\x19\x03\x80\x07\x046\x182\x08\xbf\x19\x07\xb4\x03\xe1\x03\xb6\x03\xc3\x03\xec\x03\x8d\x04\x8a\x04\x93\x04\xa2\x04\xeb\x0b\xea\x0b!\x99\x04\x0f\x96\x02\xc9\x02-\xbe\x02\xe5\x02\xe4\x03v\x18\x02\x0f\x17\x0fQ\x07\xe3\x03\x81\x03\xc2\x02\x02%\xe9\x03\x8e\x027*\x05%\xb1\x02\x01\x03\xf2\x07\xd3\x03\xb4\x05\x12\xd3\x01\x01\x94\x03\x1dB\x12\x04\x07\x99\x02\xbe-\x06\x1a\x042\xf7\x02\x10\x18\xcb3\xc83\xdb3\xd834\xae\x01\"\x88\x01\x0e<\xeb\x02\x8c\x03\xdb2\xce/\xbc\x03\x88\x13\x90\xc9\x01\x8b\xc9\x01z\x06\x8cM\xa7\x9c\x01\x04\x02\x03\r\x13\x8c\x05\xd3\x05\xf8\x04\xf9\x04\t\x8eP\x15\xe9J\xbd\x06\xbc\x06\xf1\x02%\xc8\x02\xd1\x02\xc8\x02\xd9\x05\xe8\x01\x9c\x02\xcd\x02\xb9\x01\xa8\x85\x04\xa5\x01\xde\x06\xe9\x01\x81\x08\xbd\x01\x01\xc2\x1f\xae\x01\x01\x87\x96\x04\xae\x96\x04\x01\xf9\x95\x04\xb1\n\xb0\xd4\x04\xf6\tt\xca\x04\xf5l\xf2\x01\xd2\t\xdeQ\x8a\x0c\xdb\xc5\x02\xcc\xbb\x01\xae\x05\x8b\xd7\x03\xc6\xdc\x03\x8c\x80\x01\xbc\x01\xca\x01\xf7`.\xa2\x03z\xce\x03\xcc\x03\x9c\x01\xea\x01\xa2\x02\xb1\x94\x04\x08T\xa0\xdc\x02\x05\x89\xdb\x02\x02\x03\r\x9a\x01\x9b\x01\x17\x02\r`a\xdc\x07\xbc\x02\xa9\n\x96\n\xab\n\xc8\t\x9e\x02\xb7\x02\x85\x01!\x03\xf6\xd2\x029\x07\xcd\xb9\x02\x82\x04\xe2\x05\x02\x1f\xc5\x02\xab\x01\xa8\x01\xa9\x01\x06\x13\x9b\x01\x1d:*\xd1\x06\xa8\x0b\xa9\x0b\xa6\t\xec\x01\xfd\x01\x90\xa8\x02\x87\xa6\x02\xbe\xa5\x02\x1bE\x15u\x1d?I\x05\xcf\x05\x13\x8b\x01Y\xcf\x01\xc1\x01\x171\x07y\xc6!\xe8\x02\x9b\x03\x8a\x02\xf1\x02\xab \r\xad\x01!3\x8d\x01_M7\x07\xb8%=\t\xc7%\xba%\xdb%\x05\xa5\x8e\x02\xaf,\x04\x02\x04\x03\x97\x03*5\r\xf0,\x02\x03f\x91+\xc5\x02\xd2,\xd9,\x07\xda\x02\x07\x1b/\x15\x84\x01\x02\r\x9a\xb8\x02G#\x95\x01?\x05\xe5\xad\x02\x8c\n\x0fU%oQ7\x0f\x0b\x0fk%#)Q7E\x0b\r\x05\xe7\r`S\t\x07\x94\x07\x8e\x06!\x05\xb6\x18\xef\x18\x07\xaa\xd4\x02\xdf\xd4\x02Y9\r\x8e\xad\x02K\t\r\x05\x85\xb7\x02\x86\x07\x02\x1b\x93\x01ZiT\x7f\x99\x01\x83\x04\x80\x04\xf3\x03\xea\x03\xe7\x03\r\xae\xb6\x02!A1o7#\x15\r]!ACW?\x7f;\x13a_\x85\x01\r\t\r_u!A1E7#-\x13W\r9\t\x0b_!A1K/\x1b7s)\x155eG\x0f9G%\x0f}/7/\x9b\x01\xb9\x80\x02\xe6\x91\x02\xe6B\r\x81\x01~\x7f\xe4\x01o\xbb\x01\xac\x01\xed\x01\xea\x01\xef\x01\t\xfbE\xad\x12\x9aV\x14\x1b\x18OLif\xa5\x01\xa2\x01\xe9\x01\xedX\xd3C\x8f\xc5\x01\x02\x05\x90\xb4\x01\xeb\x89\x01=\xdf\x03<\xc5,\xa2,\xb6\x01\x0f\xa7\x01<\x13\xc8\x8d\x01\x9f\xb7\x01\xe8\xb6\x01\xdf\x06\xa2\xcc\x01R\x93\xb9\x01\xa8\xba\x01\xef\x80\x03\x1a\xb0\xda\x01\x04\x03I\x01\xd3K\x03\x01\xe9\x8d\x01H\x0c\n\x01\"\xba\xa3\x01\xc3\xa2\x01n\xa4\x02\xae\'\xb9+\x03X\x1f\x02\x8e&\x01\xe0\n\xaa\x012\xb4\x02\x9e\x02\x94\x01\xc1\x1e\xdb\x1a\x06\x1c\x08\t \n4\x04\x03\x9b\x01\"\x82\x01L\xe6\x01.L\xf3\x06\x03\x01\x18\n\x01\t\xe2\x02\x03\x17\x06\x11\x16m\x90\x01\x1d\xb9\x02\x01\xb8\x07\t~\x10\x0b[\xe5\x01\t\xc6\x05\x0c\r\x18\xdd\x02\x8d\x01\x84\n\x07\x0f\x19\xc5\n\x01\xd1\x04NE\t\x82\x01\x03\x01\xd6\x01\x04\x11HT\xba\x02\xaa\x04\x03\x01\xbc\x01\x01h\xc5\x02\xc9\x06\xf0\t\x87\n\"\x92\n\xa9\x0b\xd6\x03\xb9\x02\x9e\x05\xde\x05.\x9d\x04\x01\xd3\x01\x04\x03\xbd\x10\x01\xfa\x07\x8f\x08\x88\t\x12\x16\x07\x04+^\x1c\xb6\x05\x1c\xd5\x05\xc6\x05\x1c\xbb\x03\xa8\x03\x1c\xed\x01\xcf\x04\t\x0c\xd8\xf9\x02\x01\xdbm\xc2\x7f\xd1\x9e\x036\x82\xd8\x03\xc7\xd1\x03\xa4\x02\x85\x01\x9b\x01\x03\xd6\xcd\x03\x95\xd6\x03\xc0\x19\xd4\xbc\x03\xcf\xc9\x03d\x85\x01\x82\x01\xc3\x01\xc0\x01\x85\x02\x82\x02\xb9\x02\xb6\x02\xc9\x02\xc6\x02\xf1\x03\xee\x03\xd7\x04\xd4\x04\xaf\x05\xac\x05\xf5\x06\xf2\x06\xfb\x07\xf8\x07\xe1\x08\xde\x08\xdf\x08\xc8\x02d59\x13\x9d\x03\xd2\t\x89\n\x86\n\xb5\n\xb2\n\xc7\n\xc4\n\xb3\x0b\xb0\x0b\xe1\x0b\xde\x0b\x9b\x0c\x98\x0c\xe1\x0c\xde\x0c\xdf\x0c\xdc\x0c\xa8\xc6\x03\xd9\xc1\x03\x023\xc2\x01\xc3\x01\xb2\x013\x1fg\r\xa0\xa7\x03\x97\x16\xd1\x9f\x03\x031\x1d\x9a\x8c\x03\xed\x8c\x03\xfe\xb4\x02\xd1\xb5\x02\xb8\xdb\x03\x0f\x02\x03\xd1\xa6\x01\xe9\x01\xfb\xb2\x02\x03\xce\x8a\x02\xdf\x03\x99\x86\x02\xd6\xf7\x01\xab\xf8\x01\x00\x9c\xee\x01\x8c\xed\x01\x80JP\xe3]\xea\\\\XGF\'\x1e9\x0f\x17C\x03\xd9R\xd6_\x01\xb5M\xcc{p\x03\xa0\x01^\x93\x04\x01v\x01\xa9h\x01\xf4\x01\x01\xd6\x07\x01\x80\x02\x01\xb8\x02\x01\xd2\x1f\x94/\x1b\x8fI\x01\xd3\x8a\x04\x98\x04\x12\x01\x15\xff\x03\x01\x11R\x01\xba\x04\x03\x01\xc1\x03\x83\x01\x06\x07\xba\x05\x8b\x03\x82\x042\xc2\xab\x01\xef\xa0\x01\xe8\x08\x02#\xb3\x15\xda\x12\x80\x16\xe0-\xbdV\xb2V-\x87V\xac#\xea\x02\xde>\xadi\xb6\x04\xf4dl\x99j\xb6\x04\xaed\x07\xba\x01\x99j\xb6\x04\x90d\xd0\x01\x99j\xb6\x04\x8cd\xcf<\xa2<\xda\x02\x87\x03\xb0\x02\x99j\xb6\x04\xeab\xf6\x02\x99j\xb6\x04\xbab\xf3f\xb6\x04\x8e&\x97*\x0b\x92\x04\xb8b\xa8\x03\xe3e\xb4b\x07\xb4\x03\xe3e\xd4a\x0b\x98\x04\xe3e\xb2a\x07\xb6\x04\xe3e\x96a\x07\xd2\x04\xe3e\xf4`\x07\xf4\x04\xe3e\xaa`\x07\xbe\x05\xe3e\xf6_\xea\x05\xe3e\xb4_\xb7_\xb2%\xda9\xedb\xecb\x8d_\x88_\xd0\x06\xdbe\xc2^\x07\x9e\x07\xdbe\xa4^\xb4\x07\xdbe\x90^\xc4\x08\xf1\x08\xf6\x07\xdbe\xde]\xf9a\xe0a\x94\x08\xdbe\xf2\\\xe6\x08\xdbe\xbc\\\xbf\\\xba\\!\x80\x17\x0b\xc9L\xc5&\x80s\x07\xb5L\xc5&\xc6r\x0b\xf7K\xc5&\xb4r\x07\xe9K\xc5&\xc2q\xffJ\xc5&\xc0q\xd3m\x02\r\x05\xdd\x03\xdc\x03\xaem\x8dq\xc8p\xcbp\xcap\x83J\xf6G\xf99\xd49\xd3G\xc5&\x94n\xfd7\x996\x986\xc46\xdfl\xbel\xc1l\xbel\x99\x01\x07\xe1D\xbd&\x94k\xd9D\xbd&\x92k\x07\xcfD\xdaC\x07\xd5C\xb9&\xbei\x87C\xb9&\xbci\x85C\xc0A\xc3A\xb5&\xb8f\xbbf\xb8f\xed0\x9b\x0f\xb1&\xfce\xffe\xf09\x98+\x8be\x86e\x89e\x84e\xdd>\xa9&\xe2c\x07\xb3=\xa9&\xc4c\x9d=\xa9&\x98c\xf1<\xa9&\x92b\xeb;\xa9&\xbaa\x93;\xa9&\xf0`\xf3`\xc0`\xc3`\xe8_\xeb_\xea_\xc79\xc69\x17\xd3_\xd2_\x03\xac\x11\xfdp\xbap\x07\xb5p\x9ap\x07\x95p\x88o\x07\x83o\xc8n\xcbn\xc2n\x11\xa3\x0f\xe58\xa9&\xc4^\xc7^\xc2^\xc5^\xc0^\x9d8\xa5&\xec]\x07\xc17\xa5&\xce]\xab7\xa5&\x94]\xf16\xa5&\xea\\\xc76\xa5&\x82\\\xdf5\xa5&\xce[\xd1[\xb2[\xb5[\xa4[\xa7[\xa2[\x835\xa1&\xd0Z\x07\xa94\xa1&\xb2Z\x934\xa1&\xf8Y\xd93\xa1&\xbcY\x9d3\xa1&\xecX\xcd2\xa1&\xb0X\xb3X\xbcW\xa11\x9d&\x88W\xed0\x9d&\xf8V\xfbV\xfaV\xdf0\x880\x8b0\x99&\xcaU\xb3/\x99&\xccT\xb5.\x99&\xc2T\xc5T\xc0T\xc3T\xbeT\xab.\x95&\xeaS\x07\xcf-\x95&\xfcR\x07\xe1,\x95&\xdeR\xcb,\x95&\xa4R\x91,\x95&\xfaQ\xe7+\x95&\xbcQ\xa9+\x95&\x88Q\x8bQ\xecP\xefP\xcaP\xbf*\x8d&\xbaP\xbdP\xbcP\xc6\x08\xd4\x02\x9b\x03\x07\xb5X\xc2O\xc5O\x90O\x93O\x8eO\x91O\x8eO\x87)\x89&\xbaN\x07\xab(\x89&\x9cN\x95(\x89&\xe2M\xdb\'\x89&\xb8M\xb1\'\x89&\xf4L\xed&\x89&\xc8L\xcbL\xb4L\xb7L\xb6LU\xe5%\xfd%\xf4J\xf9$\xfd%\xd2J\xd7$\xfd%\xc0J\xc3J\x96J\x9f$\xf9%\xb8I\xc1#\xf9%\xf8H\x81#\xf9%\xecH\xefH\xeeH\xfe\x05\xa6\x02\x9d\x10\xf7@\xf2@\xca\x06\xbfG\x9eG\xa1G\x96G\x99G\xa0F\xa3F\xf8E\xfbE\xc8E\xcbE\xcaE\xd1E5\x1c+JM\x94\t\x99\x01\xc4!O\x8c\x05\x91&\x0e\x1b\xee\xc5\x01\xbb\xa3\x01\x91\x02\xd2\x06/\xe5&3\xc0\xc6\x01\xc3\xc6\x01\xb6\xc6\x01\xb9\xc6\x01\xfa\xc5\x01\xfd\xc5\x01\xdc\xc5\x01\xdf\xc5\x01\xce\xc5\x01\xd1\xc5\x01\xa4\xc5\x01\xa7\xc5\x01\xa6\xc5\x01\xa9\xc5\x01\xe2\xc4\x01\xe5\xc4\x01\xc4\xc4\x01\xc7\xc4\x01\xaa\xc4\x01\xad\xc4\x01\xac\xc4\x01\xaf\xc4\x01\xb8\xc3\x01\xbb\xc3\x01\x86\xc3\x01\x89\xc3\x01\x84\xc3\x01\x87\xc3\x01\xd8\xc1\x01\xdb\xc1\x01\xa8\xc1\x01\xab\xc1\x01\xe8\xc0\x01\xeb\xc0\x01\xea\xc0\x01\xed\xc0\x01\xe8\xc0\x01\xa3\xc0\x01\xec\xbe\x01\xb3\xbf\x01\xf2\xbe\x01\xf5\xbe\x01\xc4\xbc\x01\xf7\xb2\x01\xe8\xb0\x01\xd3\xba\x01\xc4\xb8\x01\xcb\xb8\x01\xc6\xb8\x01\xc9\xb8\x01\xde\xb7\x01\xe1\xb7\x01\xe0\xb7\x01\xe3\xb7\x01\xe2\xb7\x01\xeb\xb5\x01o -%\x1b\xcc\xb6\x01\x85\xb7\x01\x84\xb7\x01\x87\xb7\x01\x86\xb7\x01\xff\x05\xb5\xb1\x01\x9c\xb1\x01\x9f\xb1\x01\x86\xb1\x01\x89\xb1\x01\xf0\xb0\x01\xf3\xb0\x01\xda\xb0\x01\xdd\xb0\x01\xc4\xb0\x01\xc7\xb0\x01\xae\xb0\x01\xb1\xb0\x01\x9a\xb0\x01\x9d\xb0\x01\x86\xb0\x01\x89\xb0\x01\xf2\xaf\x01\xf5\xaf\x01\xde\xaf\x01\xe1\xaf\x01\xca\xaf\x01\xcd\xaf\x01\xb6\xaf\x01\xb9\xaf\x01\xa2\xaf\x01\xa5\xaf\x01\x8e\xaf\x01\x91\xaf\x01\xfa\xae\x01\xfd\xae\x01\xe6\xae\x01\xe9\xae\x01\xc2\xae\x01\xc5\xae\x01\xb8\xad\x01\xbb\xad\x01\xba\xad\x01\xb1\xaa\x01\x8b\x03\xb8\xad\x01\xbf\x88\x01\xdb\x01\xf6\x06\xe5\n\xfa\x8d\x01\xa9\xad\x01\xea\xac\x01\xed\xac\x01\xec\xac\x01\x9f\xad\x01\x88\x1f\x92\x06\xa5\x01\xb8\x06\x99\x0b\xc0\x87\x01\xd5\xa6\x01\xfe\xa5\x01\x81\xa6\x01\x80\xa6\x01\x83\xa6\x01\x88\xa3\x01\x8b\xa3\x01\xac\xa2\x01\xaf\xa2\x01\x84\xa1\x01\x87\xa1\x01\xd0\x9f\x01\xd3\x9f\x01\x98\x9f\x01\x9b\x9f\x01\x92\x9f\x01\x95\x9f\x01\xbe\x9e\x01\xc1\x9e\x01\xbc\x9e\x01\xbf\x9e\x01\xdc\x9d\x01\xdf\x9d\x01\xde\x9d\x01\xdf\x9d\x01\x05\xe0\x9d\x01\xe3\x9d\x01\xdc\x9d\x01\xdf\x9d\x01\xb0\x9d\x01\xb3\x9d\x01\x96\x9d\x01\x99\x9d\x01\xda\x9c\x01\xdd\x9c\x01\x86\x9c\x01\x89\x9c\x01\x88\x9c\x01\x93\x9c\x01\x8e\x9c\x01\xc9u\xd7\x01\xec\x18\x1b\xb7\x1c\xf8z\xff\x9b\x01\xc0\x9b\x01\xc3\x9b\x01\xc2\x9b\x01\xc5\x9b\x01\xc4\x9b\x01\xa1\x02\xbd\x99\x01\x9e\x99\x01\xa1\x99\x01\xa4\x98\x01\xa7\x98\x01\xf2\x97\x01\xf5\x97\x01\xf4\x97\x01\xf7\x97\x01\xee\x97\x01\xf1\x97\x01\x9e\x94\x01\xa1\x94\x01\xee\x93\x01\xf1\x93\x01\xf0\x93\x01\xf3\x93\x01\xb8\x93\x01\xbb\x93\x01\x80\x93\x01\x83\x93\x01\xc8\x92\x01\xcb\x92\x01\xca\x92\x01\xcd\x92\x01\x8a\x92\x01\x8d\x92\x01\x8c\x92\x01O\xc3\x91\x01\xbe\x91\x01G\xfd\x90\x01\xfc\x90\x01\xff\x90\x01\xfc\x90\x01\xff\x90\x01\xf8\x90\x01\xfb\x90\x01\xac\x90\x01\xaf\x90\x01\xfc\x8f\x01\xff\x8f\x01\xe2\x8f\x01\xe5\x8f\x01\x98\x8f\x01\x9b\x8f\x01\xf4\x8e\x01\xf7\x8e\x01\xba\x8e\x01\xbd\x8e\x01\x8e\x8e\x01\x91\x8e\x01\x90\x8e\x01\x93\x8e\x01\xbe\x8c\x01\xc1\x8c\x01\x9a\x8c\x01\x9d\x8c\x01\x9c\x8c\x01\x89\x89\x01\xe4\x87\x01\xfd\x8a\x01\x90\x8a\x01\x93\x8a\x01\x84\x8a\x01\x87\x8a\x01\xe4\x89\x01\xe7\x89\x01\xda\x89\x01\xdd\x89\x01\xc0\x88\x01\xc3\x88\x01\xb6\x88\x01\xb9\x88\x01\xaa\x88\x01\xad\x88\x01\xf0\x87\x01\xf3\x87\x01\xac\x87\x01\xaf\x87\x01\xf0\x86\x01\xf3\x86\x01\xa0\x86\x01\xa3\x86\x01\xac\x85\x01\xaf\x85\x01\xa6\x85\x01\xa9\x85\x01\x86\x85\x01\x89\x85\x01\xaa\x83\x01\xad\x83\x01\xa4\x83\x01\xa7\x83\x01\xb4\x81\x01\xb7\x81\x01\xb6\x80\x01\xb9\x80\x01\xec\x7f\xef\x7f\xaa\x7f\xad\x7f\xac\x7f\xaf\x7f\xfc~\xff~\xec}\xef}\xa0}\xa3}\x88}\x8b}\x8a}\x8d}\x8c}\xc7}\xa0u\xa3u\x9cu\x9fu\xe8t\xebt\xcet\xd1t\x92t\x95t\xces\xd1s\xacs\xafs\xaes\xb1s\xb0s\xef\x02\xe3p\xb6p\xb9p\x8cp\x8fp\x8ep\x91p\x90p\x9b\x02\x83n\x82n\xe9h+\x07\xfch\xe3m\xbam\xbdm\xc2l\xc5l\xc4l\xc7l\xc6l\x87m\r\x03\xfaH\xf8\x05O\xeb\x015]\x1d=I1\r\xa9B\x1d\x03\x90B\x07\xe9+\xce#o\x1f\r9\x89\x01\xa5\x019\rOgeiC\x8c\n\xe5\"\xdb\x01\x05+\x1b%\t\xd1\x06\x86\x01\xc2\x02]\xb7\x02\xf2\x02\xa1\x03\x03\xba\x10moYac{\x1b\x175+\x05\xcf\x12\xac\xcf\x02\xcbZ\xe8Z\x02J\x05\x02\x03O\xd6\x01_\x03\xa5_\xac^\x04\xc4\x03\x06dj\n\x04\x04\x01\x16\x04\x04\xff\x023\x08\x02\x07\r\x0bO\x1eu\x01\tE\x01\xec\x02V\xbe\x01\xb6\x01\x0c\xc3\x01\xca\x05\x04 \x03\xc3\xea\x02\x1e\'\x9a\x16\xee\x08\x8d\t\x86\t\xa3\t\xbb\x13\xee\x16\xcb\x16\x07\x04\x85\x02\xb4\x04\xc5\x02\xe4\x19\xea\x04\xa5\x05\xc9\x1b\x03S\xc0\xd9\x02\xc5\xd7\x02\x8e\x0b\x99\x06\x18\xf0\x04\x8e\x01\xff\x05\xfc\x05\xfd\x05G0-\x81\x02\xc2\x08\xc5\x08q\x86\x19\x02\'\x07\x9d\x15\x9c\x15\xc6\x1f\xe0\x02\xd9\x03\x07\xe33\xd82\xdb2\xd42\xed5R\x05\x08%\xa6\x08\xf5\x05\"\x10M\xf2\x06\x9c*\xe1/\x10\x86#\xcb \x99\x01\x8c\x011>\xdb\x07\x86\t\x04\xbe,p\x01\x1a\xb12\xa2\x08\xa3\n\xc2#\xd0\x13\x9b\x02\x99-p\x02\x07o\xe0,\x15\x89,\xcc*\x9f*\x9a*\xaf3\xcd\x01\x8e\x01\x92\x08\x15\xbb\t\x8e\x0b\x9b\x06\x82\x01G\xd0-\x87(\x97\t\xee0\xe9)\x94\x01\x9d\x01=-\x13\x9a\x02\xa9\x03\xa6\x03\xab\x03\xa8\x03\xe9\x03\xb2\x06\x87\x08\xbc\x05\xc1\x05?\xa8\n\xeb\x0b\t\xf6\x02=\x11\x9c-5\x850E\x19\x90.\x91-\xc0+\xc3+\xe2\'K\xa3(\x88(\x8d(\xce&\xd9&\t\x0f)\x05\x82\x06\xee \xd9\x17\x90\x16\xab%\xa0%\xa8\x16\xaa\x01\x15+\x17\x85\x18\xdd\x01\xed#\xd2<\x04\x19q\xa7<\x8e<\xf1\x1c\xc0/\x97\x16\n\xa2\x16\x0e\x03\x01\x14\x03\xbb\x16\x9c\x17\x1a\x14\x03\x01\x1e\xef\x11\x03\xc2\x13\xd2\x05\xac\x01\xab\r\xbe\x01\xff\x01\x01\xe4\x0f\x03\x1eN\x0e\x05X\x9e\x02\xaf\x02\x03\'\x156C\x97\x0b\x03\x01\xb2\x12\xe7\x1a\x8c\x13\x8f\x13\xa8\x1a\x03\x97\x17\xb8\x0c\xfb\x05\x95P\x91\x01\x1f\n\x0c\xa7\x01\x1c\x0c\x10t6\xd02\x07\x90\x04\x9b\x05\x98\x05\xb5\x07\xae\x07\xb7\t\xb0\t\xb5\t\x9d. #\x8e7\xed\x08\xbc\x08\x15\x9b\t\xea\x08\xe5\n\xdc\n\xdd\n\xc8\n#\x115\xfd\t\xef+\x9a\'\x9b\x05\x83\"\x05\x88\"\xfd \x0ev)S\xa9\x01\xc6 \x8f\x1f\xa5\x01\xa4 \xb9\x1f\x9c\x1f\x87 \xe6\x1b\xfc\x1f&\x08\x0c\x12\x160\x03\x95\x16\xaa\x15\x82\x01\x93\x01\xcf\x15\xbe\x17 \x0c\x0e\xb3<\xc9\x01\x88\x0b\x04\x14\xc2\xae\x01\xa3\xb8\x01,\xf0\xb6\x01\xcf\xb7\x01\xb3\x01\x8e\x03\xa0\xce\x02\xd3\xcd\x02\x86\xb2\x02\x08\x03\x03\x01\x9f\xa8\x02&\x04=\xd3\x04@l\xe8\xd3\x04\xb3\xde\x04\x058\xa2\xa3\x04\x01\xbb\xa2\x04\xa0\x02 \x99\x02\x03\xc8\x04\x0cPD&\"<\x08\x9b\x02^\xfa\x02\x08\x1a8\x10\x14\x8d\x01\x06\x04\xed\x01\xf5\x01\xdf\x07\x1a\x12\t\x04\x1b\x11\x01\x9a\xe0\x02\xd1F\x8eK\xa0\t\xd0\x03\xd8\x0e\xd3\xfd\x02\xb8\x96\x02\xe0E\x8a\x05\t\xe5\xdf\x02\x08\xa0\xe8\x02\x03\xaa\x04\xf8\rT\xcf\xf9\x02v*\x08\xb8\xfe\x02\xe3\xfd\x02\x0fDt\xfa\xfc\x02\xad\xfc\x02\x14\x04\x05H\x06:\x04(\xec\xfa\x02\x91\xfc\x02\x10.le\x0f\x17\x02\x03\x17\x03\x15\x1d\xc0\xfc\x02\xe5\xfc\x02\xac\xf7\x02\xc3\xfd\x02\xb6\xfc\x02\xf7\xf8\x02R%)]\x8a\xec\x02\xa7\xef\x02\xd4\xee\x02\xcd\xeb\x02\xd2\xe8\x02\xfb\xeb\x02\xd8\xea\x02\xff\xe7\x02\x84\xe0\x02\xff\xe2\x02\xae\xe2\x02\x8b\xe0\x02\x08\x05\xa0\xdc\x02\xad\xdf\x02\x9a\xde\x02\xcd\xdb\x02\xe2\xd5\x02\xb8\x88\x04\x05\x03\t\x03\xa3\xab\x03\xe4\xab\x03\xe5\xab\x03\x1f\xb1\x8b\x01\x81\xa9\x02\x88\x01\x1d\xa9\x02\x0b\xbc\x9b\x02\xb9\x98\x02\xd2\x96\x02\x89\x98\x02\x083\xf8\x97\x02\xff\x95\x02\x88\xdd\x01\xcc\xde\x01\x8b\xa1\x03\xf1\x1c\x12,\x1e\x04\x03\xeb\x01\x01(\x80\x01\x1b\xd0(\x146/\x17\x1d\x15q$8W98C\t\xd5\x1f\x8a\x07\x9b\x08\x84\x08\x85\x08\xe3\x06\xf4\x0e\x81\x10\xbc\x10\xf3\r\x19\xc8\x1b\x0b\xc1\x0c\xf6\x0b\xf9\x0b\xf0\x0b\xd1\x1d\x04\x02\x03\x17\xfa\x1c\xf5\x17\xb8\x17\xe0\x12\xfd\x12\xa9\n\xa8\n\xab\x1a\x13\xee\x18\x0b\xcd\x08\x80\x08\x83\x16\xde\x14\x0b\xd1\x06\xe0\x05\x0b\xd7\x05\x92\x05\x8b\x16\x08\x02\x07\x17T=(\xce\x10\xd2\x04\xff\x15\x02\x13\xb4 .Q\xd3\x0e\xca\x0e\xdd\n\xef\x03\x94\x03\xbb\x13\x1b\x17&\xa0\x1e\x1f\xa9\x1f*\x10\xf0\x015\x1d\x07\x1f\x157)\x18?\x98\x07\xc7\x06\x0cG!\xaa\x02\xa9\x02\xce\x05\xc9\x02\xa2\x02\xd00\x14\xcf\t\x96\n0h\x04\x03\x97\x02@&\xfb\x01\x01\xe2\x05T\xf9\x17\x01\xfd$\x0cV\x18\xa6\x9b\x03\xa1\x99\x03\x8e\x99\x03\x91\x99\x03\xae\x98\x03\xb1\x98\x03\xa4\x98\x03\xa7\x98\x03\xe8\x97\x03\xeb\x97\x03\xea\x97\x03\x80$t\xab\xbe\x03\x04\xc0\xbe\x03\x83\xb9\x03\xbd\x05\x1c!\xa4\xbe\x03\x9d\xbb\x03\x8c\xbb\x03\x8f\xbb\x03\xf6\xbb\x03\xef\xbd\x03\x023\xcc\x05\xa3\x07\xa6\x05\xc3\x05\xd0\xc0\x03\x17\x9d\xbc\x03\x80\xbc\x03\x83\xbc\x035\x11\x03\xf2\x95\x03/\xc7\x95\x03\x84\x95\x03\x87\x95\x03\xe8\x94\x03\xeb\x94\x03\xd8\x93\x03\xdb\x93\x03\xa0\x93\x03\xa3\x93\x03\xda\xe5\x02\xf1\xe7\x02P\xab\x01)\xe4\xe4\x02\xf9\xe4\x02\xfe!\x13C>\x02\x15#%-\xa4\x80\x02\x9b\x9f\x02\x1a\xc2\x05\xc3\x05\xa0\x02\xa0\x03\xa5\x03&c\xe0\x03\x85\x04\x82\x04\x83\x04o\x13\x08\xfc\x04\xfd\x04\x9f\x01\x1b]\x0b\xd0\x04\xd0\x02\xa7\x07\xd6\x04\xb1\x02\x05\x1b\x15\xb8\x05\xb9\x05%\x1f\xfc\x05\xfd\x05\xda\x04[\x05\t\x02\x1b\x80\x01)\x9f\x01\rI\x15=\r\t\xfc\xfa\x01\xe9\xe3\x01\x02\x03\x8e\xc8\x01\xa0\xf9\x01\xd7\xa5\x01\x84\xa6\x01\xe9\xa6\x01\x08\x03\xdd\x06\x05\xcb\xae\x02\xa3\x05\xb8\n\xb6\x18\xe2\x02BW:O\xb7\x02\xb4\x02\xcb\x02\xb4\x02\x1b\xb3\x02\x8a\x02\xa1\x02\xc4\x016\xb1\x02\xa2\x01\x83\x02\x03\xd6\x82\x04_\xe7\x08s\xbd\x91\x04:\x02\x0b\t\x04\x02\x03\x15%\r\x15\x11\xb8\x91\x04\xcb\x91\x04\xa6\x91\x04\xa9\x91\x04\xe4\x90\x04\xe7\x90\x04\x9e\x90\x04\xa1\x90\x04\xe6\x8f\x04\xe9\x8f\x04\xd2\x8f\x04\xd5\x8f\x04\xa6\x8e\x04\xa9\x8e\x04\xbc\x8d\x04\xbf\x8d\x04\x8e\x8d\x04\xdb\xfd\x03\xae\xfd\x03\xe3\x8c\x04\x96\x8b\x04\x99\x8b\x04\xf4\x8a\x04\xf5\xfb\x03\x8e\xfb\x03\x8f\x8a\x04\xa2\x89\x04\xa5\x89\x04\x92\x89\x04\xc7\xfa\x03\xfe\xf9\x03\xcb\x88\x04\xfa\x87\x04\xe7\xf9\x03\xbe\xf9\x03\xd3\x87\x04\x98\x87\x04\x9b\x87\x04\xe8\x86\x04\xeb\x86\x04\xd2\x86\x04\xd5\x86\x04\xe2\x85\x04\xe5\x85\x04\xb0\x85\x04\xb3\x85\x04\xf2\x84\x04\xf5\x84\x04\xca\x84\x04\xd7\xf6\x03\xb6\xf6\x03\xab\x84\x04\xa2\x84\x04\xbd\x02\x95\x84\x04\xfc\x83\x04\x81\x84\x04\x03\xcc\x83\x04\xc7\xb2\x02\xb8\xb2\x02\xc5\xf3\x03\x80\xf3\x033\x87\xf3\x03\xe6\xf2\x03\xff\x02\xa1\xf0\x03\xf4\xef\x03\xaf\xf0\x03\xe0\xef\x03\x99\xf4\x03\xe8\xf2\x03\x9f\x08\xf9\xea\x03\x88\xe9\x03\xb9\xe9\x03\xe8\xe7\x03\x87\xec\x03\x82\x03\x02)q\xe5\x01\x03\x9e\x01\xae2\xc9<\xc0>\x93\x02h\xb1\x01\xca\x13\xdf\x13\x17/\x10\x13\xaf9\xf88\x11\x1dy\x9d0m\x88\x02\x9f\x02\xf6\x01\xb3\x03\x95\x06\x8e\x01\xd0\x10\x9a\x01\x8f\x02\xbd\x10\xa1\x01\xe6\x01\xee\x03\x8e4%\xf33O\x03\xf2\xe8\x03\xf4q\xde\x04\xe3\xd1\x04\xc2\xd1\x04\xd5\xd6\x04\xb2\xd6\x04\xc7\x01\x91\xd0\x04\xc0\xcf\x04\x11\n\x1d\xd5\xcf\x04\xa4\xcf\x04\x11\xd9\x8b\x03\x021\xf4\x8a\x03\xc9\xd2\x04\xf2\xd1\x04\xea\x01\x85\x02\x87\xd2\x04\xdc\xd1\x04\xae\x02\xeb\xe0\x04\xba\xde\x04\xdd\x87\x03\xdc\x87\x03\xb0\x02\xb9\x02\xb6\x02\xbd\x02\xee\x04\xf5\x04\xc2\x02\xd9\x08\x8a\x0b\x91\x0b\xde\x08\x83\t\xb4\x0b\xbb\x0b\x88\t\xe3\t\xe0\t\xfd\t\xfa\t\xb7\n\xb4\n\xe9\n\xe6\n\x93\x0b\x90\x0b\xc1\x0b\xbe\x0b\xd7\x0b\xb7\xc8\x04\x8c\xd4\x04\x8f\x0c\xee\x0b7\xd9\x0b\x1b\xe4\x10\xb9\x11\xd9n\xfd\xe3\x03\x0e\x13\xc6\x0b\xae\xd5\x03\x85\xd0\x03\xce\xce\x03\xd7\xde\x03\xd2\xde\x03\x87\xdb\x03\x84\x0c\xf1\x0c\x81\x01\xc6\xd1\x01\x02#\x07\xe0\x87\x02\xc3\xcb\x03\xfe\xca\x03\xccI\xcdI\xccI\xb1N\xd1\xc6\x03\xd6\xc3\x03\xb7\x0b\xf3\xbe\x03\xc2f\x02+\xa1g\xa6\xb1\x03\xc5\xc5\x02\xdc\xba\x02\x95\xa0\x03\x8a\xa0\x03\x95\xa0\x03\xb0\xdf\x02\x8b\xfb\x01\x02!\x0b\xa8\xdf\x01\xc1\xc2\x02\xa9\x02\r\xf4\xc4\x02\xf7\xc4\x02\xec\xc4\x02\xef\xc4\x02\xb4\xc4\x02\xb7\xc4\x02\x96\xc4\x02\x99\xc4\x02\x98\xc4\x02\xf3\xbf\x02\xf1\x051\xfc\x01\xfd\x01\xf6\xc5\x02\xfb\xc3\x02\xb8\xc3\x02\xbb\xc3\x02\xf0\xc2\x02\xf3\xc2\x02\xca\xc2\x02\xcd\xc2\x02\xd5\x02%\x1b\xd2\x07\x0e\xfe\xbd\x02\xa7\xc1\x020\'\x16\x0f\x0bLc5\t\x9e\xbe\x02\xdf\xc9\x02\xa0\x9c\x02\xdf\x8c\x02_\x11\xf1\x0c\xee\x0c+\xf5\x0e\x96\x0ek-\x11\x03\xe9\x0b\x9b\x01\xb6\x08\x14\x94\x04!\x1f\x1bE\x19\x0f\xcb\x0b\x8a\x12\xc1\x073\xe8\x91\x02\xb7\x92\x02\x1d\x0f\x0b\x0f\xfe\x92\x02\xff\x92\x02=\xa8\x04\xf7\x03\xe0\x03\t0\x04ML\x03[\xa3\x04/\xd4\x93\x02\xc3\x94\x02\x02\x03\xcd\x06\xaa\x0c\x02\x03\x0b5\xa2-\x02\x03\x0b%\x1b\t\x02\x1d\x19\x05\x88\xe3\x01\xc1\x8b\x02\x98\x8a\x02\x8f\xc9\x01!\x87\x19\x03\xd2\xdd\x01\xa3\x92\x02\x86\x91\x02\xd8\xa8\x02\x01\x83\x90\x04\x89, \x145 \x06\x1b\xf6\rj\xef\x0e\xa4\xe2\x01\xc3\xe1\x01c\x01\xde\x01Z\xa0\xe0\x01\x04\xd1\xdf\x01\x9e\x01\x14\xa6\xf4\x01\x87\xf3\x01J\xea\x01\xb8\xad\x01e\xcd\xb4\x01\x04\x08\x01\x13\x04\x03\x03\x01B\x06\x085\x1cA\x8a\xb2\x01\xb2\x03\xfb\x03\xf8\x03\xab\x04\xa8\x04\xcd\x04\x97\xae\x01\x08\rN\x03\x01\x1bN{\x94\x01\x1d\x83\x01\xc6\x01\x8e\x02F\x01y\x0c\x04\x03\x17\x01\xd6\x01\x8c\xa5\x01\xbfH\xb6H\xe5H\x01\xdfZ\x08\x80\x01\x83\x02\x8e\x02\n\x08e\x14L&.\x08\xe5\x02~\xac\x02,\x0c\x87\r\xe4\x02\xeb\x02\x01\x1c|\xac\xb6\x01\xf6\x16\xeb\x16\x0f\xe7\n\xf81\x08\x02\x07!\t\xc32\xc02\x0b\x04\xa9A\xee@\xa1J\xe8G\xac\x02\xd1h\xe0\x8e\x02A\xcd\xfd\x02\xda\xdd\x01\xa1\xdd\x01\xbf\x01\t\x96\x01\x01\x08\xa4\\\xa0\x05\xc5f\xa6w\x04\x03w\x91M\xb6?\x97@8`\x12\x08\t\x8e=\x05H\xc6\x05\x81C\xbe\x03 4\x1e\x16\x0e\x03\x0b\t\x01\xa1\x06\x01\x0e\x01\xbc\x06\x81\x01\x8a\x01\xcd\x01\x01\xbf\x07Y\x86\x03\xab\x01\xd8\x05\x8c$\xe5+\t\x8c\x1c\xf9\x1a\x04\x82#Db\x97$\x04\xd8$&p\xd1%\x04\xee&H.>\"X\xff(\x06\x04\x07\xb02\xa72\xc0*\xb7*\x06\x04\x0f\xaa+B.>\"rX\xa3.\x04\x04\x1f\xb6.\x82\x01\\X\xd70\xee08\x991\x04\xce2T@>\"V\xfb4\x06\x04\r\xe05l.>\"X\x958\x04\x04\x0f\xe68\xbc\x0fH\x96\x01$D\xd7J\x0c\x06\x04\'\x94;\\\x8a\x010\"\xa6\x01\xd5>\x08\xa60\xde\x0f\xf3?\x04\xc4A\xc6\x01\x06Z~\x06\x14\xddD\x06\x04\x8f\x02\xd4G\xb4\x02\xfbI\x04\x80Kv\x16>\x1c\xb7\r\xe5\x08V\"F\"J\xd8\x06\xa3@\xb0@\xe9\x058N& &d\x08\xb0\x03\xcb?\xd0\x01\x80>\xf5\x02Jd\"Jt\xa3?\x87\x01\xbeM\xff\x0b3\x83:\xb4<\xe3B\x01\xd2D\xd0\x02\xa7D\xd2A\x03\xa5E\x96\x0f\x0e(\x04\x02\x03!\t\x9c6\xc97\xaa\x01\x906\x936\x07\x01\x946\xd7\x05\xa7?\x02\r\xf2\x02\x07\xf9\x02\x9e\x01\x02\r\xec\x01\xef\x01\xbd\x05\x03\xa4\x17\x04&\x10\x04\xba\x1c\xcf\x1c\x1e\x17\x11\x81\x15\\\xe81\x9f-\x89\x04\xfd\x01\xb2\x06\xa8%\xa1&\x98?\x85;-\xa8=\xadU\x96#\xd2\x93\x01\x01\x9b\xb6\x01PD\"<\x08\xc2\xe7\x01\xd7\x03\xe6c\xe6\x02\x9a\x01\x0c\xa7\x01\x99\x01\xae\x02\x0c\xfd\xd0\x02\xba\xce\x02\xed\xe3\x02\xe8\xe3\x02\xfb\xcd\x02\x03\xd2\xd3\x02\xa7\x06\xc0\x05\xf7\x05\x0b\x04\x04\x87\x02\xe1\x80\x01\xe5\xcc\x01S\x07\xd0\xbc\x01\xb5\x06\xc1^\x86\xb8\x01\xae;\xf5\xd3\x02\xf2\xd4\x02B\x9d \xb4 n\x9f\xc9\x02\x82\x02\x07;!CO\t\xbe\x8b\x02\xa6;\r\xe9;\x03\x01\xc0G\x94\x01\x03\x92\x01\x9b\xed\x02\x01\x90\x02\x01\xf6\x06\xed\x07%\x02\x1b\xbc\x11?\xb4\x01\x9d\x13\x04\xca\x02\xa5\x02\xae\x02\x15\x8a\x02\x04\x1c\xc5\x02\xe8\x02\x92\x01\x10\xea\x01/^\x0c\x10\xd8\x92\x02\xf7\x9b\x02\xbe\x02\xb2\x02\x8d\x04\xaa\x06+aO@\xf9\x02\xb3\x02=\x05\xe2\x07\x06\xfa\x03\xfb\x02\xe2\x03\x95\x04<\x8c\x04.*\x06\x0c\x04\xe3\r\xba\xae\x03\xb1\xae\x03\xbe\xae\x03\x9b\xae\x03\x03\x08\x02\x07\r\x05\x01R\x13\x18\x08\x19\x98\xdf\x03\xbf\xde\x03\xb1\x01\xd2\x03\xc1\x01$\xba\x01wR@\x87\x01\xfa\x01\x9c\x02\xdb\x06\x16\xd2\x01\x93\x01\xee\x87\x02\x07\x03\x01v\x03\x01p\x04\x03\x07\xb7\x85\x02\nj\xf4\x19\x142E\xc5#>\xd0\x04\x07\x1c\x04\x08\xc1\x04Nl&N\x08$\xae%\x1c\xf1%\x07\x8c\x01\xd1\x01\x0b\xda\x01\xf3\x01\x07\xf8\x01\xba\x02\xa1\x02\x04\xf4\x01\xb2T\xc72\xd9#\xda$\x8b\x01\xa5(&\x04M\xf8\x02\x80\x01\x85\x01\x7f\xc6\x02\xa7\x03\x07\xe0\x02\xa5\x03\x07\xaa\x03\xd9\x03\xd6\x03\xd7\x03\xca\x03*_\x07\xe2_\xc39\x02\x03\r\xcc\x02\xb9\x01\x04\x02\x03\r\x07\xac<\xc5:\x02\r\t\xb0\xa2\x01\xeb\x17\xe9\x01\xb1\xb1\x01\x04\x10\x0f$\x04\x0f0\x1c\x1e*\n\x04\x0c\xcb\x05\rT\xaa\x02\xd8\xd1\x01\x95\xd4\x01\x18\x16\x05\x84\x01\x8f\x01\x10\x19\x08\x17\x1d%\x0b\x03\'\x1d\t\x19\x10\r\ta\x9e\x07\xc2\x03%\x02\x19\x99\x03\xae\xaa\x01\x80%\xbf\xce\x01\x98\x01\x9e\x01\xd8\x01\x1a\xf3\x0b\xd8\x0b\xcb\x01\xb2\x02\x8b\x03F\x97\x01\x15\xf0\x03\xed\x05\xbc\x05\x80\xca\x01\x15\xa3\xd6\x01\xf2\xd5\x01\xf9\xc9\x01\xf8\xc9\x01\x89\xca\x01\x97\x0c\x08\xdc\xd5\x01\x95\xd6\x01\xee\xd5\x01\xc1\xd5\x01\xba\xd5\x01\x97\xd6\x01\xd4\xd5\x01\x85\xd6\x01\xd4\xd5\x01\xff\xc8\x01\x85\r\xc8\xd5\x01\xf9\xd5\x01\x92\xd5\x01\x8b\xd3\x01\xb2\xd2\x01\xa7\xaa\x01\xf0\xa9\x01\xad\xaa\x01\x8e\xa7\x01\xe1\xd0\x01\xa2\xd0\x01\xd1\xd0\x01\xe8\xce\x01\x91\xcd\x01\xa6\xcc\x01\xd3\xc9\x01\x8c\xc9\x01\xe5\xcd\x01\xcc\xc3\x01\xc1\x01\xe2\x17\xff\x17\xed\xbf\x01\xd0\xbe\x01\xd1\xbe\x01\xaa\xbe\x01\xab\xbe\x01\xaa\xbe\x01\xbe\x19\xd3\x19\x95\x96\x01\xc6\x95\x01\x83\x96\x01\xe2\x95\x01\xa3\xbd\x01\x96\xbd\x01\x97\xbd\x01\x96\xbd\x01\xd0\x1a\x87\x1b\xdf\xbc\x01\xc0\xbc\x01\xc1\xbc\x01\x98\xbc\x01\x8d\x95\x01\xf2\x94\x01\xaf\x95\x01\x90\x95\x01\xcd\x95\x01\xb0\x95\x01\xbf\xbb\x01\x80\xbb\x01\x83\xbb\x01\xd0\xb2\x01\xbc%\x93&\x8e&\xf1&\xad\xaa\x01\xb8\xa8\x01\x85\x04\xaf\xa4\x01\x02\xaa\xa4\x01\xa5\xac\x01\x8c\xac\x01\x91\xac\x01\x9a\xab\x01\x9f\xab\x01\xea\xaa\x01\x97\xa5\x01\x95\x06\xf2\x02\x9a\xa6\x01)\xb1\xa4\x01\x8e\xa4\x01\x87\xa3\x01\x94\xa0\x01\x87\xa5\x01\x84\xa5\x01O\xed\xa2\x01\xe8\xa2\x01\xb7}\x98{\xd5{\xe0z\xbb\x01]\x83y\xd4x\x91y\xe2x\x8b\x96\x01\x04\xc4\x95\x01\xdbx\xbax\xcb\x9c\x01\x96\x9c\x01\xdc<\xc1\xd0\x01L\xbf\x01\r\x94\x05A\x94\x90\x01\xdf\x95\x01\xb4\x95\x01\xc5\x95\x01\x90\x95\x01\xa1\x95\x01\xf4\x94\x01\x85\x95\x01\xe4\x94\x01\x8dw\xeeu\xd5\x98\x01\xd2\x96\x01\xc2A\xd7\xcb\x01\x02\x1c)\x0b\x88\x8a\x01\x81t\xeaq\xa7r\xeep\x95\x95\x01\x02\x03\x13\x98\x94\x01Q\xdf\x87\x01\x11\x82\xcf\x01\xdfH\xa9\x90\x01\x9a\x8d\x01\xad\x8d\x01\xee\x89\x01\xaaO\xabO\xaeO\xffO\xf8O\xb1P\xacP\x9bQe\xfb\\\xa2[\x8dv\x03\xe0u\x07\xe3\x01\xef\x82\x01\xee\x82\x01\xd5\x83\x01\x8e#\xa9#\xe8\x83\x01\xc1\x84\x01\x9e\x84\x01\xef\x7f\xd4~\xb3\x7f\xd6\x06\xe0s\xf4\x14\x8eG\xabG\x01\x86H\x0b\x02\t\x01\xafG\xd2HC\x02^\x1f\x14\x11\x03I\x07\x04\xffGG\xc2J\x03\xbfJ\x82K\t\x03\xed@\xbaA,\xb9\t\x82\x8e\x03\xb5\x8d\x03\x03\xe8\xb1\x02\xab\xb1\x02\x84\xb2\x02\xa3\xb2\x02\x02\r\x13\x0b\x01\x15\x01r\x0f\xc1\xd5\x01\x14TW\xd8e\x01\x83b0\x0c\xe6d\x87h\x02\t3-\x03\xb2h\xbbh\x94h\xedh\xbe\xac\x01\xd3C\xedc7-\xaaV\xc4M\xc1B\x01\xdeD*@\n(\x91GN\x92G\r\x0cBK\r\x01\x05\xc9\x01L5#\x93E\x01\xccI\x92\x01\xb8\x048\x1c J\xcb\xb5\x01\x06\x04\x05\x94 \xf7\x1f \x0c\x03A:\x01G\x94\x01\x01\x07\x03\xaa\xb2\x03\xe7\xb1\x03\xea\xb1\x03\xed\xb1\x03\x08\x02\x07\x13\xfa\xb1\x03\x8b\xb3\x03\x17\r\x06\x0f\x03\x8e\xb3\x03\xd3\xb1\x03\x04\x02\x03\x0f\xe0\xb0\x03\x01\xc3\xa7\x03}\xbf\t\x06\x04\xa9\x02\x9a\x0b\x97\x01\x8f\n\xe4\x08\xfe\x02\xe8\x02K\x04\xf6\x03\x0bx@\xc4\x01\xaf\x02\xc6\x01\x8d\x02\x01\x84\x1b\xdf\x14\x81\x01S\xba\x03\x9d\x02\xf6T\x85l\x9ak\x9dk\xc8j\xcbj\xeei\xf1i\x92i\x95i\x9eh\xa1h\x8ah\x8dh\xfag\xfdg\xccg\xcfg\xa8g\xabg)\x03\xe0 ,6\x18\x1c|dbZp\xaf\x17\xa6\x18$\x04\x18\x1d\x17\x01\t\xa4\x02\xfcu\x93\x9b\x01\x84\x9b\x01\x87\x9b\x01\x8c\x9a\x01\x8f\x9a\x01\x86\x9a\x01\x89\x9a\x01\xb8\x99\x01\xbb\x99\x01\xba\x99\x01\xbd\x99\x01\xbc\x99\x01\xa9l\xb4/\xea\x01\x98\x06\xd1=\xb0;\xbd\x05\xf4\x02\xd0\x06\xfa\xd5\x02\xaa\x02\xdd\x03<l\xad%\xaf\x99\x03z\xec\x96\x03\x01\xbd\x95\x03\x08\xfe\xba\x03W\x05\xb5#\xdc#\x95\xbe\x03\xfa\xbd\x03\xef\xb9\x03\x84\xbc\x03\xd5%\x92%\x89\xb8\x03\x90\x01\x14\x02\r\xc1\x04\xa9\x02\xce\xac\x03\xbb\xae\x03\xc8\xae\x03\xbf\xae\x03\xfc\xf6\x02\n\x93\xf7\x02\x8e\xf7\x02\xd7\xf6\x02\x02\x1b\x11\xfc\xf6\x02\xff\xf6\x02\xfe\xf6\x02\xac\r\x02\x0b1AC\x92\x02\x93\x02\x8c\x02\x0b\x81\x02\xc7e\xadN\xaa\x94\x01\xec\x07\x0c\t\x04\r\x9d\x04\x06\x04\xb1\x06\xf2\x06\x1b\xe1\x06\xff\x12\x01\xd3\xc6\x02\xf6\n\xc0\xd5\x02\xf5\xd4\x02\x04\x02\x03\r\x11\xfe\x84\x02080~\x10&H:\x10Hf6\x16*t8\x1c0L2B\"`\x0c\n:\x0eX\x14.$8F2B\"v`\x0e\n\x0e\x86\x01`b\x14<\x80\x01@XDB\"^\x0e\x16$8p2B\"`\x0e\nL\xff\xac\x02:Z>@\"R\x0e\x0cF8R*$&l\x10\x0c\x108Rp&V\x10\xe0\xa3\x02@\x96\x01$H\n\"`8N`\x8e\x014\"\xae\x01\x0e\x08|2\x18\xc2\x01\xd0\x01Z\x8c\x01\x14N&\xc2\x01^\xc2\x02J@\x1ev\x16F\x1c\xe2\n:x\xe7\x11]\xc1\x01%\x05\xc1\xa3\x02\xad\x18\xb0\x19:\xce\x054\x92\x01_\xa4\x03\xc3*\xc7\x05\xb6\x07\\\xa4>\xb6\x87\x01\xe1\n\xbb\xbc\x01\xb6\xbc\x01\xb9\xbc\x01\xb6\xbc\x01\xea\x0b\x02\x03\xfb\x0b\xb2\x0c\xb5\x0c\xa1\xbc\x01\x8e\xbc\x01\xc6\x0c\xc9\x0c\x8d\xbc\x01\x84\xbb\x01\xd0\r\xd3\r\x83\xbb\x01\xf6\xba\x01\xde\r\xe1\r\xf5\xba\x01\xea\xba\x01\xea\r\xed\r\xe9\xba\x01\x80\xba\x01\x87\xba\x01\xda\x07\x96\xb3\x01\xe9\xb3\x01\xa5\x08\xee\xac\x01\xf1\xac\x01\xb2\xab\x01\xb5\xab\x01\x8c\xab\x01\x8f\xab\x01\x86\xab\x01\x89\xab\x01\xea\xa9\x01\xed\xa9\x01\xde\xa9\x01\xe1\xa9\x01\xdc\xa9\x01\xdf\xa9\x01\xa4\xa9\x01\xa7\xa9\x01\xe2\xa7\x01\xe5\xa7\x01\xa2\xa7\x01\xa5\xa7\x01\xde\xa6\x01\xe1\xa6\x01\xe0\xa6\x01\x97\xa7\x01\xe0\x9d\x01\xff\x9d\x01\x8a\x9c\x01\x8d\x9c\x01\x8c\x9c\x01\xcf+\xb3s\xdcq\xdfq\xdeq\xe1q\xbaq\xbdq\xa2q\xa5q\x88q\x8bq\x8aq\x8dq\x8e\x1c&\x1c,\x06\xdc\x01\xe1\x1f\x80p\x8fo\xaen\xb1n\xb0n\xb3n\xb2n\xf1k\xc0\x91\x01\xb7\x91\x01\x8e\x92\x01\x84\x16\xcb\x87\x01\xdc\x8e\x01\xc1\x12\xf7V\x91#.\xbc\x04\x06\x03\x89\x03\x96?\xbf@\xc89\xcf9\xb69\xb99\xde\x02\x06\xd2\x1d\xd3\x1d\'\xe4\x1d5\xc7\x1a\xad-\xb2s\xc1\x02\xb0\x0c\xc3|\xd8{\xdb{\xc8{\xcb{\xbe{\xc1{\x88{\x8b{\x86z\x89z\xe8x\xebx\xbex\xc1x\xbcx\xbfx\xf0w\xf3w\x90w\x93w\xb2v\xb5v\xd8u\xdbu\x9eu\xa1u\xa0u\xe7=jfhP\x0e:\xa6\x01\x8a\x01:\x0e pz\x04\x05\xc1\x1a\xec\x95\x01\xd9\xb6\x01\x86\xb6\x01\x89\xb6\x01\x9e\xb4\x01\xa1\xb4\x01\xf4\xb3\x01\xf7\xb3\x01\x9a\xb3\x01\x9d\xb3\x01\x88\xb3\x01\x8b\xb3\x01\xd6\xb2\x01\xd9\xb2\x01\x98\xb2\x01\x9b\xb2\x01\xee\xb1\x01\xf1\xb1\x01\xb0\xb1\x01\xb3\xb1\x01\xb2\xb1\x01\xb5\xb1\x01\xb4\xb1\x01\xafnJ2J>\x1e^6\xec\x01P\xb3\'\xa8(\n\x12\x01D\xc3*\xc2*JS\x03\xc7)\xc0\x1b\xaa\x10\x0e\xa7%\x96% \x02\x07\r\x95I\x9c$\x9f$\x88=\xcf$\xe7\x04\xe8\xb0\x01\xef\x83\x01\x92\x06\x02\x11\xc7(\x8a&\x8d&\x8c&\x9e\x02\x08\x02\x07\x03\r\x05\x01\xf0\x08\x02\r\x03\x01\xa0\x10\xbf\x10\x02\r\x93.\xd8?\xbb\x10\x93/\x8a1.\x91\x01\xe7\x08\xbd)\xde2\xea\x06\"\x9a\x02\xda\x02\x0c8\x10\x8e\x01\xb1\x03\x1e%\"[Xur\x85\x01\xf0\x01\x9b\x02\xae\x01\xe9\x01\xe6\x01\xb3\x02\xb0\x02\xe5\x02\xf0\x03\xfa\x02\x01\x95\x02\x19\x0c\x10\xd2\x01\x0b\x1f*\xb1\x01\x1a\x04\x13!\x07\x04%\x059\x97\x01\xa7\x03!\xee\x0f\x01\x0e\x16\xbdq,5\x05b\x04\x12\x03\x05\x17\x04\x03\xb3\x01>\x98\x06 9\x03\x8a\x01\xf4\x8e\x16\x01\x87-\xf7\xe6\x15$(:\x08\x0c\x0f\x07%\xc4\x01\xe3\x01S\x03\xf6\x02\xf0\x01\x0c4\x90\x02\xca\x8d\x16\x8f\x97\x16\xfe\x94\x16\xb9\x93\x16\xd8\xe8\x15\xb9\xe0\x15;\xf2\xe7\x14\xd9\xbc\x11\xc1\\\x88^Y\x01\xbe\xab\x03\x12\x03\xdb\xe1\x06\n\x8c\x01j\xa2\x07nS\xf8\x95\x01\xb7\x96\x01\x02\x0b\x03\xe2\xd0\x02&\n\x87\xd9\x02\xa0\xd9\x02\xd5\xd8\x02\x82\xd9\x02F\xd7\xd8\x02\x0b\x02\x03E\xb6\x01\x01\xe5\x01\x07\r\xe4\x05Q\xeb\x056\xdc\x01>!\x01\x9e\xc5\x02\xb5\xc2\x02~\x06\xa8\x83\x02\xa3\x89\x02\x03\x9a\x86\x02\x91\xf8\x01&\x04\xb7\x04\xf5\x03\xa0\x07\xa9\x05\xf1\x0c\xdc\x0c4\x98\x01\x01\xa1\x0e\n\x17\x92\x01\x9e\x03H*D\x144/4\rm\x01- _\xed\x01\xd2\x02q\t\xc1\x03\x07\x04\xee\x0e\xe3\x02\x9f\x0cZ\x86\x07\x9a\xc6\x02\xd3\xc5\x02*\x18v\xa0\xc4\x02\xbb\xc4\x02;:S\x0b\xfc\x02\xd6\x01\xa7\x0e\x12\x92\x0162\x04\x05\x0e\xef\x01\xf6\x03!\x19\x01\xbb\x03rs\xbc\x040\x06\xb2\x01DB#G\xbf\x05\xa5\x01\x88\x01\x83\x01\x94\x01)\xdc\x05\x15\xd1\x01\xd0\x01\xf9\x05\x10\x02\x03\x19\t\x01\t\x11\x05\xc6\x19\x04\x9b\x16\xa9\x03\xae\x03S\x03\xee\x05\xe7\x06\xf8\x07\xad\t\xa2\x15\xe4\n\xc9\x1f\xe6\x16~\x80\x02\xe0\x01\xc8\x01X\x81\t\xec\n\xd1\x1f\xe6\x16~\x80\x02\xe0\x01\xc8\x01X\xf1\x1b\x87\x01\xc2\x04\xfe\n\xc1\x0f\xc6\x0f\xe3\x07\xdc\x07\x9f\x01\xbf\x06\xdc\x07\xab\x02\xb3\x05\xdc\x07\xab\x0c\xa4\t\xdb\x04\xe0\x07\x8d\x0e\xea\x04\x07\xa8\t\xad\t\xc3\x01\xee\x0e\x97\x0f\x98\x0b\x9b\x0b\x81\x03\xa8\x01\xd0\x01\xed\x01\xc8\x01/\xe5\x01\x9e\x01\xc0\x0c\x83\x0e\x0e\x07\xc4&\\n\x03>$\xc1*\x12\x0e\x05\x02\x07\rK\x82;\x9b9\x04\x02\x03\x11\x82\x0124<b6\x10\xbf\x01\x96\x02F\x85\x07\x02\xfa\x01\x05\x02\x03\xfd\x01\x03\x82\x01\xf8\x01\x1d\x02\x13`h\xa0\x02\x03\x83\x02\xea\x01%\x12\x0f\x03A4%\x12!\x04?!\x1d\x03~\x89\x01\x1f9\x15\xec\x08\x0c\xec\x15$:\x01\xa8\x01\x18@\xe3\x01\x18\xa2\x02$\xa9\x02\xce\x02<\x17\xab&\xee\\\xe3\\*@B\x01\x18\"\x9cu\xd2)\x9f\x86\x01\x11\xf1\x02\xc9\x02\x11\x19[\xd3\x01{\x94\x84\x01\t\xfd\x8d\x01\xd2\x8d\x01W\xfb\x01Em-MU9Q\r\x15\n\x1d\x14\x1b\x83\x01/\xb7\x01\x05\xb2\x1f\xaf\x01\x0f\xf3\x1d\xea\x1d\xa5\x1e\xf5\x06\xffz\xecr\xff\x01pq\\\x11\x1e;\xab\x0f\xc3b\x92b\xc7b\xd6a\x8bb\x8a`\xbf`\x84]\xb9]\xa4[\xd9[\xacZ\xd5]\xe4\x01!\x0b5\x15?8\x03!\x1d\x1f\xea\\\xf1\\\x96Z\x90\xc5\x07\xad\xc8\x07\x84Mt!r\x87\x019\x05\xa1Q\xccK\xd3@\xaeA\x10P\x01 \x04\xfd\x9f\x01\x08\x04\x03\r\x12\x08\x04!\xfe6\x89\t\x86\t\xc4\x019<\xd77\xa8.\xb8\t\xad\x07\xb6\x07\x97\x05\x94\x01\xcf\r\x99\'\x92\x08\xee\t\x04\x0cG\xfd\t\x9c\x02\xbb\n\x9a\x84\x01\x80%\xd5$\xd6I\x9e\x03\xda\x05\xc1\xc8\x01\xb2\xc9\x01D0\xcb\xc9\x01\xbe\xca\x01\xfd\xc9\x01\xf3\x0e\xf4\x95\x01\x98\x02\xca\x03\x8c\x02t0\x90\x03\xa0\x02\xd4\x18 \x1c\xb4\x01P\xd6\x148\x8b\xd0\x01\x02\xc6\x06\x91\x06\x1c6\x01\xd1\n\x142\x01\xf8\r\x142\x010\x142\x014\x142\x01\x9d\x13\x1e6C\x91\x07\xbd\x0b\x9c\xda\x01\x01\x06\xcfS\x84\x08:VN.nF\xfc\x01X\x87\x05N.nF\xfc\x01\xe1\x03.nF\xfc\x01\xfc\x02\xd4\x01\\_\\ \xa2\x03\xa2\x01\x04#i=\x0f\x01\xab\x04\\4\xca\x02\x84\x03\xbd@\x96\x02\xbc\x03\x82\x02r2\xc3a\x80\x01\x03\xc6\xa1\x01\xdd1\x91qZc\xac{\xd5z6[\x9e\x99\x01\x0f\x97\x9c\x01\x96\x9c\x01\xf1\x02\x0f\x97\x99\x01\xde\x96\x01\x0f\xd1\x96\x01\xd0\x96\x01\x19\x17\xa1\x96\x01\xc8\x06\x96\x8f\x01\xd3\x01{\x85\x84\x01\xd4\x01\\\x1a\x12\xca\x02F\x12>\x04$\x13\xa6\x01\xad\x08\xd4\x01\\\x1a\x12\xca\x02F\x12>\x04$\x0f\xa6\x01\xad\x08\xd4\x01\\,\xca\x02X>\x04$\x03\xa6\x01\x99\x01\x04#\xc5\x02=\x11\t\xa1\x03\x1f\xd83\xc1\x01\x80\x14\x83\x14\x96\x15\xbd\x16\xa8\x15\xd5\x15\x98\x0c\xd0\x13\x85!\xa6\x0e\x90\x07\xb6\x01\x04\x18\xfd\x02\x0b\x86\x03\x87\x03\xd1\x16\xfc\x0e\x1c\x1a\x1d\x15\x03\'\xe3\x10\x8d\x06\xb8\x16\xc3\x16\x9c\x16\xf9\x1e\xdd/\x14F4\x16\n\x16\x0c\x18HNX\x0e #\x01\t\xc1\x02$\x08\xc4\x011[\x17\x1b\x03\t\x05\x17!\x1d\xf0\x8c\x03\xed\x86\x03\x0c\x10&\xb2\x01\x01\x1c\x1d\x10\x16\x13\x03\x19\x05\x01\xbc\x01\x03\x01\xd2\x02\x10\x01\x0f\x90\x01\x83\x01\x01\xd0\x02\"\x02\rZc\x01\x08\x01\x11\xc0\x01\x80\x01@\x85\x02\t\x9d\x02v\xc1\x01\x01\x91\r\x86\x04 %\xaa\x01\x0c\x06\x01\xccY\x01\xfd]\x12\xba^\x84\x10\x97n\x96n\xdbm\x08\x0f\x92\x19\x89\x1b\x14\x0e\x06\x16>x\x1a\t\x9aO\xf5@V\x89\x01ny\x15\x87\x04oDe\x13b\x04g\x82`\x85j\xfeiV\x04 \x03\xdd\x01\x9a\x01\x04 \x03\xad\x02\xea\x01\x04 \x03\xab\x02\xe8\x01\x04 !\xa9\x02\xb3`\xa5\x07\x12I\x84\x0e\xe84\x8f;\xcb\x01=\xf7\x04\xdaf\xffg\xdeg\x85h\xfeg\xea\x02\x04 ?\xab\x03\xc7e\x8a\x04\xed\x04\xb6\r\xa5\nb:eJ}\t!?(8\x9b\x01\xf0k\x07\x06!\x0f\r\x1c\xe3n\xe0nS\x1f\x93\x06\xaa\x04\xc9\x04\x8c\x03\x04 \x83\x04\xd9\x04\r\x02\x0f\x07\x04\x05\xaa\x07\xf3\x1b\x9c\x12\x02\x19\x15\x9d\x03\x80\x01\xdd\x01\xa7\x06\xfdX\xd6X\x15\xc6\x08\xad\n\x95\x03\x1b\x10\xda\x05\xf8\x13)\x15\xbd\x11\xa0\x02*MQ\x1e\x1f\xcb\x01\x86\x01\"\x11\x04\x02\x03\x1f\x8d\x02\x85\x03\x04\x02\x03\x1d\x13\x10\x11\xb2\x03\x85\x04:}\x0f\x0c\r\xda\x04\xdb\x04\x13\'\x02;\x92\r\xa7\x0eC\xb0\x07\xcf\x07\x0fy\x8f\x1c\xfe-\xd2\t\x1f\xa1\n\xbf\x12\x8e\x03\x1b\xd1\x03\x8c\x04\x1b\xd7\x05\xee\x18\xe1\x1a\xb0\x1a\xcd\x1c\x9c\x1c\xf5\x1c\xc4\x1c\xd3\x1f\xdb\x0f\x90\x0e\x95C \xd4\x01\x1a\x9b\x01O\x05\x11\x0f\x17\x11\x8e\x1b\xcc(\xf34\xce4\xe74\xa64\xf34\xdc4\xf34\xcc4\x975\x8e5\x8b9\xa4\x03\xbf\x03l\xad\x01\xea\x03\x825\x979\xea8\xcb9\xb49\xc79\xae9\xc19\xb89\xa7>\xd8\x01\xdf\x01\xcc\x01\xd9\x01#\x08\x16\xc4\x05\xc5\x05\xb2\x01\xcb\x01\x19\xb2=\x9f>\r\x8a>\x95>\x86>\x8a\x04\xb11\x8a\x01\x85\x01\x8cQn6@\xcd\x01\x06\x01\"\xd6\x01\x13\x01\xad\x01\n\xe3%\xf4&\x1bU\x19\xa9`\x90\x04\xc6\x02j\xe2\x03\x03\xe1\x03\x08\x02\x07\x17\xa8\x08\xb2\x01\xd5\x01\x01\xb6\x01\x04^\x87\x02\x19\xb0\x03\x0c\x81\x15\xf6\xcb\x03\xa3\xca\x03\xde\x01\xe5\x03\x03\xa2\xcc\x03\xf7\xc7\x03\x06\'\x9a3\xfe\x94\x03\x99\x95\x03\xf4\x92\x03\xa5\xfa\x02\x96\x14\x8d\x01\xc2\x01:\xf9\x01\x03\xf6\x01/\xcd\x14\x90\x14\x89\x14\x8c\xf5\x02\x91\x8f\x03\x90\x8f\x03\xa9\x8f\x03\x98\x8d\x03\x95\x8b\x03x\x18\xf1\x02\xfd\x03\xb4\x02\xed\x01)\x19\x03\xf4\x90\x03\xaf\xb3\x03\x10\x02\x0fK\xce\xa3\x05\xd7\xa5\x05\x92\xa5\x05\x8b\xa3\x05\x84\xa3\x05\xb9\xf7\x01\xf3\xfd\x022\x04\xce\x01\x02\x03Eo\x06\x04\x0b\x01\x02\x06\x03\xbd\x02-\x03\x0c!\xf0\xfd\x02\xd5\x02\xdd\xf6\x02\xc4\xf6\x02\xe1\xf6\x02\x86\xef\x02\xe9\xae\x03\xe8\xab\x03\xa9\xeb\x02\x90\xeb\x02\xad\xeb\x02\xac\xe7\x02\x91\xa8\x03\xca\x01%@E\xc2\xa5\x03\xaf\xed\x02\xee\xdd\x02\x83\xcf\x02\xaa\x03\xad\x03\x86\xcf\x02\x9b\x8b\x03\x8e\x01\x0cZ\x04+\t\x07\x17\x02\x03\x0f\x19A1\xbe\x8a\x03\x97\x8a\x031\x86\x8a\x03\xdf\x89\x037\xd0\x89\x03\x82\x97\x02\xf1\xa2\x05p\x10*N\x19\x17\x19\x07\x17\x02\x03\x17\x19K\xd2\xa3\x05\x05\xc1\x01\xcf\xa2\x05D\x11\'\x82\xa2\x05\x95\xa2\x05\xe8\xa1\x05\x07\x99\x96\x02\x81\x8f\x03\xba\x03\xab\x01\x0c\x9e\x01s$!\x07\x1b\x06\x07\x0f\x19\xf1\x01\xfa\x02\x0f\xeb\x02\xe6\x8e\x03\xed\x8e\x03\xe8\x8e\x03\x85\x8e\x03/\xbe\x8d\x03\xf7\x8d\x03\xc0\x8d\x03\x9b\x0c\xd9\x83\x03\n\x0bH\x04<\x08\x0f1\x03\x139.;&\x92\x83\x03\xc5\x83\x03\xc4\x83\x03\xcf\x83\x03\xb4\x82\x03\xb3\xeb\x02\x02\xb0\xeb\x02\xbd\x82\x03\x8a\x80\x03\xcd\xd1\x01a\x01\xf4\x01\xc3\"\xcc/\xf1.\xbc2\xe3-\x99\x92\x01\xa5\x02\x05\xc4\x0f\x0b\xb9\x0f\x84\x0e\x90\x18@\x12/%\x01\t\xcaA$\x0c\x04\x07\xbe\x02\x04 \x03\x81\x03\xd5g\n\x03\x93\x03\x01\xee\x01V\x06\x16\xde\x01D\xb9\x02\x1c\x11%\xf4\x04\x08cb\xd6\x02\x1a\x18\xce\x9f\x01\x01\xf7\xa7\x01\x81\x01\xec\x04\xcc\x07\x03\xc9\r\xc0\r\xb5\r\xcc\t\x9a\x05\x9d\x05\x9c\x05\xdb\x06\xc8\x06\xe7\x06\xe2\x06\xed\x06\xfb\x06+T\xe2\x05\x1f\x06;\x83\x01\x06C\xc7\x03\x03U\x0b\x1f\x07\xa6\x0b\xdc\xda\x01\r+[_\r]U\x81\x01K\x1faU\xe5\x01o-I-O\x95\x013e_g\xd5\x01Q\xad\x01\x81\x01O\x1f\x11o\xd3\x01u\xad\x01\xe5\x01s-I\x0f\x93\x033?\x0bS\t\x9b\xc0\x01\x94\x01\xd3\x02\xf4\xbf\x01a\x17\'\xa1\x01\xe5\xbd\x01\xfa\xbc\x01kaI\'+\t\x9f\xba\x01!\xac\xba\x01\xbd\x01\x19K\x17\x15\xa9\x01]oc\x89\x01\xa9\x01\tI\xea:aLo\xb3;\x05\xb4;\x05\x13\xa5;\xd5\x02\x85\x01\xb9\xaa\x01\xc0\xa0\x01\xc5\x04d\x9a\x02\x9b\x01\xff\x11\xb4\x14\x01\xab\x10\xae\x0e\x1c`\x1aw\xbf\x01\xb0\x01\xbb\x01\x05\xcc\x01\xe5\x03\xe4\xfe\x01\xe5\xfe\x01\xea\xfe\x01\xc1\x89\x02\xde\x10\xe5\x14\xc2\x14\xd7J\x96\xd2\x03\x89\xaa\x04P\xa4\x01\x14\xc2\xd0\x01\xfd\xc1\x01\xe2\x01\xdf\x01Np\xb0\x02N\xa5\x01\xec\x02\x05\xa2\t\x18\r\x11\xf3\n\xb0\x0c\x0e\x04*\x0e \x13\x07\x04\t\xf3\x01#\x11\r\x01.\n\x0c\x1a\xed\x0c\xf6\x0b\x8b\x0c\xa2\x0f\x13\xf3\x01\x0e\x19\xf8\x02\x08\x97\x01B\r\xba\x01\xd3\x01\x94\x02,\x0e\xea\x01\xf9\x01:\x82\x02\xf7\x01\xec\x01\x10\x11\x8b\x02-/\x0e\x03k\x90\x01\xf2\x01\xb2\x01\xe5\x01\x89\x04\x99\x10\xc6\x01B\xaf\x08\xc8\x11t\xdf\x01\xdc\x01\xef\x01\xec\x01\xb3\x02\xb0\x02\xb5\x03\xb2\x03\xd3\x04\xd0\x04\xfd\x04\xfa\x04\xcf\x05\xcc\x05\xaf\x06\xac\x06\x8d\x07\x8a\x07\xe7\x07\xe4\x07\xa3\x08\xa9\x07\x18]Z{x\xbf\x01\xbc\x01\xf5\x01\xf2\x01\xc9\x02\xc6\x02\xcb\x02\xe0\x18e1\xb6\x11\xc9%\x01\xe2%\x97%\x82\x01\xa0\x01\x85\x01\x17\r\xb6\x01\xe4\x02\xc6+\xf9\x01\xf3\x17\xd0\x1b\x0e\x16,o$\x05\xa5!\x9c\x01\x01\xf0\x1b\x8e\x01\x8b\x01\x03\xb7\x1d\xa4$\x07\xf9!\xd4\"\x04\x04\xff\x01\x12\x16\x992\xf4\x0e\x19\xae!\xd3!\xf9\x0e\x05\xd0\x02\x04\xce\tgT\xfe\x01\n\x9c\"\x9d\"\xe5\x02\xdb\x08\xc0\x0b\xc3\x0b3\x12\x17\xd6\x11\xb2\x01\x07\xab\x01\x03\xa8\x1c\xcf\x1c\x88\x02\x97\x02\xe0\x01\xde\x1d\x11\t]\x1b\xe7\x01\'\t\x1b\x99-\xd0+\"\xe5.\xb3\x02q\xd40\x01\xd33\x84\xad\x01\xdb\xb8\x01\xda\xbd\x01\x1c\x01\xef\xbc\x01\xf8\xbf\x01\x0b\x03\x01\xf0/\xa0\x03\x87\xee\x01\xfc\xf0\x01\xb7\xf8\x01\xda\xf3\x01?\xf0\x02\xe3\x03\x03\x95\xe6\x01\x82\x04\x0e\x01\xd4\x9c\x01\xc9\x9c\x01\xb9\x03\x01\x92\x0bF\x1a\xf0\x01f\x01\x07\xe2\x05\xcc\x02\x9f\x0b\x1c\x06\xf0\x01\xd6\x02\x01\xf1\x01\xc2\x08\xf2\xc3\x01T\x82\x01 \xa3\xc4\x01\xe6\xa7\x03PQP#\x17\x19-\t\xc3\xc8\x03\xa0\x01\x02\x0fA\x15\x11\xf8\x8d\x03\xfb\x8d\x03\xfa\x8d\x03\x81\x8e\x03\x0b\t\xa2\xc8\x03\x04\x02\x04\x03\x93\x01\xd1;\x01\xa3\xb8\x02\x03\x94\r\xa4G\x01\x89\xa0\x01\x99\x0c\x1b\x18\x94\xeb\x01\xd7\xeb\x01\x08\x98\x03\x99\x03\t\x80\xe8\x01\xbd\xdd\x01\xb6\r\xa8\x05\xea\x03\xce\x02\xd1\x02\xc8\x02\xdf\x02\xa9\x06\xee\x04\xdd\x06\x05\xee\x04\x83\x059\x07\xf8\xcf\x01\x95\xdb\x01\xf2\x16\xbb\x17\x19\xd2\x17\xb5\x18\xb2\x18\xc9\x18\xc6\x18\xcd\x18\xf2\x01\x9d\x02\xf6\x18\x9e\xa1\x01\xf7\x80\x01\xf2\xc3\x07\xcd\x87\x08\x92\x85\x08\xd2\x06\x89\t\xb53\x03\x98O\xddP\x03\xe6P\xa3S\xbf\xbc\x07\x04\x9c\xf1\x07\xd9\xeb\x07\xfa\xed\x07\x01\xd0\t\x8f\xf5\x07\x02\x03\xf4\xf6\x07\x89\xcd\x07\x04\x04\x11\x92\xcc\x07\x85\xf6\x07\xe0\x82\x08\xf9\xce\x07\xcc\x02\x90\x9e\x07T\xad\x9b\x07\x98\xca\x07\x04\x03U\x99\x01\xeb\x0b\x03\x01\xf2\x10\x9b\xd1\x07\x80\xb5\x07\xd9\xb6\x07\xd6\x01\xd7\x01\xd4\x01\x8b\x02\x88\x02\x9f\x03\x98\x03\xf3\x03\xf0\x03\xf9\x03\xf6\x03\xd7\x04\xd4\x04\xa5\x05\xa2\x05\x9f\x06\x9c\x06\xe3\x06\xe0\x06\xf7\x06\xf4\x06\xd5\x07\xd2\x07\xa3\x08\xa0\x08\x81\n\xfe\t\xe9\n\xe6\n\x8b\x0b\x88\x0b\xc9\x0b\xc6\x0b\xe7\x0b\x0b\x04\x04\xf3\x04\t\xf0\x0f\x13\x0c\r\x94\xb0\x07\xa9\x14y\xaf\x9b\x07\x98\x84\x07\xa3\xef\x06\xb4\x01\xb1\x01\x03\xf8\xeb\x06\xe9\xad\x07\xe0\xa3\x07\x87\xdf\x05\x04\x0e\xa37\x01\xbe;\xa7;\xc0;\xe99N\xaa\x01\x8a\x01dp^\xaa\x01\x16\x18L\x1a\x0c\xb2\x01 ,(Jbl@\xce\x01(\x18b2\xc0\x01R\xa4#\x03\x91#@48\xec\x02J.t\xe6\x01\xae\x01v\xd4\x01p\x12 P\x82\x01\xae\x01R\xd6\x01h`f4\x96\x01P.J.p\xe6\x01Vb L\x82\x01V^\x0e`\\,\x0e\x90\x01\x08\xd94\xaa\x01\x8a\x01dp^\xaa\x01\x16\x18L\x1a\x0c\xb2\x01 ,(Jbl@\xce\x01(\x18b2\xc0\x01R\xac#\x0b\x91#@48\xec\x02J.t\xe6\x01\xae\x01v\xd4\x01p\x12 P\x82\x01\xae\x01R\xd6\x01h`f4\x96\x01P.J.p\xe6\x01Vb L\x82\x01V^\x0e`\\:\x9d,\xd28\x01@D\xb7\x94\x01\xa9_\xf8>\xbf> \xaeC\x02\r\xd9BF\x12\x14\x0f\r\x01\xb8\x01\x16\x04\xad\x01\x08\xee<<\x08\x04\xbb:\xb4:\xc7:\xbe:\x81;\xc8:\x01\xca\x01\x1a\x18\xb5=\r\xcc=4\xf18\xbe9\x01\xe58\x98\x01\xf5\x01\x03\xea\x03\x985v\x18\x875\xb05\x08`\xd5\t\x95*8\xa0\x01\x8a\xc2\x01\xad\xd0\x01>\xfa\xcf\x01b\x01\x08\xb7\xd4\x0184\x82\r\xd3\r!\xae\xa2\x01\xc7\xa1\x016o\x02\x16D\xbe\x01UT0\x08\t*&\x12\x03XYjDER\x0c\r\xcd\x01\x12\x0f\r%\x17+\xca\x03F\x0c\xfd\x03\xb0\x04\xb2\xe0\x01\xe5\xdb\x01@\xa6\x01\x80Z\x01\x123\x03\x01\xa4\xe5\x03\xd3\xa2\x03\xd8\xa2\x03G5\xf3\xc8\x04\xb0\x06\xa5\x06\xb0\x06\xbf\x06\x04\x16$%\"\x15|\x1a\x14\x10\x12\x04\"\x03\x0c\x08\x04\x0b=\xb0\x8f\x03%1\x0c\x13\x01\xdf\x8c\x03\x16\x03\x01\x0b\r\x8a\x01<\x1ar\x080\x10\x1b\x9a\x01\x1c\x16\x08\xe5\x01\xa4\x02\x1e%\x04\x0e\x04\x04\n\xa7\x01(\x18\x0cQ\xbe\x01\x1e%,\n\x8e\xc0\x01\xca\x01\x96\x03`\xa6\x1d\xc0\n\xef\xe7\x01\xd0\x08\xa4\x93\x03\x01\xef\xae\x03\x04\x07\x03\x12\x10\x04\xb6\xaf\x01\x86\x02\x8b\x02\xf0\x01\xcbI\x9d\x02\xadW\xdeS\xabaZ\x02A\x1f\xb8\x0c#\xb3\x01#\x07\x9eO\xbc\t\xd8N\x06\xdbN?\xf4N\xb7O\xfeMz\x8b\xb2\x01\x01\x0e\x03\x01\x80c\xd9\x11\xb5\x17\xc3\x04\x04\xee\xa1\x01\xf2:\xf3:\xe8:\xb7;\xca-\x01\x9b\xf4\x01\x12\"\x07\x04\xa8\x0e2\x10-\x17\xed\x1c&1\x04\x03\x9d\x01\x01\xd8\x0e\x03\x01\x112\xf6\r\x0c\x83\x0eA\x9a\xf3\x01\x8f\x81\x02\x8c\x81\x02\xc0\x11\xc1\x11\xbe\x11\xb1\x12\xae\x12\xaf\x12\xff\xdf\x01\x9c\xb3\x01\x01\xfb\xae\x01B8\n\x89\x06\xfe\x05\x10\x02\x07\x15\xb2\x18\xd9?\x14\x12\x0c,fY\xbe\x01\\\x86\x01\x94\x02*\x08!\xe0\xa1\x03\xfb\xa6\x03\xb4\x04\xc9\x01]Vw]\x9d\x01~\x9b\x017 \x1d\x07\x1b\xf6\x06S\x07\x05\x9f\x04\x01!\x88\x01\xb0\xc3\x01\x0b\x03\xfb\xb7\x01\x0c\r\\4\x04\x03\x17nb\x08ZK\x17\x86\xb8\x01\x01\xeeI\x8d4\xd9\xa1\x01\xbe\x05\x06\x12\x05\x16\x03\x01\x06\x11\x8d\x07R\xde\x12\xc5\x12\";\xc6\x11\xa7\x12\xf3\x04\x8c(\xa1(\x92(\xe7(\xca&\x9c\x02G\x8d\x02\xf4\x01\r\x17\xe1\'\xfc%\xe5/\xdas\x14:\x0324\x04\x07\xc6\\\xe3\xe5\x01\xa6/\xbdM\xbaM\x85@3\xc0?\x99\x01\xb5/\xe9\x15\x9a\r\xa9\r\xd4\x0c\xea\x0b\x97\x10\xe6\x06\x025\xf7\x13\x04\x02\x03)\x15\"%$1\xf0\x0e\x13\xdd\x0e\xac\x0f\x91\x01\x8d\x0e\xa2\x1e\xa8\x07\xec\x0b\xb9\x0c\x93\x03\x87\x12\xce\x11\xf3\x13.=\x03\xe2\x13\xee\x05\xf1\x05\xff\x10\xc6\x10\xe5\x12\xa9\r\x84\r\xd8\x12\x07\x04\x05\xed\x0e\xf4\x0c\x0c\xff\r\xf0\r\x0c\xfd\r\xc4\xf0\x01\xba\x13\xc5\x14\xc2\x14\xc7\x14\xc4\x14\xf7\x14\xf4\x14\xbf\x15\xbc\x15\xef\x15\xec\x15\xc1\x16\xbe\x16\xbf\x16\xbc\x16\x99\x17\x96\x17\xe3\x17\xe0\x17\xd9\x18\xd6\x18\xf1\x18\xa9\xf5\x01\xfe\xf4\x01\x9a\x19\xc7\x19\xc4\x19\xc5\x19\xc2\x19\xa9\x1a\xa6\x1a\x91\x1b\x8e\x1b\xf5\x1b\xf2\x1b\xbb\x1c\xb8\x1c\xe9\x1c\xb1\xbd\x01\xda\xbc\x01\xbe\x1d\xb7\x1e\xb4\x1e\xfb\x1e\xf8\x1e\x9d\x1f\x9a\x1f\xad\x1f\xaa\x1f\xb7\x1f\xb4\x1f\x91 \x8e \xdb \xd8 \xb5\"\xb2\"\xf1\"\xf9\xea\x01\xce\xea\x01\x9a#\xc7#\xc4#\xc5#\xc2#\xa9$\xa6$\xf3$\xc3\xb5\x01\xc4\xb4\x01\xf0%\xdd&\xda&\x8b\'\xf3\xb3\x01\x9c\xb3\x01\xe0\'\xbd)\xba)\xa5*\xa2*\xc7*\xc4*\xe5*\xe2*\x9f+\x9c+\x9d+\x9a+\xdb+\xd8+\xdd+\xda+\xfd+\xfa+\xa7,\xa4,\xcb,\xc8,\xfd,\xfa,\xfb,\xf8,\xf9,\xf6,\xa9-\xb9\xae\x01\xb6\xad\x01\xaa.\xd3.\xd0.\xa5/\xa2/\xad/\xaa/\xdd/\xc5\xac\x01\xb4\xab\x01\xec0\xa31\xa01\xff1\xfc1\xd12\xce2\xf12\xee2\xab3\xa83\xc73\xc43\xc53\xc23\xe33\xe03\xff3\xfc3\x934\x904\x914\x8e4\x8f4\x11\x9a4\xdd4\xda4\xe54\xe24\xf34\xf04\x916\x8e6\xab6\xcf\xa6\x01\x9c\xa6\x01\xdc6\xdf6\xe7\xa6\x01\x80\xa6\x01\xc47\xe77\xbb\xa4\x01\x88\xa4\x01\x988\x9b8\xf3\xa5\x01\xf2\xa4\x01\x9a9\xb79\xa3\xa5\x01\xd4\xa4\x01\xa3\xa5\x01\xf4\xa4\x01\xb4:\xf3:\xf0:\xf1:W\x93\xd5\x01\xf8\xd4\x01\x8d\xa4\x01\xb4\xa3\x01\x9a@\x1b\x85\xe5\x01\xde\xe4\x01\xd7?\xdf\xd4\x01\x02\x03\xea&\x0e\xb0\t\xbb\t\x03\xd4\xad\x01\x85\xd5\x01\x03\x92\xd4\x01)\xdd\xcf\x01S=\x17\x03\xc2\xd0\x01\xe3\xcd\x01\x84\xcd\x01\x93\xcd\x01\xfe\xc9\x01\x8d\xca\x01\xc4\xc8\x01\xd3\xc8\x01\xe6\xc7\x01\xa1\x95\x01\xb2\x92\x01\x85\x8b\x01Xmh\x98\xba\x02\xb3\xbb\x02\t\xdd,\x8d\x11\xf6\x10:\x85\x01\xd6\x01\xff\x01\xd2\xb4\x01\xd9eB\x92\x014$>h\xfc\x02`\xdc\x03\xb6 \x82\x01\xf8\x01\xcc\x08\x1cX&\xee\x01\xce\x10\xe4\x01\x80\x03r\xf8\x03\x91DF\xe6\x01\x80\x01\xf2\x04\xd4\x03\xe2\x0b\xf2\x07\xda\x04\xd4\x06\xc3+\xaa\x01\x86\x01\x9c\x07\xac\x0f\xf2\x07\x9c4\x01\x88\x01Z\xbbP\xdaM\xa1N\x9eN\xadN\xaaN\xbfN\xbcN\xe1O\xdeO\xe7O\x8eJ\xd9J\xb0P\xe3P\xd8J\x93K\x9cQ\xa5Q\xc8O\x99P\xf4Q\xa7R\x94P\xadP\x88L\xc3L\xfaR\x83S\x98L\xe1L\x84Q\xd1Q\x98T\xdfT\x01\xbe\x07\x01\xea\x04\xd4\x02\xe6S<\x9dW\xe6X\xc3X\x92V\x01\xe1S\xd0S\x01\xb9S\xd3\x02\xf4X\x9dZ\xe6H\xb1I\xb0Z\x9dY\x06\xb4\x07\xf0\x06\xea6\x8a\x1a5\x8d\x16\x939\xfaP\xc9N\x9aO\xf1S\x9a\x01`\x9a\x01\x94\x12j\xc4\x03\xe3J&\xdb\x01\x98\x1a\xd99\xc8r\x19\xbfo\xf4a\x06\x03A\x01\xe0\x0b\x9d\n\xd4\x04\xd5d\xd2b\xe3d\xa6\x05>\x14\xd6_\xbc\x03\xec\x01\xf8\x01\xb9\x04\xcf[0r;@\x07\x9c[\x87a\xde`\x9b_\xca\n\x8aDw\xc2\x04\xdc\x02*\xdf\x12\x01\x04`\xe5\x01\xaec\xbf\xc4\x01\x19\xa2\xc4\x01\xef\xc4\x01\xa6\xc4\x01\xb3\xc4\x01\xc7\x12\x01\xfcG\x9e\x07\x89\x07\xf8\x06\xfb\x06\xba\x06\xbd\x06\xb2\x06\xb5\x06\x9a\x05\x9d\x05\x9c\x05\x9c\x15\xea\x02\xe5\x16\xde\x16\xe1\x16\x94\x16\x97\x16\xfa\x15\xfd\x15\x9a\x15\x9d\x15\xd4\x14\xd7\x14\xa8\x14\xab\x14\xa6\x14\x19\x8f\x14\x84\x14\x87\x14\xa0\x13\xa3\x13\x82\x13\x85\x13\xe6\x12\xe9\x12\xc4\x12\xc7\x12\xfa\x11\xfd\x11\xca\x11\xcd\x11\x8c\x11\x8f\x11\xe8\x10\xeb\x10\xe6\x10\xe9\x10\xe0\x10\xe3\x10\x96\x10\x99\x10\xfc\x0f\xff\x0f\xba\x0f\xbd\x0f\x9c\x0f\x9f\x0f\xca\x0e\xcd\x0e\x98\x0e\x9b\x0e\x98\x0e\xc4\t0\n{\x0363\x8e\x01\x02\x03\x1b\x16\r\'\x15\x07\xff\x17\xa2\x05\xa1\x01\xe0O\x8dP\xeeO\xfdP\xfb\x06\x95\x01\x03|\xd8|\x80;\xbb;\xb8;\xb9;\xd8>D\xef\x95\x02\x14\x18n\x06\x12\x1a\x04\x08[?Gj\rw\x17\x0f\x11\x03\xf0\x02\x08\t\xa4\x01\x1a\x08\x04\x05\x0c<\n8\xa2\xef\x03\xe7\xee\x03\x96\xa4\x04\x07\x83\xaa\x04\xbc\xae\x04\x04\xe3\t\xb7\x0b\xdb\xf6\x03\xd6\xf5\x03\xe3\xf6\x03\xe0\xf6\x03\xff\x80\x04\xb4\n\r\xd4\xf5\x03\xff\xff\x03a\xea\x07\xe4\x02\x04\xf9\x02\x13\x0b\x04\x04S\t\xe6\xf2\x03\x9f\xf3\x03\xfe\xf2\x03\xa7\xf8\x03\x0b\x08\t\x90\x05\x1f\x0b\x15\xe7\x04\xbe\xf1\x03\x81\xed\x03+\xcc\xec\x03\xad\xeb\x03\xc2\xea\x03\x93\xeb\x03\xf0\xea\x03\x8f\x03\xd7\x03\xcb\xd0\x03\xbe\xc8\x03\x83\xc9\x03\x1f\xf6\xc5\x03\x89\xef\x03\x0b\xac\xed\x03\x99\xf0\x03\xb0\x01\"3\x17\xbe\x01\xbf\x01\xbc\x01#\x07\x02\x06\t\x9d\x02\xf5\x01\x03\xc0\xe4\x03\xf3\xd9\x03\x1e\x04\x02\x03\x1d\x05\xc2\xd7\x03\x99\x8d\x03\xfaI\xfa\x93\x01\x03.\xcdG\xc0G\x02\t\x1e\t\xe9G\x01\xbc\r\x82=\x07\x93J\xd5\x02\xc8\xe0\x01$&.0\xe0\xde\x01\x08\tM\xb4\x01\xf0\x04\xd1\x9c\x03\xc5\xed\x01\x95\x02\xbe\xb0\x01\xda\x01P\xa0\x01\xc4\x018\xc3\x01\xda\x08\xc4\x02\xc7\x18\xa2\x1f\xa0\x02\xbe\x08\x9f\xb8\x01\nD\xf8C\x85\x06\x92\x012\x80:\xc5\x01\xb8\x18\x93\"\x90\"\xa9L\x03\x97\x83\x01\xde~\xcd~\xcc~\xcd~\x9a~\x9f~\x8e}\x91}\xd0w\xaf\x18\xa4\x01\x06\x9eO\x9fO\x9eO\xc3P\xbeP\xe9W\xc4\xb7\x01\xae\'\xcc\x07\xc0\n\xa4\x01\x06\xb2\x15\xb3\x15\xb2\x15\xd7\x16\xd2\x16\x91!\x8e!\xd9(\xd6(\x83P\x80P\xe9W\xb0\x85\x02n\x06\xb6\x01\xb7\x01\xb6\x01\xa5\x02\xa0\x02\xe9W\xec\x84\x02\x02\xd8\x02\xe9W\x8c\x86\x02\xe9\x15\x92\x01j\xb1\x12\xa2&\x03\xb4\x01\xd9\x02\xd6\x02\x99\x15\x03\xae\x15\x93\x16\x90\x16\xa1\x17\x9e\x17\xd3\'\xe0\'\xf9W\xb6\xb8\x01\xc9\x01\xd7\xcd\x07\n\x04\x0f2\x10\xc2\x11\xa4\x03?\xaf\x03\xc5\x0e\"\x04\x03s\x01\x19\xef\x02\xf8\x01\x0b\x1f\xbe\x02B\x95\x04 \x1d-\x03\x01\x82\x06\xbf\x03\x021\xe8\x05\x8e\x01\xac\x01<\x08\x0f\x01\xb6\x04 ,\x0cO\xaa\x01\xc4\x01X\xe3\x08\xf7\x03\x88\n\xca\x04\xf1\x0f\xb6\x10\x02\rA\xdb\x13\xd2\x03A\x17\xed\x03\xa0\x03\x08\xab\x03\xac\x14c\xad\x01\x11\xab\x02\x1c\xb4\x01\xb1\x01\x04\r\x8f\x01\x1d\x11\xba\x01*q\xb2\x04\xbf\x04\x7f\xdf\x05{\xa3\x02\xa4\x04.W\xb8\n\xb9\x0e\x11\xfc\x01\x1a\x17y\xe4\x02\x08\t\xbc\ns\'\xaa\x01#\x1e\'OU\xcc\x01\x9b\x02\xcb\x087\xa7\x02\xcb\x01\xde\x07\x04\xc2&\xfd\x0e\xfa\x0e\xf4\x1d\x02\x07\x0f\xbe\x01\x1e7R\x07,\x1b\x18\x074\x14\x1c><B\xf8\x03\x03\xa3\x07\x9c\x08R\xce\x01D\x14\x8d\x04\x06\x04\x03\xad\x01\x01\x08\x03\t\x01\x88\x01 \x86\x07\xc2\x01\x04\x03\x07\x01\xbd\r\x17\x0b\x04\x03/\x010\xae\r\x02\x19\xa1\x0e\xd2\x06\x02\r\x1b\xee\t\t\x0e\x0b\rF\x03\xc5\x1bZ\x9e\x02\xf4\x01\xe4\x04\xa8\x15\xdc\x03\x04 5\xa9\x03\xd6\x04N\x19\x03B\x04b|\xb1=\x0e2\xd2\x91\x03\xa4\x07\xb5\x94\x036\x9a\x01\n\x92\xee\x02\x9d\xed\x02\x02\r\x0f\x02\x1b\x0b\x02\x04\r\x03\x01\xf0\x01\x04\x03=\x18\n<Q\x17\x01\xb0\x02\xac\xfc\x02\x01\xb3\xfb\x02h\xff\x01\x02\x19\x01\xb0\x03\x1cm\xe8\xf7\x02\x1a\x91\x0b\x1a\x8b\xed\x02\x80\x01\x99\x01B\x02\x1bX\x04\x02\x04\x03?%\x01\xf5\r\xba\x80\x05\x08\x01\x0c\xa7\xa3\x05\n\x0bp\xa3\x0f\x03\x10\xdc\xa5\x01\xa3\xa6\x01,\xc8\x02\x84z\x01\xbf|\x04\x98L\x88\x01\xa7MB5\t\r\x05\xae\r\xe9\x0c\x04\x04\x0b\xe8_\x86\x08\xb4\x03\x8a\x01\xd69\xc9\xa6\x01\x08L\xbd\x03\xa6\x03\xc3\x01\x98\x01\xb4c\x97e\xe4d\xa7`$\xab\x05\xd4\x1c\x07\xe7\x1a\xfc\x1aL\x1c4\xf6\x06\x12fy\xc4\x01\xa7\x01\xd0\x01\xbb\x01\xc63\\\xa8\x0cP\x8c\x04\xc2c\xabY\xd4\x03\x88\x04&6\xc4\x01L\x1c\x18`\x1c\xa4\x03\x1aT\x84\x07\x1aT\xee\x03\x18\xbc\x06\x18\xd2\x05\xa0\x03\xca\x01\x8e\x042\xaf\x82\x01:\xac\x8b\x01\xd8\x05\xa5\x07\x1c:\xab\xa6\x01\x07\x03&\x1b\x10\x94\xc4\x01\x01\x9b\xc4\x01\x1e0\t\x05\x1d<\x1a\r\tB+\"\xac\x026\xa9\x0f+\xe4\xa5\x01\x87d\xdac\x99m\xd0k\xc1b\xa0a\xa1U\x89\x02\xc4U\xeb\x9d\x01\x02\x03\xdc\x9c\x01\x8dg\xbef\xb3f\xf8e\xfd]\xd6]W\xd9^\xb6\x01\xc9\x01\xb2\x01\xef\x01\xd8\x01\xfd\x01\xf3\x02\x13\x0f\x04\x02\x03!\xd4\x0b\xba\x01\xe7\x01\xba\x01\xa9\x02\xaeX\xe3\x9a\x01\x02\x03\xfc\x99\x01\xaf\x9a\x01\x02\x03\xf8\x98\x01\xc5b\xa2a\xffa\x96o \xe5q\xd4q)\xc9\r\xddX\xd0X\xf5)\x84)\xd5)\xd4)\xdb9\x02\x03\xb49\xe79\x02\x03\x8e7\xc17\x02\x03\xfa3\xe94\x02\x03\xf43\xb53\x02\x03\x9c-\xd1\x88\x01\x02\x03\xba\x87\x01\xed\x87\x01\x02\x03\x90\x87\x01\xc9\x87\x01\x02\x03\xb2\x86\x01\xeb\x86\x01\x02\x03\xc4\x86\x01\x8b\'\x02\x03\xae&\xe1&\x02\x03\x84&\xbd&\x02\x03\xd8%\x990\xb2-\xdd\x13\xfb\x17\xe2\x17\x8a\x12\xd7}\xe0\x06\x84\x07\xf0\x0f\xf1\x0f\xf0\x0f\xc3\x10\xad\x0c\xa6\x04\t\xb3\x04\x8a\x01\r\xcc\x05\x15\x04\x02\x04\x03\xe3\x01\xf5\x06\x05\xa4u\xafw\xe8\x01k7\x84\x01\x87\x01\x84\x01\xc1\x01\xa2\x01\xa5\x01\xea\x06\x131\xb1\x04\x05\x90s\xc4Z\x8b\"\xdc\t\xc4\x01\xcf\xa2\x01\x04\r\x03\xc4\x80\x04\x87\x80\x04\xdc\x80\x04\xef\xff\x030\x0e\xa2\x04\xbe\xeb\x03\xe7\xea\x03\x0c\x14\xc2\xf9\x03\xe3\xf8\x03\x04.\x92\xfa\x03\xbf\x80\x04/\x0b\xaa\n\xe0\xf7\x03\xfb\xe9\x03\xd0\xd4\x03\x03\x01\xea\x02\x87\xbe\x03\xe6\x05\x81\x03\xa2\x031\x8d\x06\x03\xde\x81\x03\x02\xe9\xf8\x02\x87\x01&\x188\xab\x01\x18\x88\x03\x89\x03\xa0\x017\x17%#\x80\x03\x8b\x03\x88\x03\xb8\x02\x93\x01\x01\x9d\x02\x0f\x8e\x05\x0e\xfb\x04\x82\x05\x01\xf3\x02\xa6\x05\x0f\xd7\x02\xe3\x03\xce\x06\x0f\'\x83\x07\xf8\x04\x0b\x91\x05\xd6\x03\xe7\x03\x01\xdd\x01\xbe\x0c\x04\x07J\x01\xce\x02\x08\xb7\x01\xdc\x02\x04\x04+\xdb\x02\xdc\x01\x01\xdf\x01\x0e\xc1\x01\x8c\x04\x10Aj\x95\x01A\xab\x01\t\xb3\x01\x1d\x1b\xbc\x08\x8fb\x98\xe1\x01\x0e\x0c\x04\x08\x0b\xcf\xb1\x01\xbc\xb1\x01\r\t\xf1\xd5\x01\xa4\x82\x05\x04\x0cK\x0f\xab\xb1\x01\x02\xcc\xb1\x01\xa7\xd6\x01\xce\x82\x05\x18\xc1\xb1\x01\xfe\xb1\x01R\x89\xb8\x08\xbc\x02\x04\x0c\x08\xaf\x02\xba\x04\x06&LZ&\x10\xd7\x0c~\xe0\x01(\x12R\xe7\x03\x04\x05\x16N\x17\x16)\xc28\x04\x03\r\x01\xc13\xfa\x03h\x01k\x88\x01\n\x035\x01\x1e\x03>c\x8a\x01\x1b6\x02\x03\x1b\x13\x02\x03mj\x03\x13\xee\x02\x01F\x01J\x0f\x8a\x02\xf1\x03\xa4\x04\x04\x03\t\x0c\r\x8d\x05\xfd\x01\x90\x08\x04\x04%\xa5\x04(\x18\"\xe4\x03\xc7\x049x\x84\x04\xdb\x03\x03\x0c\x9a\x04\x02\x04\x16\x17\x12\x18\x04\x0c\xe3\x01S\xf1\x04<\xbc\x05\xef\x12\x01\x986\x90\x01\xd9)\r\x87\x0b\x8e\x03\x10\x11\x030\xe8\x01H$W\xc6\x02\x1e!0Tq\x8e\x01\x01\x0c\x03\\\xea\x032\xbb\x04\x03\x8a\x02\xc2\x02\x04\xd1\x04\x82\x02\x03\x01\x84\x038\xdc\x014\\\x08\x04\xa1\x15\xbc\x12\x0c\xd2\x01\x06\x80\x01\x95\x15\x82\x01p|\x0e\x08\x96\x07\xa2\x01\xed\x04X0(\xf4\x05\xfd\r\xf6\xdf\x01d\x81\x01\\\x0c\t\x03\x83\x01NU\x03\xc9\xde\x01\x18\xd4\xcb\x01\xd0\x01\x03\x0f\x87\xcc\x01\xca\xca\x01\xea\x01\xac\x0f\x0f\x8c\x01\xaf\xda\x01\x1e\x9c\xda\x01\xe7\xdd\x01\x02\x03\x11\x96\xdd\x01\xf1\xd7\x01\x12\x01\x10\x11\x034\xad\x02\xa2\x02\x02\r\x0b\x11p\x04\x045\t\x12\x03\xb5\x02LIHQ\x05\xda\xda\x01\xeb\xda\x01\x02\t\x1e\xd4\xda\x01\x85\xd7\x01\x14\x02\x03\r\x0c\x01\x0fR\x08\x86\xc5\x01\xeb\xc4\x01\x06\x04\x99\x02\x95\t\xfc\x07\xb8\x01\x89\x07\x86\x07\xab\t\x02\x10\x13&\x18\x9a\x02\x0e\x0b\x07\x1f\xe0\x01\x02\t\xe5\x03\t\x18\xc2\x02\xea\xdb\x01\xff\xdd\x01\xa2\x08\x02\r\x01\xa2\xd0\x01\xc7\xd5\x01\x08\xcc\xda\x01\x81\xde\x01\xaa\x03\x01\xca\xce\x01\xaf\xce\x01\x02\x05\x0b\x07\x01\xc4\n8(\x01\xd1\x04\x8e\x0b\x7f\x05\xd1\x01\x05\x97\x10\xe8\x05\xae\x05\xbf\x05\x96\x05\xc5\x05\x86\x05\xaf\x01\xad\x04\x9e\x05s\xc1\x05\xbe\x05\xbf\x05\xbc\x05\xbd\x05\xa0\t\xe1\x04\xb6\x04\xf1\x04\xd2\x04\x81\x05\xd2\x04\t\x9b\x08\xbc\x05\xd3\x05\xd0\x05\xbf\x07\xbc\x07\xf9\x07\xf6\x07\xf7\x07\xf6\x07%\x023\x17\x94\x01\"\x1f\x03\xa3\x08\rI\x05\xe1\x016z\x0c\x02\x07\x17\x02\x03\x12%=\x02\x05\r5C\x06\x0f&\xa0\x12\xa9\x12\x13\xc8R\x87\n\x19\xf4\n\xcf\n\xa0\x01.\x80\x03\x88\x01\xe4\x05D\x87\x07\x88\x01\x94\t\x89\x15>:\x99C\x1a\x04\x0c\xe5\x01\x0ed\xd2W\x1a\xfdR\x81\x03\xbc\x02\xe5\x02\xc0\x02\xff\x02\xb8\x02\x01V\xa9\x05\x08\t\xdc\x05`HL\xa1\x01\x03\x86\x0c\xe3\x01\xdc\x01E\xe9\x06\xfa\n\xf6\x02\x93\x14\xe4\x05\xf5\n\xf4\n$=\xaf\x01\xb3\x07\xcc\x12b\xf5\x11\x9c.\x14\x991\x01\x03\x07\xceY\xebY\xc4Y\xb1W\x98W\xc7W\xeaZ\xb7\x03\xb1X\x8a\x15\x95\x15\x05@6y\x90.\x9d.*1\x01\xfc\x02\xdb\x01\x91\x01\x8e\x01\xb6\x12\xd1\x01A\xf4\x01\xaf\x08\x8a\x0b\x17\x91\x0c\xc8\x08\t\xe3\x08\x03\xd01\xa52L\x9b\x01\xe4\'\xe9\'\xa8\x0c\x02\r\xee\x19\xf1\x19\x01\xfaG\xed\x01\xfdX\x82Zr\xf1\x01\xee\x01\xef\x01\x9bY\xe6\x18\xa1\x0f\xa0\x0f\x93\x10\x85\n\x90\x05&\\\x90\x02\'\x9f\x080\x04(\xc3\x08\xfa\x04zD&\x180\x9e\x01e\x01\xbc0\x9f7\x03\xfa\x12\x03\xaf\x01 \x95\x08\xe0\xae\x01\x01\xe3\xb9\x01\x98\xa3\x01\xe1\xa1\x01;~\xf9\x01\xc0\x054\xf0\xb3\x01\xd3\xb3\x01;\x96\x01\xab\x01\xe8\x01\xbc\xb2\x01\xcd\xb4\x01\x80\x16\xfd\x15\x03\xa8I\x8fI\nD\x12\xa6\x05\x1e\xc9\x05\xcc\x05\xa9\x05\xdc\x05\xbb\x05\xe4\x01p/d\xc8\x01\x04\x08\x04\xfc\x05\xb00\xcc\x1c\x01\x12\x01\xda\t\x01\xee\x01%\xa8\x04\x01Tx\x9e\x05\x01\xec\r\x01\xa7#\x01\xfe\x11\x01\xa7n\xd2\xa7\x01\xd7\xa7\x01\xec\xa4\x01\xef\xa4\x01\xca\xa2\x01\xcd\xa2\x01\x98\xa2\x01\x9b\xa2\x01\x9a\xa2\x01\x83i\xa0\x01\x99\x01\x9f9\xfe\xa0\x01\x81\xa1\x01\xaa\xa0\x01\xad\xa0\x01\xaa\xa0\x01\x9e\x083\x19\xdf\x07\x9d\xa0\x01\x9c\xa0\x01\xfc\x0b\x02\x03C\xd5\xab\x01\xd4\xab\x01\x95\x0c\xc1\x9f\x01\x94\x9e\x01\x97\x9e\x01\x8c\x9d\x01\x8f\x9d\x01\xd6\x9c\x01\xd9\x9c\x01\xb6\x9c\x01\xb9\x9c\x01\xf6\x9b\x01\xf9\x9b\x01\xa2\x9b\x01\xa5\x9b\x01\xdc\x9a\x01\xdf\x9a\x01\xa6\x9a\x01\xa9\x9a\x01\xc4\x99\x01\xc7\x99\x01\x90\x99\x01\x93\x99\x01\xe4\x98\x01\xe7\x98\x01\xda\x98\x01\xdd\x98\x01\xc4\x96\x01\xc7\x96\x01\xa6\x96\x01\xa9\x96\x01\x8e\x96\x01\x91\x96\x01\x86\x96\x01\x89\x96\x01\xfa\x95\x01\xfd\x95\x01\xc2\x95\x01\xc5\x95\x01\xa0\x95\x01\xa3\x95\x01\xdc\x94\x01\xdf\x94\x01\xba\x94\x01\xbd\x94\x01\xfe\x93\x01\x81\x94\x01\xba\x93\x01\xbd\x93\x01\xa6\x92\x01\xa9\x92\x01\x86\x91\x01\x89\x91\x01\xca\x90\x01\xcd\x90\x01\xfa\x8e\x01\xfd\x8e\x01\xda\x8e\x01\xdd\x8e\x01\xce\x8e\x01\xd1\x8e\x01\xa4\x8e\x01\xa7\x8e\x01\xd0\x8d\x01\xd3\x8d\x01\xe8\x8b\x01\xeb\x8b\x01\xfc\x89\x01\xff\x89\x01\x8e\x89\x01\x91\x89\x01\xc2\x88\x01\xc5\x88\x01\xe2\x85\x01\xe5\x85\x01\x8e\x85\x01\x91\x85\x01\x96\x84\x01\x99\x84\x01\x84\x84\x01\x87\x84\x01\xd8\x83\x01\xdb\x83\x01\xba\x83\x01\xbd\x83\x01\xa6\x83\x01\xa9\x83\x01\xd4\x82\x01\xd7\x82\x01\xcc\x82\x01\xcf\x82\x01\xd8\x81\x01\xdb\x81\x01\xb0\x81\x01\xb3\x81\x01\xfc\x80\x01\xff\x80\x01\xf6\x7f\xf9\x7f\xdc\x7f\xdf\x7f\xce\x7f\xd1\x7f\xb2\x7f\xb5\x7f\xbe}\xc1}\xfc|\xff|\x9a|\x9d|\xae{\xb1{\xb0{\xcd:&\x96\xb7\x02\xa1\xf8\x02\xec@\xb6:\xa5{\xe4z\xe7z\x8cy\x8fy\x8ey\xa18\x8c8\xfbx\xb6x\xb9x\x9ax\x9dx\xf2v\xf5v\xbcv\xbfv\x84v\x87v\xf4u\xf7u\xd6u\xd9u\xa0u\xa3u\x86u\x89u\x9et\xa1t\xc4s\xc7s\xa6s\xa9s\xdcr\xdfr\xber\xc1r\xfeq\x81r\xa2q\xa5q\xccp\xcfp\xa6p\xa9p\xc0o\xc3o\x84o\x87o\xden\xe1n\xe6l\xe9l\xd2l\xd5l\x9ck\x9fk\x88k\x8bk\xc6j\xc9j\x80j\x83j\xf2h\xf5h\xech\xefh\xc8g\xcbg\x8ag\x8dg\xdaf\xddf\xdaf\xd0F\xa5r\x8er\x8a\x01\xbd\x01\xe1\xac\x01\xac\xac\x01\xa6\x01\xcf\x01\x85\xac\x01\x82\xac\x01\xd3E\xb1f\x8cf\x8ff\xd2e\xd5e\xb0\x03\xf0I/\t\x06\x91\x10\xde\x11Fz\x0e(@\x01]\xe2\x01\x01\xee\x11\x91M\xf0L\x01\x93M\xea\x02\xf0J\xf3J\x89\x02\x86\x02\x87\x02\xe6\x04\xd1\x03\x02\x03\xa4\x07\xa0l\xa0\x02#\x06)wO\x19`\x8b\x04\xa1jZv\xcd\x01\x03\xa2j\x8fh\xb2g\x8fl\x8el\x91l\xeej\xf1j\xeai\xedi\xeci\xefi\xc0i\xc3i\xc2i\xc5i\xc4i\xc7i\xb4i\xb7i\xf8h\xfbh\xa8h\xabh\x90h;\xd7g\xa2g\xa5g\xa4g\xa7g\xccf\xcff\xcef\xd1f\xa4f\xa7f\xfce\xffe\xfee\x81f\xfee\x81f\xecc\xefc\xd2c\xd5c\xd4c\xd7c\xc6c\xc9c\xc2c\xc5c\xbac\xbdc\x86c\x89c\xe8b\xebb\xa8b\xabb\x8ab\x8db\xd2a\xd5a\xd4a\xd7a\x9aa\x9da\x8a`\x8d`\x8c`\x8f`\xf6^\xf9^\xf8^\xfb^\xc6^\xc9^\xfa\\\xfd\\\xde\\\xe1\\\xd6\\\xd9\\\xb0\\\xb3\\\xb2\\\x91u\xdc\x18\xdd\x18\xcct\xf1[\xf0[\xf3[\xae[\xad\x01\x83Z\x98X\x9bX\xf2WU\x9fW\xd4V\xd7V\xd6V\xd9V\xd8V\xdbV\x9aVwCk\xf5S\xa2S\xa5S\xaeR\xb1R\xacR\xafR\xa8R\xabR\x80R\x83R\xe6Q\xe9Q\xd6Q\xd9Q\x88Q\x8bQ\x84Q\x87Q\xf6P%?\x93P\xecO\xefO\xbcO\xbfO\xa4O{\xabN\x92N\x95N\x94N\x97N\x90N\x93N\xf8M\xfbM\x88L\x8bL\xcaK\xcdK\xecJ\xefJ\xeeJ\xd5L\xc0\x01\xda\x02\xc1\x04_\xcaIm\xeb^\xfaQ\xc3\x01\x8d\x05\xd2_8V\\\x98\x02\x95\xae\x01O\x05\xb8\xd3\x03\x04\x08\xb3\x04\x0eH\x08,\xdd\xc9\x03=\xc5\t\xdc\x04\xed\x04\xc4\x04\xeb\x04\xac\x04\xdf\x04\xa2\x04\xc3\x04\xd4\x02\x8e\x01\x9e\x017\x1e3K\x02\x03\x11)9\x1d\xd1\x02\xda\x08\xfb\x04\xea\x04\xbd\x04\xd8\x02\xde\x10\x02\xe1\x10\xb3\x03\x94\x12;\xbb\x12\xb8\x03\x8d\x04\x04\x02\x03LO6G\x98\x04\r\x1f\x02\xc7\x01\xbb\x01\xee\x13)\xa7\x0c\x8e(\xc11\xae1\xc91\xa01\xa0\x01\xa9\x01\x88\x01\xa5\x013\xba\x01\xc9\x01\xfb,\xe3\x01\xfaV\xa1D\xb8A\x87\n\x97\x01\xfd\x03\x97E\xfaC\x1b\xc7\x01\x0f\xa9C\x80C\x0f\x8f\x14\xe2\x13\x0f\x9b<\xa45\xcf1\xd4/\xb10\xd9\x07\x9a\x02\x89\x02\xae\x01\x8f\x02\xae\x01\xd0\x02\xde\xcf\x03\x02\t\x11\x17\x02\x031\x19\x03\xd7\xce\x03\x03\xfe1\xb1/Ci\x19\x03\x8a0\xdb5\xc44\x96\x87\x04\xb5.\xf4.\xf1.E\x880\xbf/\x860\x17\x02\x031\x830\x80/\x15\xbb3\x8c\x9d\x01\x1a\x18\xc2\x01\xdd\xf4\x044\x8f1\xae\x01\x17\x02\x85\x01\xd4\x01\x8f\x02\x03\x01\x82G\xe4\n?8\x15\x03\xf8\x01\xd7\x0c\xc3A\xf4\x01\x02\xf6>\xc1A%)\xa8H\xa5B@\xf6K\xdb\x08\xd0\x02\x94\x06\x8f\x07\x8c\x07\xdb\x08\xb9B?*\x85\x01\t\xa4C\x8e\t\x17\x8f\t\xc6\x07\xa5\x08\x81C\xf6B\xd6\t\xf1\t\x8e\x08\xbf\t\xe7J\x02\x13\xa8I\xbfC\xf8\x01\xbb\x02\xb2\x03\xef\x03\x8e\x04\xa5\x04\xe6\x04\x8f\x05\x82E\xa5C\x96C\xec\x0c\xcb\x02\xcd\n\xe2\x0c\xd7\x02\xcf\n\xa5B\x82B\x85B\xd6A\xd9A\xd4A\xe6\n\xf9\n\x8f@\xbe?\xf1@\xe8@\xb7>\xd8:\x999\x03\x9c9\xed<BE\xdc<\xdbC\x03\x863\xa72\xf41\xab2\x8a.\xc0\x0c;\xeer\xe5r85\x031\x03\xca\x022\x01\x8c=\xed9\x02!\x8c:\xf0\xa5\x04\x03\xf5\x9e\x05\xa6\xa4\x05\x8a\x0e\x03\x8b\x13\xd7\x9f\x05\xd2\x9f\x05\x8f)\x9e/\x12\x04\x02\x03\x0f\xa3/\xd8.\x03\x04\x15Y\xa3/\x8e1\x1a\'\x03\xcb5\x95\x85\x04\xcb5\xf2\x9a\x01\x03\x01\n\x01\x0b\x05\xfc\x06\x10 P\x12\x18\x06\x16\x04\"N\x0e\xbf\x01\xbe\x01\x06\r\x17\t\x02)u9\x1cG\x1b\xd6\x01\x19\t\xcc\x04N\x04\x14\xad\x01zU\xd1\xcb\x01\xfb\nO\x8c\x01\x84%\xd3&\x16K\xcc0\x01\x8d\x01\x01\xd15\xa0\xd3\x01\xb1\xd2\x01\xb0\xd2\x01\x99\xd2\x01\xee\xce\x01\xc5\xcd\x01\x86\x01A\xa7\x01\xf2\xd2\x01\xc9\xd1\x01\x02\r\xcc\xcc\x01\xed\xc9\x01,\x0b\xe2\xc9\x01\x01\x93\xc9\x01\xec\xcc\x01\x97\xd2\x01\xf6?\xee\x91\x01\xe5\xd1\x01\xf4?\x9c\x91\x01\x91\xd1\x01\xf2?\xba\x90\x01\xad\xd0\x01\xf0?\xf8\x8f\x01\xe9\xcf\x01\x03\xf2?\xfa\x8f\x01\xa3\x8c\x01\x04\x1c\x18\x12x\x0e\"D\x087\x1eQ<A~\x83\x01+\x19\x04\x02\x03\x1f\xee\x0428B\xcf\x07\x8c\x07F\x05Y7\x01\xd1\t\n\x04\x01\x18\x06\x04\x89\x01\xb3A\xb6\xd6\x01\xe9\xd1\x01\xc0\xd1\x01\xa3\x01\xd5\xd3\x01\x88\x01\x8e\x01\x05\xc3\x01\xbc\x02\xe7\x02\x84\x01\x9f\x01\xce\xd3\x01\x9b\xd0\x01\x02\x0f\xd4\xd3\x01\xbd\xd8\x01\xae\x03\xd8\xda\x010\x18\xa3\xdc\x01BU\x0c\x06\x17wpu\xaa\xdd\x01?(\x03\x0cW\xfb\xd9\x01\xce\xd9\x01\xad\xdd\x01\x82\x02\x8b\x01:k\x13)\x19\xca\x05\xf2\xd7\x01\xb9\xdc\x01\xb4\x02\xe0\xd9\x01\xf3\xd6\x01\x89\x05\xec\xdb\x01\x9f\x98\x01\xfe\x08\x02!\xf1\x02D\x07\x02\x04\x07\xbd\x01\xc3\x03\x04\t\x89\x02\x02\x03\x17\x07W\t\x02\x0b\xda\x08\x83M+ \xa8\xdc\x01\xb5\x03\x91\x08\xbd\xc9\x01/\xe3\x03\xda\x03\xa8\xc9\x01\xc9\xc9\x01+\x13\xde\xc8\x01\xe7\xc6\x01\xd4\xc6\x01\xc1\xca\x01\n\x0c.\x02\x07\x17\x02\x03\x15\x12\x13\x05-\x1eZ\xba\xc9\x01\x9d\xca\x01\xf0\xc9\x01\xcd\xc9\x01\xdb\x01\xd4\x01\xa6\xc9\x01\xdb\xc9\x01\xda\xc9\x01#\x8f\xc9\x01\x03\x82\xc8\x01\xb7\xca\x01\x04\x05\xda\x9f\x01\xf8\x1f\xa2\x04\xe8\x01\xeb\x08\x14\xfc\x08\xb5\t\x90\t\x08\x02\x03\x17\xfb\t\x03\xf4\r\xffq\xad\x15\x01t\x88\x01\xc1D\x06\x08:\x01\xaa6\xcf$\x02\r\x01\xa3\x12r:>8\x08\x0b2\x16\x8cF\xf77\xf47\xed\x11\xc30\xb00H\xb9\"\xbd\x15\xb8\x05\xbe(\xac\x14\x8dC\xf0\x05\xfb\x05\x8a/\x95/\xaeB\xf3;\x06\x1d\xde(\xe9(\xd6<\xf3\x13\x12)\xfc\x01\x01+X\x08\xe10\xbe\x01\xa9\x01\x04\x02\xdf\x04\x11\xce\x01D\x1a\xae\x01\xe3\x03\xc2\xd6\x01\x01\xb9\xd2\x01\x01\x05\xf2\xd2\x01\xb9\xd6\x01A\x01\xfe\x03\x95\x02\x9a\x02\x11W\xfa\x01R\x8d\x01R\xfc\x02\xb3\x02\xd8\x02\xf0\x01\xd6\xbc\x01\xa3\xc5\x01\xde\x08\x1b\xef\x01\xdf\x02+&\'\xdc\x02\x1f\x06\xc5\x01\x83\x01*9\x0fDI\xa8\x01\xe7\x05s\x03\xb2\xc6\x01\xb6\x01\xe1\x05\xc4\x05\xc7\x06\x9d\x06\xe5\x02\xd3\xaf\x01\xa2\xad\x01\xac\x16\x02\x03\x8b\x1aw\xcd\xa0\x01\xb8\x93\x01\xa3\xa1\x01\xde\x88\x01J\xc0\x01\xe1\x83\x01\x03\xa9\t\x03\xc4\x06\x01\xd2\xd1\x01\x01\xb1\xd7\x01\x0e\x94\x07\xa3\x06\x06\x04\x86\xdc\x01\x81\xdd\x01>A\x13\xf6\x01\x14\x10\xe8\x01\x86\xad\x01\xa1\\\xb5U\xe8\xa6\x01P\x9c\x02\xaf\x01\x0e\xd2\x01\x0e\x14\x1e&\xc2\x12\xaf\x12\xe0\x12\x05\xdf\x11L\x18\xee\x04\xb0\x01\xb1\x01\xae\x01\xb7\x03\xb4\x03\x91\x04\x8e\x04\x8f\x04\x8c\x04\xfb\x05\x84\x12\x9b\x12\xfc\x11\xeb\x0b\xd9\x06\xa2\x12\xef\x12\xa4\x07\xa5\x07\xa2\x07\x97\x0c\xd2\x04\xdc\x12\x1d\xd9\x12\xb6\x12\x1f\xb9\x12\xd6\x10\xef\x10\x82\t\x99\t\xea\x08\xff\x08\xca\x08\xcb\x08\xda F\xa2\x01\x10\x06\x14:Z&@\'\x86\x02\xf1\x01\xc0\x02\xf9\x01\xc4\x01\x90\x02\x04$\x0c0N\x8b!\x01\x8a\"\x99\x01\xc8\x02z\xbd\x05\xb7\x02\xbd\x01\xb7\x03\x96\n\xb2\x0c\xd3\x13g\xa0\x06\xb0\x02\x86\x01z\xbd\x02\xf5\x01\xb0\x02\x86\x01z\xf1\x03\xc4\x01\xc5\x01$\x9e\x01\x9f\x01\x80\x04(M\rC*Q\rw\r\x95\x02\x1c\xe6\x02\x8d\x03\xf2\x01\xfb\x06\x80\x05\xf2\x11t\xbe\x01\x04F\x9a\x01Z\xf9\x16\xa4\x02\xa5\x02\xc1\x03\xc6\x02\xd3\x02\xda\x06\xd3\x05\xb5\x01\xca\x02\xa8\x01\x81\x01\x83\x03\xe0\x03\x83\x04\xb4\x01\xcd\x01\xb4\x10\xbb\x10\xbe\x16\xc1\x16\xa2\x10\xad\x10\x8c\x07\x92\x12\x9f\x19\xfa\x18\xe7\x19\xe8\x14\x89\x15\xac\x1a\xb1\x1a\x90\x08\x99\x08\xa7\x01\xfe\x15\xe5\x14\x05\xc9\x01\x9a\x01\x92\x15\xec\x05\xf1\x05\xb0\x0e\xd6\x01@\x05\x01\xec\x02,*\x1f\xcb\x02\xf0\x05\xec\x01\x03\xc3\x01\x03\xf6\x02t\x89\x08\x03\xa4\t\xde\x01\xa8\x01\x032\xd8\x01\x03\xdc\x01\x1a\x01\x10\x13\x15\x85\x13\x88Y\x14\x04\x03\xd7\x01\x01\xb6\x02\xdc\x04D\x04\x05\x0e\x06*H\xebk\x8a\r\xdd?H\xbf\x01\xf6\x01d\xfb\xb2\x01\xac\xb8\x01\x87\xb6\x01\x82\x02\xae\xb3\x01\x9b\xaa\x01\xcd\x08\x03\xb5\x05\xc4\x02\x86C\x92\x81\x01\x99\x81\x01\xddFJ\x10\xf2G\t\xa3D\xd4\x02\xb2\xae\x01\x98\x04\xa7\x04\x86\x04\xc1\x04\xe0\x04\x87\x05\xa4\x04\xd5\x04\xb6\x05\xb7\x05\xe9\xb4\x01\xceG\xa2\x04\xe3\x02\xde\x7f\xe5\x7f\xb9\x01\x86\x84\x01\xc9\xcb\x01\xc6\xcb\x01\xe5\xbc\x01(\x08\x90\x01\x14\xd4\x03\xd6\x01\x04\x93\x01\x82\x05\x01\xe9\x024\x8a\x01\x16T\x8f\x19\xceG\xb8\x01*\x04\xf2m\xf1\xb7\x01\x18*(\x04\x07\x10\xb6\xb0\x01\\HKHKH\xf9\t\xb0\x02\xba\x0f\xe7\xb7\x01\x02\x15\x94\xaf\x01\x91\t6\xc7\xa5\x01\xae\xa4\x01\xa5\xa4\x01\x10\xc2\xa1\x01\x04\x03y\x01\x0c\xb1\t\xc4\x06\xe9(\xb1\x06\x01\xff`\x8e\x08\x8f\x08\xaew\xd3m\xfal\xfdl\xd8l\xdbl\xa6l\xa9l\xe8k\xebk\xa0j\xa3j\xdai\xddi\xdai\x01\x03\x01\xcc\x10\xb0\x02\xb5\x03\xb2\x03\xbd\x04\xba\x04\x9f\x05\x9c\x05\xe1\x06\xde\x06\xef\x07\xec\x07\xdb\x08\xd8\x08\xdf\t\xdc\t\xd1\x0b\xce\x0b\xaf\x0c\xde\x0c\x02\x0b\xe8\x05\x85\x01\x80\x02\x93\x02\xf0\x01<\xbd\x02\xf8\x05\xc8\x02\xf5\xa0\x01\xb4+\x04\x03I\x01j+\x01\xb8\x01F\x0f\x02\r\xe4\x01\x04m\x1c\x1a\xcf$\xbe&\x010\xf1\x040G\x90\x03\xa4\x01\xd1\x01\xa4\x01\xb7\x01\x9e\x01\xbb\x01\xc6\x05.D&\x02\x0fo:a\x04\x03\x11\x01\xb7\x07\xf0\x05\xff\x05H\xb2\n\x90\x01O\x90\x02\x04\x03\x0b\x01\xdf\x03\xc2\x03BI\xa4\x01\x04\x03\xd3\x08\x01\xf9\r\xda\x05\x81\x06\x88\x0b\xa9\x0b\x03\xac\x02\x8ap\xadT\xbdMz\x02\x03\x9d\x01v\x02\x03\x83\x01^\x8d\x01p\x7f\x8eB\xb6\xf3\x01\xb7\xf3\x01\xb2\xf3\x01\x97\xf9\x01\x9b9\x02\x03\xf0-\x98\xc9\x02\x0f\xf5\xa9\x02\xbfN\xe2\x9a\x01\xbf\x97\x01P\xdeJ\x85P\x80\x18p\xa27\xd76\x1c\xc86\xa566:\xfe\x01\xc3\r\x82\x0e\xca\x01F6(r\n\xc0/\xeb.dZR\xf0,\x04\x9b,H\xe0+\xb1+\x80\x01\xfd#\xd0N\xf4\x02\x85\x02\x80\x04\x81Sz\x12\xdc\x02\xf2\x01\x81\x06\xa4M\x04\xe7I\xcf\x04\xc9\x01\x8eP\x04\xbbN\xc4N\x04\xbbN\xc4N\xf75:\xfe\x01\xc3\r\x82\x0e\xca\x01F6(r\n\xf7\x1e\xcc\x1fdZR\xc7!\x04\xc0N\xdb+\xd7\"\xc0N\x04\x1c\xec\x02\x85\x02\x80\x04\xf9Rr\x12\xdc\x02\xe5\x05\x88\x86\x01\xee\x0fL\xbe\x04\x9c\x01\xef\x8a\x01\xf0\x01 \xfc\x88\x01\xc8\x07\xd3\x94\x01\xd3\x08\x04\xf9\x07\x03\x18h\r[n\x16EC\x15\x01\x04\xd8\xb9\x01\x9b\r\xfe\xea\x07\x06\x85\xeb\x07\x80\xed\x07\xf5\xee\x07\x82\xef\x07\x8d\xef\x07\x88\xef\x07\xa7\xef\x07\xbb\xa6\x01\xd0\xa4\x01\xd3\xa4\x01\xd2\xa4\x01\xd5\xa4\x01\xbe\xa4\x01\xc1\xa4\x01\x8c\xa4\x01\x8f\xa4\x01\xbe\x9c\x01\xd5\x80\x01\xc6l\x89\x8a\x01\x86\x8a\x01\x8b\x8a\x01\x9a\x89\x01\x8b\x89\x01\x0e\t\xac\x1d\xa7\x1d\t\xb2\x88\x01\xa5F\x03\x9cF\xa7\x86\x01\xe2\x85\x01\x85S\xdc\x9f\x02\xf5\xc8\x02\xcc\xcb\x02\x1e\x04\x05\xeb\xba\x01\x04\x02\x03\r\xad\x91\x01\x10$,8\x94\x01\x04\"N$^\xea\x059\xe0\x024\xcb\x01\xad\x04\xc0\x14\x04\x05\x14\xda*\x81*\x04\t\xcc\x01\xbcvz\x01\x83t\xa1\x05\x02\x13R\x02\x07\x1f\xd6\x01\xc4l\xc0\x0e\x95}\x01\x8a\xea\x01\xcf\xe3\x01\x1a\xcd\x06\x84\x01\xa6\x04\xa9\x04\xd4)\x01\xb6F\xcfH\x98J\xf5I\xe7N\x17\x05\x91\x02\xb8J\x92\xf3\x02\x99\xba\x03\xbb\x011-\x1f|\x1bN{E\xb6[\x02!\xe2\x1b\xb9w\xa60\xcf\x015\xc5.\xdaw\xb3\x1e\x89\"\x98@-\xb3G\xe3\x18\x0b\xde\x18\x0e\x157\xe3-\xd4\xb3\x03\xe7\xdb\x02\x85\"\xa76\x06\x8e\xb4\x03\x8f\xf7\x02\x90\x1b\xaf\x1b\t\x97\x07b\xd3\x01\xd0\x01\xf9\x01\xdf3\x963\r\xab3\xcc\xb3\x03\x07\xf7\x92\x02\xb8\x92\x02\xbb\x92\x02\xb6\x92\x02Q\x07\xe7\x91\x02\xb2\x91\x02\x07\xb1\x91\x02\xf6\x90\x02\x07\xf1\x90\x02\x96\x90\x02\x07\x91\x90\x02\xc6\x8f\x02\x07\xc5\x8f\x02\xc4\x8f\x02\x07\xbf\x8f\x02\xce\x8e\x02\x07\xc9\x8e\x02\xe0\x8d\x02\x07\xdb\x8d\x02\xbc\x8d\x02\x07\xb7\x8d\x02\xa0\x8d\x02\x0b\x97\x8d\x02\xf4\x8c\x02\x0b\xeb\x8c\x02\xda\x8b\x02\x0b\xd1\x8b\x02\xa0\x8b\x02\x07\x9b\x8b\x02\xc8\x8a\x02\x07\xc3\x8a\x02\xfa\x88\x02\x07\xf5\x88\x02\xc2\x88\x02\x07\xbd\x88\x02\x90\x88\x02\x93\x88\x02\xf2\x87\x02\xf9\x87\x02\xde\x87\x02\xe1\x87\x02\xda\x87\x02\xa7\xf1\x01oh\x7f\xb5\x15\xee\x14\xb6\xf2\x01\xa7\x87\x02\xdf\x8a\x01\xda\x91\x03\xf3\xfc\x01\xb4\xfc\x01\xbd\x86\x02\x8c\x86\x02\xf5\xfc\x01\xb8\xfc\x01\x07\xcd\x85\x02\xca\x85\x02\xfd\xfc\x01\xec\xfc\x01\xdd\xfc\x01\xd8\xfc\x01\x9f\xfd\x01\xf2\xfc\x01\x87\x85\x02\xbe\x84\x02\xe5\x84\x02\xa6\x14\xf9o\xfe\xd8\x02\xa9\xfb\x01\x81^\xa5:\xa4\x96\x01\xac\xfd\x01\xf1\x93\x03\xd4\x95\x01\xaft\x03\x84u}\x05\x8a\xfc\x01\xb9\x87\x02\x83\x07;-?\xc1\x88\x01\xbe\x88\x01\xdb\x88\x01\xec\x87\x01\x93\x01\x93\x87\x01\x9e\x86\x01\x8d\x02\x03\xdb\\\xb2\xe1\x02\xaf\xac\x02\x03\xa4\xaa\x02\xc3\xfb\x02\x82Mvb\xb9\x01\x88\x01\xa3\x01\x03\xf9L\xacU\xf8\x0cn\x9b\x1b\x9a\x1b\x08\x02\x03\x112\xef\x1a\xc2\x1b\x10\x18\xb1\x1c\x01\x96\x06\xf8\x16bN T|=\x0e\xcb/t\xc0.\x02\x19\x1d\x9e\x02\x04\xe33\xcc3(%\x19\xd2\x01\xb3\x02\xd6\x02\xba\x02\xff5\x8d\x01\xf41\xb6\x05qZ\xbd\x05\xbe\x02\x1a\x0e\x0b\r\xef\x02\x918\xcc?8V\x14@\xa8\x08\x01\xb6\x02\x01\x90\x01\x01z\x1a:\x032\x91\x89\x01\x8e\x89\x01@\x03\xbe\x85\x01\x01\x9d\x8e\x02DN\x1ff\x17\\r\xf5\x02\xbe\x97\x01\xad\x96\x01\x8c\x01\xb5\x01\x90\x95\x01\x8f\x96\x01\xc4\x03\xd7\x03\xa2\x03\x16+\x9b\x02\xfa\x01\xa3\x02\x01\xa6\x9a\x01\xb9\x8d\x01\xbcf\xd1u\x04\x04\xf1\x01\x86u\x91u\x90u\xd5u\xba$\xd8+\xbbN\x9c\"\x9f\"\xc8!\xe8,\xbbN\xb6!\xf83\x02\x03\xa94\xb6-\xbbN\xd8 \xac4\x02\x03\xd54\x8c.\xbbN\xcc\x1f\xec.\xbbN\xfc\x1e\xb8/\xbbN\xfa\x1e\xbe/\xbbN\x8c\x1e\xd8\x11\xd4\x1e\xbbN\xe8\x1d\xd00\xbbN\xe2\x1d\xfa6 !\xa37\x0b\x8e1\xbbN\xaa\x1d\xfc6,-\xaf7\x0b\xd01\xbbN\xe2\x1c\x8a7\x02\x03\xa97\xda7\x02\x03\xe98\x0b\x963\xbbN\xf4\x1a\xcf\r\xa7\r\xa6\rb\x19\x02\x0b\x17\x08\x02\x07\x0c%\x88A\xbfN\xc2\x1a\x889\x02\x03\xe39\xb09\x02\x03\x93:\xbe5\xbfN\xf6\x18\x83\x1b\xd6\x1a\xf45\xbfN\x96\x18\x99\x18\xf8\x17\xff\x17\xe4\x17\xe7\x17\x9e\x17\xa5\x17\x8a\x17\x88?()\xad?\xa6\x0f\xd1\x0f\xb9\x16\xc4\x15\xfd\x16\x02\x04\r\xcb\x02.Q\x9e\x17\xeb\x10\xaaN$%\xd5N\xde!\x87\"\xd6J\xbfN\xe4\x03I\x9d\x03\x98\x03\xbc\"\x92u\xdfu\xe6\x0f\xeb3\x86#\xe2\x10\xeb3\x84#\xaf\x10\xe2\r\xe0\x01\xe9!\xa8\xa9\x01\xab\xab\x01!\x96\xab\x01\xb1\xab\x01\x96\x01\x99\x01\x94\x01\xec\xa9\x01\xc9\xab\x01\xd8\x01\xdb\x01\xd6\x01\xdc\xa9\x01\xd0\x10\xe7\x10\xcb\xa9\x01\xc6\xa9\x01\xcb\xa9\x01\xbe\xa9\x01\x9d\xa7\x01\x9c\xa7\x01\x9f\xa7\x01\x8f\x02\xbe\x88\x01\n\xc9\x89\x01\x1e&\x01P8\x14\x0e\xc7\x01K$0:a\x9e\x01\xc1\x01\xa4\x01\xd3\x01\x01\xa6\x04\n\x901\xe9\x05x\xee\x03\xe0\x0e\xec\x06\xc8\x08\xb9O\x0b:\x88\x03\x07\x8e\x01\t\xca\x02t\x0e\x97\x03\x01\n.\x95\x08\x03z\x92\xb3\x01\n\r&\x18\xa6\xe9\x01\xa1\xe9\x01\x17\x05\x84\x01\x82\x01\x9d\x81\x01~\x9f6\x07\x04\x05\xaa;\xbc\x02\xc7\x02\xf8\x02\x81\x03\xcc\x04\xee\x01\xf5\x01\x01\xcf\x024{\xa9<\xa0<\xc8\x03\x01\x81>\x036\x1bB\x14R\x02\xfa\xae\x01\x81w\xeev\xb7\xad\x01l\xfc\x92\x01\xc7\x95\x01V\x83\x01HW7\x1d\xe83b\x81\x01\xb71\xf8\xa3\x01\x11\x92\x0b\x13[\xd1\xae\x01\x9e\xae\x01\t\x04\x11\xfd\x02\xb1p\x91\x0ee$\x02\x073\xd4\x08\xb6\x03\xf7\x06\x83\x03\x9f\x02\xa4{Pm\xd6\x06\xff\xb1\x01\x84\x01\x9f\x01\x88\x01\x9f\x01\x8e\x01\xb7\x01\x9a\x01\xcf\x01\x04\xbe\x02\xce\xb5\x01\x97\xb8\x01\xae\xb7\x01\xd0\x03\xeb\x03\xce\x03\xeb\x03\x04\xed\x03\xf5\x08\xd6\x01\x10eX\xff\xa8\x01\xa0\xa8\x01\x06\x11\xaf\x01\x88\x018\xd7\x01t\xa1\x01#\xaf\xa5\x01\xae\xa5\x01\x10#\'\xaf\x06\xc9\t\xb1h\n\x1b\xda|\x1d\t\xd5\x0bq\xaf\x08R!G.\x81\x01\xad\x7f\x10\x04\n\x89\x13\xc0\x86\x01\xe9\x83\x01\xe8\x83\x01\x9fi\x96i\xafo\xb1\x14\xfa\x13\xac \xaf \xf9\x13\xb6\x13\xb9\x13\xb4\x13O\xe7\x12\xec\x11\xef\x11\xc8\x11\xcb\x11\x92\x11\x95\x11\xd0\x10\xd3\x10\x8a\x0f\x8d\x0f\xd4\x0e\xd7\x0e\xda\x0c\xdd\x0c\xa4\x0c\xa7\x0c\xf6\x0b\xf9\x0b\xdc\x0b\xdf\x0b\xd8\x0b\xc8r\xa3~\xb4}\xb7}\xb2}\xcb\x7f\xd5\x03\x8c4\x90\xf3\x02\xed\x91\x03\x02\r\x05t\x01\x93\x0c\x05\x90\xe8\x02\xab\xe7\x02,Zh\x01t\x08\x1ef0\x88\x01\x06:\xa0\x01\x11<\xd8\x01\xc3\x01\xd0\x01\xcd\x01\xd4\x01\xe3\x01\xc6\x034\x1d4\x1db\x15\xc5\x04\x90\x05\x7fD\xa8\x01\x86\x01\xa0\x01:\xbe\xff\x02\x8d\x0f\xa3\xda\x02\xcd\x02\xb4\x02\xa7\x03\x9a\xda\x02\xf9\xd8\x02\x98\xcb\x02\x1f\x03\x8c!\xe1%\xd4]]Z\x97\x01\x94\x01\xeb\x01\x8b]\xe0\\\x04\x19\x07\xed\\\xc5\xf3\x02\xc0\x01\x08\x046\xa7\x023\x07#\x0e\x0f\r\n\x0b\x1f\x94\x01\xa7\x01#\x19\x13d\xf2\xf1\x02\x97\xf3\x02\x90\xf3\x02\xe3\xe7\x02$3\xac\xe7\x02\xcf\xf2\x02\x9a\xf2\x02\x93\x03\xb3\xe4\x02\x90\x0e\x18\xb0\x03y.m\xf8\x01\xfb\x01\xf6\x01\xfd\x01\xc1\x01\x031\x1f\xf3\x05\xec\x04\x0f\x96\x01\x9b\x01-\x0f\xd6\x01\xdb\x01\x0f\x0b\xce\x01\xe5\x01\x17\xb9\x03\x0f1\xb1\x01^S\'QPe:I3U\x11\x0e\x19AE\x0e_a\xa5\x01\x05\xe4\xdd\x02\xcf\xe8\x01 \x0el\x81$\x8a$\'U\x1b\xeb#\xe8#\xbb1\xd8\x97\x014\xe5#\xd4$\xa7$\x96#\x84\x02\x0e\xcd\x01\xe6\x01\xa1%\xbe#\xa0\x02\xb5\x02\x15\x9b#\x8c%\x18\x1f@M8\xa5\x02\xb2\x01\xbd$\xaa$\xb7$\xb0$\xd7$\xc6$\xc13\x9a{\xdc#\x048\x1a\x81$\x86$\x19+\xc5#\x96#\xd1#\xa6#\xc14\x92\xa0\x016><_\x01\xbc\x01\x10H\x16\xee\x10\x18\x04\xc8\x16\r\xe1\xfe\x03\n\xbc\x03\x02\r\xa1\x02\x03\x042\x9b\x01\x03\xd1\x010\x0c|kY\x14\xd4\x0e\xd5\x0e\xec\x0e\xfex\x0f\x01\xd5t\xa6\x03`\xe1\x01\x01\x9d\x02\xf4\x03\x8d\x04\x01\x85\x0b\xf2M\xad\x1f\x8e@\xadu\x07\xce\x01\xd9\x011\x88\x02\x89\x02\xce\"\xdc\x03\x08\xad\x03\xee\x0b\xef\x15`\x81\x01\\\xd9\x01\xc4\x02\xb5\x03K-Bi\xc5\x05\x05\xcf\x03\x04\xa6\x03\x0fU)\x8f\x01#K\x17\x04\x0f\x0b\x0f\x01\xb2\x91\x01\xb5&\xf3@\xe1%\x88\x01d\xb8&\x01*\xe6\x08\xa4\t\x08\x04\x0f\x89\x022\\8\x1eX\x03\x01\x04@\xef\x02\x15%T{\x01\x03\xf6\x01P+\x08\x12\x91\x06\xd4\t\x02\x03\xd3\t\xe6\x08\x95\x15\xac\x19\xd0\x01\xa72\x8c$\xeb%\xe8%\xca0\x83R\x91\x1f\xd0\x03\x83\x04\xf2\x03\xf9\x03\xf2\x03\x99\x04\xbe\x03sf/\xc1\x03\x0b\xec1\xa32\x9c\x03\xb3\x05\x0b\xc44\xc94\x0fa\xb85\xbb5\t!\xdaU\x80\x04\x1b\x1f*\x95\x01\x87\x05\x0b\xb9\x1d\xeb5\xa4S\xd5\x03\x18\xe6\n\xd9\x04\xb6\x04\xc1\x04\xf5\x02\xd0\x07\xd7\x07\x07 AW-\x1dIg\x07\x86\x03\x95\x03\x1d\x0b\xbd\x19\xeb5\xa8O\x88\x02\xb3Q\xb2Q\x9d\x02\x10S\xe3\x18\xef5\xcaN\xc1\x18\xc0\x06\xac\x16\xca\x01/\xd5\x1a\x9c\x15h\xbb\x0b\x95\r\x8e\x06\xbf\x06\xec\x17\x97\x18\xac\x18\xc1+\xf1\x07\xc4.\x851\xca3\xf6\x01\x87\x02\xee\x01\xff\x01\xea\x01\x8f\x02\xfe\x01\x89\x02\xe98\xa9\x02\xac%\x8f&\xda%\xe1&\xac&\xdb&\x91\x0f\xdc\x9a\x01\xf1\"\xcfD\x930\nC\xcc0\xcd0\xc60\xc90\xd00\x98D\x99D\x92D\xadw\xeev\xf9A\xd0A\xd9A\xe0@\x05\xc9@FC\x93\x10\x92%\x1d7[1c\xd5\"\x90\x06\x90\x03\x0b\x95\t\xc8\x03\x9b\x06\xbe\x03\x0f\x15\x83\x04\xfc\x98\x01\xbf\xbb\x01\x08\x0c\x15\x07\x04/\x14\x04\xbb\x04\x96\x01\x0e\x16\xde\x02\xa9\x02\xc6\x04\x8f\x01N\nC\x14\x12\x84\x01\x18%5\xe2\x014\xf4i\xdc\x02\x8e0\xc9\x9d\x01\x8c\x9d\x01\xc8\x13\xa5\x16\xd5y|\xc6\x04\x15%\xbat\xf6\x15\x07\xd1\x16\xe3s\xbcr\xb4-\xc3-\xac-\xe3-\xfbo5\t\xeao\x9e.\xad.\x96.\xc1.\xd4s\xb1\x01\xff\xe8\x01\xaav\xa1\x96\x01\x88\x96\x01\xf3\x99\x01 o\xc4\x03\xbc\x01 !\xe3\x01\xde\x01\xf9\x01\xbe\x01\xd1\x01\xc0\x01\xd3\x01\xc4\x01\xcf\x01\xf7\x03\xcc\x02\xd5\x02\xbc\x02\xd1\x02\x82\x03\x8b\x03\xae\x12\x8c\x01\xc5\r\xae\x0cx\xc5\r\xc6\n\x90\x01\xf5\x0b\xb7\x05\x86\x10\x98\x8c\x01\x85\x97\x01\xa2\x96\x01\xbc\t\xf3\t\x89\x96\x01\xfb\x04\xca\x9a\x01\xcd\x9a\x01\xc8\x9a\x01\xdf^\xac^\xde\x1b\xf1\x1b\xb5]\xcd<\xca<\xa99\xa8<,\x7f\xf7>\xe8>\x0f\xdb>\xd6>\xb7\x03\x02\x03+\xf3:\xd6>\xe3\x03\xf0\x14\x0f\xdaH\x9f\x98\x01\xb8\xa4\x01\xa3\x0c\xf3]\xc2]\xe5]\xd4]\xcb\x98\x01\xe0\x97\x01\xa5]\xcd9\xd2>\xa0X\xe5X\x8f>\x8a>\xb9\x04\xac\x04\x13C\x89\x04\xfd\x02\x9f6\x9a6\xe0\x04\x19\x15\xcd:\xc8:\x96\x07\xe1A\xdcA\x94U\xeb\x91\x01\xd4\x91\x01\xdb\x96\x01\xa8\x96\x01\xbf\x91\x01\xaa\x91\x01\xb5\x10\xb0\x01\xbdu\xb8u\x17\x97w\x05\xa5\x10\xfc\x0f\x94w\xf1\x81\x01\x9a\x81\x01\xe9\x86\x01\x8e\x13\x8c\x04\xad\x05\xaa\x05\x93\x06\x90\x06\xd7\x06\xd4\x06\xdb\x07\xd8\x07\xf3\x07\x8e\x03\x93\x03\xf7\x0e\x11\x80\x17\xd3\x04\x02\xf4\'\xda\x0c\x1c@\x9d\r\xe0\r\xcf\r$*\x84\x0e\".\x03J\x0cR\x84\x01\x1b\x02\x134\x01d\x12V\x014\x1e\x1a 4\x8f\x13\x98\x13\t\xdb\x13\xe0\r\xd2\x04$\rG\x15\x12\x0f\x1d\x05\x0b\x04\x02\x03#\x98\x02#\x11\x07\x05\x97\x05\xf9\r\xdc\r\xfd\r\xd0\r\x81\x0e\xda\r\x15\'\x1f\xeb\x0e\xdc\x11\x8a\x01\x02\x1f\x19\x88\x01\xdb\x01\x13;\x16%\xb2\x02\xdd\x02\xcb!\xe0c\xb6\x0b\x02\x114\x12\x01Z.\x10&\xb8\x03\x0c\x04\x07<\x10\x92\x01\xbd\x01\x08\x04%\xa1\x03\xa6\x06(\xbe\x02\x94\x05\xfb\x04\x03\xfe\x05\x07X\x18H\xdc\x01@\"\x10\xc1\t=\xb8\x03\x04\x03\xe5\x01\x94\x0b\x12\xe6\x01\xcd\x10\xf9\x06\xf6\x06\xab\x07\xa8\x07\xe9\x07\xe6\x07\xef\x08\xfc\x05\xbd\x06\xae\t\xc9\t\x94\x03\xbd\x03\xc2\x1e\x1c\x9d\xb1\x01\xcc\x15\x01^\xb4\x02)n\xca7\x857\x92\x03Z\xff\n\x8e\x84\x01\xf7\x96\x01\xda\x12\xde8Rb`\x08\tJ0\x0cB\x12P\x07QT$Z\x94\x04\xbc\x01\r.\x05\xe3\x03\xc8\x04\xc1\x07\x9dU\x06U\"8\x05/\x0b\x03\xa46,\x06>\x1c\xc8`\xb3a)\x0b\x02\x15\xf6\x02\x86\x01\xbb\x02\x0c!\x96\x03\xc3\x02\xa6\x01\xdc_\x06\xaf](\x17J\x92_\x8b^\x08\r\x12\x0f\r\xdd\x02\x9e\x04 _\xd8\x01B\xda\x10\x0f\x80J\xe5\x99\x01\xda\xa4\x01\xff\n7\xc9\x99\x01\xe2\x98\x01\x04\x03\xb1\x01\xbd^\xd0\x04\xb9<\xf43\x13/\n\x0f\xae\x04\xd3\x04\x0b#\x86\x02\xe4\x02\x81\x03\x01\x82\x06\n\xaa]\xfb]\x03\x01\x90;\x9a\xbf\x02\xf3\x95\x02\x90\x95\x02\x93\x95\x02\x9e\x94\x02\xa1\x94\x02\xa2\x93\x02\xa5\x93\x02\xd3*\xe4\xc1\x02\xbf\xc0\x02\x85rvd\xa5\x02\x8a\x04\x01\x8e\xaf\x03:\x1c\xc9\xaf\x03\x94\x02}\x82\x02\xce!6\x18I&\x02\x14]\x01\x97\x03\x03\x85$u-\xc6\x03\x97\x04\xc4r\xb3C\x90\x85\x03\x1b9\x05\xc7\xc1\x02\t\x97o\x05\xc45\xbb\x0f\x01\x92t\x83\x96\x01\x81\x01\xae9\xae\xd9\x02\xb7\xfe\x01\x12\x91\x9f\x01\x12\xf4>\x9e\x04\x9f\x04\x94\x04\x04\x04\x11\xa9\x02\xb6\x02\x1f$\xb5\x02\xae\x02\x9d\x04S\x01\x04\x03\x8d\x01\x8f\x01\xf2\x11\xdc\nL\x9c\xc0\x02\xf3\x94\x03\x06\t\x12$\x0e\x08\tX\x8e\x02\x86\x01\x14<\x18\x83\x01 ,\x02\x0f\t\x02\x13\x1fTYt\x18\x15\r\xd0\x01\x166\x18\x8f\x01*L\n\x17\t\x02\r\x11=\x03\x96\x01\x02\r\x88\xa9\x02\x84\x01\xe0\x96\x01\x14\x0f\x02\x03\r\x03\xcb\x96\x01\x8b\xae\x02\x0e\xec\xac\x02\x81\xad\x02\xc3\x023\'\x03\xc8\xca\x03\x04\x08\x1f\x0e\xa5\x94\x03\xfd;\xb6.@\x08\x90i\xc8\x01]\x01\xca\x01\x01\x8e\xef\x01\x88\x02\xf4\x11\x87\xa7\x02\x04\n\xfd\x02\x0e.\x16\x84\xa9\x02\xfd\xd8\x02\xdb\x1d\x05\t\x05\x9a\x1e\x0f\xa7\x1e\x1d\x03\x92c\xc3\x06\xcf\\\xc9\x17\xd9\x0e46m\xda\r\xca\x18\x8cvV\x9f\x01\xee\xfe\x01\xb9\xfd\x01\xb8\x81\x02\xbb\x81\x02\xc8\x80\x02\xcb\x80\x02\xca\x80\x02\x94\x04\xc1\x84\x02\xe6\x83\x02\xe9\x83\x02\xa8\x83\x02\xab\x83\x02\xd6\x82\x02\xd9\x82\x02\xc4\x81\x02\xc7\x81\x02\xc6\x81\x02\x92\x03DR\xcd\x85\x02\xbe\x86\x02n\xed\xf1\x01\xad\x15\x04\xe2\x87\x02\x1c\xf1\x87\x02\x94\x88\x026<\xd2\x01\\>\x9e\x010 (rz\n\xc5\x8f\x02\x9a\x90\x02dD\xb1\x91\x02\xf0\x91\x02\xe7\x91\x02\x04\xbc\x92\x02H\xf7\x92\x02\xa6\x93\x02\x80\x01vd\xc3\x12\xc7\x84\x02\x92\x85\x02\x1c\x14\x05>\x93\xfd\x01\x86\xfe\x01\x91\xfd\x01\xee\x0b\xf0\xfd\x01\x9f\xf8\x01\x80\xd5\x07\x95\xd5\x07\x90\xd5\x07\xed\xd6\x07\xb1\x9a\x01\xac\x9a\x01\xa4\xd9\x07\xae\x06\x01\xc1\x95\t\x88\x84\x01\xafv\x18\xf8\x01\x0c\xd6\x13\xb0\xe4\x02\xb5\xe4\x02\x1a\x01\x0c\x8e\xe4\x02\x9f\xe4\x02\xae\xe3\x02\x9b\xe2\x02\xe0\x01\xf0\x01\xe4\x01x\x08\x81\x01\x06\x02\x8e\x01\xa7.\x01\x12\x04\x07P;\'\x01\x8c\x02\x81\x01\x98\x01\x05\x02\t\x1e\x0b\x1b\xc2Y\xe7[\xce\x01\xf7\x01\xf4\x01\x9d\x01\xd4\x9b\x01\x032\xf7)\x8e9\x9d\xab\x01\x9c\xab\x01\x83t\x05s\x01\xa9.\x16\xe0\x02\x83\x03\x05\x8eX\xeb\n\xcc\x1b\x0b\x1b\xc7\x1bK\x88\x1b\x8b\x1b\xcbBJ\xff\x03\x84\x01L\xec\x03.\xc6 \xc0\x05\x9aE\x04(\xdf\x01\xc7C\x9c\x01\x1c\xdc\x01Z\xe8\x02\x1a^\x8c\x0c\x80\x01>8\x1c\xd0\x01\xe6\x01\xc2\x01\xe5D\xb8Ev \x80\x01\xa0\x05\x86\x01h\x94\x01\xb4\x0b\xc7\x17\xd1\x14\xfa\x97\x02U\x04\x02\x03\x11\x1f\x0b\xff\xd8\x02\xae\x03\x1e\x06\x0e\x0f\x1d\"j\xda@\x14N\x015\xfc\x08\xb7\x07\xf2\x07\xa8\x01\x9f\x0b\xb8\n+\xa5\n\xea\x01\xce\x08\x86\x02\xea\x01\xa2\"N8\xd4\x01\xcc\x01V&\n\xb6\x01T\x92\x01\x9e\x01\xd4\x01j\x90\x01\x98\x014\xeb\x10\xb7 \x81\x04\x86\x04\xf00\x97\x01\x8f\x01i\xd3\x01\x9d\x01\x91\x01S\xb5\x01\t%U\xcb\x01\xd3\x017M\x05\x96$\xc8\x01\xda\x01\n\xb7K\x80\"\xed\"\x8d\x01\xb8\x03\xc1\x03\xe8#\x85$\x04\x0b\x81\x01\t\xe3\x07\xc6\x07\xef\x07\x98,\xe1$\x04\xd3\x08\xf8\x08\x17\xed\x08\xdc\x07\x83\x05\xeb\x02\xb6\x02\xd9\x02\xde\r\xe7\r\xe8-\xeb-\xbb@\x90C\x91C\xb6H\xdbH\xd6\x82\x01\xc2)\x92\x04\x95\x01\xa2\x01\xf5\x02\xa5\x03\xe9\x12\x90\x0b\xbb\x0f\xc4\x0e\x89\x04\xaa\x16\xa9\x13\x8c\r\x9e\x05\xaf\x05\xfa\x02\x89\x03\x86\x03\x87\x03\xbd\x03\xba\x06\x8b\x06\x83\x10\xaa\x0f\x01\xc6\t\xcd\x18\x10\x8a\x01\x10\xcc-\x02\x97\x1f\x12\x9a\x1e\x97\x18\xbf\x06\x9a^\x04\x0e\xb7\x01\x05\x88\x04\x95\x04\xa4\x04\xad\x04\x9f\xfc\x01\xf1\r\xe2\xb7\x01\xd3\x19\xdc\xed\x01\x03\xcb\x1b\xab\xdc\x02\x06\x03\xb8\xe9\x03\xd7-\xa1\x05\xb91\xde6\x81\x05\x1b\x04\x07\x03\xb91\xe8&\xce\n\x1f\x1c\x1f\xa3\x0b\x1f\x18cC\xd1\x01\xb5.\x03\xd7\xe5\x02\"\x01\x10\x11\x08\x12\n\x82\x1e\xa1)\x96\x07\xf8\x0f\x9b\x0f\x01\xe2\x0f\xcd\x0f\x8c\x10\x91\x0f\x14\xec\x0f\xcb\x10\xf8\x0f&\xcf\x10\xda\x0f%\x8b\x10\xea\x0f\r\x89\x10\x96L\xec&\x08\x0eR\xf5\x01\xfc\x01\x03C\x15\x11\xc9!\xe8D\xe0%\x03P\xa5\x01\x88\x03\x02\x8b\x03\xd8\x03\xbb#\x87\xba\x01\x0e\x83\x01\x05\xb0\x92\x02\x97\x92\x02\x1c\x048\xa7\x01\x1e \x0c\x1e\x08\t)X\x12\xbe\xaa\x02~\xa5\x01\x03`\x8f\xa9\x02\x8a\xaa\x02\xdf\xab\x02\x11\x1bY\x1d\x0fo\x84\xae\x02\x83\xab\x02\x9c\xaa\x02\x97\xa9\x02\x1b\x9c\xa9\x02\xab\x01\x80\x035\xba\x01\xc5\x1d\xa5\x92\x02\x88\x8c\x02\xad\xc1\x01\xdb\x01\x88\r\x08\xf3\x08D\xda\x06\'\xbb\t\x03\x98\r@4\x08\x14\x0e&\x0c.\\TE:V\x0c\xab\x01\xb2\x01\x0c\x12\x03\x14\x0c\xf3\x01\x04\x8c\x03\x0c<\x9d\x01\x03\xcc\x01\xb5\x01\xf4\x01\x06\xad\x08\x03\x97\x07\xc2\x10\x06\x04\x10\x03&\x14\x04\x03A\x16\xf3\x06\x97\x0f\xc0\r\xca\x04\xd8\x02\x93\x02\x8e\x02\x91\x02\xfc\x01!\xf5\x01\xea\x01\xed\x01\xcc\x01\x15\xbf\x01HT/\x1da\xdd\x04\xd6\x04\xe5\x04B\x85\x01\xbc\x02\\\xc0\x01\xd9\x04\xbc\x02\x03\x04\x1b;\x19\x15%\x8b\x0e\xf8\t\xc0\x02\xe7\x02\x80\x03\xcf\x07\xac\x10n\x05\x17\x15?\x8f\x12\xc6\x08\x89\t\x82\t\x91\n\x9e\n<=\x19\r\xed\n\xfd\x01\xe8\x01\xc3#\xca\x9e\x01\x04\x14\x19\x01\x93\x01\x05\xbd\t\xf4\x0b\xa10\x03\x94\x02\x03\x98)\x03\x96\x06$\x04\x0c\x018\x04\x0c7P0.\x04 (\x04\x0584\xab\x02\x86\x03\xa5\xb4\x01\"\x01\x12\x1d\x17\x84\x01\x01\n\x15\x01\x03\xba|\xd5{\xd0|\xbd|\n\x08\xe1\x02(\x08\x0f4\"\x0e\x05\r\xe0\t*&\x1e\"\x0c:\x10\x08\x12:\x08\x1a\x0c\x16*\x91\"a\xaa\xbf\x01\xc7\x02\x85\xc0\x01\xe4\xbf\x01}\xb5\xae\x01\xac\xae\x01\xaf\xae\x01\xae\xae\x01\xa1\x98\x019\x159\x08\x02\x07-Z_1\x04\x18\x0b\t\x03\x1fA\x1d%\x1d\x19\x98\x9a\x01\xdd\xac\x01\xb0\xac\x01\xb3\xac\x01\xaa\xac\x01\xad\xac\x01\xf0\xab\x01\xd7\xb3\x01\xec\xb2\x01\x87\xab\x01\xa4\xaa\x01\xa7\xaa\x01\x9e\xaa\x01\xa1\xaa\x01\x90\xaa\x01\x8b\xb1\x01\xbe\xb0\x01\xc5\xa9\x01\xe4\xa8\x01\xe7\xa8\x01\xe6\xa8\x01\xed\xb1\x01\xca\xbd\x01\xe7\x0b\xb2\x0b\x9b\xb4\x01\x9a\xb4\x01\xc6\x01\xbb\xbd\x01\xb0\xbd\x01\xd7\xb5\x01\xd4\xb5\x01\xe7\x0c\xd0\n\t\xdd\n\xdc\n\xf5\n\x95\xb0\x01\xe0\xbb\x01\x87\xb4\x01\x86\xb4\x01\xd7\x0b\xcc\x0b\xfd\xb3\x01\xfc\xb3\x01\xd9\x0b\xce\x0b\xf3\xb3\x01\xf2\xb3\x01\xeb\x0b\xe0\x0b\xe9\xb3\x01\xe8\xb3\x01\x93\x0c\xd7\xa7\x01\xa0\xa7\x01\xa3\xa7\x01\x9a\xa7\x01\x9d\xa7\x01\xde\xa6\x01\xe1\xa6\x01\xa2\xa6\x01\xa5\xa6\x01\xa4\xa6\x01\xcd\xa6\x01\x1a%\r[\x19\x86\xa7\x01\xc7\xa8\x01\x14\x1d\x16;74S!\x0f\xdb\x02\x15\xc2\xa9\x01\xe1\xac\x01\xd4\x9f\x01\xb5\x9c\x01\xd2\x99\x01\xd5\x99\x01\x84\x93\x01\xff\x93\x01\x05EC;\t\x13\x9e\x91\x01\xff\x01\xf1|\xbc\x01\x02\x07%\x17s\xce{\xdd{\xb2{\xb9{\x80{\xd3{\xd6y\x96\n\x06\x08\x06\x04\x08\x04\x14\x1b*\x0f \xf1\x04\x9a\x05\xc0\x01\x14\x04\"(\x0c\x95\x01\x04\xd0\x01\x04\x08\xbb\x01\xdb\x01\x80\x02*\xd5\x08\xe8\x05\xfa\x02\x1d\x19\xb3\x02\xa7\x01a\x08|\x04\x11/Cry\x99\x04\xd8\x08\xe3\x08\xd0\x08\x97\t\x86\t\x91\t\x90\t\x15\x87\n\xd2\x08\xb4\x01+\x06\x1e%\x1fDU\x06HY9\xe7<\x8a\xb8\x01\x10\x0c06\x14\x0c\x0e\x07\x16\x17\x1e\x04\x0c\x10[\x8a\x01\x0cPV\"h\x1e\xbd\x03\x9d\x05\xe6\x07h\x95\x01\x1190i\xd6\x02\x02\x13\xdb\x03+\x08\xae\x01\x02\x0b\'\x81\x01\xc0\x01\xdb\x017\x13\x0b\x93\x04\xb4\x0c\x1a\x04\x08\xb1\x01 \"&\x0cJ4b\x05vIb\x0bR^\xfd\x15\x03\xca\x13\xfc\x01@=\x05\x07\xb0\x02\xfb\x06\xba\x04\t\x92\x03G\x0e0G\x01\x92\x01\x04\x05\x0c\xc9\x03\xa0\x04$\x8b\x15\x92\x16\x01\x12\x06\x03\x0c@2 \x0c\x18\'\x03\xa1\x17\xd4\x15\x87\x16\x9a\x0c\xb6\x0b\x95\x01\x8c\x01\rmN\'3\x03\x1dAa\x93\x04\xa9\x01x\x8b\x01\xb6\x04\xd5\x04\xc0\x03\x85\x04+M=\x1d[\xe1\x0f\x88\x16\x81K\xfa\xcd\x01\x12\x04\x11\x04\x07\xeb\x01\xff\x04\xd2\x05\x0b.\x14\"2\x012\x08\x01>\x01\xa5\x01\x8a\x01\x1a;\x1d7\x1d1\x03!\xa3\x04\x03\x01\xcc\x06\xaa\x024\x01\x1a1\x01\x197\x95\x08\xb4\n\x08!|\x08&\x12*\x0c\x1cSh]\x15\x0f\x01\x19}\x80\x034\xf1\x02\xb4\x03f\n\x06\x0c\x14\x97\x0f\xa6\x0e\xd3\x0e\x13\x80\x0e\x1a3\x19\xd9\x0e\x8e\x11Q\n295\xaf\x03\x1d\xf9\x06\xb9\x07\xce\r\x8fE\xea\xc9\x01b&\x0cP\x08\x16\x1a\x04\t\x1c\x08\x0c&\x08\x1c\x9d\x01\xca\x01\x08\x1e\xb1\x12\xf8\x12\x1e\xdd\x12\x98\x13\x1e\xe7\x0f\x10Z\x9c\x10\xaf\x0f\xbe\x0c\xf4\x04\x1a\x04\x0ca\x068\x08U4\x08\x1e\x07\x13\x07\x1b\x05\x11\xc3\xc1\x046\x1c\x08\xd8\x0ev\x81\x02\xb5\x0c\xce\x0e\xd8\x02\xac\x019W%\xcb\x11\x1d\x133\t\x15\x1d\x1b\xe4\x0c\xbe\xc3\x02\x8b\xc3\x02\t\r\x8a\xfa\x01\xa2\'\x010\x04 9\xd0\x01\x87\xa5\x02\x0c\x04\xd3\x01\x96\xc2\x01\xaf\x05\x02\r\x1b\x04\xd5\xb4\x01\xd0\xb4\x01\x81\xb4\x01\x02\x19\x01\xb0\xa8\x01\xf9\xba\x0149\x9a\x01\x08\r[\x1e5\x01\x19\xfc\x01\x9c\xc0\x01\x91\xc0\x01\x83\x01\x0c\x1e\'\r\x03\xb4\xc7\x01\xb7\xc7\x01\xf4\x01\x14:\x01\xb9\x02\xe6\x02.\x93\x01\x1e\x1f\x19\x03\x94\xc2\x01\xbb\xc1\x01b\x1f\xf4\xc6\x01\xa4\x01/3%\'\x1d\xa3\xcb\x01\xa0\xcb\x01+\xf9\xca\x01\x8e\xcb\x01\x11\xfd\xca\x01\xec\xca\x01!\x9c\x03\xad\x03\xb3\xca\x01\x9a\xc9\x01\xdb\xc4\x01\x05\x9e\xc3\x01\xc7\xb4\x01\xfc\xab\x01\xef\xb3\x01<&\xa2\xb1\x01\x83\xb1\x01+\x16\x13Fa\xd3\x0bH\x14\x04\x058\x16.\xa6\x01\x14\x9f\x01\xc4\x02\xf8\x04\x90\x05\xd0\x04\n\x0cT2\x97\x14\x04\x03U\x1c#\xe6\x06r\xa8\x01)\xb6\x04E^c:\xbf\x04\xbe\x04c\x8c\x01\x91\x01b\r\xbb\x04\x80\x01\x91\x01\xc2\x03\xc6\x01\xcb\x01\xd9\x03\x9c\x03\xb3\x03iZi\x151\x1d!\tK<[\xbc\x05\xf1\x05\xee\x05\xa1\x07 \x04\x03\x1d)\xb0\x07\xb9\x07\xe1\x02\xc0\x02\xc1\x02\x94\x02\xd0\xc0\x01\xdf\xc0\x01\xa3\x01\xa2\x01Ka\x1d\xca\xc8\x01\x0c\x04\x17\xd5\xc2\x01\x0e&\x08\x1d\x15n\x01\n\x15k\x1b\x0c\x04a\x94\x02\x08\x0e8<N\x99\n\xb2\xc2\x01\x9b\xba\x01\x80\xba\x01\x01\x9b\x1d\xe4\x02\xaf\x9c\x01\n\x01\x18\x0c\x14\x04\x0e$:\x0e\x03\x01\t\x1e\n\x01\t\'C\x15+\xf8\x01\x1a\x01\x16\x19\x07X\x16j\"\n\x1e\x01\x16\x0e\x08E\x0e %G\x01\xa6\x01&\x01\x16!P\x0e\x10Z\x85\x13\x10\r\x05\xbc\x82\x04\x03\xc5\x80\x04\x03\xec\x02\x03\xec\x02\x03\xf2\xf8\x03\x83\x80\x04\x02\x05\xfc\xfe\x03\x03\xeb\xf1\x03\x03\x98\x05\x04\x1e\x11&\xb0\x02\x01\x92\x01\x91\x02\xb2\x04\xf7\x04\xf0\xa3\x04\xf1\xa4\x04\x04\x1d\x11\x11\xfe\xa0\x04\x8c\x07\xe0\x01\x18\x12\x15\xa0\x04\xbb\x04\x04\'\xff\x01\xec\x05\r\x19\x9f\x05\x0f\x11\xd6\x04\xe3\x043\xec\x05\xbd\x05\x0b\xd4\x04\xf7\x04479\x1e\x8a\x05\x97\x05\xaa\x01\xbf\x01*g1\x19K\xe7\x08\xe0\x0f\x02+\xad\x10\x8c\x10+\xc9\x10\xb0\x10\'\xc1\x12\x84\x12,\xb9\x12\x9c\x12\x0b\x05\x91\x13\x86\x13\x1d\x9f\x13\x84\x13\r)\x899\xc5\xf9\x03\xbe\xf6\x03\x87\xf0\x03\xba\xe8\x03\xe5\xd0\x02\x04\xdf\x01\xfc\x01\xe7\x01\xfc\x01\xbf\x02\xe8\x04\x14\xae\x04\x1c\x89\x0f\x01\xee\x0e2=\xa8\x016\x08\x1d\x02\r\xd9\n\x96\x02\xa1\x07\xa3@\x92\xf0\x01\x88\x0c\x01\x87\x0c\xf3\xd0\x02\n\x08\t\"\x08\"(\x17\x80\x01\x06\x03\x05\x1ar\x04\x05\"\t\x1c\x06\x08\x06\x0c\r\x05<K\x0e\"\'\x05\x03\x1f\xa2\x01R4\x08\x0b.\x0e.\x04\x12!\x08\r2\x08\x9c\x01\x96\x01w\x03^\x91\x01\xd0\x01\xb1\x01\xea\x01\x04\xc7\x01\x1c\x80\x01\x044+(\x92\x02\xff\x01\x01j>2\x89\t$\xb2\x01\xb7\x01\xa4\xb2\x01\xa5\xb1\x01\xa0\xb9\x01\xab\x03j\xb0\x03\x87\xbc\x01\xd0\xb1\x01\xbb\xb0\x01\x829\xbe\x87\x01\x04\x03\xe5\x02\x01\x8a\x08\x9c\x07nL\xcf\x1b\xa1+\xf3[\xdcgj\xb0\x03\xdd\x90\x01\x01\xb7\x02\x96G@`U\xc0\x01\xa2\x01\xb1C\xcaB\xe7D\xb2D+\xad9\x01\x96\x0b\xa5\x0b\xbc9\x01\xea\x18\xb7F4.z$J.p\x8c\x02Vb L\x98\x01V^\x0e`\\L4\xef\r\xf4/5\x02\t\xea\x1a\xfdGy\x0b\x01\xb8J\xc5\x1d\x97 3K[_\r]U\x97\x01K\x1faU\x8b\x02o-I\r\xbd\x013=\xf6F\x05\xf3F\x05\xef\x15\xfc_\xdd\x1a\xe7E\xf1\x01\xd4d\xcd\x1e\xb8\x1e\x85\x1f-I\xa7O\x94\xa1\x01\nB\x04\xdd\x0e\xfa\x0e]\t\xd1\x10\x01\xf8\x16\xbbj\xc7?\x9a\x06\x0c\x14\x12\x08\x0198\x11\x1f\x15!v\x04\xbf\x01\xca\x04c\xb2\x01 B\x0c \x83\x02\x03\x92\r\x08\x9f\x0b\x01\xfb\x01\x98\x02\xc4\x06\x01P\x01\xfe\x01\x10\x0ey\x88\x010\x17\x1c\x19\r\x0f\x07\x98\x01X\x04\xb0t\xde\x01B\x0e`\xee\x01\xe2\x01\x0eV\x80\x02ZH\xe1.\x04z\x04\"\x11\x1c\x0e\x10:\x04\x95\x01\xde\x01\x91\x01\r\x04\x1b\xb3\x03\x01\xbe-GY\xff\x01U\r\xe1\x01\xed\x01_\rA\xdd\x01\t\x8d$\x14\xaa\x04\x8b\x02\"\x1f\x05nA\xc1\x01q#%\xf6#\xa9$\xfe\"\x81#\xba\"\xec\x05\xd5\x0b\xde\x0b\xb7\x11\xfc4\xf7\x0e\xc9\x98\x01\xb0\x01l7<\x05\xe1\x01U\x01\xde\xa7\x01\xdd\x9e\x01\xa6\x9e\x01\x9f]\x02\x03\xfe\\\xaf\x92\x01\x9e\x92\x01\xc3\x92\x01\xb0\x92\x01\xe5\x92\x01\xc8\x92\x01\xbb^\xb2]#\xb7[\x02\x03\x96[\xd8\xf1\x06\xfb\xf1\x06\xa1\xa0\x01\x92\xa0\x01\xfb\x9f\x01\xfc\x9e\x01\x0b\xb7\xa2\x01\xcf\nk\xa8\x02\xd0\x07\x03\xc7\x07()\xbe\x02\xc9\x01\xc6\x1e\x1a101S\xa5\x19\xcf\x06\x9e\x04\x9b\x05\x94\'\xe1\t\xe6\t\xc2\x13\xcd\x05\x03\xd0\x05\x9d:+\xd4\x01\x8c\x1f\x12\x1e\x10\x08\xd2\x16\x8au\x1c\xb5u\x01(\xeb\x06\x811\x881\xcd0\x06\x04%6\x10F\x08\x86\x01\xce5\xc74\x08Us\x01\xa0\x02\x10$\xe6.#\xf8v\x02X\xc9w\x01\x892\x01\x80 \x17\x1d\x05)\x03\xfe\x13\x03\x0b\xf0x\x06\x02\x03\r\x03J\x0c\x14\x16\xc1x\x9b4\x1f\xfa5\xae\x07\x9c\x01\xfb\x01\x8f\x08\x94\x03\xc6{\x1e\x16\"j\xa2\x01>\\\x91e\xdaX\x95X\x84X\xa5X\x92X\xb7\x84\x01\xdc\x81\x01\x01\xb0\x04V\xfc\x01V@\xf3c\x9a[\x93[\x80`X\xfc\x01V@\xc9\xa5\x01\x01\xb6\x9d\x01\xd5\x9e\x01\x84\x9e\x01\xf5x\x02\x03\x17\xc8w\xd3\x9c\x01\x04j\x13\x06\x04?\xf8\x99\x01\x01\x0e\x1f\xa1\xa0\x01^\xb4\x02>$\x96\x01\xc5\x01|3\x9e\x02\xa6\x05\x14\xd9\x0f\x1e.\x9c\x02\xb4\xa3\x01\xde\x0b\x9f\x0c\xdd\x02\x95\x02\x01\x9d\xa1\x01\xee\xae\x01\xf3\xa3\x01\x07\xb4\xa2\x01\x95\xa3\x01\x06\x04\xbf\x04\xf4\x12@\xd0\x8f\x01\xf9_\x07\xbdB\x9c\x1c\xe2+\"\xd4]\x0f\xb5\x93\x01\x08\x01\xac\x04\x08\xe4\x8f\x01\x12\x95\x02\xcb\x03\x12\xa6\x05\xdb\x01\x16\x80\x025\xcf\x05\x9f|\xb4q\x9b\x9e\x01>\x98\x1c\xb8\x81\x084\xf9\xa0\x08\xa6\x03\xfa\x1a\x01\xc0F\x03\xeb+\x05\x9b\x17\x9a\x17\xcf8\xa8\xb9\x01\xc9\x01\x10\x88\x01c\x17\x02\x03\x17\x19\x0f\x0c\r\xe1\xb3\x01\x82\xae\x01\xbe\x02\x93\xb3\x01\x0b\x11\xde\x02\xce4\x958\x908\x15\xb1\x16\xa6\x16!\xd57\x9a7\x05\xd76\x1b\x82\x01\x9b\x01\xd05\x8d4\xb4\x03\x1b\x13\t\xe1\x02\x13\xb0\x02\xb1\x02\xaa\x02\x07\xa5\x02\xca\xb4\x01Jb_E\x0b\n#\x03\x85\x01\r\x1d\x97\x06\r\'\xb1y\x03\xeev\xc7w\xe6v`\x13]\xcbx\x991\x1e\xe40\xa71\t\xde0\xe0B\x01\xb8\x0e4\x14&R\x04\rI\x98\x01\xfb\x01\xa8\x02\x12\xb5\x02\xf4\x01\x8d\x02J\t\x92\x03\x0e\x0c&\x11\x9c\x01\x08\t\xbf\x10\xea\x0f\x82\x01\xa3\x01\x19\x8b\x04\x94\x05\xb1\x01\x1f53\r\x13\xb3\x02\x04\x07;\x14\x15\xc9\rq\xb05\x1e\xe3\n\xee\n\x08\t\xed\x0b\x9a\x0c|D\x06\xc8\x02\x1c\xe7\x02O\xdc\x03\xcd\x02\x01\x87\x01\xfd\xa9\x01\x9cX\xff\x01\xe6\x01G\xdd\x01\x98\x01\x02\x039\x87\x01\xc3\x02\xf4\x05b\xc5Y\x9eY7\x03\xa5\x06\xcbQ\xa8O\xe1O\x9eG\xc3G\r\x8aG\x8b&\xe9\x0f\x94\x10P\x8f\x05\xac\x05\x0c\x1dP\x10\xce\x03`!\x01\x93%\xec\x0b\xd2\x060$\x08\x93\x06\x01\xfa\x08\x0f\xb8\x01\xbc\x01\x08\n0\x1aH \x08\t\x14\x15)j\x15\x85\x01\x15\x0f\x0b\x02\x15\x11\xbf\x01\t\x99\x07\x9a\x06j\x8b\x02\xa9\x06\x87\x02\xd6\x06\x0f\x17#\'\x03\x8b\r\xf21\x95\x0e\xca*\x04\x05*\x98\x01u\x05\x90\x02\x07|\x04\x0c5\xff\x08\xdfO\x84R\xc1Qa\xe2\x02\xc8\x07\xab\n\xb8\x02\xcc\\\xae>\xf9T\xa0\x96\x01\x8f\xd4\x01\x8e\xc9\x02\xfd\xc8\x02\xd5\n*\xae\x18\x93\x16\x889\xcb;\xcer\xe7\x12\xe7_\xda\x02\xd2\xb6\x04\x04\x08\x1b\xf9\x9c\x04\xb3\n\x99\x0c\xf3\x05\x8ew\xb9u\xf2\x02\x08\xf4\xd3\x01\xbf\xd8\x01\xea\x01\xee\x13\xf5\x12\xe3\x02\x04\xf8\x01m\xba\x01\xa6\xd9\x01\x87\x9f\x01\xc7?\x08\x90\xc8\x01\x8b\xc0\x01\xd9\x02\xa6\x05\xda=\xc4)\x88J\xe5\x93\x01\xac\x07\xac\r\x8b7\xf26\xfd/\xaa\xfa\x01\xf5\xfc\x01\xda\x1d\xb1\"\xb3\x05\xf8\x02\xb6\x04\xda\x1e|\x81\'\x00\x90\x06\x91\x06\x80\n\xa0\x0c\x9f\x16\xd6\x04b\xb5\x05\x00\xda<\xc99\xc0\x08\xd1\x0b\xd4\x15\xc7\r\xd9\x04\x84\x0e\xb5\x11\x02\xdc\x1e\x08\xceG\xb1f\xa6\x15\xb3\x12\xcc>\x04\x08\x0f\xc5A\xc6\n\xa8\xc4\x02\x8f\xba\x02\xaf\x02\x05\xb1\x12\x02\x93\xd1\x01\x13\x02\x12\x14J\xdc\x01\xe1\x01o\x06\x07\n\x04\x00\r\x1e\x13\x03\x07\x06\x05\x00\x04\x0ek\x19\x00\x0cDQ\x00\x0c\x0b\x00\x05\x0c\x05\x06\x05\x0e\r\x14\x13 \r\x0b,\'\x01\x12\x17\x01\x00\x02\x00,-\x00\n\x04\r\x06\x05\x00\x07\x02\x08,-\x00\x0c\x03(/\x00L\x04\x159\x06\x00\r:1\x02\x0e\r\x0e\x17\x06\x00\x01\x02\x16\x001\x1c\x00#\x00\x06\n\xc4\x05\xc1\x05\x06\x17\x10\x05\xc8\x02\xd3\x02\x08\x0e\r\x02\x01\x00\x0e\x0b\x01\x05\x06\x04\x00+\x0c\x0b \x13\x0b\x08\x07>C\x0e\r\x06\x0e\x02\x0f\x05\x08\x11\x08\x10\x07\x02\"\x00\x13\x01\x07\x10\x1a\x1d\x03\n\x00:K\x04\x00\xf9\x01\x9a\x04\xfb\x02\x93\x01(\x0f\x15\x06\x04\x0b \x0f\x10\x0f\r\x00\x03\x98\x01\x8f\x01\x08\x10\xde\x0e\xf0\x08\xe3\x17\x11\x00\x94\x07\xeb\x06\x1b\xd4\x10\xe3\x10$\x0b\x03\r\x0e\x0f\x02\x0c\x06\x0b\x12\x0b\x0f\n\x07\x01\x03\x06\x02\x06\x05\x07\x0e\x00\x0e\x12\x01\xf0\x1c\x8d\x1d\x0f\x1a\t\"!\x00\x10\x05\x17\x08\x00\x06\x05\x10\x02\x0b\x00\x04\x0f\x06\x98\x04\x8d\x04\x03\x00\x1c\x05\x15\x00\x1a\x07\x0c\x12+\x0e\x11\x00\x08\x10\x1e1\x01\x10\x01\x0e\x0b\r\x03D)\x17 \x11\x05\x102\x92\x01\xad\x01#\x00\xf2\x10\x83\x11\x06\x00\x02\x0f\x0e\n\x00\x05\x07\x1a\x11\x04\x00U\x0c\x0b\x02\t\x00\x02\x03\x00\x02\x00\r\x16\x06\x05dc\x14\x11.-\x01DALK^]`_\x01\x02\x01\x02\x07\x10\x06\r\xa2\x01\xa1\x01\x01\x02\x01\x02\x04\x00\x0f&%PO.-\x01\x02\x04\x00\x0f&%VU&%\x01\x02\x04\x00+&%VU&%\x01\x02\x01\x02\x01\x00\"\x1f\x10\x1f\x0e\x0b\x0c\x02\x18\x19\x04\x00\x05\x18\x07\x0f\x08\x00!\x04\x03\x1a\x15\x03\x00\x04\x03\x1a\x13\x05\x00\x04\x03\x00\x18\x17\x06\x00\xf1\x01\n\x04\x0cD[0/\x01n\'C\x01\x02tsLK\x01\x02\xc0\x01\xbf\x01JI\x01\x02\xda\x01\xd9\x01po\x01\x02rq\x00@?\x01\x02\x1e\x1d`_87\x01\x02rq*)\x01\x02\x01\xa6\x06\xa3\x06\x00\x18\x19\x04\x03\x00\xb0\x06\xb9\x06\xf8\x01\xb5\x01\"a\x08\xcc\x02\xd1\x02\x00\x01\x02\x0c\x05\x06\x05,!\t\x00\x06\x0f\n\x00\x10\x1c%\x01\x03\x00\x07\x08\x00\xcc\x02\xd1\x02\x01\x08\t\x18\x08\xc8\x03\xff\x02c\x18\x17\x06\xcc\x02\xcb\x02\x0b&\x04\x98\x04\xa7\x04\x0e\xc6\x0f\xed\x0f\x16\x00\x02\x1a\x04\x00/%\x00\x02$#\x08\x15&\x14\xe0\x01\x89\x02\x1a\x1d\x0b\x0c\x14v\x8f\x01\x90\x01\x87\x01\x10\x0f\x01\x02\n\x00Y\x12\x84\x01\x95\x01\x01\x02\x01\x14\x00\x13,+\x10\x00\x04\x13\x14\x06\r\x0b\x14\x08\t\r\x10\x11\x01\x1cr\x85\x01\x03\x1c\x1b\x06\t \x1d\x1a6Q\x00\x1a\x07\x11\x00\x14\x04\t\x17\x05\xf2\x02\xf1\x02\xf2\x02\xcd\x02\x86\x02\xa3\x02\x8a\x01\x89\x01\x00nm\x08\x00[ \x1d\x00\x01\x08\x07\x04\x03\x05\x1f\x8e#\x97 \xf1\x01L\x17/0Ux\xb1\x01\x01\x000)\n\x0brc\x11\x0e\x0c\x19\x0f\x16\x05\x06\x05\x0c\x0b\x06\x05\x04\x03\t\x11\x1c\x08\x00\x03\x08\x07\x04\x00\x11\x08\x07\x00\x02\x004\x049\x02\x0c\x00\x0f\x8c\x01\x93\x01\x06\x00\x04\x03\x07\x08\n\x00\x07\x14\xca\x03\xdd\x03\x00\x04\x02\x01\x03\x06\x02?\x05\x8a\x01m\x15\x05\x00\x98\x02\x97\x02\x02*+\xb2\x01\xaf\x01\x01<9\x84\x02\x12\x97\x02\x12\x0b\x05\x10\x0b\t\x08\x01\x00\t\n\x02\x01\x08\x00\r \x1f\x02\x08\x04\x03\x07\n\x00\x05\x01RO\n\x00\x05\x01\n\t\x04\x00\r\x07\x02\x01\x08\x05\x06\x02\x04\x00\x05\x01\x00\x04\x04\x01\x17\x0e\x02\x0f\x0c\x0b\x12\x1163\x04\x08\r\x04\x00\x03\x0c\t\x06\x00\x19\x01*\x1f\x07\x0c\x01\x07\x08\x06\x0f\x06&+\x06\x00\x01\x01\x04\x00\xa9\x01\x02\x00\x01\x00\x1e\x17\x00\r\x1e\x15\x06\x1a\x1f \x1d\x01:/\t\x00\x02\x01\x16\x0f\x02\x05\x01\x04\x02\x05\x0085\x01\x08\x07\x16\x07\xac\x07\xb9\x07\x12\x08\x0f\x07\x10\x0f\x01\xbc\x02\xbb\x02@#\x0e\'\x00\x8e\r\x8f\r\xec\x05\xeb\x05\nP\x05K\x07\x08\x05\x06\x16\x13jq\x00TS\x00\xa0\x01\x9f\x01\x00\x88\x01\x87\x01\x00\x010-\x00\x01\x04\x00!\x0841\t\x00TS\x04\x03\x00\x98\x01o\'\x00\x08\xde\x03\xe5\x03\x04\x08\x01\x0f\x04\x00_\x0e\r\x00\x04.1\x05\x06\x16\t\x02\r\x00\x06\x08\x07\x16\x1b\x00\"\x13\x0b\x06\n\x06\x172\x11\x1c9\"\x18)\x05\x02\x05,3\x0e\r\x07\xc8\x01\xbf\x01\x05\x00>\x0cC\x04\x00\x078/\n\x08\x0e\x00\x15\x01\x00\x15\x07\x0643\x02\x01\xcc\x02\xc9\x02\x12\x00\x11\x82\x02\x83\x02\xc6\x03\xc3\x03\x01B?$%\x06\x00\x11\x02\"#RQ\xac\x01\xb1\x01\x05\x0c\x04\x00\t\x94\x02B\xd5\x02\x00\x02\n\x00\x0f\xae\x01\x85\x01^w(\nA\x026\x00!\x01\x02\t\x08\xd0\x02\xcf\x02\x0bbJ\xa5\x01\xa8\x01\xa1\x01\x0e\r\x0c.7\x08\x00\r\x0e\r\x00$+,%\x06\x00\x0b\x04\x19\x16\x00\xa2\x03\xa1\x03\x06\x00\x1f\t\n\x05\x1e\x07\x08\x13\x14n\x85\x01(#\n\x16\xa2\x01\xc3\x01\x04\x00\t\x08\x07\x00rq\x04\x00\x85\x01NM\x00*)\x00\x01\x02,\x11\x19\x00\x01\x02\x01\x02JI\x00&%\x00\xbc\x12\xbd\x12\x16\x15\x8c\x01AI\x14\x13\x00\xd8\x01\xc3\x01teD\x86\x01\xeb\x01\xea\x01\xe9\x01\x00JG\x01\x04\x08\t\x01\x0e\x18\xfc\x01\xc7\x01\xa0\x04\xad\x045\xec\x03\xfd\x03\x03\x18\x17\x0e\tBE\x14\x13\x04\x00\x13\x06\x0c\x03\r\x18\x15\x01\x07\x08\x17\x04\x08\x01\x02\x04\x00\x1b\x01\x08\x00\x0e\x12\x05\x13\x05\x00\x1a\x165 \x1f\x04\x10\x0b\x19\x00\x0e\rLK\x04\x00\x05\x02\x04\x03\x04\x00\x03HI\x04\x00\x04\x02\t\x03\x05\x06>=\x08\x00\r\x0e\x05\x11B7\t\n\x04\x001\x05\x10\x01\x03\t\x0c\x05\x06\x00\x05\x04\x03\n\tPM\x01\x00\x02\x04\x0b\x06\x04\x11\x0e\x04\x00\x05\x08\x07\x02\x04\x00\t\x01\x02\x01\x08\x07\x06\x00-\x02\t\x18\x02\x176/\x00.-\x1e\x1d\x1c\x03\x04\x0bDS\x1a\x0f\x10\x17\x07\x04\"\x19=\x16\r\x08\r\x00\x01\x00\x0c\x0e\x1e3$\x04\x13Y0\x1d\x14\x1b\x10\x06\x0f\x06\x11\x0c\n\x15\x03\x04\x016\x17\x0f\x06\x0f\x08\x0c\x19\x04\x01\xac\x02q\x9b\x01V\x13Y\xc8\x01\xcf\x01\x0c\x92\x01\x95\x01<7\xa6\x01\xa9\x01*-\x80\x03\xb1\x02Q\x04\x00oN\x01;\xc6\x02\xa9\x02\'VY\x18\x17\xac\x01\xa7\x01\x03\x04\x03\x08(-\x01\x14\x13\x0c\n\x13\x00\x1c\x17\x14\x19,#21.1\xe4\x01\xd7\x01\xa2\x01\xb1\x01\x0c\x07\x03\xc2\x01\xb9\x01\x07,#NM03\x90\x02\x81\x02\r\xbe\x01\xc1\x01\x04\x005\x04\x03NE\x14\x1b\x1a\x13\x00\x05\x0c\x0b,\'\x00\x08\x1a\x19\x0b\x18\x13,/\x1c\x1b\x0e\r\x04\x00U\x04\x03.+\x01\x14\x13\x02\x00\x01\x1c\x1b\x1a\x11\x01\x00\x01\x0361HG89\x04\x05\x00(\'61\x03D?\x03\x00\x06\x05\n\t:\xac\x01\xe5\x01\x04\x00\r\x04LG\x07\x00DC\x08\x00\'\x10\x0f\x08\x16\x03\x13\x05\x0e\x0b\x00*\'\x00\x16\x01\x13.\x19\x13\x03\x06\x005\x04./\x01\x14\x13\x08\x14\x1b\"!\x06\x00\x01\x03\x14\x05\t\x03\x00<7$\'\x10\x0b\x03\x04\x00\x1f6\x00\x07\'\x05\n\x07\x01`?\x05\x17\x01\x02\x00\x01\x04\x00i\x1c\t\x16#\xf4\x01\xf7\x01RQ6#\x11\x04\x01\x9a\x02\x9b\x02&#\x00\x01\x06\x05\x07\x08\x06\x03\x01\x02lmnmrqre\x18)\x84\x01\x83\x01\x0c\x1f\x1c|}\x05\x84\x01} \'\x00\x08\x00\x04\x04\x01\x04\x00?\xa2\x1d\xfb\x1ct\x99\x01\x00\x04\x12\x06\x1bB\x0e\xde\x07\xab\x08\x01\x00~}\x00\x1c\x05\x15\x02\xaa\x01\xab\x01\x92\x01\x91\x01\x92\x01AO\xe4\x01\x9d\x01E\x04\x00\x05\x16\x11\x03\x04\x00\x0b\x1c\r\x00\r\x10\x03\x04\x00+\t\x02\x06\x1a\x03\x1c9\x00\x01\x00\n\x0c\x03\x0f\x00\x01\x00NM\x00\x0e\r\x04\n\x0b\x05\x06\x1a\x18;\x00\x04\x03+\x00\x01\x12\x1c+\x01\x02 \x01>Q\t\n\x07\x08\x05\x03\x01P+>_\x04\x00\x01\x01\x04\x00\x13\x04\x06\x02 )\x01\x02\x01\n\t\x04\x00\'\x12\r\x03\x06\x05\x04\x08\x0b\x00\x14\x01\x02\x10\x11\x0b\x03\x00\x01$\x1f\x04\x01%\x02\x0c\x05~\x83\x01\x01:5B+\x19\x1a\x15\x16\x17\x00\x0161\x04\x015RZ\xab\x01\x00\x02\x00\x01*%\x01\x00*\x03\x0e\x19\x0f\t<=\x02\x10\x11\x10\x0f\x00\xb0\r\xaf\r\x04\x00)@?\x12\xa8\x01\xb7\x01\xc4\x02\xc3\x02\x00\x01\x96\x02\x95\x02\xba\x02\xb9\x02\x06\x05\x06\x02\x07\x00DA\x16\x00\x1b\x14\x11\x06\x00(/\x01\x16\x1c/\x01\r\x06\x08\x08\x00\x13\x8c\x01\x89\x01\n$\x00/\x04\n\t\x03\x04\x04s\x01\x05\x00\x14\x10#\x14\x13\x10\x01\t\x10\x04\x00\x17\x10\x04\x13\x00\x08\x07\"!\x00\x10\r\x06\x05$\x03\x1d\x03\x00\x0c\x0b\"\x1b\x10\x15<\x02\x1b\xb0\x04\xcb\x04\x01\x94\x02\x8d\x02\x1a#\x08\x8c\x01\x87\x01\x0c@?\x0f\xc4\x01\xcb\x01\x04\x0cUZk\x0543:9\x00\n\x0c\x9e\x01\xb3\x01\x000\xbe\x0c\xe1\x0c\x08\x1e\x10\x90\x02\xd1\x02\x00.-\xb2\x01\xaf\x01\x01HE\xc2\x02\xc1\x02\x02\x01\"!\xc4\x01\xc3\x01lk\x06\x05\x01\x02\x04\x00m\x16\x15\x16\x15\x16\x15\x16\x15\x16\x15\x16\x15\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13$#\xac\x01\xab\x01\x01\x02\xb8\x01\xb7\x01$#\x8a\x01\x89\x01\n\t65<;\x01\x02\x01\xc6\x02\xc3\x02\x04\x00E\x0e\rNE\t\x0e\x1c\'\x01\x1c\x1b0vg=\x96\x02\x95\x02\x82\x02O\xb1\x01\x120A\x00*$\xa4\x01\xb5\x01(? \x08\x1b\x18G\x04\x00\x9f\x01$#\xc0\x01\xf8I\xb5K\x08\x07\"!H/\x00\x17\x01\x00\n\x07\x00Z[(-\x0e\x07\x05\x00\x0e\x18\x10\x15\t\x1c+\x04\x03\x06\x05\n\t\n\t\x0e\x02\x0f\x15\x16 \x121\x02\x0b\x10\x05\x0c\x0b\x05\x00\x0c\x05\x002!\x0f\x1c\x1b\t@5\x00ts\x06\x05\x1a\x17\x01\x18\x03\x07\x0b\x04\x00O\x18\r\t\xc8\x01\xc3\x01\x03$\x10\x11\t\x16#\t \x04!BCJG\x01\x06\x01\x1c\x00\x13\x07\x08\t\x02\x01\x1c\x13\x0e\t\nNe\"!\x0c\x00\x19\x18\r\t\x06\x03\x1a\x0b\r\x04\x08\x0c\x03\x01\x04\x035\x0b\x16\x14\x17\t\xba\x01\xc1\x01\x00\xec\x02\xbf\x02\x0f$76\x023\x18#\x18\x17\x1c\x0f\x07\x08\x07\xc4\x02\xc7\x02\x04\x00\x15\x1c\x1b\x00hg\x04\x02\x04<\x0f\x05\x04\x11\'\x07JMnm\xcc\x01\xcb\x0143$\x1d\n\x07\x08Ra21XW\x06\x00O:+\r\x18\x0b\x04\x0f\n\x02\t\\`\xcb\x01\xda\x02\xc9\x02\x84\x02\x85\x02\x0243`_\xf8\x01\xf7\x01:9ji\"!>=FE21BA\x01\x02&\x00C\x9c\x01\x9b\x01\x1c\x1b\x1c\x1b65\x02\x01xw \x1f\x00\x01\x07\x08\x00\x8a\x01\x93\x01$\x17\x0f\x0e\x05\x06\x02\x01\x02\t\x07\x12\x01\x04\x00E\x05\x08\x01\x02\x1c\xde\x01\xf9\x01\x01\x02\x01*\n3\x08no&)\x00\x0e\x00\x01\x02\x15&\x0b\x11\x00\x16\x17RE\x07\x08\t\x04\x00\x1d\x14\x15\x00\x16\x15\n\x07\x12\x13\x0c\x1e)T\x01Q\x04\x00\x19,!:C\x8c\x01u\x0f\x05\x14\x13\x02\x08\t\x06\x00\t\x11\x1a\x04\x0b\x02\x04\x00\x1d\x01\x0c\x0b*\'\x00\x12\x00\x0e! \x17\x07\x18\x17\x08\x00\x11\x1e\x1d\x14\x13\x00ji\x08\x07\x06\x00\t\x18\x0b\x16\t\x17\x08\x00-\x1c\x1b\x00\x08\x06\t\x18\x1b\r\x0e\x1c\x19\x01\x1c\x00\x07\x13\x1c\x13\n\x17\x12\x0b\x04\x00\x03\x12\x0f\x10\x00\x03\x01\x02\x08\x00\x0b\x01\x1887\x13\x01\x08\x00\x07\x1a\x17\x03\x02\x04\x00\x17\x01@= \x1f\x01VSNM\xf8\x01\xf7\x01\x08\x00\x1f\x01\x00\xac\x01\xa9\x01\x01\x00\x02\x01\x022)\x06\x15\x0c\x05\x00\x04\x04E\x1d\x16B?65\x00\x01\x02\x01,)\x1c\x1d*\t\x1f\x05\x06\x04\x03\x02\x08\x07\x00\x01\x00\x1c\x1b\x08\x06\x12%PG\x06\x00\x0b\x01.-\x18\x11\x03\x04\x00\x11\x01\x08\x05\x00\x01\x00\x1a\x12)\x06\x00\xb3\x01\x01\x1a\n!\x02\x06\x16\x1b\x01\x00\x01\x00\n\x10\x0b\r\x1a\x0f\x03\x05\xe2\x03\xb7\x02\xa9\x0161\x03\t\x04\x84\x01u>=\x03\xce\x01\xd1\x01\x1c\x15\xd6\x06\xdb\x06\x1c\x00\xda\x13\xf3\x13\xf2\x01\xf1\x01DC\x01\x00\xee\x01\xed\x01\x00\x04\x1e\x1b\x01\x03\xf0\x03\xef\x03\x08ns\x1e\x187\x9e\x02\xa3\x02\x08\x01\x00\r\x0eHG\x00\x10\t\x02\x05\x01\x1a\'\x10\x00.#\t\x01\x0c\x02\x04\x05/\x98\x04\x9f\x04\x06\"!\x00\x18\x00\xda\x01\xf1\x01\x18\x0c\x00\x1b\x12\x008787\x0b\x05\x14\x1b\x08\x00\t\n\t\x08\x14\x1b\x08\x00#\x18\x04\x03\x00\x125zk\x0b\n\x02\x00\x01\x00*\r\x19\x01\x04\x00\x19\x1a\x19\x02\x01\n\x11\x08\x11\x14\x00\t\xd8+\xcb+\x04\x02\x0f*-\xce\x0b\xcd\x0b\x06.\xd0\x02\x87\x03\n\x00\xb1\x016\xa8\x01\xc5\x01\x16)\x03\x06\x03\x00\x01\x1e\x02\x00\x17\x0e\x13\x00\x01\x02\x08\x07\x01\x00\n\x02\xb2\n\xc3\n\x06\t\n\x04\x03\x00\x10\x0f\n\t\x00\x02\x01\x10\r\x022\x13!\x10\r\n\x00\t,-\x00\n\x14\x8e\x01\xb3\x010\'\x00\x12\x11HGPU\x06\x02\x00\x04@C\x0c\x0bFEBADC\x00\x07\x84\x01q\xd8\x01\xa7\x01A\x12\x04\x00+\xd8\x01\xc1\x01\x19\x0c\x06\x00\x15\x034+\x07\x02\x01\x02\x00\x08\x03\x02\x07\x00\n\x07\x04\x00=\x01\n\x13\n\x04\x14\x00\x04d\x7fL\x00K\x00\x1c\x15\x1c\t\x00\x17(\x1a?:9\x08\x07\x82\x01\x81\x01\x00\x01\x04\x005\x1c\x15\x02\x1a!TQxw\x02\x03\x1a\x0e!\x03\x00\x01\x18\x0c!\x02\x0c\x16!\x01\x00\x01\x04\x00+\x1c\x11\x07\x00\x01\x00\x02\x01b_\x08\x1c\x1b\x17\x10\x00\x82\x02\x81\x02\x01\x02\x00\x01\x08\x00\xed\x01\x18\x0f\x0c\x07\x0b\x00\x18\x0b*\x19bs\tRO>=\x01>9XYNO$\x1f\x01\x00\x94\x01m\'\x02\xb6\x01\xb7\x01<\x1f\xa2\x03\xbd\x03\x00XW\x00$\x08)\x00\x01>3\xfa\x03\x83\x04\x1a\x16-\x18\x00\x0f\xb6\x04\xb3\x04\x0c\x1a\r\x0b\x11\xe8\x01\xed\x01$\x0e\x84\x04\xff\x03-\x07\x0c\x07\x08\x0b\xba\x02\x1b\xa3\x02\x12\t\x01\x05\x00\x06\xd6\r\xdb\r\x06\x14\xe6\x03\xf9\x03\x9a\x03\x99\x03\x0c>?\t\x08*\x1f\x11\xfc\x01\xb0\x05\xfc\x02\xf9\x07\xa6\t\xd1\t\x81\x02\xec\x01gr\xf5\x01\x00\x10\r\n\x0b\xfa\x06\xf9\x06\x16\x00\x05\x04\x00\x03\x04\x00\t\x0e\x12\x1f\n\t\x04\x003\x82\t\xf5\x08\xfe\x19\x95\x1a\x0c\x00:9\x1a\x00#\x1e\x00\xcc\x04\xdf\x04*\x13\x03\x11\x02\x00\x01\x05\x0e\x04\x06\x04\x00\x19\x05\x11\x0c\x00\x05\x12\x0e\x15\t\x06\x0b\x01\x08\x06\x00\x04\x08\xe7\x01\n\x134C\x84\x01ylI!\x07\n.pU\xfa\x01\xb7\x02\x04\xba\x01Sq\x04\x05\x00\x0e\t\x03\x0e\t\x03\x0e\t\x03\x0e\t\x03\x0e\t\x03\x0e\t\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03\x0c\x07\x03 \x1f\x00\xac\x01\xde\x04\xf3\x05\x1589\x00\x02\x01\x02\x06\x07\x0f\x10\x06\x00\x05\x18\x17\x06\x1a\x11\r\x08\x07heVUNM\x01\x00\x15\x16\x02\x00\x18\x19\x00\x1c\x1b\x04\x00\x11\x02\x00\x04\x03\x00\x01\x08\x0e\x15\x06\x00\r\x06&+\x00\x14\x02\x15\x04\x05\x85\x01\x0c\x00<;\xdc\x02\xcb\x02\xa4\x03\xa3\x03\xf2\x01\xf1\x01\x96\x02\x95\x02\x0f\x04\x14@\xec\x05\xab\x06\t\n\xda\x02\xc7\x02\\m\xca\x01\xcd\x01\x0f\xb0\x01\x9d\x01\x15\xe0\x01\xd3\x01\x01z1M\x12\x13\xb4\x02\x93\x02\x11\xda\x02\xe9\x02\x14\x13\xa4\x0b\x8b\x0b\x12#\x05\x18\x11\x05\x04\x03D/Re\x82\x04\x87\x04\x06\x11(\x0f\x03\x01\x06\x00\x1d\x16\r\x07\x1c\t\x00\x04\x0f./\xc6\x01\x95\x013\x00\x02\x04\x0cA\x13\x00\x05\x00\x0c\x0b\n\x0c\x11\x03\x1aPg\x01\x02\x01\x1e\x11\x0b\x00\x06\x05\n\x05\x0308g\x02\xba\x01\xb7\x01\x03\x02\x04\x00\xcf\x02\x18\x19\x1e\x0b\x16\'\x02\x01>9\x04*1\x02\x07\x06 \x1f\x02\x01\x02\x00\xb0\x01\xaf\x01\x9e\x01\x9d\x01\x1c\x1b\x1c\x1b65\x02\x01FE\xc2\x02\xc1\x02\x02\x01\"!\xc4\x01\xc3\x01lk\x06\x0565`_\xf8\x01\xf7\x01:9ji\"!>=FE21BA\x02\x01\x16\x15\x16\x15\x16\x15\x16\x15\x16\x15\x16\x15\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13 \x1f\x00\xac\x01\xab\x01\x01<;\x92\x02\x8f\x02\x01\x00\xb8\x03\xd1\x01\xe5\x01$!\x14\x11\xfe\x01\xff\x01\x01\xae\x01\xad\x01\x02\x01\r\x0e\x00\x0c\x0b\x00\x02\x9c\x01\x9b\x01@?NM\xf8\x01\xf7\x01JI\x02\x01\xe2\x01\xe1\x01\xe6\x01\xe5\x01TS\x04>C\xdc\x01\xcd\x01\xca\x01\x95\x01A.\x1d\x18\n1\x16\x13\x16\x00\x03\n\x11\x04\x06\t\x16\x01\x19\x00\x18\x04\x03S\n\t\x03\x00\x0b \x17\x05\x04\x05\x02\n\x04\x02\x17\x01\x02\x86\x01s\x0b\x00\x0c\x07\x08\x06\x0f\x01\x00\x1a\x1f\n\xd6\x01\xd7\x01\x01\x1a\x1f\x10\x07\x00\x01\xe6\x02\xe5\x02\x04\x00\x15\x07\x08\t\x1a\x0f\xee\t\xc5\t\x17\xce\t\xe3\t\x0e\x04\x03\x03\x1a\x13\x04\x01\x03vw\x04\x00Y\x04\x03\x00~}\x02\x01\n\x05\x03\x02\x00\x01\x1c\x1b&#\x01D/\x12!\x00\x0e(5\xba\x04\xd3\x03\xf4\x04\xa3\x057&\'\xa2\x06\xbd\x05c\x9e\x08\x8d\x08\xa8\x02\xd3\x01c\x80\x04\xff\x03\x0c\x0b\x04\x02;\x03\x18\x14\x19\x11\x08\x18\x1d\xa8\x01\xa5\x01\x03 \x98\x01\x95\x01\x07\x08\x17\xe8\x02\xed\x02\x03\x00\xfc\x02\xfb\x02\x00\x18\rZi\x01\x08\x04\x02\t\x18\x14/(%\x06\x00\x1f\x07\xd2\x02\xc9\x02\x01\x144\x19\'\x0e#\n\x00\xe6\x07\xe5\x07\x08\x0e\n\x00I\x0fPC\xc8\x01\xd1\x01\x01\x00\x1a\x15\x01\n\x03\x0c\x0e\x06\x15\x0b\x0521\x1a\x19\x11(\t\x0b$\t\x00\x13\x03\x04\x00\x03\x00\x01\x02\x04\x00\x03\x01\x02\x06\x00\x03\x01\x02\x08\x00+\x01\xc4\x01\xc3\x01\x10Z]\t(\'\".Q\x00fc\x04\x03\x01\x06\r\x08\x0e*\x00\x1b\xbe\x02\xc9\x02\x01\x1a!\x08:\'\x05\x01\x07\x06\x07\x02\x08\x00\x05\t\x10\x07\x04\x00\x17\x05\x90\x06\x87\x06\x00\x01\x02\x00\x04\x01\x03\xee\x04\xed\x04\x06\x00\x17\x1a\x0f\x8c\x06\x95\x06\x00\x02\x00\x01\x10\x0c\x13\x07\x08\x00\t\n\x05\x03\x06\x05\x04\x00]\x0c\x07\x1c\x11\x00\t\x00\x10\x0fHK\x0c\x05\x00\x10\x1b\x06dY\x10Rq\x06\x00\n\x17\x08\x16\x0f\x05\x06\x16\x15\x07 BY\x02\x00\x01.-\x00\x08\x07\x02\x01\x04\x00\x19\x06\x02\x08\x0f\x00\x0e\r\x02\x10\x11\x1b\x14\x08\x04\x00\x11\x02\x01\x16\x08\x00\x04\x1f\x07\x08\x04\x005\x07\x0c\x1c\x1f\x01\x00\xca\x01\xc7\x01\x00\x0c\x12\x1d\x9c\x01\x9b\x01\x01\x00\xb0\x03\xa5\x03\x0f\x06\x00\x02\x01\x12\x11\x02\x00\x04\x06!\x1a\x1d\"+\x06\x00\x04\t\x00\x1e\x00\x1d\x05\x06$\x1a;\x06\x00G\x01\r\x0e\x08\x07\x0e\x10\x17\x08\x07\x02\x10\x0b\x14\x1f(\'\x0c\t\x12FW\x04\x05\x00\x1a\x06\x04# \x02\x19\x05\x08bi\x04\x00\'\x01\x02\x08\x18\x17\x1c\x17\x06\t\x14\x13\x18\x13\x06\x0523\x06\x11\x02\x0c\x00E\x01\x00 \x07\x0b\x01\x02\x11nS <I%\x00\n\t\x00\x04\x03\x00\x02\x1e\x0b\x06\x19\x14\n\x07\x0c!\x00\x14\x0c\x00\x04\x0f\x04\x00\x0f\x0c\x03 Ho\x0c\x03\x07\x04\x00\r\xbc\x04\xbb\x04\x02$%$\x03\x06\x00\x17\x1d\x00\x07 !\n\x01\x00\x18\r\x07\x00\x04\x0c\x07\x0b\r<9\x06\x00\x0b\x01\x02\x01\x02\x01\x02\x06\x00\x05\x1a\t\x0f\x0c\x00\x05\x01li\x06\x00\x03\x01\x02\x06\x00\x1d\x01\x04\n\x03\x05\n\x03\t\n \x17\x92\x01m!\x11\n\x00\x03\x01\x14\x04\x00\x1b\x12\x1b\x16\x11\x04\x11\x08\x06\x00\r\x06\x08\x03\x07\x04\x00\t\x01\x0e\r\x04\x03\x04\x00\x11\n\x14\x13\x12\x07\x13\x14\n\x1b\x08\x00\x0b\x01 \x00\x1d\x08\t\n\x00\x13\x04\x03\x00dY\x07\x00\x01\x14\x11\x06\x00\x05\x01\x00\x08\x04\x04\x04\x07-\x00*)\x04\x03\x86\x01e\x1b\x1c\x1d\x00\x01\x86\x02\x83\x02\x00\x01.-:\x0f\'\xc8\x01\xc7\x01\x04\x00)\x01:\x0b\xa8\x01\xd5\x01\x02\x04FKRi\x1e$/\x08\xa4\x01\x9f\x01\x03\x00\x01\x02\n\x001\x01\x18\x0f\x07\xda\x01\xd9\x01\n\t`?\x17\x02NM \t\x16\x15\x1f<1VU\x9c\x01\xab\x01\x04\x101\x19\x1a\x05\x13 \x1f\x12\x16\x1d\x14\x1d\n\tLA\x9c\x01\x95\x01\x0f\x18\x17\x02\x01\x00\x04\x03\x04\x00\x0f65\x9e\x01\x93\x01\x04\r\x02\x01\x04\x00\x01\x14\x04\x00\r\x11\x8c\x01\x8b\x01\x00\x01\x14\x00\x04\r\x1f\x08\x02\x00\x0e\x00\r\x00\x01dc\x12\x05\x02\rpm\x06\x00\r\x06\x05\x00<3dk\x06\x00\r\x01\x0c\t\x01*\x1f\x07\x06\x00\x07\x02 >_\x06\x00%\x01&#\x06\x07\x14\x12#\x06DI\x00\x01\x00\x042\x0f!\x00\x04\x1aw5\x00$\x01\x145\x00^]\x00\x14\x13\x12\x08\x19\x1e\x1dNM\x00\x01$#L/\x13\x07\x0c\n\x15\x08\x12\x19\x0c\x02\x10\x1d\x00\x02\x08,\xf2\x07\x81\x08\xdc\x10\x87\x11\x08\x00\t\n\x01\x00\x1c\x0e\r\x07\r\x00\x05\xbc\x05\xb5\x05\x04\x00\x01\x05\x06\x00\x03\x0f\x12\x12\x00+\x06\x14\x1b\x18\x1a/\x0065\x00\x0c~\x89\x01\x00\x01(\x13\x00\x06Le(\x04\x13-\x00\x92\x01}\x132\x14\xe8\x01\xad\x02tq\x00po\x00\x01\x00TQ\x00\x01\x07\x02\x08\x06\x00\x11\x07\x82\x01y\x00JI\x00\x01\x02\x08\x00\x19\x9a\x01\x99\x01\x00\x01.#~}\x86\x01\x8f\x014\x05+\x04\x00\t\x01\x02\x00\\[\x04\x00\x0b\x01\x02\x00@\x1d!\x06\x00\x07\x01\x02\x80\x01\x7f\x06\x00\x07\x12\x13\x00\x14\x04\x00\x0f\x13\n\tNMfm\n\x0e\x00\x1b\x82\x01A\x82\x01\x08\x1f\x06V!\xcf\x01\x8c\x01\x8d\x01tq\x13\x04\x00\x03\x01\x02\x08\x00\x05\x01\x06\x03\x14\x00\x01\x12\x0c\x00\x0b:9&%\r\x03\x06\x00o\x10\x02DC\x01\x0f\x01L?\x12\x17\x03\x08\x0209\x02\n\x0305\n\x03\x07\x00\x01\x10\x0b\n\x03\x0c\x11\n\x1c%\n\x03\x01\x04\x02\x04\r\n\x03\x08\r\n\x03\n\x0f\n\x03\n\x00\x13\x02\x04\x00W\x01\x12\x11\x06\x03\x01\x06\x00\x05\x00\x0bh[\x00\xcc\x02\x85\x02K\x08\x00\x01\x05\x06\x07\x08\x07\x01\x03\x04\x02\x00\x02\x01\x00\x0c\x1a\x19\x0b\x02\x01\x08\x15\x0e\x02\x06\x04\x07\x0b\x10\x00\x19\x10\x04\x06\x04\x07%\x12\x01\x05\x14\x0b\x01 \xd2\x01\xd1\x01%\x06\x86\x01\x85\x01\x04\x01 \x1f$%\x08\x00G,\t\x06\x19\t\x03\x0c\x0b\x16\x03\x11\x00\xbc\x05\x97\x05#\x18\x00\x1f\x02\x0b\x04\x08\x06\x12\x1c-\x05\x10\x17\x0e\x07\x08\x00\x0b\x00\x0c\x04\x00\x0b\x07\x00\x01\x05\n\x05\x04\x0c!\x06\x1d\x18\x19\x10\x01\x00\x05\x06\x07\x00\x08\x06\x02\xce\x01\xd5\x01\x00\x04\x02!\x0b\x0c\t\x00\x14\x16\x125\x0c\x18!X_XM\x01\x02\x04\x01]\x00\x06\x10\x15LI\x00\x08\n\x02\x13\x01\x04\x03\x06\x05\x9e\x01\x9d\x01\x0e\r\xf2\x05\xf1\x05\x00\x1c\t\x11\x02\x0e\x0f\n\t\x06\x03\x01\x00\x08\x06\x04\r\x1c\x1f\x8c\x01\x8b\x01\xec\x01\x01\xe9\x01\x12\x04\x07\x83\x01\xae\x01\xad\x0185\x14\x1f\x0f\x18\x07\x02\x00\x06\xe4\x02\xd7\x02\x1cx\x83\x01\x8a\x10\xad\x10\x02\x08\x07\x00\x06\x00\\a \x19\x1e)\x8e\x02\x81\x02\x04\x16\x01\x17\x00(\x1c\x075\x06\x03\x0c&\xdc\t\xb5\t\x98\x07\xf7\x07\x00\x08\x07\x02\x01\x07\x00\x18\x00\x19\x02\x03\x00\x14\x05\x07\x04\x00)\x08\t\x0b\n\x01\x00\x04\x02\x06\x004+\x02\x07\x01\x00\x02\x0b\x04\x0e\x07\x06\x00O.-\x00\x05\x03|q\x05\x00\x01vM@?\x98\x02\x97\x02\x08\x07\xc8\x01\xe7\x01\x00\xc6\x01\xa5\x01\x1b\x1c\x0c\x0b\x0c\x0b\x8a\x01\x91\x01LK\x9a\x01\x99\x01\x13\x14\x02\x01\x13\x04\x14\x19\x13\x14\x13\xaa\x03\xc1\x03\x8c\x01\x8b\x01\x00\x1c\x0f\x0b\xc0\x02\xbf\x02\x04\x00\x17DA\x01<;\x00\x0c\x0b\x00\x14\r\x05\x08\x001\x02\xde\x01\xd5\x01\"+\x084\x071 \x11\x0f\x04,7\x08\x05\xd8\x19\xd7\x19\x10\x0c\xb4\x04\xcf\x04\x00\x06\x0c\x00\x07\x05\x01\xa8\x02\x9f\x02\x06\x005\x05\x08\x00\x01dE\x1b\x00V9\x0e)\x00|{\x00x[\n\t\x1b\x00DC\x00\x8e\x01\x8f\x01\x04\x00m\n\t*\'ba\x01\x02\x14\x08\x19\x1a\x1b&\t\x1b&\x1d\x08\x0f\x01\x1e\x08\x1fbe\xce\x01\xcb\x01z{B\x03\x00R\x91\x01\x00n=\x00$S\x00\xbe\x02\xbd\x02\x04\x03\x0e\x03\"+\x00NM\x0b*\x0c\x00\x05\x19\x10\x01\x0e\x00\x1b\x0b\x0587\x0b\x0c\"!\x0c\t\x01\x02\x01\x02 \x00M\x02\xc8\x01\x00\xcb\x01\xc4\x02\xc3\x02\xa4\x02\xbb\x02\x12\xc4\x02\xbd\x02\x02\x00\x12\x00\x04\x05\x11\t\x16\x10\x15&\x01)\x00ro\x00\x8a\x01\x8b\x01:7\x0e^k\x00\x01\x02\x04\x007\x01\xcc\x03\xc9\x03\x00\x01\x02\x16\x13\x1c\x1dDE\x02\x16\xb4\x02\xd1\x02 \x1f\'\x1c\x06\x02\x036\x13\x06\x11\x1c\x04\x11/RC\x1d\x04\x03\x06\x1e\x13$)\x08\x07\x06\x004+\x07\x12\x0b\x0f\x10\x14\x19\x00\x04\x02\x01\x06\x04\x037\x02\x01\x02TS\x1c\x13lw\x00\x1e#\x08\x02\x04\x05\x00\x014/\x04\x07&\x13\x14\x1d\x0c\x13\x04\x00K*\x02+\n\t\n\x06\x0f\xb2\x01\xb1\x01:9\x05\x06\x00\x02\x00\x01\r\x0e\x02\x07\x06\x05\x06\x02\x0e\x04\x13\x02\x12\x1d\x0c\x00\x0c\r\x0c\x0b\x06\x00}\x10\x0f\x04\x0c\x1e\x1d\x10\x00\x1d\x01\x16\x15.-\x12\x0b(-\x12\x05\x0b\x00.\x0f\x05\x0b.-\x0b\x0043\x02\x01\"\x1d\x03\x14\x13\x02\x01\x06\x05\x02\x01\x04\x00\x03\x02\x01\x06\x02\x06\x0b\x01\x00\x16\x18\x1f\xf2\x01\xf5\x01\xbc\x01\xc3\x01\n\x00%\r\x0c\x02\x1e\x1d\x16\x17 \x1d\x10\x0e\t\x15\x00\x10\x05\x00\x06\r\x08\x00}\x10\x07\x02>7\x0f\x01\x12\x05\x0b\x94\x01\x91\x01\xb8\x01\xb7\x01xw\n\x0b\x16\x07\r\"\t\x17\x00\x10\x0f\x00\x12\x06\x15\n\x1a\x13\x05:E\x00\xae\x01wJ\x7f&%\xd6\x01\xd5\x01\xd0\x01\xa1\x01%\x05\x10\x0f\x01\x00\x10\x03\x0c$;\x02\x00\x01\x02\x04\x00\x13\x01\x00~{\x00\x1e\x15\x07\x0f\x10\x04\x00\x03\xc8\x01\xc7\x01\x04\x00\x03,+\x04\x00\r\x0e\x04\x19\x1a\x00\x11\x10\x06\x00\x05\x02\x0b\x05\x04\x00\x1b\x0e\r\x00\x0e\x00\x1e\x00+,+\x00\x0e\r\x1c\x04\x00A\r\x0f\x02\x01\x18\x15\x1e\x00\x19\x03\x02`]\x12\x15\x01\x06\x0f\x00\n\x00\x18\x00\x01\x13\x00\x06\x07\x05\n\x00\x0c\r\x04\x00+\x0b\x12\x07\x08\x07\x08\x07\x08\x07\x08\x07\x08\x07\x08\x07\xcc\x01\xc9\x01\x08\x06\t\xea\x01\xed\x01\x16\x00\x05:J\x83\x01\x04\x00)\x96\x01\x95\x01\x00\x014j\x95\x014B{\x00\x01\n\x07\x01\x00&\x17\x14\x17\x06\x10\x00\x01\x0f\x06\x00)\x10\x05\x07\x06\x07\x08\x07\x08\x07\x12\x11\x00\x12\x03\x13\x06\x10\x05\t\x04\x03\x04\x00\t\n\x00\x06\x00\x05\x06\x00\x01\t\n\x00!\x1c\x11\x07\x00\x0c\r\x00\xb0\x01\xaf\x01\x02\x01\x00\x06\x03\x01BA\x04\x00\x8d\x01\xfe\x01\xfb\x01>=\x01\x02na*5\x01\x00\x10\x1a#\x05\x00\n\x06\x0f>1.9 \x1f\x18\x07*7\x01\x02\x11\x10\x02\x1c\x00\x0b\x11.\r8\x07/<;\x07\x13:/\x0b\x14\r\x08\x05\t\xa8\x01\xa4\x01\xcb\x02\x00\x04\x03\x00\x14\x03\x0f\x0043\x06\n\x04\x07/\x00\x07>5\x00\x10!\x14\x00\x01\x08\x07\x00\n \'\x00LM$\x19\x07\xa0\x01\x9f\x01\x06\x00#\xd8\x01\xd3\x01\x1c\x1b\x1c\'zq\x00\x8c\x01\x8d\x0121\x9c\x01\x99\x01\x01\x04\x1a\x04\x00\x03\x0b\x11\x04\x00\x07\x12\x0f\x18\x19\x04\x08;\x18\x07\x1f\t\x02\x08\x000/\x000\x05)\x8c\x01\x8b\x01\x00 \xee\x01\x8b\x02\x01\x06\xb6\x01\xb5\x01\x00$!\x07\x00\x0b\x0c\x08\x00\x13TS(\"G\x01NK\x01\x02V\x00\r\x01\x00NI\t\x06\x02\x04\x00\x8b\x01\x04\x008\x15\'VU\x0c\x0b\x10\x15\x06\x05\x14\x0b,5\x08\"!HQ\n\x1c\x1b\t\x1a\x00\x0f\n\x06\x0f*\x1aC\x00\x10\x0509\x04\x1c\x03\tr\x81\x01\x00\xa6\x01\xa5\x01\x00\x86\x01\x85\x01\x00\xa6\x01\xa5\x01\x00|{\x00\xe0\x01\xdf\x01\x00\xe4\x01\xe3\x01\x00<;\x00DC\x04\x00\x83\x01\xca\x01\xb1\x01\x17ba\x01\x02^]HG:9\x1e\x1d \x1f\xae\x01\xad\x01rq\xd2\x01\xd1\x01\x08\x07po\xd4\x01\xd3\x01\x8a\x01\x89\x01\n\t\x01\x02\x8e\x01\x8d\x01NM@?21\x18Nc #jg*)*)\x01\x02\x01LI\x00\x01\x00\x06\x03\x01.\x04\x15\x0b\x00\x01\x00\x0e\x12\x1b\x04\x01k\x0425\x02\x01\x00\"!\x02\x01\x06\x05\x00\x1a\t.9\x06\t\xac\x01\xa9\x01\x01\x02\x1a\xae\x01\xc9\x01\x04>?\x12*-\x01\r\xbe\x01\xb3\x01\x0e\x17\x08\x07\x00\x06\x0e\xa8\x03\xbb\x03\xf2\x01\xad\x01K\x10\x07\x10\x15<3\x06\x00\x04\x0c\x1f<S\x00\x9a\x01\x99\x01\x00\x01\x86\x01\x83\x01\x00\x9a\x01\x99\x01\x00\x01\x05 \x06\x00#\x17\x00\x01\x02\x00\x01\x00\x8c\x01\x91\x01\x10\x01\x07\x1e\xc8\t\xe5\t\x04~\x7f\x04\x001\x96\x01\x95\x01\x00\x01\"\x17\xa8\x01\xb1\x01\x00\n\x1c#\x00\x01HE\t\n\x00\x01\x00 \x154=\x06\x00\x05\x0c\x01\t\x04\x00\x03*\' \x00\x11\x01\x02\x0e\x9e\x01\x9d\x01\x00\x0f\x00\x02\n\x00\xb1\x01\x0c\x07\x0b.05)\x16@E\x07B?\x10\x11\x12\x0f\x82\x0f\xf1\x0e\xb4\x0b\xb3\x0b\x86\x03\xff\x02\x13\x0e\t\x07\x00\x06\x05\n\x01\x02\x03(\'\x10\x16\x14\x12Q\x00\x04\x03\x1e\x04\x07\x0c\x1d(%\x08\x0f$\x13\r\x03b\x131\x1b\n\x02\x0b\x96\x02\x9c\x03\xb1\x05DK\x08\x06\x11\x10\x03\x00\x02\x01\x02\x00\x08\x14\x00\x1d\x8e\x1e\x8d\x1e\x00 \x1f\n\x04\x03\x19\x0c\x05\x07\x00*\x1f\t\x1e\t\"3\x00\x01\x04\x00\x1f*\x1d\x04\x0f\x16\x14\x1d\t\x01\x10\x0f*\x1f\t\x88\x03\x87\x03\x04\x00\x97\x01\n\xaa\x0c\xb3\x0c\x000/\x0f\x06:\x11\x17\x18\x1b\x00\x01\x02\x01lc\x06\x0c\xf8\x01\xba\x01\xc9\x03\x02\x90\x01y\x08\x19\xe6\x01\xed\x01\x02>\xaa\x05\xe9\x05\x00.%\x16\x1b\x16\x07\x0e\x19\x03\x1c\t\x0c\x00\x19Z?\x05\x15./\x00\x04\n\r\xe2\x03\xd7\x03\x05\x00lM\xae\x04\xcb\x04\x03\x04\x18\x1b\x08\x07RQ\x04\x00\x05>\x8e\x01\xcb\x01\x06\x007\x0c\x07\x08$-\x01\x02\x1c\x1d\x1a\x08!\x06\x0e\xbc\x01\xcd\x01R&y\xf0\x01\xef\x01\x00BK\n\x05\x0c\x03\x04\x00\x07\x01P1\x1b\x06\x00\x03&%\x06\x00\x03\x01\x02\x04\x00\x0bH+\x13\x14\x17\x03\x08\x00\x05\xae\x01\x9b\x01\x11\x06\x00\x03dc\x06\x00\x03\x01\x02\x04\x00\x15\x0c\x0b\x16\x17\x02\x01N/\x19\x1a\x1b\x06\x00\x03\x94\x01\x93\x01\x06\x00\x03\x01\x02\x04\x00\r \x0c\x1d\x0e\x01\x02\x1b\x06\x00\x03hg\x06\x00\x03\x01\x02\x04\x00\tZG\x0f\x10\x11\x06\x00\x11*\x84\x01\xad\x01,\x1d\x0e\x19\x10\x11\x06\x00\x03|{\x06\x00\x1f\x01\x00\x14\n\x19\x1a\x1b2\x15\x1b2\x15\x1b\n\x0e\x17\x08\x00#\x01 \x1d\x04\x03\x01\x00P=\x06\xa2\x01\xb7\x01\x08\t\x12\x1c\x80\x02\xad\x02\x04\x00\'\n\tl3\x00\xac\x03\xe1\x03Fv\xbd\x01\x82\x13\x81\x13\x00\x1e\x1dLG\x03\x00\x02d\x00\x03\xfc\x01\xfb\x012\x00\x07\x01\x02\x00\x10\x0c\x00\x01\x0f\x0c\x00\x07\x16\x1d\xd2\x02\xcb\x02\x06\x00\x03\x0e\x1c\x04\x00+\x19$3,\'\x03\xcc\x02\xc7\x02\x03 \x08\x1d\x12\x1b\x1e\x17\x05\x12\x11\x00\x1e\x1b\x04\x00\x01\x01\x04\x00\x05\x02\x16\x15\x04\x00\x03&%\x04\x00\x07\x0c\x05\x10\x15\x04\x00\x03\n\t\x04\x00\x03.-\x04\x00\x05\x01\x02\x01\x06\x00\x07\x04\x03\x02\x08\x04\x03\x19\x00\x01\x02\x01\x02\x01.-\xb8\x02\xbd\x02\xa6\x01\xa5\x01\x06\x04\x00\x1d\x06\x05\x0e\x17\x14\x12\x11\x12\x11\x12!$\x07\x15\x02\n\x00\x03\xb0\x01\xb1\x01\x04\x00#\x02&\' \x1f\x02\x10\x04\n\x1d\x00\n\x1f\x14\x8c\x01\x89\x01\x00\x01\x06\x00\x0b\x14\t\x07\x02dg\x04\x12\x05!\x01\x02\x06\x00\x05\x012/\x1a\x00\x05\x01XU\x04\x00\x03\x92\x01\x91\x01\x04\x00\x1bhg\x00\x01\x02\x00\x01\x18\x00\x17\x00\x18\x00\x17\x06\x00\x0385\x06\x00\x99\x02\x06\x07\x00,\x94\x02\xbf\x02\xa0\x01\x9f\x01\x14\x0b\x07\x00 \r\x00Ba\xda\x02\x00\xcb\x02\x07\x0c\x03\x06\x1c)\x01\n\x04\t\x08\r\x06\x14\x06\x11\x01\x14\x13\x08\r\x00\x01\x08\x02\x01\x07\x02\x06\x00\x07\x00\x08\x00$\x1f\x03\x0e\x01\x07\x03\x02\x04\n\r\x01\x02\x08\x07XW\x02RU\x0c\x04\x02\xea\x01\xf9\x01\t\x00\x08\x05\x00\x01\x05\x06\x00\x08\x00\x07\x01\n\x172\x1f\x00\x06\x0b\r\x12\x08\x1d\x14\x07\x12\x00\x04\n\x01\x0b\n\x05\"!\x01\x00&\'\x00,%:=\x0c\x07\x88\x04\x95\x04\x00\x02\x06\x07\x03\x02\n\x02\x07\x06\x02\x01\x0f\x04\x08\x04\x00\x13\x07\x08\x0b\x0c\x05\x06\x07\x02\x05\x00\x04\x02\x04\x00)\x08\x05\x00\x06\x05\x00\x06\t\n<;\x02\x01\x0b\x00\x02\n\x06\n\x14#\x08\x00!\x08>=\x07D;\x07R7\x11\x07D?\x02\x0543\x06\x00\x05*)\x04\x04\x01\x1d\x10\x12!\x02\x04\x01\x0c\r\x0e\r\x00PC\xb2\x06\xcd\x06\x04\x08\x1b\x01\t\x0f\n\x10\x00PK\t\x01\x00\x02\x0f\x1e\x04\x07\x01\x02\x04\x00\x15\x01\x02\x03\n\x00\x05\x00\x06\x05 \x17\x04\x07m\x0eNM\x00\x07\x00X?\x0f\x1e\x19\x0b\x02\x0e\x05\x01\x07\x01\x0c\x01\x00\x07\x00\x02\x01\x08\x07\x01\x04\x01\x00\x08\x05\x01\x02\x06\x00NI\x10\x02\x13\t\x00\x02\x01\x00\n\x01.5\x08\x00\x07\x02\x06\x00\t\x06\x05\x07\x08\x06\x04\x00\x1f\x02\x04\x10\x1b\x08\x01\x00\x06\x03\t\x02\x00\x06\x05\x00\x06\x04\x00g\x02\t\x00\x08\x05\x06\x05\t\x12\x01\x00\xc0\x01\xbf\x01\x02\t\x01\x02\x0043\x08\x02\x01\x04f7\'\x07(\x0c5\x00\xee\x03\xed\x03\x00\x02,\x17\x15\x002%\x06(3\x05\"\x84\x02\xa5\x02\x00&\x19\x04\x05%\x0c\x0b>7\x05\xb2\x01\xaf\x01\x01\x00he\x0e\r\x12\x03>M\xc2\x01\xc1\x01\x04\x00C\x16\x152/\n\t\x01\x00NM.\x8c\x01\xb9\x01\x04\x18\xcc\x0b\xc1\x0b#DK\x05\x0c\xee\x03\xed\x03\t\x02\x08\x00\x02\x01\x07\xdc\x03\xd9\x03\x06\x04\x00\x0f\x054-\xa0\x01\xa5\x01\x06\x00\x07\x04\x00\x0b\x080;\x06\x00\x06\x04\x02\x03\x0b\x02\x08\x00\x1f\x10\t\r\x03\x12\xee\x01\xed\x01\x88\x01\x85\x01b]\x0b \x1f\xc0\x01\xb7\x01\x04\x00\x05\x1021\x04\x053\x06\x05\x03F5\t\x08\x00\x14#&\x1a?\x0c\x0b\x00\x12\x01\t\x05\x04\x03,+\x02\x01\x04\x053\x0e\x12\x0b\x07\x00\x04\x03\x08\x07\x00\x18\r\x02\xc0\x02Y\xe3\x01\x0c\x17\x00\x10\x11\x0e\x00\r\x10\x0f\x08\x00\x07\x05\x01\x08\x00\x04\x04\x8f\x01\x07\n&/\x02&\'\x10\x0f\x02\"!\x01\n\x05\"#\x04\x01\x08\x06\x0e\x13\x07\x08\x11\x1a\x11\x07\x00\t\x10\x04\x03\x18\x08\x0b\x1321\x98\x02\x95\x02\x01\x00^E\x07\n/\x0c\x1c\x19\x14\x15\x02\x14\x06(9B%\x1e9\x06vw\x03\x08&)\x03\x02\x04\x00\x0f\x02\t\xd2\x02\xd7\x02\x0c\x00\n\t\x06\x003\x05\x1a\x13\x12\x0f\x01\x14\x19\xee\x08\xe7\x08\x02\x00\x92\x02\x93\x02\x8e\x07\xd9\x01\xb3\x05\xe6\x04\xe1\x04\x01*\x061\x92\x01i%\x04\x00\x9d\x01\xa0\x01\xb5\x01\x07(\t\x01\x1e\x1d$\x00\x02\t\x08\x00\x07\x00\x08\xa8\x02\xdb\x01o\x00\x06\x00\x03\x01\x00\x07\x08\x06\x1c\x0f\x11$\x1a\x0eK\x16\x13\x10\x1a+\x1e\x19\x06\x15\x06\x03\n\x1a\x0f\t\x05\x16\x15\x08\x1e\x13\xae\x01\xbf\x01\x0c\x08\x05\r\x06\x1eVe\r\x06\x05\x10\x18#\t\x06\x0e\x12\x17\x07\x06\x00+\x10\x06\x01\x0f\\]\x08\x07\x01\x18\x02\x19\xb8\x01Eo\x96\x01\x8b\x01\x0b\x06\x05\x1a\x13\x06\x01G\x02DCLK\x02\x0e\x11*)\x12\x0fJI\x01&%\x04\x03\x0c\x10\x1b\x00\x06\x05\x0c\x0b\x14\n\x17\x0f\x18\x04\x11\xb4\x01\xb1\x01\x06\x00\t\x01\xd2\x02\xd7\x02\x08\x01\x04\x05\x15\x0e\x00\x01\x00\x02\x00\x01\x00\x07\n\x01\x04\x00\r\x12\x07\t\x0e\r\n\t\x06\x00+\x06\x0b\x08\x00\x1e\x00\x165\x02\x01\x1e\x01\x13\x18\x00\x165\x02\x012\xe0\x07\x8f\x08\x04\x00\x0b\xe4\x01\xe5\x01\x05\x06\x07\n\x04\x00\x11\x06\x07\x00\x0c\x03\x0f\x08\x06\x05\x04\x00M\x07\x02\x0b\x12\x02\x10\n6!\x1f\x12\x11\x0b\x03\t\x00\n4\x1e!\x17\n\t\x13\x03\x00\x18\x17\x1a6\x1f\x0f\t\x0b\x16\x19Ja\x0c\x04\x07\x15\xa4!\x89!\x0e\x11L/\x19\x08\t\xfa\x02\xf3\x02\x04\x12\x8d\x02\x05\x1f\x0c\x00\x04\x01\x12\xa2\x04\xb9\x01\x8b\x03\n4;\x00\xce\x02\x8d\x02\x11\x1e3\x15>3F\x173\x07\n\x82\x01[\x8c\x02\x93\x01\x08\xaf\x01\xa6\x01\xa3\x012&)\x17\n\t\x11XU\x07\x9c\x03\xdf\x02*3\r#\x84\x01c\xf6\x05\x95\x06\xb6\x02\xaf\x02\x03\x12\xfc\x02\x8f\x03\x84\x01c\x96\x05\x83\x05\xa2)\xf7(S\x03b5\t\n%\t\x82\x0f\x81\x0fLI01\x0e\r\x00N9\x11\x00 \r\x0f\x01\xc4\x02\xab\x02\x11\xe8\x12\xef\x12\x00\x06\x01\x03\x00\x1e\x19\x03\x14\x0f\x03\x12\n\x18\x03\x0f\x1f\x08\x07\x00\x1a\x15\n\r\x04\n03\x1a\x12+\"\x07\xb4\x1a\x8f\x14\xd1\x06\x12\x07\x04\x00\x0b\xa6\x02\x95\x02\x00\x0f\x82\x01\x81\x01\x04\x00\x1d\x08\x07\n\x14\x1d\xe4\x01\xe3\x01<C\x00\x08&\x02\x1f\x07\x04\x00\xdf\x01\x05\x06\x00\t\x04\x0c\x03\n\x0b\x06\x05.0]\x05\x06\x90!\x8b \xec\x0b\xed\n\x81\x02\x00\x16\x15\x10\x07$\x1e\xa2\x02\xd7\x02py\nZ\x1d\xfc\x03\xcb\x02\xeb\x01\xae\x01\xb7\x01\n\x1e1\xce\x90\x01\xcd\x90\x01\x98\x01\x95\x01\x04\x05\xe8\x01\xfd\x01\x10\x01\x07)4\x00\x01\x08\x00\x0b\x0c\x10\x1f\n\x06\xd8\x01\xd7\x01\r\x10\x00\x01\r\x0e\x05\x00\x1a\x1b.%\xe8.\xe7.\x08\x07\x06\x01\x03\x14\x13\x0c\n\rBI\x16\x15\xe0\x0b\xdf\x0b\x80\x01\x7f\x00\n\t@\x8e\x01\xcd\x01\xd8\x0c\xd5\x0c\x1e\x0b\x06\r\x04\x041\xe05\xf35\x00>=\x14\xb2\x01\xab\x01\x11\xe0L\xf1L\x0e\x19\x06m\x8a\x01\x0e2K\x07\x00\x12\t\xea\x01\xe9\x01\x04\x00\x03\x02\x01\x04\x00\r\x04\x00\x98\x03\x99\x03\x84\x03\x99\x01\xe7\x01\x04\x01\x15\x0e\t\x16\x190)\x05\xa8\x03\xa7\x03\x08\x07\x04\x00\'\x08\x07\xb4\t\xb3\t\x00\x05\x00\x06\x90\x02\x99\x022=\x0c\n\x00\x07\x08~)S\x06\x00\x11\x07\x00\x08\x05\x06\x00\xe8.\x99,\xc9\x02\x04\x04A\x00\x0b\x02\x16\x03\x19\xd8\x01\xc9\x01\x05\x01\xe2\x07\xdd\x07\x04\xec\x05\xd9\x05\x17\x06\x05\x01\xcc\x03\xf6\x8b\x01\xc9\x8f\x01\n !\x04\x03\x08\x07\x00\x05\x12\x0b\x06\x00\t\n\x11\x02\x06\x02\x04\x00\x1b\x9e\x01\x12\x11\x9f\x01\xc8\x01\x89\x01;\x01\x06\x0b\x01\x0e\x13\x0e\x04\x00\x03\x07\x08\x04\x00#\x07\r\x10\x03\x02\x01\n\x07\x00\x02\x08\x0f\x1d,\t\x00\n\x07\x06\x00%\x05\x08\x01\x08\x07\x02\x06\x18\x0f\x05\x01\x05\x08\x04$)\n\x0f\x06\x04\x00\x13\xcc@\xcb@\x14\x07\\g\x00\x02\r\x18\x04\x05\x1b\n\x16\x13`g\x03\x06\x03\x01\x00\x05\x06\x02&\x04\x11#\x10\x02\r\x07\x00\x14\x16\t\x19\x08\t\x06\xb6\x0b\xaf\x0b\x16-\x08\t\x04\x02\x13\x06\x00\x04\x1a\x1d \x1f\"\'\x01\x04\x00\r\x08jc\x03,\x01+\x04\x00%\x05\x00\x07\x0e\x1cPk\x07\n\x00\x01\x00\xa6\x01\xb1\x01.\x00/\x14\x03\x16\x00\x1b\x01\x00\x8a\x01\x89\x01\x02\x01\x08*/\x01>;XW\x04\x00\x1d\x01\x00\x04\x0c\n\x17\x00\x01\x08\x05\x00\x01\x02\xb6\x01\xb5\x01\x04\x00\x05\x01\xd0\x01\xcd\x01\x04\x00\x05\x01\xf0\x01\xed\x01\x04\x00\x03\x01\x02\x04\x00U\x1c\x08\x03\x1f\x01\x00\x08(-\x01\x02\x1c\x05\x15\x01liLK\x01\x00\tL?\x01\x07\x08\x05\x06>;\x01\x00\x02\x01\x00\x1e\x1d\x00\x0c\t\x0c\x0b\x04\x00#\xc8\x01\xc7\x01\x00\x02\x01zy\x0001 \x1f\x18\x17 \x1fzw\x06\x00#\x1c\x02\x185\x00\x01\x06\x03~\x7f\x06\x05\x02\x04jo\x00\x02*\x00\x03 \t\x04\x00\x01\x17\x04\x00!\x05\x08\x07\x10\t\x05\x00\x06\x08\x07\x04\x03\x07\x08\x00\x02\x04\x04\x05\x1d\x00\x06\x00\x1a\x19\x00\x05\x06\t\n~}\x18Ja\x06\x00-\x07\xa0\x01\x87\x01\x15\x00\x06\x00\x16\x15\x06JO\x04FI\x98\x02\x8b\x02\x0b\x98\x02\xa1\x02\n\x0b\x0c\x04\x00\'\x02\n\x05\r\x08\x00\t\x02\x10\r\x06\x04Pl\xbf\x01\x13\x14\x05\x08\x01\x04\x00\x0f\x05\x00\x06\x0c\x0b\nNW\x06\x00\x17\x02\x01\xa0\x03\xe3\x02;\x04\xba\x1f\xbd\x1f<\x05\x80\x02\xb5\x02\x06\x005\x04\x03\x04\x03\x02\x01\x04\x03\n\t\x08\x07\x0e\t\x00\x03\x004/TORW\x04\x05\x14\x13\x04\x00I\x02\x01\x06\x05\x1c\x19\x08\n\r\x05\x04&\x1eE\x08\t4\x1cO\"\x02\x1f\x0c\x0f\x00\x184h\x90\x02\xc3\x03\x00\x02\x01&#\x01\x0c\x04\x05%\x08\x07\x00\x10\x0b\x03\x08\x07\x00\x02\x00\x01\n\x00\x05\x03\x06\x1a\x1f\x04\x06c\x0b\x0e\x00\t\x00,+*-\x00\x1c\r8E\x04\x14\x16+\x84\x01\x83\x01\xe0\x01\xdb\x01Z]\x08\x07\x10\r\t\x06\x02\xd4\x01\xd3\x01po\x1c\x1b\xd8\x01\xd7\x01\xe2\x01\xe1\x01poFE>=\x00\x01\n\x04\x16%\x11!\x01\n\x03\x05\x02\x0121\x00\x1c\x1b\xe6\x01\xea\x03\xcf\x05\x0e\x1e+\x08\x00M\x18\x13\x03\n\t\x04\x16\x19\xa0\x01\x9f\x01\x06\x18\x1b\x01\x16\r\x08\x07v{\x0c\t\x01\x14\x02\x1c3\x1c\x1b\xc8\x01\xc7\x01\"\x04%zy\xf6\x03\xef\x03\x08\x04\x04\x9b\x01\x00\x15$#\x00^]\xa8\x02\xa7\x02\n\x02\t\x01\n\t\x08\x02\t\x08\x07\t\n.-\x02\x01VU6\x0c!h\x87\x01\x00\x9e\x02\xef\x01f\x93\x01\x00\x07\x01\x03\x08\x01\x08\x05\x08\x01\x04\x88!\x8b!\x82\x02\x81\x02\x18\x17\x0e\x00\x05\x10\x1a+\x03\xc2\x07\xe1\x05\x02\xc3\x01\x84\x01\xa3\x01\x0c,\x04)\x10!\xd6m\x932\xc7;\x06\x06\x00\x1f\t\x04\x00\x01\x08\x00\x06\x05\x1c\x0b*7\xfe\x01\xfd\x01\x04\x03\n\x00\x1f$%\x00\x02\x01\x00\x06\x05\x00\x08\x07\x00\x02\x01@=\x04\x00-\xc4\x01\xc3\x01\xb6\x01\xb5\x0145@=\x00\x01\x00\x08\x07jg\x00.-\x00\x01\x04\x03\x02<\x00\x03@?\n\x00)>+\xb2\x01\xc3\x01\x00\xb6\x01\xb5\x01\x01\x00@E4%\x05\x00\x01@=\x01@?\x04\x00a\x02\xca\x01\xc9\x01\x00\xba\x01\xb9\x01\x0021\x00\x01\x02\x01\xb6\x01\xb3\x01\xaa\x01\xa9\x01()\xbe\x01\xbb\x01\xac\x01\xab\x01\x04\x05B?\x00\x01\x05\x06\x00\x02\x01\x00\x065*\x06\x02\x01 \x1b\x03\x00\n\x10\x15\x03\x04\x00=\n\x06\x0f\x08\x18\x19\x05\n\t\x12\n\xd6\x04\xef\x0467\x02\x01\x05\x10\x14\x19\x10\x0e!\x00 \x1f@?\x00j\x04\x12_\x8d\x01\x00\x96\x01\ra\x1f,T\x85\x01\\M\x10\x1d\xce\x01Ws\x18\xc0\x01\x0cq\'\x0b?ji\x00\x05\x12\x0b\n\xf6\x04\xf9\x04\x08\r\x00\xda\x04\xe9\x04\x10\x02\x00\x0c\x06#\x002!\x06\x03\x86\x01\x00\x05\x01\x8c\x01\x8b\x01\x06\x00\x01\x02\x04\x00\x03\x01\x02\x04\x00\x01\x01\x06\x00!\x06\x05\n\t\x02\x00\x16\x17\x04\x03\x1a\x19\x00\x1e\x1d\x05\x06\x04\x00\x19\x02\x01\x05\x06\x04\x03\x00\x08\x07\x00\x0c\x07\x03\x04\x06)\x0b\x06\x03\x01\x16\r\x07XO\x18\x1b:9\xf6\x01\xff\x01\x06\x08>\x1b\x01\'\x04\x00\x03\x02\x01\x06\x00\x07\x02\x00\x01\x02\x06\x00\x11\x01\x16\x04\x19\x05\x062\x001\x04\x003\x08\x07\t\x04\x06\x00\x02\x00&\x1b\x0b\x02\x1a\x19\x02\x03\x18\x17\x14\x06\x0f\"\x1f\x1c\x15\x11\x06\x00%\x10\x03\x00\x01\n\x13\x00\x06\x05.\x0b!\x0c\x0b\x0c\x0b\x0087\x06\x00\r\x10\rfg\x00\x1c\x19\x12\x00\x01\x01\x06\x00\x01\x0b\x04\x06\'\x07\x08\x05\x0f\x10\x16\x1f\x14\x01\x0c\x0eXY\x19\x00\x18\x17\x000/\x08\x00!\n\t\n\x03\x05\x00\x04\x03\x04\x03\x10@M\x01\x1a\t\x0b\x04\x00\x04\x01#,!\x07\xc4\x01-K\x90\x01\x91\x01f\xaf\x01\r\x14\x05\x00\x06\x05 \x07\x0e\x00\x05\x06\x1b\x18 \x00\xbb\x01\x19\x05\x00<5\x00\"!\x08\x05\x01\x00\x10\x05\x07\x01\x00J9\x01\x02JI\x04\x1a\x1d\x0fp;1\x8a\x03\x87\x03\x03&\t\x10)\x00\x01\xa2\x01\x95\x01\x0e\x15\x00P\x8e\x01\xe1\x01\x00\xea\x01\xe1\x01\x08\x0f\x0c<1*/`W\"\nCF7x1v\r\xa9\x01\x1a)\x01\x08\x10\x03^c\r\x08\xa0\x01\x8b\x01\x12Z-\x11\x15/\x0187VI\x10\x1b\x06\x00! \x1f\x00\x14\t\x05\x03(\'*\'\x00\x01\x06\x01\x03\x02\x04\x10\x13!\x00\x1c\x11\x07@#rU9\x04\x02Q\x06F/J\x1d\x19\'\x03\x04\\E\x01\x06(\x19\x0e9\x02\x07\x00\x182I\x00\"(-\x1b$\x0f\x11\x12\x01B\x1f3Z\x13A\x04\x07\x04\x00\x04\x0c\x05 \t-\x04\x10\x04\x0f\xf7\x01\x02\x01\x08\x01\x04N; \x0f>7\x13\r\x07P; \x02\x14\x17@C\'N\x01&w\x03\x04R\x16S \x0f\x14\r\x13\n\x19DI,/\x02T= \x0f\x1a\x1b\x13\x1c<I\x13 0\x1d7*\x0e!\x15nM\x08\x07l\x95\x01\xde4\x8d4KXY\x01\x00\n4;>=\x02\x03\xc0\x05\xaa\x0b\xe7\x10\x00\x04\x0343\x1a\x19<;D\xf2\x03\xb7\x04\x00\x84\x03\x83\x03\x82\x11\xf9\x10$+\x00\x06\x18\x1d\n\t\x0e\r\x02\x04,\xd8\x05\x8f\x06\x07\x0e\x00\x02\x01\x02\x04\x00\x0f\x01\x02\x00\x01\x02\x01\x05\x0e\x04\x07\x1f\n\x00\x01TM\r\n\x07\x06\x0b4\'2\x03\x01)\x06\x00\t\x01\x00\x05\x00\x06\x04\x00\x01\x02\x04\x00A\x1a3\x18(\'!$\x00\x01\x02\x00\x01\x00\x07\n\x02\x01\x08\x07T;\x11\xbe\x01\xc5\x01\x1a\x11\x05\x06\x02Lh\xb5\x01\x03\x04\x01E\x08\x07\x00\x12\x0f\x04\x0eXk\x02\x04\x08\r:7\x01\x00\x12\x05\x08\xa2\x02\xb5\x02ZW\x01\x02\x01\x00LC\x00\x0e\x13\x1e\x1f\x06\x005\x0f\x10*)vs\x00\x01\x04\x0c\t\x03\x02\x01\x00\x0b\x1c\x1a)\x00\x07\x08\x00\x01\x02\x00\x01\x04\x00\x1d\x02\x0c\r\x05\xc2\x01\xc1\x01\x06\x96\x01\x95\x01\xb0\x04\xcb\x03\x1e\x81\x01\xf2\x03\xf1\x03\x04\x00\x89\x01\x12\x0f\x1e\x1d>=BA43\x10\x0f\xa8\x01\xa7\x01feXW\xc6\x01\xc5\x01\x86\x01\x85\x01fe\x01\x00&\x11\t\x06dq43,+\x12\x11lk.-:9FE\x01\x02\x90\x03\x91\x03&\n-\x01\x10\x1e\x1f\x05\x03\x80\x1b\xdd\n\xa5\x10\x04(\x17\xb8\x12\xcb\x12\xecW\xebW\x04\x00/\x0c\x0b`n\x8d\x01?\xb0(\xa5%\x89\x03\xc0\x0e\x1e\xff\x07\xb0\x03\x8d\n\x0c\x02\xfe\t\x8b\n\x00\x1c\x1b\x00\x0c\x03\x04\x023\x08\x12%\xa6\x01\xfc\t\xa1\x0b\xac\t\xb5\t\x0c\x00\x16\r\x01\x07\x08\x07\x08\x07\x08\x07\x08\x07\x08\x07\x08\x07\x06\x003\x08\x07\x06\x0f\x10\x05\x07B9\x00nm\x02\x00\x01\x05\x06\n\t\x00\x02\x04\x05\x02\x01\x00\x04\x10\x11\x1d\x01\x00nk\x08\x1e%\x01\x04\x00\x01\x02\n\x00\x03BA\x06\x00\x03\x16\x15\x06\x00\t\x10\x16\x17\x01\x0b\x04\x00\x03BA\x04\x00\r,+\x00\x01\x00\x06\x03\x0e\x00\x0bXS\x03\x00\x16\x15\x04\x00\x03\x14\x13\x04\x00\x03\x1a\x19\x04\x00\x03BA\x04\x00\x0b,+\x00>=\x01\x06\x00\x04\x02\x07\x01\x00BA\x04\x00\r\x16\x15\x00\x10\x01\x00\r\x04\x00!\x1e\x11\x0b\x00NM\x0021\x01\x00<5\x03\x00\x0c\x0b\x04\x00\x0b2-\x03\x00\x06\x05\x04\x00?ji\x00\x01\x00\x04\x06\x07\x00\x0185BA\x01\x02\x86\x02\xf7\x01\x06\x13\x00\x01VS\x01\xba\x01\xb7\x01\x1e\x1d\x00:9\x04\x00\x0f\x08\x07\x00\x01\x02\x00rq\x04\x00%NM\x00\x01\x02\xbe\x01\xbd\x01\x00\xba\x01\xb9\x01\x00\x08\x07\x00*)\x01tq\x04\x00\t\x02\x01\x00\x9e\x01\x9d\x01\x04\x00/\x16\x15\x00(\'\x00\x82\x01\x81\x01\x00TS\x00FE0/XW\x01\x02\x01\x14\x11\x01\x04\x003\x02<;\x00\x18\x17\x00\x8a\x01\x89\x01\x0087\x01\x00TQ\x00DC\x02\x01\x02\x01\x00PO\x04\x00-\x16\x15\x0065\x00&%\x00dc\x000/\x1c\x1b\x0e\r\x02\x01\x00NM\x04\x00S\x16\x15\x0065\x0087\x00LK\x0087ts\x000/\x00\x0c\x0b\x01\x02PO\x00TS\x00zy\x00\x06\x05\x02\x01\x02\x01\x00PO\x04\x00\x03fe\x04\x00A\x16\x15\x0065\x00&%\x00:9\x000/\x1c\x1b\"!\x00\x0c\x0b\x01\x0c\x04\x1c)\x00\x06\x0521\x02\x01\x06\x00\x03PO\x04\x00s\x16\x15\x0065\x00&%\x00@?\x00(\'\x14\x13\x01,)\x00hg\x00\x1e\x1d\x00\x0e\r*)\x00ZY\x00<;\x00\x08\x07\x01\x00\x18\x01\x13\x01@=\x1e\x1d\x08\x07vu(\'0/\x01\x04\x00\x1b\x18\r\x07\x01\x00\x1e\x05\x02\x06\x17\x05\n\x0b\x18\x04\x02K\x19 \x0f\r\x01\n\t<;\x1e\x1d\x0e\r*)\x01\x02DC\x1e\x1d\x1a\x19\x01\x02ts21\x02\x01\xac\x01\xab\x010/@?\x01\x04\x02\x89\x01\x18\x9a\x01\xb3\x01>=\xae\x02\x95\x02\x03\x13\xbc\x01\xbb\x01\x02\x01hg\x01\x02\x01\x00\x1e0A\x14\x15T[\x01\x02\x01\x00\x02\x16\x15\x16\x15\x16\x15\x16\x15\x16\x15\x16\x15\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13\x14\x13$#\x8a\x01\x89\x01\x01\x04\x04\x01S\x18\x02\x06\x10-\x00<;\x01\x02\x01\x18\x02\x06\x10-\x00TS\x01\x02\xf8\x02\xf7\x02\\[\xa8\x01\xa7\x01\xb4\x01\xb3\x0187\x06\x05TS\x02\x01`_\x01\x00\x02\x04\x00\x1b\x04\x03,+\x1a\x19<;TS\x01\x02\x01\x18\x04\x02Y\x19.-\x00<;\x01\x02\x01\x00\x02\x1c\x1bzy21\x01\x02\x06\x05\xd0\x03\xcf\x030/\x01\x02878787\x01\x02@?\x01LI\x02@A\x01\x02\x04\x00\x9f\x01\x04\x03LK0/\x1a\x19JI$#:9,+\x01\x02\xd2\x01\xd1\x01$#\x01^F\xa1\x01ji\x0c\x0b \x1f\n\t\x9a\x01\x99\x01\n\t\x0c\x0b:9DC<;POts\x06\x05 \x1f\xdc\x01\xdb\x01\x06\x05\xf0\x01\xef\x01~}JIBA\x01\x020/\x90\x01\x8f\x01LK\x18\x17\x01\x02\x01\x02\x04\x00\xe5\x01\x04\x0343\x1a\x19<;DC\"!\x01\x02\x01*\'*)*)\x01\x02\x010-\x01\x00&!\x1c\x1d&%xw\x01\x02\x01\x18\x0f\x07\x00* \x9c\x01\xb5\x01(? \x0c\x17#\x10\x17\x00:9\x00:0O\x11,P\x1ck+B\x18\x01\x04%=\x00\xd6\x01\xd5\x01&\x0f\n\x1f\x00\x18\x0b\x04\x1a\x0b\x17\x05\x00B(\x15\x08\x02\x18_\x03\x1e\t%BG\x00\x06@=\x01\x02\x01\n>E\x01\x02\x04\x00\t\x01\x05\x12\x0b\x02\n\x00%\x01\x00\x02\x01\n\x01\x07\x1e8U\x00@?0\x00\x13\x19\x00\x01\x04\x00\x01\x02\x04\x00#\x0c\r\x02\x01\x1e\x17\x16\x1b\x04BC\x00\x01\x00\x12\x00\x11\x10\x04\x07\x03\x06\x03\x04\x00\x03\x01\x02\x04\x00\x05\x01\x02\x01\x06\x00%\xd4\x01\xd1\x01\x07>7B\x1d!\x00\x01\x02\x01xu\x00\x88\x01\x87\x01\x07\x06\x06\x00\x19\x1c\x19\x04\x0f\x05\x10\x02\x01\t\x03@\x0c\x19\x04\x17\x1b\x0c\x86\x01\x85\x01\tvi\x01\x00\xa6\x01\xa5\x01\x8c\x01i\x1f\x01\x04\x00\xbd\x0121\x00\x14\x01\x024E\x01\x00JE$\'63\x01\x12\x0c\x1d\x08\x07\x00nk\x02\x16\x0e\x08-\x88\x01\x87\x01\x01\x02>\x06\x19)\x01<\x0b\x04/\x14\x07\x0frq\x18\x0f\x07\xd4\x02\xb1\x02\xae\x01\xcd\x01\xde\x03\xc9\x03\x03\x08\x15\xba\x01\xb3\x01\x05\x06\n\x13\x02\x04\n\x94\x01\xa3\x01\n\t\n\t\x12\x07H,}\x16\r\x04\x07\x03\xda\x04\xd9\x04\x00\x05\x08\x01\x02\x01\x18\x17\x06\x00\x0f\x02\x00\x01\x02\x1e%\xe6\x02\xdd\x02\x06\x00\x01\x06\x04\x077\n\x00\x07\x0e\x05\x9a\x02\x8d\x02\x02\x15 \x19\x06\x05@=\x01\x02\x01@=>=\x01\x02\x00\x01\x00\x07\x08\x00I\x07\x08\x01\x11\x10\x06\x86\x01}\x00\x88\x01\x87\x01\x96\x02\x95\x02\x82\x02\x81\x02\x01\x1e\x1b\x00\x01\x00$\x1blC\xa8\x01\xd5\x01\x01\x14\n\x1d.\x0f\x1d\xd2\x04$\xf5\x04\x08\x00)(\x07\x1e=\xda\x01\xd9\x01\x02\x0e\x0b\x18\x1b\x9e\x04\xa7\x04\x0c\x07\x06\x07\x01\x0c\x00\x01\x04\x00\x05\x10&=\x04\x00\x05\x03\x06\x08\x06\x00\x15\x07\x06\x00R#-.\x0b\x00)\n\x06\x00\x03\x01\x02&\x00\x1f\x0b^Q\x01\x06\x03\x00XY \x1f\x00\xc8\x01\xc7\x01\x05\x08\x0c\x00\x0f\x1e\x04#\x00\x1a\x19\x00\x02\x08\x00\x13\x08\x07\x04\x03\x01\x02\x0c\x07\x05\x06\n\x00/\x13\x03<\x0b)\x0c\x00494$Q\x00\t\x04\x068\'\x01*A\x0c\x07\x06\n\x00\x9b\x01\x15\x16\xae/\xad/\x08\x07>\t/\x03\x14\x13\x0c\x0b\x08\x0c\x11\x1e\xde\x04\xe3\x04j\x83\x01\x04\x14\x00\x17\xf2\x0c\xd7\x0c03\xb4\x02\xaf\x02\x80\x01y\xa0\x07\xa5\x07.G\x16\x15\xbe\x03\xa3\x03py\xae\x05\x97\x05%\x00\x06\x05>%\x17\x04\x86.\xa1-M\x11\x90\x01\x8f\x01\x88\x0f\x8d\x0f\xe4\x01\xdf\x01\x00$\n3\xe68\xeb8\x08\x01\x0b\x0c\x00\x02\x00\x01\n\x00;*\x0b\r\n\x11\x07$\x0f\x07(3\n\t\x80\x01y\x84\x01\x87\x01\x01rk\x80\x01\x83\x01\x01\x00ZW\x00\x08\x07\x01\x04\x00/\x06\x05\x14TI\n\r\x17\x00\x01\x02\x0c\xc2\x01\xcd\x01\x00J1\x84\x01\x9b\x01\x00nm\x00\x01\x04\x00\x0b\x06\x05\x14\x16\x15\x0f\x04\x01#\x00\x1e\r\x04\x13\x12\x0f\x01hePC\x08\x13\xa6\x01\x93\x01\x05\r\x04\x003D\x13\x17\x15\x0c\t*+\n\x0e\x19\x00\x0c6)<\x08z\xd5\x01$/\x10\x03\x06\x05\x02\x06\x00\r\x11\x12\x01\x05\x00`Y\x04\x00\x19\x07\x01\xd4!\xc7!\x10\x0f`_\n\t<;\x01\x08\x00\xe1\x01\x1e<Y0-\x08\x07\x01\x02\x01\x00F\x19\'$2S2%\x0f\x01\x02./\x00\x82\x01\x81\x01\x02@?\x1c\x1b\x90\x01\x8f\x0187\xc6-\xfd,?LQ\x8e\x04\xfd\x03\x14!\x05\x00\x02\x10\x00\x0c\t\xe8C\xfbC\x06\x03\x01\x0c\t\x02\x08\"+\"!\x01\x00\x04\x06\x07\x01\x00\nFI\x04\x07\x00\x01\x02\x01\x0e\x03\x07\x01\x1a\x13\x03\x01VQ\x03\x00\x02\x16$7FI\x12\x114+\x07\xbe \xbd \xda\x06\xd9\x06\xdc\x1b\xe7\x1b\x06\x84\x01{\x08\x00\x05\t\x02\x06\x04\x02\x0b\x03\n\x06\x08\x15\x01\x04\x02\x1d\x00\x12\x11\x02\x01\x06\n\x0c\x0f\x16%87\xc6\x02\xc5\x02\x04\x009\x16\r\x07\x00\x02\x01\x12\x00\r\x0c\x0fNK\"!BAFE87\x14\x13\xac\x01\xab\x01ji.\x11\x04\rA\xca\x01\xc9\x01\"\x05,Gji\x10\x0c\x0e)N1\x11\t870/\x16\x15po21>=(\x0b\x19\x01\x06\x04\x03;\x18\x13\x0387\x0c\x12\n\x06\x0f\x19\x0c\x0e\r\x0e\x14\x1bt\xfc\x04\xef\x05\xb4\x01\xb3\x01\x94\x01\xa9\x01\x00\"\x04\x03\xc0\x01\xe1\x01\x04\x00_\n\x08\x11\x18\x12\x17\r\n\x00\x10\x1b\x014/\x03\x00\x02\x01\x00\x16\x05\xaa\x01\xb9\x01\x1a\r\x18\x1e=LO`S\x0b\n.7\xf2\x07\xf1\x07\n\x14\x19\x12\r\x04\x12\x18-\x01\x04\x0c\x17\t\x13\x00\x16\x14)\x16\x1a-\x18\x03\x11\x04\x01I\x00\n\t\x02\x06\x05\x04\x03\x04\x03\x94\x06\x93\x06\x04\x03\"!\x04\x03XW\x1a\x19:921*).-\x16\x01\x13\x01\x1c\n\x03\x04\t-DQ\x08\x07\x00\x16\xf8\x02\xef\x02|\x97\x01\x01\x10\x0e2K\x03*\t\x1b\xf6\x03\xdb\x03\n\'\x04\x00\x19\xe2\x04\xc3\x04\xc0\x02\xdd\x02\x80\x07\xff\x06$\x04`\xba\x05\x81\x06\xa8\n\xe3\n\x04\x00U\xda@\xdd@ \x01\x15\x86\x1c\x8f\x1bN\xc7\x01\x00\x01\x08\x0787\x1e\x1d\x01\x00<%\x13\x01\"\x1f@?HG&%\x00\x16\r\x02\t\x01\x00\x1c\x1b\x10\t\x05\x04\n-\x10#\xde\x03\xbd\x03\x9e-\x99-2M\x07\x00\"4UR-\x1b\x07\x12\x11\x10\x05\t\x16\x04\x00?&+\x05\n\x032\x13\xa8\x01\xc7\x01\x0c\x0f\x03\x04\t\x00\x1c\x11\t\x00\x04\x03\x00\x18\x17\x00\x12&\x17Dc\xa4\x03\xa3\x03\x04\x00u\x06\x05\x06*/\x06\x05\x06\x16\x15\x05\x06\x14\x05\x13\x18\x06n\x8b\x01\x1e8U\xe8\x04\xc3\x04x\x93\x01\x07\x00\x02\x01\t\n\x00\x0e\x06\x0fX\x02]\x00\x02\x01\x06\x05\x02D=\x13\x0c\x86\x01e\x00\x19\x05\x00\x02\x07\x00\x08\x04\x00-\x01\x02\x07\x00\t\n\x12\"+FE0/\")\x10\x05\x03\x02\x01\x1a\x0f\t\x04\x02\r\x08\x0e\x0b\x00\r\x00\x02\x04\x00\x17\x01\x0f\x10B9\x1c#\x05\x00\x06\x00\x05\x08\x00[\x01\x16\x05\x07\x02\r\x0c\x00\x04\x00\x03\xc8\x02\xc5\x02\x04\x05\x13\x16\x00\xe2\x0b\xdb\x0b\x03\xde!\xe1!\x00\x1c\x1b\x1e\x1dtq\x01\x06\xea\x0e\xef\x0e\xb0\t\xa7\t\x02\xde\x1d\xd1\x1d\x00 5DB\x7f\x05\x04\x00\x07\x08\x05\x01\x02\x08\x00\x1f\x01\x02\x04\x03\x00\x01\x00\x07\x02&\x01\x03\x05\r\x00\x05\n\x00\x11\x08\x07\x08\x07\x06\x03\x04 %\x04\x00\r\x18\x02\x06\x07\x0e!\x01\x98\x02\x00\x15\x0141\"\x08\t!\x0c\x00@I\x04\x00\x1d\x01\x02\x01\x00\x0e\r\x1e\x1d@/\r\x01\x02\x00\x01\x06\x00/ \x15\x07\x00\x01\x00 \x15\x07\x00\x01\x00\x02\x00\x01\x00\x05\x06\x00\x0e\x03\x00PY\x04\x00\x1b\x18\x02\x06\x07\x12\x0e!\t\x14\x0f\r\xfc\x01\xfd\x01\x02\n\x00)\xf8\x16\xa7\x13\xcd\x03\x8c\x01\x8d\x01\x00\x01xu\x00\x01\x06\x03\x01\x08\x074\x11\x12/\x01\x04\x00;\xcc\x1c\xc3\x1cDI\xec\x10\xbd\x0c\xd6L\xfdP\t \x1d\x01r\x1b9\x1b\x00\x024\x19\"\x0cIh9%<A\x01\x02\x06\x007 !\xf2\x06\xf1\x06\x0cju \x07\x170\x19\x15\x1e#\xdc\x01\xd3\x01\n\x0b\x0f\x14\x0c\x00\x0f\x11\x12\x06\x05\n\x00)\x04\x01,#RY\x0c\x05\x07:9\x04\x02\n\x0b\x03\x08\x02\x07\x04\x05\x08\x00\x07\x02\x01\x02\x01\x04\x00E\x02\x01\n\x07\x01\x02\x01\x02\x04\x06\t\x01\x02\x18\x17\x08\t\x06\x02\x1e\x18=\x18\x15\x12\x1c\x1bL_\x02\x01\x02\x00\x01\x02\x06\x00\x05./\x18\x14\x00\t\x06\x00\x19\r\n\x04\x00\x01\x02\x0c\x00\x19\x18\x1f\x06\x02\x00B=\x03\x16\x15\x00\n\t\x04\x00\x03\x01\x00\x04\n\x03\t\x07&\x00#\x01\x02\x01\x00>\"]\x00BA\x00,+\x01\x08\x01.3\x04\x00\x07&%\x08\x07\x04\x00\'\x06\x05\n\x07\x01\x00NC\x07\x01\x02\xe4\x01\xef\x01\x00\x03\x0e\x05\x07\x06\x08\x04\x00\r\x02\t\x10\x07\x00\xc6\x01\xc5\x01\x06\x00\x07\x02\n\x01\t\x04\x00\x19\x0e\x0c\x19\x02\x01$\x0b\x13\x03\x08\x07\x06\x05\x06\x00\x17\"\x0b`u\x00xs\x04\x07\x0e\x08\x15\x04\x00\xe9\x04DC\x02\x01\x0043\x00\x12\x04\x02\x17\x00\x10\x06\x15\x0e\x08\x07\t\x00\x12\x14\x13\x02\x03\x02\x05\x068MT1\x05\x06\xe2\x02\xfb\x026\'\xba\x01\xcb\x01fiF/\xea\t\xe1\x08\x9d\x01\x1c\x1b\x9c\x01\x9b\x01&%\x00\x08\x0c\x0e\x12\x11\x1b\x05\x0c\x0b\x00\x0425\x1e\x1d(\x05!\"\x1d\x1e\x1f\x01>;\xb0\x08\xa9\x08NQ^a\xf4\x01\x9d\x01U\xc8\x01\xc5\x01\x01\x18\x13rq0\'\xaa\x01\x96\x01+\x99\x02\x16\x17F i\x00LI\x01\"\xe2\x01\xe1\x018/\x05\x01\r\x0e\r\x11\x00>\x1d\x1b\x052%\x1a\x0b4E\x02\t\x00\x0c\x1e\x19$#\x1c\x1b\x10\x02b{\xfa\x01\xf9\x01\x07\x1a\x0f\x00\x01\x1c\x01\xda\x01\xd9\x01|\x9d\x01\x1e\x1d\x0e\x84\x01CE\x06\r\xce\x01\xc1\x01\x82\x03\x89\x03\xb0\x03\xb3\x03\x00\x02NK43jk\x01\xd8\x01\xd3\x01\x03\x18\x13\xc0\x01$\xe7\x01\x0c\x16!\x08\x0e\x0b\x12`{B\xba\x04\xdf\x04\x1b\x1c\x1b\x02\x01\x08\x01\x05\x06\x0f\n:3\x05\n\t\x00\n\x07\x00\x01\x08\x06\r\x00\x05\x0e\x07\x00\x02\x01\x00\n\t\x02\x00\t\x08\x00\x18\r\x07\x06\x07\x08\x07\x06\x0b\x06\x14\x1b\x08\xaa\x02\xa9\x02\x07\x00\x02\xcaB\xc3B\x10\t %\x00B9\x1e.=\x15\x08\x1a\x01\xda\x0b\x85\x0c\xfe\x01\xf1\x01\x08\x06\x13\x03\x04\x0e\x07\x1e\x1d\x00\x1e\x15\x02\t\x05\x06\x1e\t\x078C\x00&\x1d\x11\x02\x01\x00\n\n\x00\x01\x02\x0c\x00\r\x18\x19\x07\n\x01\x07\x08\x04\x00/\xb2\x04\xb1\x04\x00\x06\x05\x10\r\x0e\t\x05\x06\x02\x070/\x00\x02\x01\x0ct\x7f\x1e\x07\x13\x08\x00#VW\xaa\x01\xa7\x01\xca\x01\xcb\x01\x00>=>%\x0e\x04\x03\x1f\x05\x10\x16\x04\x001%&\x1c?hgRQZY\\[ts\x14\x13\x10\x0f.-$#\x01\x00\x02\x12\x00\x0f\x01\x05\x06\x16\x15\x00\x16\x15\x04\x0012/\x0c\x0bxw\x06\x05NM\x01\x02\x01\x11 \x0c\x05\x13\x00\x02$#\x01:7\x04\x041\t\r\x0e*)\x05\x00\x06\x05\n\x12 !\x06\x17\x01\x00\x142K\x06F;\x07\x01\x06\x001\x07\n\xd2\x0b\xcf\x0b\x00\x03\x02\x16\x0b\t\x00\x01\x00\"\x19\x07(\x02\'\x01\x06\x02\x07\xe0Y\xdfY\x04\x00\x07\x04\x03\n\x07\x04\x00\x0b\x01\x14\x05\x13\x90\n\x89\n\n\x00\t\x06\x05\n\x04\x0b\x84\x02\x00;\xb8\x02\xe1\x01d\x9b\x01\x1f\x02 \x17\x06\x00\x15\x06\x1c\x15\x05\x00\x0e\r\x00ti\x07\x02\x01\x00\x01\x06\x05\x12\x0f\x04\x00\x03\x10\x0f\x04\x00\x03\x86\x01\x85\x01\x04\x00\x03\n\t\x04\x00\x03\x08\x07\x04\x009LK\x92\x02\x93\x02RO\x01\x02\xbc\x01\xbb\x01&%\x06\x05\x9c\x01\x9b\x01\x0c\x0b\x02\x0187\xc2\x01\xc1\x01@?DC\x01\x04\x00#\x02\x01\x02\x01\x00\x02\xd4\x01\xd3\x01\x01\x02$#\x18\x17\x1a\x19\x01\x02\x0c\x00\'\x01\x82\x01\x7f^]\x01\x02\x01\x02\x01\x02\x01\x0c\x05\x06\x00&1\x18\x15\x06\x00]\n\t\x01\x02\x01\x02\x01\x00\"!\"\x0b\x15\x14\x11\x01\x00JGhg\x10\x0f\n\t65\x82\x01\x81\x01\x9e\x01\x9d\x01*)\x02\x01LK`_^]ZY:9\x01\x02\x18\x007\x01\x06\x05\x02,+PO\xe8\x01\xe7\x01*)ZY\x12\x1121>=*)>=\x01\x02\x01\x02\x14\x003\x01\x00\x02\x01\"!\x00\x18\x0f\x07\"\x00\'\x00(!\x00\x18\x13\x00rs\x01\x00\xee\x01\xed\x01\x06\x00\x0b\x10\x01\x0b\"!\x01\x04\x00\x15\x08\x07\x00\x08\x05\x01\x00\x18\r\x07\x01\x04\x00\r\x1c\x11\x07\x01&\x1f\x05\x04\x00\x0fro\x16\t4-\x13\x06\x04\x05)\x00\x06\x02\x04\x0365\x1a\x19\x10\x01\x04\x1187JI2+`g\x04\x00=\x04\x02:7\x0e\x15\x00la\x02\t\x00\x01\x0221\x01\x00\x02\x01\x06\x03\x0b\x02\x10\x0f\x08\x07\x08\x04\x03\x06\x00#\x11\x07\x01\x1c\x00`_v\x89\x01\x06\x04\n\x072\'\x00\"\x1d\x04\x08%\x15v} ^\x85\x01\xc6/\xfd.tp\x9a&\xd9\'=\xecw\x97xX\xd8\xd4\x01\x8b\xd5\x01\x15\x08\x00)D+\x18- \x1f\x01\x00\"\x19\x07\x0e\x05\x03\x06\x05\x13:#\x01\x03\x04\x00-\x18\x0f\x07\x14\x13\x0c\x03\x07\x10\x00\x08\x00\x0f\x07\r\x08\x06\x05X\x00Q\x00\x02&\x00C\x01\x10\x0f\x05\x0e\x07\x14\x13\x02\x00\x06\xbc\x01\xc9\x01\x12\x0b\x12\x17\x06\x0c\x05\x02&-\x0c\t.#\x03\x04\x0b$!\x00\x01\x04\x08\'\x0f\x00\x02\x04\r\x08\x18\x17\x0087\x18\x11\x03XS\x00\x04\x07\x01\x06\x00\x13lk\x0c\t\x01\x02\x00\x01\x06\x05\x06\x00\x17\x04\x16\n\x1b\x07\x08\x07\x02\x01\x00\x10\x0f\x06\x00%\x02\x01\n\x03\x05\x00\xdc\x0c\xdb\x0c\x00\xdc\x0c\xd9\x0c\"!\xe6\x05\xed\x05\x06\x04\x00\x01$\x00m\x06\xc2\x02\xc7\x02\x00\x01XU\x00\xa4\x01\xa3\x01\x00\x8c\x01\x8b\x01\x00\x01\\Y\x00\x01\x8c\x01\x89\x01\x00\x01\x00\x0e\x1a%\x01\x00\x0c\x03\x0c\x08\x05\x12\x05\x1f\x01\x02\x0b\x0c\x0e\x0f\x02\x01\t\n\x00RQ\x02\x01\n\x07\x01\x04\x00;\x06\x05\x0e\x19\x18\t\x11\x14\x03\x05\x16\x15\x06\x00\x1a\x17\x01\x02\x01\x08\x07\x00\x06\x05\x1a\t\x0f\x00\x1a\x19\x06\x00\x1b\x12\x0b\x05\x00\x08\x02\x08\x11\x0443\x06\t\x00\x04\n\x03\x08\x1b\x04\x00e\x10\x04\x01\x11\n\x0e\x11\x19(\x0f\x03\x10\x00\t\x03\x01\x00\x0f\x16\x11\x12\x05\x11\x0c\x0e\x90\x03\xf5\x01\x9d\x016\x82\x02\xb7\x02\n<|W\r_\x00* \x9c\x01\xb5\x01(? \x0c\x17\x18?\x0c\x08\x08\x00\x01\x01\x12\x00A\x14\x88\x01\xb1\x01\x04\t\x14\r\x08*\x9c\x06\xcd\x06\x90\x08\x8f\x08\x8e\x01\x8d\x01\x05\x16\x07\x08\xee\x0e\xe5\x0e\x03\x04<;\xcc\x01\xcb\x01\x86\x03\x85\x03\xe0\x01\xdf\x01x\x8f\x01\x06\x00;*)\x00\x06\x05\x1e\x13\tlk\xd8\x02\x99\x02\xde\x02\x9b\x030%\x0c\x11&\'\x9e\x04\xa7\x04\x00\x01\x1e\r\x05\x00\x0b\x0e\x08\x00\x03\x01\x02\x08\x00\x0f\x01 \x1d\x01\x1c\x19\x01\x02\n\x00\x17 \xaa\x02\xc7\x02\x03\x05\x06\x8a\x01\x06\x8f\x01\x1c\x00\x05\x14\x00\x01\x02\x1e\x00\x07\x17\x18\x17\x1a\x1c\x00\x01\x01\x14\x00\x01\x01\x14\x00\x01\x02\x14\x00\x01\x01\x14\x00\x01\x02\x1e\x00\x05\x17\xa4\x03\xa3\x03\x06\x00\x01\x020\x00\x11\x01\x00\x92\x01w\x00\x1a-\x05\x02\x08\x00\x01\x18\n\x00\x05\x026Q\x04\x00\'\"\x19\x00\x07\x0c\x1a\x1f\x9a\x01\x9d\x01\x00\x01:7\x00\xb6\x02\xb5\x02\x00\x01\x0e\x0b\x04\x00\x07@|OkB\x00+\x90\x01{\x00\x1a+\x03\x00\x02\xdc\x01#\xb7\x01\x00\x01\xa6\x01\xa3\x01*\x18A\x9a\x01\x8f\x01\xa8\x01\xb1\x01\x04\x001\xa4\x01\x9f\x01\x03\x01\xd4\x02\xd3\x02\x04\x02\x03\x0e\x0f\"\xee\x01\xd6\x03\xe5\x05\x04\x02\xd4\x08\xd9\x08\x06\x04\t\x02\x01\x07\x04\x00\r\t\x12\x02\x13\x08\x0c\x01\x04\x00\x83\x01\x04\x03P#\x0e/\x07\x01\x02\x01\x0e\x0c\x19\x00\x07\x01\x10\x08\x0b\x01\x05\x06\x00*\x1f\t\n\x07\x01\xa0\x01\x9d\x01\x01\x02FG\x00\x18\x15\x01\x02\x01\x1c\x11\x07\x00\x01\x02\x01\x00\x02\x04\x050/\x0c\x0e\x16/\xee\x01\xff\x01\x1d(\x10\x05\x04\x05\x04\x00\r\x05\x06\x00\x06\x08\r\x05\x04\x069\x0b\x00\x01\x08\x05\x06\x0f\x06\x14\x15\x104%\x10\x17\x00\x02\t\x04\x00\n\x05\x07\x00\x010-\x04\x03\x04\x00\x03DC\x04\x00\x03PO\x04\x00\x03\x01\x02\x04\x00\x1f\x01dc\x06 \x19\x08\x13X\x1d9\x00\x10\x0e\x00\x1b\x06\x00?\x01\x00\x06T\x05S\x02\x01(\x0f\x00\x11\x18\x08\x0f\x15:9\x02\x01\x18#\x18\x0b\x04\x018#\x13\x12\x08\x19\x04\x00M67\n\x02\t\x00\x01<;\x00R;\rjqPO\x00\x1a\t\x0fpo\x06\x00\x05\x06\x0e\x07\t\n\x08\r\x05&%\x00\x0e\r\x04\x00\x11\n\t\x0c8C\x00\x06\x05\x1a\x04\x0b\x0f\x01\x00\x1e\x05\x10\x1d\x07\x01\x04\x00G\x0e\r$\x103\x06\x03\x01\x1e\x11\x03\x1e%\x14\x01\x0c\xa2\x01\xbf\x01\x16H]\x16\xd0\x01\xcb\x01\xc2\x01\xc1\x01\xec\x01\xeb\x01(\'\xde\x02\xf7\x02\xca\x01\xc9\x01\x00\x02\x04,\x0b\'/\n\x0b\n\x01\x04\x03\x0b\x0e\x12\x0b\x11\x0c\x04\x04\x00m\x03\t\x0c\x01\x08\x01\x11\x0c\x05\x16\x1b\x0c\x04\x03\x06\x05\tpe\x0b\x0c\t\x03\x00\x04\n\r\x06\x05\x16\x13\x02\x04\x16\x1d\x0ehs\x94\x01u%\x00\x0f\x16\x02\x00\x01\x10\x0f\x06\x05\x0b\x0c\x06\x05\x04\x16\x1b\x1b\xbc\x02\xcb\x02\x0f\x10\xd2\x01\xd7\x01\x06\x00\x02\x01\x14\n\x05\x04\x0b\x04\x00u\x05\x06\x08\x0f\x08\xd0\x01\xcf\x01\n\x12\x183\x0c\x07\x06\x16\x1b\x03\x1a\x92\x01\xab\x0121\x00\x08z\x81\x01\x04(+\x06\x05\x90\x05\x8b\x05\x03\x18\x9a\x01MU\r \x1fJ9\x07\x0c\x13\x02\x01\x000\'@\x17+,-\x02\xae\x08\xb1\x08\x06\x00\t\x1e\x1d\x00\x06\x05\x04\x00\x03\x08\x07\x04\x001\x06\x05\x00\x14\x06\xd4\x01\xe7\x01\x03\x04\xbe\x07\xbf\x07\xf8\x02\xf5\x02\x03\x04\xe4\x03\xe9\x03\x18\x08\x1b\x00\xaa\x01\xad\x01\xbe\x0f\xbd\x0f\n\x00a\x04\x03\x00\x18\x13\x00\x03\x14\x13\x08\x0e\x13\x00XW\x01B?\x01FE\x04\x03\x08\x07\"\x1d\x02\x01\x00\x03\x14\x13\x0c\n\x0b\t\x00\x0e\x05\x07\x06\x14(9$\'hk\x04\x005\x04\x03\x00\x04\x14\x13\x03\x14\x13\x08\x0e\x114-\t\x18\x13\x01\n\x16\t\x132\xd0\t\x83\n\x00\x01\x04\x00_\x04\x03\x04\x18\x1b\x10\r\x08\t\x0401\x01\n\x90\x01\x99\x01\x92\x02\x91\x02\x00\xb2\x02\xbd\x02l_\x00 \x04\x03\x02\x04%\x00\x04\x01\x04\x05\x00 \x1b\x01\x0e\r\x01\x00\x02\x01\x02LK\x06\x00\x05\x07\x1a\x11\x08\x00e\x01\x06\x05\x02\x01\x18\x17\x00\x16\t\n\x11dg\x00\x02\x0c\x14\x82\x02\xa3\x02\x1c\x05%\xe2\x03\xd1\x03\x00\x08\x05\xa4\x01\xa3\x01\x00\x01\xbe\x01\xab\x01\x0c\x19\x06\x02\x01\tpk\x14\x1c0c<;\x00\x05\x10\x04\x03E\x90\x02\x87\x01\x85\x01\",\x04QP\x07,5+B\x0b\x90\x01uA\x1c\x1b\"Fa2\x05\x08n\x83\x01\\+1/\r^d]\x048\x97\x01qE\x1c9 \x04\x0c3FG\x00\x86\x01Y\r:I\x10zu\x14,\t\x17!\x04!\x00\x1c\x07\x11\n63\x01\x94\x01K\x12\x0b& \x9f\x01\x00\x04*\x19\r\xc8\x01\xcd\x01\x04\x03\x0e\x03\xc2\x02\xc3\x02\x9e\x02\xaa\x05\xc5\x03\x8f\x04\x18 /\x0e\x0f\x04\x08\x0b\x04(\x1c$g\x06\t\x02\x96\x02\x97\x02\x04\x00\x1f\xd6\n\xcd\n\xf8\x03\xf9\x03\x8a6\x8f6\x02BM\x04\x1e\x17\x05\x06nk\x04\x00\x11RQ\x00\x04\x1a\x1b\x01\x10\x11\x04\x00+\x05\x06\x04\x01\x07\n\x03\n\x01\x00\x07\x0b\x16\t\x02\x01\x18\x17\x06\x05\x00\x12\x04\x07-\x11$\x06\x17(\x19\n\r\x04\x01\r\x08\x07\x06\x05\x02\x01\x16\x0b\x01\x05\x00\x01\x04\x00Y\x05\x0e\x07\x0085\x01JGhg\x10\x0fDC\x82\x01\x81\x01\x9e\x01\x9d\x01*)RQ`_^]ZY<;\x00BA\x1e\x1dDC65TS\x01\x00\x04\x04\x08\x03.A\x06\x00\x15\x08\x06\x00\x03\t\x12\n./\x19\x0b\x04\x06\x13\x1c\x1b\x00\x1a\x01\x17\x002\x0c=\x04\x00\x05\x06\x05\x02\x06\x00\x07\x01\x02\x01\x00\x04\x04\x03$+\x04\x00\x11\x04\x03\x0c\x0b\x00\x04\x03\x02\x01\x04\x00\x81\x01\x0c\x14\x1f\x02\x16\x15\x01\x00\x04\x06\x04\t\x03\x00\x0c\x0bB;\x05\"!\x06\x04\x07\x16\x00\x17&\x00%\x00\xa8\x01\xa7\x01\x18\t\r\x90\x01$\xb1\x01\x00\x01\x00\x08\\\x0fS\x06\x03\x0c(5\x00\n\x03\x05\x00\x88\x02\x9a\x01\xa1\x03\x02\n\xdc\x01\x8d\x01\x8e\x01\xe7\x01\x06\x00\x01\x02\x08\x00;\x01\x07\x08\x00>7\x18\x1d\x00\x1a\x19\x00\x1a\x17\x02\x18\x1b\x04\x03\x02\n\x0c\x07\x0fDA\x01\x06\x00\x05\x04\x003\x14\x13\x00\xc8\x01\xc7\x01\x08\x07\x0cju\x00 \t\x13\x01\x04\x03\x92\x03\x91\x03\x02,-\x00\x08:A\x04\x00a\x16\x15^]\x00\n\x03.3\x00\x08\x05F1\x13`_\x14\x13\x04\x05*\'\x01\x02\x92\x04\x91\x04\xb8\x02\xb9\x02\xb6\x02\x81\x01\xb3\x01\x00\xc4\x01\xc3\x01\x00\xbc\x02\xbb\x02\xc0\x05\xf5\x04\xe8\x01\xf1\x01?po\xd4\x06\xd3\x06\xe6\x0b\xe3\x0b\x04\x00\x1fbc\x96\x01OC\x08&-\xda\x03\xd9\x03\x00\x01\x02\x00\x01\x04\x04\x01G\x90\x01\x8d\x01\x01\x0243LKXW\x06\x05^]NMzyDC\x14\x13^]NM\xde\x01\xdd\x01hg\"!>=\x1e\x1d\x04\x005\x01@9\x03\x01\xce\x01\x8e\x12\x95\x139\xfe\x16\x89\x17\x12Pa\xac\x03\xa8\x03\x8d\x02\xc3\x04\x00\x04\x01\x03\x00\x02\x18,C\xa2\x02\x00\x1567:\xa6\x01\xbb\x01!\x00\x06\x07\x00\x06\x04\x04\t\r\x00\x02\x01\x08\x04\x07\x1f\x08\x05\x08\x0021\x00re\x0b\x0c\t:;\x01\x02\x04\x00\x13\x12\x13(%:\x15%\x02ts\x04\x00eBA\x10\x00\x0f:9\x01\x02\x0cTY\x07\x00:7\x01ti\x00\x04\r\x0c\x052E\x10\x01\x12\x11\x15\x02\x14\x00\x05\x00\x06\t\x04,+\x01\x08 %\x06\x07&\x1d\x00\x02\x04\x04#\n\x11\x01\r\x0e\x07\x18\x15\x00\x14*7\x0e\rX7\x1d\x01\x04\x00\x0b\x02@\x0f)\x00\x07\x06\x00\x13\x02\x01\x00\x05\x10\x15\x0c\x02\x01\x06\x04\x05\x01\x08\x06\x00\'\x01 \x15\x1a\x1d\x05\x00\x0e\x0b\x01\n\x01\x07\x05\x06\x02\x01\t\x03\x00\x04\x02\x0b\x04\x01\n\x00\x01\x02\n\x00\x07\x0f\x06\x05\x0e\x06\x00\x01\x05\x04\x06\x0e\x00\x01\x05\x04\x00\x01\x04\x04\x01\x04\x00)\x18\x0b(/\x12\xc4G\xd1F\x07\xce\x02\xb5\x03\x17<\x029\x06\x16\x0e\x1b\r\xda\x07\xdd\x07\x04\x00\t\x1a\"9@A\x06\x00\x03\x12\x17\x04\x06K\x03\x07\x06\xbe\x04\xbb\x04\x00\x01\x02\x01\xec\r\xeb\r\x06\x00\x05\x02\x00\x06\x01\x14\x02\x19\x1e\x1f\n\x07\x00\x01\x02\x00\x01\x00\x06\x03\x00\x01\x00\x80\x01}\x04\x00\x17\x01\x02po\x014\x13\x1f\x02\x0f\x08\x06\x06\x00\x17\x02\x01\n\x12\x19\x0b\n\r\x0e\x00\x14?\x04D/Y\x07\x05\x0f\x1c\x08LG.3\x00\x02\x08\x0e\x17\x05\x12\r\x03\n:A\x00\x01\x04\x00\x13 \x1f\xda\x02\xd7\x02\x07\x10\x0f\x06\x12\x0f\x04\x00\x17\x01\x02\x01\x1e\x00\x1d\xcc\x01\xcb\x01\x02\x01\x07\x0e\x06\x00\x05\x03\x00\x01\x06\x00Y\n\xc2\x0c\xab\x0c\x11\r\x98\x01\x97\x01\x9a\x17\xf9\x16\x13\x05NS\x00.\x13\x19\n\x02\t\n\xdc\t\xf3\t\x16\t\x02\x07\x06\x00\x05\x06\x00\x88\x02\x87\x02\x00\x12\x1cJ\x14\x9a\x01\x9f\x02\xc0\x08\xbf\x08FK\x04\x00\xb5\x03 \x121\x00\x06\x05&%\x0e\x0b\x01\x0c\x18\x1d\x05\x10\x0e\x1d\x00\x1a\x0c\n+\x1e\x165\x01\x0e\r$#\x00\"\x165\x0c\x04 /\x00\x01\x9a\x01\x97\x01\x00|{\x00\x01\x8c\x01\x89\x01\x88\x01\x87\x01\x02\x010/HG0/RQ\x01\x02ZYJIvu\x18\x13\x1c\x1f*)\x01\x02dchgdcFE.\t\x08+vuDC\"!\x10\x0f\n\tZYJI\xda\x01\xd9\x01<7\x1c\x1f*)\x01\x02dcJ%0Sji.\t\x08+\xda\x01\xd9\x01hg\"!\x1e\x1d:9\x01\x02>=\x02\x01 \x1f*)$#21\x01\x02\x01\x020\x0b4W&%RQ\x08\x070\x0bBe43\\[RQ \x1f:9\x1c\x1b\x01\x02\x1e\x1d\x1c\x1b\x14\x13\x01\x02\x01\x0e\x0b@?\x08\x07\x0e\r\x9e\x01\x9d\x01\x1a\n\x1b\x07\x00$\x18; \x04\x1b\x07\x00$2U\x1a\n\x04\x00\t\x1f\x03<;\x01\x04\x00\x15\x1a\x0c\x161\x0c\x10!\x03\x00<;\x04\x001&\x1b\t\x00\x04\x03\x00\"\x03\x07\"%\x11\x02\x04PO\xec\x02\xeb\x02\xba\x01\xb9\x01^=\xa0\x02\xc5\x02\x04\x08\x05\x0f*)\x04\x00\x0f \r\x1c\x03\x04%\x9a\x03\x9d\x03,\x00\x01\n\x12\x00\x01\x06\n\x00\x03\x14\'\x04\x00]\x0e\x0bDC\x0c\x0b\x12\x11\xa2\x01\xa1\x01\x06\x1c\x1670\r\x06\'\x06\x1a\x1870\x0f\x1f\"\x06\'\x06\x1c\x14\x15\x143DE\x02\x01&\x00\x03\x02\x15\r\x00\x10\x0f\x04\x08\x01\x0f\x06\x00!\x16\x0c\x121\x01\x00&% \x1f\x00\x1e\x08%&%$\x0c\x00\x0b\x05#6\r\x1d\"\x04\x15\x03\x18\x0f\x04\x00\x0f\x01 \x1d\x02\x04L\x82\x01\xc7\x01\x04\x00\x01\x04\x06\x00\x19,%\x01\x15\x1e\x11\tF+\x07\xa0\x02\x91\x02\x02\x08\x00\x17\x01!$\x00\xc4\x01\xe1\x01\x0e\x02\x16\x14;\x03\x04\x003LI\x0e\r>=\x08\x07\x98\x01\x97\x01\x01\x10\r\x00\x04\x03JI\x1a\x19`_FE,+\x04\x02[\x03\x08\x07dc\x1e\x1d\x1c\x1b\"!JI0/>=$#\x02\x01\x06\x05JI\x1a\x19BA\x1e\x1dRQ21\x07\x01\x08\x05<5\xb6;\xb5;\x0043\x04\x025\x00\x1a\x15\x07\"\x88\t\xa9\t\x00,\x11t\xa0\x03\x89\x04#\x1c\r\x0b87\x01\x02\x00\x0b\x02\x00\x08\t\x04\x02\x1f\x00\x06\x00D7\x0b\x1a\x0f\x07\x01\x00\x02\x01\x00\x07\x08\x06\x00\x1f\x0b\x06\x00\x06$#\xac\x04\xa7\x04\x03\x02\x01\xa6\x05\xa5\x05\x8e\x01\t\x7f\x04\x01\x15xs~}\x03\xe2\x02\xdf\x02\x00\x0e\x01\x0b\x04\x00a\x01\xe8\x05\xc3\x05\x03\xc6\x03\xdf\x03\x03\x01\x02\x0c\x07\n\x0f\x90\x07\xff\x06\x02N=H_\n\xb0\x02n\x8f\x03\xea\x07\xeb\x07\x05\x92\x03\xab\x03\x06\xbc\x01\xc1\x01\x00$\x17\x01\x07\x01\x02\x1c\x1d\x04\x02\x05\x00\x80\x01\x7f\xda\x0b\xd9\x0b\x04\x00M\x02\x01\x1a\x19\xb4\x02\xc4G\xf5I\x0b\x0c\x07\x06\x00\x08\x01\x06\x0b\x1c\x1b\x82:\xf59\x07\x94\r\xe5\n\xb1\x02\x02\x0c\x19\x06\x08\t\x08JI\x00 \x00\x05\x00\x0c\x16\x00\x07#.5\x06\x04\x00\x15\x05\xec\x16\xa5\x15\xbf\x01\xd8\t\xd7\t\x96*\x95*\x00\xb8\x04\xb7\x04\x04\x00\x11.-\x8e\x01\x8d\x01\xbe\x05\xbd\x05\x05\x98O\x91O\x04\x00\x07\xa0\x01\x9f\x01\xa8\x07\xa7\x07\x06\x00\x05\x05\xa0\x15\x99\x15\x04\x00\x19\xa0\x01\x9f\x01\xbc\n\xbb\n\xc8\x07\xc7\x07\xaa\'\xa9\'\xe6\x07\xe5\x07\x05\xb0\x01\xa9\x01\x04\x00\x0fji\xc6U\xc5U\xd4\x02\xd3\x02\x8eU\x8dU\x08\x00#\xaa\x01\xa9\x01\x00\xa4\x01\xa3\x01\xc2\x12\xc1\x12\x00dc\x8e\x01\x8d\x01\xb2\x10\xb1\x10\x960\x950\x00\x02\n\x00\x0f\x01\x0b\x0e\x12\x1a\x00#\x07\x04\x00\r\x01\x00\x02*)\x0c\r\x04\x00#D;\x1e#\x01\x02\x01&\x08% \'\x02\x84\x02\xff\x01\x05\x02\x01\x04\x00%\x08\x10\x15Zc\x02\x05&\x11\x07\x0e\x03\x01\x05\x1e\x1c)\x1c+\x04\x00C\n\x07JE\x07\x00ZM\x05\x02\x12\r\x02\n\x14)\x00\x06 (A\x1c)&#\x00\x06\x07&#to\x03\x01\x04\x00-$\n-\x00\x08\x12\x0e\'\x0e\x16\t\x8a\x02[\xc5\x01rq\xf6\x0e\xf5\x0e\x01\x1e\x19\x00\x03\x04\x00\x0f\x02\x04\x05\t\x0c\x04\x03\x01\x06\x00\x0b\x18\x15\x00\x01N-\x04\x13\x03\"\x17\x06\x00\x05^_\x02\x06\x00\t\x01\x02\x08\x00\x07\x04\x00\x07\x01\x00\x12\x0f\x04\x00\x01\x01\x04\x00\t\n\x0c\x15\x00\n\x04\x00\x05\t\x00\x02\x04\x04\x05\x07\x00\x12\x06\x00\x05\rLO\x04\x00\x07\x01\x07\x10\x05\x08\x00\x13\x01\x00\x1e>\x00\x1am\x08\r\x01\x04\x00\x15\x0e\x03\t\x06\x12\x17\x08\x02\x00\t\x02\x04\x00\x1f\x06\x1c\x13\x05\x00\t\x00ba \x1f\x00\x06\x10\x15\t\x06\n\x06\x00=\x13\x06\x12\x17\x10\x08\x17\x00\x02\x01\x00\x14\x13\x02\x01\x0b\x0c\x00\x08\r\x06\x00\x02\x00\x01\x02\x01\x00\xfa\x05\x8b\x03\xed\x02\x04\x00\x03\n\t\x04\x00\x0b\x06\x05\n\x07\x01\x02\x04\x00\x01$\x08\x00\x01\x03\n\x00/\x04\x00#$\x1b\t\x00&%\x07.\x1b\x19(\x0b\x04\x0f\x10\x0f\x00\x10\x0f2\x1dF\x00\x01\x13\x06\x00\r\x04\x03\x06\x05\n\x07\x01\x06\x00\x03\x08\x07\x04\x00\x05\x06\x04\t\x04\x00q\x06\x05\x16\xe6\x1b\xd5\x1b\x14\x1d\x03\x05\x94\x01\x89\x01p\xbc\x01c\xb1\x011\n\tja@3&\x1d\t\x11tm\x03\x04&%\x0e&1\x07\x00\x08\x07\x1e\x1b\x1e\x0b\x06:/#\x10\x0fBA\n\t\x92\x01\x8b\x01\x98\x01\x9d\x01\x04\x00\x87\x01\xa6\x02\x95\x02\n\x12#\x04$@g\x07\x00\x10\x0f\x02\x01\n\t\xb4\x02\xb3\x02\n\t\xa2\x03\xa1\x03\x10\x0fPO\n\t\xf4\x05\xf3\x05\n\trq\n\t87\x10\x0frq\x10\x0f\x02\x01\n\t87\n\t87\x10\x0f@?\xe6\x02\xdd\x02\x03\x10\xd8\x01\xeb\x01\n\xd8\x01\xe1\x01\x04\x00\x0b:7\x10\x11\x04\x03\x08\x00-\x0e\r\x0087\xc4\x05\xc3\x05\x00\x08\x16\x13\t\x00&\x1b\t\x10\t&\"K\xb2\x02\xb3\x02\x04\x00\r\x05\x06\x0f\x04\x0cRO\x04\x00\x0f\x07\x10\x17\x1a\x0b\x00\t\x0c\x04\x00\x1d\x01\x00\x02$#\x00\xb2\x0b\xb3\x0b\x1c\x19\x01H\x9a\x02\xf3\x02\x1a\x04\x04\x03(7\x06\x00\x01\x08\x06\x00\x15\x07\x02\x00\x01\x06&\x1f\x0e\x01\x15\x02\x04\x01\x11\x92\x01\x91\x01\x06\x17\x12\x00d.\x91\x01\x08\x00%\x04\x14\x0b\x18\x1d\x02\x00\x04\x01\x06\x0f\x05\x06\x04\x01\x98\x01\x99\x01\x05\x06\x04\x00\t\x02\x01\x04\x12\x15\x08\x00\x1b\x04(+*\x03%\x02\x0e\n\x17\x01\xce\x05\xcb\x05\x07\x04\x00E\x01\xa8\xb1\x01\x9d\xb1\x01\x02\x03\xcc$\xd1$\x01\x00\x02\x06\xa0\xb1\x01\x91\xb1\x01\xca$\xe5$\x1a\x05\x11\x0c\x1e#\x00\x06\x00\xc6\x01\xc5\x01\x00\x07\x08\x00\t\r\x18\x1a\x19\x08\x00\x1b\x04\x03\x08\x07\x14\x13\x12\xcc\x03\xdb\x03\x00\x01\x02\x1e\x1f\x04\x00\x01\x02\n\x00\x05\x01\x07\x08\x04\x00\x11\r\x0e\x00\n\t\x02\x01\x10\x0f\x06\x00\x11\x0e\x02\x0f\n\t\x06\x03\x10\x0f\x08\x00\x07\x01\x05 \x17\x04\x00\x05\x07\x01\x08\x06\x00\t$)\x06\x05\x06\x08\x00\x17\x02\x01\x05\x06\x04\x0b\x08 \x1f\x18H_\x06\x00\x15\x0f\x10\t\x00\n\x00^S\x06\x0e\x05\x04\x0b\x07\x05\x0e\r\x06\x04\x00\x0b\x02\x00\xd0\x01\xd7\x01\x06\x02\x08\x00\x11\x01\x02\x00\x01\x02Z[\x11\x12\x04\x00\x05\x02\x04\x03\x08\x00\x01\x01\x06\x00\x07\x02\x04\r*\x04\x007\x15\t\x01\x00\x06\x02\x07\x04\x03\x00\x0e\x0c\x1f\x06\x02\x01&\x19\x11\x14\x18%&\t\x15\x00\x03\x01\x04\x00\rJI\x0c\x0b\x02\x00\x01\x04\x00\x0f\x02\x01\x04\x03\x04\x06\x07\x01\x10\x00\x1fFE\x06\x03\x01\x00\n\x03\x05\x00\x02\x01\x04\x03\x08\x07\x04\x00\x07\x02\x01\x06\x03\x08\x00E\x8a\x01\x8b\x01\xd0\x05\xcf\x05\xa4\x02\x9d\x02\x01\x03\x04\x0f\x0c\x00\x08\x07\x04\x03JC\x05\x00\x07\x08\x02\x01\x00&\x1b\t\x02\x01\x02\x04\x02\x01\x05\x04\x00\x03\x1e\x1b\x04\x00\'\x01(\x17\x04\x13\x02^\x1ay\xcc\x01\xcb\x01\x05\x8a\x02\xcf\x011\x18\x0f\x10\x170\x04\x17+po\x01\x02\x01\xf4\x01\xd7\x01\t\x08\r\x0e\x15\x03\x00\x02\x14\x13\xec\x01\xeb\x01:9\x01\x04\x00\x15\"\x0e)\x05\"\x0f\x11\x02\x06<C\x08\x00/\"\x1d\x03\x0c\x0b\x00\x12\x11:7\x06*1\x02\x01\x10\x0f\x08\xac\x12\xc3\x12\x10\x18\x17\x0c\x04\x00\x0f\x16\x00\x10\x00\x1b\x01\x1d\x0c\x04\x00?\x02\x01\t\x02\x06\x02\x10\x00\x02\r0\x1b\x19\x1a\x08!\x07\x08\x02\x01\x04BC\x16\x0b\x11\x00\x84\x01y&\x13\x15\x04\x001\x1e\x1d\x00\x18\x00\x15\x01\x1e\x11\xd6\x01\xd1\x01\x00\r\x01\x02\x04nU\r\n\x15\x16\x17\x01\x00\x04\x04\xb7\x01\x0743\x02\x00\x04\x14\x17\x01\x00LI\x00\x08\x0e\x03\x04\xa2\x05\xb9\x05\x14r\x7f\x05$#\x00JAFK\x02\x03\x80\x01u\x07\x00\x01\x02\x01\x00da|{\x01\x04\x88\x01\x89\x01\x01\x10\x07\x1a\x00\x15\x00\x16\x03\x04\x00\x15\x19\x08\x00\x07\x06 \x1d6/<;\x05\xd4\x05\xd3\x05$\x1b\x12&9:9\x00:\x009\x08\x04\x0b\x1a\x04\x1c9\x04\x00\x07\xce\x05\xcd\x05\x02\x07\x04\x00\x1d\x08\x01\x1a\x19\x00\x07\x08\x04\x03\xd4\x01\xaf\x01\x17=\xee\x01\xb9\x01\x06\x00\x0f\x01\x1c\x0f\x0b\x0e\r\x0e\r\x04\x00\x03\x0e\r\x04\x00\xa1\x05\x0e\r\x0e\r\x0e\r\x0e\r\x00\x08\x05\xe8\x02\xe7\x02\xa2\x02\xa1\x0221\x01\x04\x16\x12)\x9c\x01\x9b\x01TS\x00\x16\x06\x1d\x0e\x0b\x01\x00\x18\x17.+\x01`]\xaa\x01\xa9\x01\x88\x01\x87\x0165 \x1f@?TSFE65ba43,+\n\t\x96\x02\x95\x02\x1e\x1d\x18\x17\x08\x07\x0c\x0b87\"!DC\"!<;DC\x94\x01\x93\x01\xa0\x01\x9f\x01<;\xd0\x01\xcf\x01 \x1f\x0c\x0b*)TS\xe8\x01\xe7\x01\xec\x01\xeb\x01nmLK\xe0\x02\xdf\x02TSxw\x12\x11,+\x1e\x1d\x14\x13RQ\x08\x07ts(\'43\x86\x01\x85\x01\x1a\x19\x0e\r\x1c\x1b\xf4\x01\xf3\x01BAbalk\x01\x04\x06 \'\x01\x10\r>=\xd8\x01\xd7\x01\x01\x04\n\x0bBA\x1c\x1b\xa8\x01\xa7\x016587\x10\x0f\x1e\x1d65\x1a\x19hgZY\x1e\x1dJI\x1e\x1d@?\\[VU&%fe<;&%\xf8\x01\xf7\x01\x14\x13\xb6\x01\xb5\x01\x14\x13BAFE\x8e\x01\x8d\x01\x06\x05\xa4\x01\xa3\x01>=0/\x00\x012\x1f\x18\'\x002\x17\x15\x03\x012/\"!:9\x07\x06.+\x00\x01\"\x07\x19\r\x0e\x08\x078\x1d\x19 \x12\x11\x1f\x05\x08\x01\x02\x01\x02\x01\\[TS\n\x00\x02\x07\x18\x06H%;\x00\xa2\x03\xa9\x03\\\x1d\x18U\x00\x12JY\x01\x02\xa0\x01\x9f\x01\x84\x01\x83\x01\x01\x02,+\x01\x02\x01\x02\x10\x0f<;PO\x18\x0e%21\x01\x02XW\x01\x02*)(\'\x01\x02\x04\x00\x8d\x02\x92\x02\x91\x02\x1a\x19\x01\x02\x0e\r\x04\x03\x08\x0743\x1e\x1d@?\x1e\x1d87\x01\x02:9\x90\x01\x8f\x01\x01\x02\x96\x01\x95\x01\x01\x0221\xcc\x01\xcb\x01\x1c\x1b\x08\x07&%\x01\x02\x00\x01FC\x01\x02BV\x97\x01\xe8\x01\xe7\x01&\x1a?HG\x01\x02\x01\x02>43\x18UPOts\x02\x01\x04\x03(\'\x1a\x19\x10\x0fNM\x04\x03\x0e\x12\x1a9$#0/\x18Ne\x16\x15\x01\x02\x04\x03\x18\x17\xf0\x01\xef\x01>=^]\x01\x08\x12\x04\x08%\xca\x03\xef\x02K\xc0\x0c\xa9\x0b\xae\x03\xc7\x04\x01+R9\x06TM\x05\x04\x00\x07\x11\x12\x00\x06\x04\x00\x11>7\x03\x18\x17\x18\x15\x14\x17\x04\x00\x9b\x01\x08\x07\x10\x0f\x00\x18\x17\x0e\x16\x03\x1f\x00NG\x03\x18\xa6\x01\xbf\x01\xe2\x01\xe1\x01\x00\x1a\x04\x1b\x0e\x0f\x00\"!\x0e\r\x18\x13\x04\x07\x00\x1c\xa8\x01\xc3\x01\x00$#\x02\x04\x05\x08\x0e0C\x18\x01\x08\x05\x15\xe2\x02\xe5\x02JI\xe8\x02\xee\x06\xd5\t\xfa\x03\xc5\x03JkT[\t&\x1b\t*\x1f\t\xf4\x06\xf3\x06\xf8\x01\xf7\x01\x06\x003ZOV_\x00\x18\x11\x05\x00\x14\x13\x04\x03\x00\x8a\x01\x89\x01\n\x056&_\x00rq\x96\x01\x95\x01\x06\x00\x1dBY\xb6.\x8f.\r\x14\x13\x04\x036%\xc0\x04\xd5\x04\x06\x00\x04\nw\x00\x03\n\x19\x02\x80\x01q\x18%\x01\x00\x08\x07\x06\n\x0f(\'\x16\x15\x00\x1a\x0e\x17\x12!\x02 \x1f\x00^]xw\xcc\x01\xcb\x01\x02\x08*561\x02\x03\x18 9\x08\x06\x0b\x18r\x8b\x01\x1a\t\xc0\x01\xc9\x01\x18\x0c\x1f\x04\x08\x87\x01\x15\x16\x15\x03\x02\x0c\x0b\x01\x1e\x1b\x0163 \x1f,+\x020/\x1a\x12-\x06\x02\xb8\x03\xf7\x02I\x00@=\x00\x12\x0b\x07\xd8\x10\xb7\x10\x03\x04\xea\x03\x89\x04\x07\x02\x06\x000/*).+\x01\x02\x01\x06\x18\x1d\x1e#\x03\n@?\x84\x05\xcd\x041\xe6(\xe9(\x04\x00\x07\x08\x07\x0c\x0b\x04\x00\'\x12\x01jy(\x1b\x0b\xce\x04\xcd\x04\xca5\xc95\x02\x01*)\x02\t\x01\x0c\x10\x04\x0f)\x0e\x05\x06\x05\x08\x01\x00\x04\x03\x12\x0b\x0c\x11\x06 %\x00\x1c\x05\x13\x16\x04\x0b)\x08\r\x08\x16\x1d\x18\x1d\x1e\x08\x05\r\x08\x03\x0c$9\x8a\x01\x89\x01\x10\x86\x01\x95\x01\x04\x00\t$\x05\x01\x17\x03\x04\x00\x07\x1e\x13\x06\x19\x04\n]\x07\x01\x17\x1a\x01\x0201\x02RS\x02bc\x02BC\x00\x02\x01\x00\r\x0e\x00\x02\x01\x00\x12\x0b\x05\x04\x0c\x0e\x1d\x02\x10\r\"%\x00\x12\x11\x1c\x1b\x1a\x06\x1f\x04\x00\x0b\x12\x0f\x16\x02\x19\x02\x12\x00\x0b\x0f.\x00\x02t\x95\x01\x06\x00\x01\x14\x04\n\x03\t\x1d\x04\x00\x0f\x1e\x11\x0b\x00\n\t\x04\x03\x04\x00\x03\x06\x05\x06\x00\xb3\x01\x0c\x0b\x02\x01\x06\x05\x08\x14\x0f\x18#\x022+\x0c\r\x0c\r\x03\x00\x14\x08\x15\x01\x08\x03\x07\x00\x12\x0c\x16/\x03\x02\x01\x00\x82\x01s\r\x00\x06\x05\x12\x0f89\x06\x02\x07\x00\x1c\x11 \'\x04RU\x1a\x13 \r\x0b\r\x92\x01\x91\x01\x12\r\x03\x08\x07\x06\x01\x03\x14\x13\x06\x03\x01\x02\x10\t\x076-$+\x1c\x15\x00\x05\x04\x009\x04\x03\x88\x01\x87\x01\x96\x01\x95\x01\xb4*\xb3*\n\t\x12\xb8\x01\xb7\x01\x12#\x00\x06\x05\x10l\x81\x01\x00\x1aH[\x06\x16\x1b\x02\x044/i0/ \x15\t\x08\x02\x00\t\x05\x0b\x0c\x18\x0b\x8e\x01\xd4\x0c\xe7\r\x00\x06\x0c\x11\x02\x01\x04\x02C\x03\x00\n\x00\x07\x08\t\x00\x08\x0e\x13\x08\t\x00\n\x0c\x07\r\x08\x05\x02\x03FE\x00\x06\x08\n\x17\"!\x00\x08\x07\x06\x00\x07\x07\xaa\x01e;\x04\x00\x17\x14\x07\n\x15\x070/\x08\x0cdy\n\x04\x08\xdf\x01\x05\x00\x03\x12\x13\x03\x18\x13\x14\xa6\x01\xbd\x01\x04\n\x03\x05\x00\x03\x0201\x92\x01\x81\x01\x8e\x04\x8d\x04p\x94\x02q\xe7\x01\xf6\x01\xaf\x02\xa2\x03\xa1\x03\xe0\x03\xeb\x02q\x92\r\x93\r\xc2\x18\xc1\x18\x07\x0e\x05\x04\x03\n\t \x1f\x05\"\x15\x05\x00\x1e\x1d\x00\x04\x01\x08\t\x07NE\x00.\x9e\x02\xa5\x02.S\x0c\x0b\x02\x0e\'(\x01\r\x18\x17\x04\x0e\x01\x00~\x8b\x01\x01\x02\x86\x02\x85\x02ZY\x01\x02\xec\x01\xe1\x01\x07\x08\t4%(5\x01\x02\x01\"\x02#\x00\x08\x12\x07\x04\x05S\x14\x19\x0c\t\x00\x01\x1a\r\x0b\x00\x02\x18\t\r\x00(\x1b\x03\x04\n\x11\x1e!\x00\x08\x02\x01\x07\x06\x07\x00\x1a\x00\x01\x15\n\x0b\x02\x00\x01 \x1d\x12\x00\x0f\x04\x03\x01\x06\x03\x01\x0c\x04\x04\x05U\x08\x0c\r\x050/\x03\n\x0e\r\x0f\x08\x01\t\x1a\r\t\x14\x15\x1a\t\x03\x01$\x07\x17\x06\x10\x17\x08\x02\x01\x07\"\x11\x05\x08\x13\x04\x0e\x0f\n\t\x04\x00\t\x01\x04\x03*%\x04\x01\x17\x02\x01B!\x15\t(\x07\x17\x05\x01\x02\x06\x00I\x01\x04\x01\x00\x18\x19\x06 +\x08\x00\x0b\x1a\x0f\x02(\x17\x14+\"!\x08\x17\"\x0b\x00\x05\x06\x02\x01NK\x00\x01\x12+\x1a\x06\x00\x03\x07\x08\x06\x00C\x1c\x01\x02\x0e\x00\t\x1f.\x00;\x180?\x0e\x1a\x8c\x01\xab\x01\x01\x02\x0c\x13\xba\x02\xb3\x02\x04\xec\x01\x04\xf1\x01\x0c\n\t\x0b$\r\x13\x04\x01\x06\x00\x11\"\x1f\x00\x01\x00\xae\x01\xab\x01\x00\x01\x04\x00\x19\x05 \x19\x05:d\x97\x01\x1a\r\x06\x0c ;\x08\x00\x11\x12\t\n\x00\x19\x06\x05\x1a\x11\x0c\x00\x03\t\x08\x04\x00\xbb\x01\x06\x0c\x00\x11\x04\x03\x02\x0b\x14\t\x02\x00\x01\x00\x02\x00\xa2\n\xed\x06\xb5\x03\x02\x01\x00\x98\x01\x95\x01VU\"!21>=\xc8\x01\xc7\x01FE\x00\x01\x02\x010-\x82\x01\x81\x01\x88\x01\x87\x01ba\xc2\x01\xc1\x01\x8e\x01\x8d\x01lk\x84\x01\x83\x01\xf2\x01\xf1\x01^_\x02\x01J8m\x0f\x10\x11\x04\x05dc\x05\x08\x00\x01\n\x16\x1f\x06\x05\x00\n\x00\x07\x00\x12\x07\x14\x1d\x16\x17\n\x02\x04\x05\x04\x10k\x15\x00\x05\x06\x03\x12\r\x00\t\n\x02\x06\x01\x03\t\x00\x01\x00\n\t\x0e\x00\x12\x01\x05\x15\x00\x01\x00\x18\x15\x04\x12\x15\x00\x01\x00\n\x14\x00\x1b\x00\x01\xacI\xe95\xc1\x13\x00\x04\x03\x02\x01\x02\x01\x02\x04\x12\x1b\x11\x0f\xa0\x0c\xa3\x0c\x00\x04\xe0\x05\xe3\x05NM\xa8\x0b\x97\x0b\x0f\x02\xb6\x01\x00\x01\x0c\x12\x00\x01\r\x04\x00S\x02\x07\"!\x06\x00\x10\r(%\x00\x03\t\n\x9a\r\x95\r\xe4\x01\xe7\x01\x0465\x06\x05\x1a\x1b\xe8\x01\xe7\x01\x01\x02\x14\x1321\xce\x07\xcf\x07\x8c\x14\x87\x14\x01\x02lo\x04\x04\x01\x19\x04\x03ZY\x00\x0c\x0b87\x00\xcc\x02\xd1\x02\x06\x08\x00\r\x06\x05\n\x0f\x06\x00\x13\x04\n\x01\x05\x04\x03\x0f\x0e\xc8\x02\xc7\x02\x0e\n\x11,/\x04\x00\x13\x01\x02\t\x08\x00\x07\xb2\x01\x99\x01\x00\x0f\x04\x00\r\x16\x05\x0f\x1c\x17\x06\t\x04\x00\xab\x02\x02\x01\x00\x02\x15\x14\x88\x01\x85\x01\x00\xb2\x1f\xb3\x1f\x0e\r\x0e\r\x04\n\r\x00\xda\x04\xd9\x04\x00\x06\"\x00\x11\x0e\r\x02\x08\x1f\x00\x14\n\x1d\x00$!(\x05\x1f\x18\x03\x00\x17\x18\x1a-\x04\x05\x0001\x00\x1c\x03\x0b\x04\x0ft[\x13\x03\\Ynm&\x07\x0e)\x04\x1c!\x00<;\x01NK\x0021\x0087\x00XW\x00HG\x00\x01\x02\x00nm\x00fe\x00\x1c\x1b\x00\x14\x0f\x03 \x1b\x03\x8e\x01\x89\x01\x03.-\x00PO\x00\xc6\x01\xc5\x01\x000/\x00*)\x1a\x19\x14\x13\x00 \x00\x1b\x10\x13\x01@=\x01&\x15\x0c\x19*\x17\x06\x17\x04\x00\x0b\x06\x07\x02\x01\x1c\x17\x04\x01\x11\x02\x01$\x0b\x13\x00\x8a\x01\x8b\x01\x01\x04\x00G\"!\x1c\x10+\xc6\x02\xbb\x02\x00$\r\x121\x00\x1a<\x1aoX%1\x08\xae\x01\xb3\x01\x01\xbe\x01\xbd\x01\x00\x1a\x02\x1a%\t\x05vU\x1f\x08\x00\x1b\x02\x01\n\x0c\n\x1f\t\nDC\n\x13*)\x04\n\x05\x03\x05\x14\x04\t\x1d\x00\x06\x10\x15\x00\x06\x05\x00 \x0f\x06\x1b\x1a\\o\x08\x00\x19T=\x00\x15\x00\x02\x00\x08\x00\x07\x06D;\x04\x00!\xc6\x01\xd5\x01\x18\x17\x1e\x1d\x16\x15\x06\x0b\x0c\x0b\x00\x0c\x0b\x0e\x07\x04\n-\x00\x0b\x18\x13\x03\x00\x0c\x13\x00\x14\x01\x11\x002\x1f\x11\x08\x0c\x13 \r\x11\x02\n\x00I>=\x01D\x1f!\x00<;PO\x00\x12\x13\n\t\x0c\t\x00\"#\x02\x01\x0c\t\x00XW\x00HG\x00\x01\x02\x00fe\x04\x00\x11\x1c\x1b\x00\x01\x00\x02\x01\x0c\t\x06\x00\t\x01\n\t\x0e\x0b\x04\x00\x13\x06\x07\x02\x01\x02\x01\n\tjg\x04\x00\x07.-\x00\x01\x04\x00\'\x16\r\x07\x00\x02\x01\x08\x0e\x13\x00./\n\t65\n\t>;\x04\x00A\x0c\x1e)\x00*)\x1a\x19\x14\x13BA\x14\x15\n\t\x00\x12\n\x19\x01\x00\x0c\x01\x05\x0e\x04\x15\x10\x0f\x06\x05\n\x04\x08G\x17\x00\x01FC\x01\x12\x08BY\x00xw\x00\x01\x05\x08\x00./4/\x06\x10\x15\x01\x020\x15\x19\x01\x02\x16\x0b\x08\x11\x04\x00\x0b\x08\t\x01\x02\x01\x08\x04\x07\x0b\n\x02\x03\x07\x08\x05\x04\x06\x04\x00\x17*\x1b\n\t\x06\x05\x12%\x05\x06\x00\x04\n\x00\'\x01\x08JM\x0f\x10\x11\x1c\x0f\x00\x04\x03\x07\x12\x07\x00\x04\x11\x0e\x01\x06\x00\x01$\x04\x11\x03>=\x04\x00\xb5\x01\x08\x05\x00\x01\x00\n\x00\x07\x06\x10\x15\x04\x05\x10\x05\x1a!\x06\x18\x1f\x14\x11\x01\x00\x06\x1a\x1f\x002/\x04\x00\x05\x00\x10\x03\x01\n\x0f\x14\x178)\x04\x08\x15\x03$\x1d\x0c\x07\x14\x19\x03\x00VI\t\x01$#\x14BU>\x1b!:/\x01\x00\x1c\x1d\x01\x03\x0c\x05\x0c\x0b\x03\x00\x01\xae\x02\xa7\x02LK\x01\x02\x03\x00\x01\x04\x00\x05 (G\x06\x00U\n&\x1b\x13\x00\x14\x02\x15\x04\x03\n\t \x10/\x08\x05\x0e\x0f\x18\x17\xb0\x01\xab\x01\x0c\r\x1a\x11\x02\x0e\x13\x05\x02liJK\x01\x1a\x11 %43\x04\x00\x93\x01@?\x02HIxw$#65BA\xc6\x01\xc5\x0165\xfa\x01\xf9\x0165.-\x1a\x19\x04:=lk\x02\x03\x11*\x17\x00 \x15\x07\x00\x01\x0b\x0c87\r\x03\x1a\x07\x05\x10\x11\x02\x01\x0c\x0e\x01\x0b\x0c\x15\x00\x06\x00\xc0\x01\xbf\x01\x0c\x03\x00\x02\x01\x07\x08\x00\x07\x06\x00+\x06:Y<!\xf8\x01\xf5\x01\x00\x16\x17\xd0\x02\xbb\x01\xcc\x0c\xd3\r\x0b\x00\xd4\x04\xcf\x04PQ:9\x04TE\x7f%\x03@?\x00\x04\x03\x00\n\x05\x03\x14\x13\x02\x00\x01\x1c\x1b\x08\x12\t\x0b\x032-\x02\x1a\x1f\x0c\x00\x070\xdc\x02\x8f\x03\x04\x00\x0b6-\x1e\x17\x0b\x00\x04\x02\x176;\x0c\x00\x07$#\x03\x02 \x1d\x03\x04\x02\xd3\x01\x04\x06\x03\x02\x0b\x02\x01\x02P7\x17 !\x14\x16\x1b\x18&E\x03\x02\x1c\x1f6\x0e\x03?\x00\xd6\x06\xd5\x06\x00\'\"\xec\"\xbb\"\x0b\x15\x0edw\xd0\r\xdb\r\x02\x0c\t\x06\x04\x00\x02\x05\x00\xe6\"\xa9\"3\n\t\x00\x07\x04\x03 \x13\x08\x01(7\n\x00\x05\x1e\x1d\xee\x0e\xcb\x0e\'\t\n\x00\xe2\"\xcb\"\x01\x12!\x16\t\x0f\x9a\x11\x9f\x11\x07*\x1b\"!\t\n\x06\x05\x0b\xae\x0b\x00\xdf\n?\x00\x01\x02\x08\x07\x08\x00e\x04\x00\x04\t \x1f\xa8\x07\x95\x07\x11\x02\x00\n\x0b\x0243~\x7f\x9c\x02\x8f\x02\x08\x13\x00\x05\x06\x02*)\x00\x08\x1e%\x010/\x07\xd6\x02\xcd\x02\x1e\x13\x0e\x04Fa<9&\x0e\x1f\x16+\x04\x00\x1f$\x192#jo\x14%\x0e\x05\x01\x00\x05\x006#\x06\x00\t\x10!\xc8\x023\x91\x02\x16\x00_\x01\x02\x08\x06\x14! !\x02\x01VS\n\x00\x1c\'\x04\x03\x00\x05\x92\x03\xff\x02\x11\x96\x02\x8d\x02\xd8\x01\xd7\x01\x01\x00F? !\x03\x00\x1e4/\x19\"\x04+\x004\'\xf8\x01\x83\x02\x00\x04\x02\x19\x04\x07\x00\x01\x00\x0263\x06\th9+\x04\x00\x01\x01\x04\x00\r\x02\x00\x04\x05\n\x01\x07\x04\x00\x15 \x00\x1f\x0e*\x1eU\x00\x0e\x0c\x17\x04\x00_\x01\x02\x00\x01\x02\x0403\x00\x01\x02\x06\x82\x01\x85\x01\"%fe\xe8\x01\xe5\x01\x0e\x05\t*)\x00\xb4\x03\xb3\x03\xc0\x02\xbf\x02 \x1d\x08\x07\x04\x1a\x13\x03\xec\x05\xcf\x03\x83\x02.-RQ\x05\x17\x01\x06\x00Q\n&/\x00\x02\x01\x00:9\x06\x03<9$\x1f8?\x00 \x05\x17\x0e\x08\x1a$)2U\xfa\x02\x81\x03\x06\x05\xc8\x02\xc5\x02\n\t\x0e(?\n\x02\x04\x01\x01\x02\x1a\x00\x13\x0c\x0b\x00z{\x10\x07\x13\x14\x00\x04\x02\t\x0b\x0c\x04\x17\x08\x04\x00_\x1c\r\x1e\x0f\x94\x02\xad\x02\x01\x00\x10\x03\x0b\x18\x15(\x1d\x88\x01\x8b\x01\x07\x08 4K\x0fPG\x07\x08\x142VI)!\x05\x16\x1bLK\x01&%\x16\x11\x02\x16\x15\x01\x04\x04\x03A.!\x07\x10\x0f\x00\x03PK\n\r\x04\n\t\x00\n\x0b\x02\x03\x0eD1\n\x1b\x0b(\'\x02\x08\x03\x07\x10\r\x04\x009\x01\x00\x04$%\x0c\x07\x03\x02\x03(\'&#\x00\x01\x00\n\t\x00\x1a\x17\x08\x07\x01\x0e\n\"7\x04\x00\x0f\x01DA\x02\x03\x00\x0e$\x04\x17\x8b\x01\x00\x02\x03\x14\x11\x00\x02\xae\x01\xaf\x01\x02\n\x00\x07\x030#\t\x01:\x15%\x06\x05\x02\x01&\n!8A\x03\x00\x1c\x19feDC\x84\x01\x83\x01\x18\r\x0b\x0c\x00\t\x01\x1c\x05\t\n\x1f\x07\n\x08\x0e\x07\x03\x08\x11\n\x01$\x11\x17\x06\x0c\x04\r\x01\x04\x00)\x10\x0f\x00\x02\x01\x05\x08\xce\n\xad\n!LG\x03\x16\r\x14\x1b\x05\x14\x0c\x19\x04\x00\x07\x04\x03\x1c\x0c\x04\r\x0f\t\x01\x00\"\x05\x03\x0c\x03\x04\x0b9\x0e\x07\xb6\x01\xbf\x01\x03 \x03\x17\x03\x00\x0e\r$\x15\x05\n\xea\x10\xe1\x10\x19\x06\x08\x0b\x06\x07\x00\x02\x00\n\t\x0c\x00\x07\x06\x04\x0b\x02\x08\x00+\n!6\x19\x00.1\x08\x0f\x1a\x00\x03\x05\x07\x01\x12\xea\x01\xfb\x01\xc8\x01\xc5\x01\x00\x04\x04\x009\x05 \x1d21>=\x86\x01s\x1e/\x18\x05\x06\x05\x00\x0c\x02!$\x07\x08\x00#\x1c\x00\x08\x00\x17\x04\x00\x17\x05\x04\t\x05\x06\x00\x06\r\t\x18\x19\x14\x06\x00\x13\x0f\x8e\x02\xa1\x02\x18\x0c\t\n\x08\x11\n\x0c\x00\x05*!\x07\x04\x00\x19\x02\x01\x08\x07\x08\x07\x00\x08\n\x0e\x1f\x00\x14\x06\t\t\x1e\x13 )\n\x04\x00-(-\x06\x00\x08\x05\x08\n\x1d\n\r\x10&\'\n\t\x00\x1a\x17(\x05\x06\'\x06\x00A\x01\x00\x0e\r$#\x10\n\x13\x05pm\x12\x13\x00\x1a\x13\x03\x00\x01\x02\x8c\x01\x8b\x01\\[nmxw\x01\x00\x14\x11\x04\x00\x07\x1e\x1d\x01\x02\x06\x00Y\x01xu\x07\x0e\x04\x14\x1f\x08\x04\x10\x1b %b\x14G\x0f\x16-\x02\x90\x04\xfb\x03\x1e3\x04\x03\x8e\x01\x8d\x01\x0289\x10\r\x01\x14\x13\x10\x15\x16\x15\x08\x00\x01\x02\x08\x00\x1b\x08\x07\x8e\x02\x8d\x02\xe8\x01\x9d\x01K\x02\x07\x1e\xc2\x04\xc7\x04\x0c\x1d\x04\x00\x04\x05\r\x04\x02\x01\x08\x80\x01{\x03\x0c\x00\x04\x06\x01\x0b\x04\x06\x01\x0c\x04\x0b\x04\x00\x0b\x10\t\x11\x02\x04\x06\x06\x00\x04\x06\x13\x0b\x06\x04\t&%\x00\x12\x0b\x05\x04\x00\x0b43\x0c\x0b\n\t\x04\x00\x0f$\x1b\x018/\r\x00\x05\x04\x00\x1f\x0e\x05\x1a!\x06\x054\x0c1\x07\x08\x07N\xc0\x02-\xdd\x02\x04\x00[\r\x04$\x1b\n\xf6\x0c\xfd\x0c\x00\x01\x05\x10\x02\x00\x11\xfc\x06\xf5\x06\x00\xf0\x02\xef\x02\x02\"#\x82\x01\x87\x01 \x17\x07&\x1d\x0e\rpo\x01\x02\x00XW>=RQ\x92\x01\x91\x01\x01\x02N\x00q<;\x18\x0f\x04\x0b\x1e\x03\x04\x03\x1b\x00\x1c\x17\x10\x0f\xd8\x01\xd9\x01\x01\x9c\x02\x99\x02\x01\x02\x01\x10V]\x00\r\x00\x08\x00\x01\x05\x08\x01p\x01\x08\x07s\x08\x04\x05\x00ha\x1a\x1f\x00\x02\x00\x08\x0e\x05\x11\x02\x04\x00[\x01\x02\x04\x03\x00\x01\x00*\'&%\x01\x02\x00<!\x0c7\x10\xdc\x0f\xe3\x0fzq\x14\xb4\x02\xab\x02\x0f\x0b\x00\"!\x06\x04\t\x02\x01\x00\x02\x04*\x1a!\'\x0f\x10\x14:\x00\x03\x0f\x03\x06\x00\rNM\x0e\x04\x0f\x00\x01\x04\x00%\x02\x01\x18\r\x88 \x83 \x00FS\x06\x05\x06\x03&%\x00\x04\x08\x04\x04\x00\x03\x11\x02 \x00\x03\xe4\x01\xe5\x01\x04\x00e.d\x07%j5\x0b=b\xab\x01\x1c0v\x08\x9b\x01\x16G\t\x10\x02\x07zqP\nU\x07\x04\x00\x07\x06\x016\x1d\x04\x17\x05\x00*#\n\r$\x03!\"\x11\x05\x07\x00\x01\x04\x00=\x01(\x03#\x8c\x01\x89\x01\x8a\x01\x89\x01\x06\x00\x07\x14\x13\x0065*\x9e\x01\xbb\x01\x05\x03\x0c\x0b\x01(%\x00\x01(\'\x0c\x08\x00\x19\x0b\x00\x02\xf0\x01\xe9\x01\x05\x01\x02\x00\xfa\x01\xf7\x01\x01\x02\x04\x01\x04\x00\t\x02\x01\x8e\r\x93\r\x06\x06\x005\xb6\x0b\xb5\x0b\x00\x08\x07\xea\x04\xe7\x04\x14\x13\x01\x00\xa8\n\xa5\n\x18\x17\x00vk\x07>\x13\x01\x9c\x0b\xcd\x0b\x03\x0c\x01\x06\x00]\x04\x03\x00\xcc\x02\xbb\x02\x0f\x0c\x0b\x052\x13\x05\xcc\r\xd7\rD?\x0e\x15\x04\x16*5\x07\x12\xb2\x02\xd1\x02\x00\x0c\x05\x8a\x01\x83\x01\x05@;\x03\xbc \xef\x1d\x81\x02O\x96\x01;SJI\x00\xe2\x1f\xdf\x1e\x0e\x00\tm\x19\x176\x1f\x04\x00y\x07\n\x03\n\x00\x07\x002\t\x06+\x14\x13\x10\x00\x05\n\x02\x00\r\x00\x01*\x0e1\x0c\x0bL0}\x03\xc0\x19\xb1\x19\xf8\x05\x8d\x06 \x1d\x06\x07\x00\x07\x00\x12\x00\x11\x16\x0b\x05\x06\x0c\x05\x0b\x0c\x02\x018-\x11\x08\x00\x07\x04\x007\n\t\x1a\x0f\x00\t\x0e\x05\x04\t\x0e\x07\x00\x0e\n\x1d\x1e\x17\t\x00\x14\x0f\x06\x02\x07\x06FE\x06\x00\x1d\x18\x13\x01\x12\x13\x1a\x15\x03 \x1f\x08\x03\x14\x12)\x04\x08\r\x0b\n\x12\x143\x04\x03\x06\x00i\x18\x11\x0e\x0f\x03\x00\xbc\x01\xb3\x01\x10\x0f\xb8\x04\xbf\x04\x16\x15\x02\n\x0b\xce\x01\xcd\x01<;\x88\x01k\x0f\x0b\x08\x07x<\x9f\x01\xac!\xc7!\x08\n\t\x1e%\x0e\x11,%\x16\x15\x08\x07\x06\x07\x00\x15\x16\x00\x11\x0e\x04\x06\'\t\x03\x0e\x06\x05\x08\x01\x02\x19\x06\x12\x05\x12\x07\x0f\x08\x01\x12\x07\t\x08\x00\x01\x05\x08\x00\x03\x0b\x0c\x04\x01\r\x0c\x07\x06\x05\x01\x12\x11\x06\x00M\x16\r\x00\x05\x01\x08\x00\x07\x08\x06\x088-\x13\x9c\x02\x9f\x02\x1e\x10+\x06\x05\x01\x1a\x01\x13\x03\x00\x12\x11&\x1b\x05\x03\x00\x08\x05\x02\x03\x18\x04\x03\x8d\x01\x08\x07\x0f\xd2\x01\xcf\x01*)\x06\x05:\'J[`_\x06\x05\x0e\x04,=^]\x01\x82\x01\x81\x01\x00\x06\x03\x01\x14\x11\x08\x07\x00\x01\x0c\x07\x12\x15\x18\x15\x08\x07\x01\x0e\x03\x07\x01\x0e\x03\x07\x01\x1e\x13\x07\x014143\x06\x05<;<;\x01\x0c\x02\x07\x04\x01Y\x02RS\x01\x02\x01\x1e\x141\x1e\x11\x05\x00\x05\xb0\x03\xa5\x03\x82\r\x8b\r\xe0\x02\xdf\x02\xce\x06\xd3\x06\n8\t\x00-\x01\xc8\x04\xe1\x02\xed\x01\x06\x02\x01\x12\x03\x07pq$#47\xfc\x01\xfb\x01\x06\x00\x04\x05#\x00\x06\x01\x10\x07\x0c 7\x0c\x0b\x0c\x05\x06\x02\x00\x01\x05\x00\x04\x08\x11\x11\xe8\x03\xd3\x03\n\x05\x0f,\'\x03\x04\x00\x07\x08\x07\x10\x0f\x04\x00A$#\n\x084E\n\t\x10|\x7f\x0b\x00\n\x03\x05\x16\x15\x00\n\x03\x04\x02\xfa3\x8d4\x02\x03\x14\t\x07\x08\x07\x08\x06\x001\x07\x01\x00\x05\x08\x00\x14\x0b\x0e\x17\x03\x0e\x0c:9\x10\x0f\x14\x17\")\x02\x0e\r\x01\x04\x00[\x08\x00\x06\r\x00\x18\x06\x1b\x00\x14\x1d\x02\x00\x0b\x08\x02\x00\x05\x01\x04\"\x1d\x0c\x0b\x1c!\x0e\x00ns\x08\x01\x0085\x0b\x0e\x01\x00\x02\x03\x00\x1e\x15\x00\x07\x06\x00\x03\x1f*\x04\x06\x05\x00\x13\x01\x06\x00\x07\x10\x0b\t\x01\x04\x05\x0b\x16\x00\xaa\x03\x9b\x03\n\x11\x04\x03\x01\x08\x04\x03/\x1e\x03\x19\x00\x10\x06\t\x0b$#\x0c\x0b\x00\x02>)\x1a\x17\x07\x0f\xae\x03\xa1\x03\xf83\x834\x04\x00\x97\x01\x0c\t\x0b\n\x05\x10\x15\x00\x12\x02\x07\x00\x0c\x0b\x08\x07\x00\x18\x17\x00\x18\x06\x13\x01\r\x06\x02\x00\x016+\x00\t\x10\x06\x15\x006%\x15\x16\x15\x06\n\t\x02\t\x14\x03\x07\x0c\x14\x15\x00\t\x00\x02\x08\x00\x0c\x05\x0f\x00\x07\x03\x02\xb6\x03\x9b\x03\n\x11\x07\x10\x08\x17\x8c\x01\x8b\x01\x04\x00Y\x14\x11,-\x18\x17\xf6\x01\xf3\x01\xbe7\xcb7\x16\x11\x12\t\x00\x07\x08\x00\x07\x02\x01\x00\x08\t\n\x0c\x0b\x00\t\x1e\x1f\x0c\x14\x13\x00\x0e\x13\x18\x11\x1e\r\x19\n\x07\x08\x0e\x00\t\x02\x0c\t\x14\x17\x06\x00;\x04\x03\x00\xe0\x02\xc9\x02\x15\x92\x05\x91\x05\x18\x08&C\x16\x0f\x01\x05\x02\x0e\n\x19\x05\x16\x0f\x08\x04\xc0\x02\xc3\x02\x07\x00\x11\x04\n\x03\r\x0e\x0e\x00\x07\x01\x06\x04\x07\x04\x00%\x01\x00\x0e\x08\x15\x00\n\x02\x11\x00\x08\x02\x03\x16\x00\x15\x00\x0b\x0c\x06\x00\x9f\x01\x18\x0f\x02\t\x00\x05\x03\x16\x03\x07\x00\x08\x0f\x08\x18\x17\x08\rLE,\x13\x17:\x1b\x00\x11\x00\x03\x05\x00\x01\x00\x16\r\x07\x0e\x01\x08\r\x03\x01\x0c\x11\x08\x00\x08\x06\x05\x0f\x10\t\x00\x08\x02\t\x00\r\x0e\x00\x12\x11\x07\x03\x01\x07\x16\x8a\x01\xb0\x01\x00\xc7\x01w\x01\x00\x01\x03\x06\n\x07\x12\x04\x05\x01\x04\x04\x10;#\x1a\x19\x02\x0e\x01\r\x1a\x19\x02\x04\x02\x01\x03\x06\x12\x19\x02\n\x14\x15NO\x07\x10\x0b\x0c\x0b\x03\x0e\x04\x00\t\x0b21\x02\x03\x04\x00\x1d\x08\x05\x06\x07 \x1f,+\x02\x01\x006+\t\x02\x0c\x00\x17\x07\x0c\x0b\x03\r\x10\n\x01 \x15\x0f\x08\x0c\x00\x15\x07\x00\x06\x02\x04\x0b\x06$\x19\x10\x19\x04\x00\'\x02\x00\x01\x07\x03\x0c\x00\x07\x0f\x1a\x01\x02\x01\x00\x02\x00\x01\x00\n\x0c\x04\r\x07\x01\x10\x07\x0e\x04\x0b\x03\x0c\x06\x04\x07\x07\x00\n\x01\x05\x0e\x00E\x14\x00\t\x02\x05\x0b\x14\x07\x0e\x03\x0f\x03\x0c\x00\x01\x00\n\x0f\xb4\x01\xb3\x01\xb4\x01\xb3\x01\xb4\x01\xb3\x01\xb4\x01\xb3\x0181\n\x07\x88\x01\x8f\x01\xd6\x01\xd5\x01\x01\x04\x00\x1b:\\\x8d\x01\x8c\x01\rW\x1e\x1cG\x07\x00\x0b\xbc\x04\xbf\x04\x04\x00\xcb\x01\x08\x05\x1c\x1b\x00\x01\x02\x06\x00\x05\x08\t \x19\x05\x16\x1b\x10\x16\x1f\x00\x02\x01\x07\x14\x0b\x10\x0f\x006)\x0b2\xfc\x02\xad\x03\x08 .U&.O\x1e\x82\x02\xa3\x02\x00\x08\x14\x15\x03\x84\x01{\x0e\x08\x1b\x04\x0c\x92&\xf3$ \x02\xb4\x04\x87\x06\x00\x12\x1d\xd2\x01\xaf\x01\x189\x9a\x02\x9d\x02\x18,3\x00\x10\x05\x15\x06\x9c\x0b\x95\x0b\x12\x07\t\x02\x88\x05\xe0:\xe53\xe3\x0b\x1f\x00\x02\x00\r\x0c\x02\r\x12\x02!\x1a\x04\x00\x05\x05\x01\x08\x06\x00\x03\x05\x06\x04\x00\x05\x07\n\x01\x08\x00\x03\x1a\x19\x04\x00\x1d\x08\x03\n\x13\n\x01\x00\x11\x08\x00\x02\n\x00\x03\x04\x04\x01\x01\x02\x04\x00\x0f\x08\x03\x04\t\x02\x08\x00\x10\x04\x00\x07\x0b\r\x08\x07\x06\x00\x0f\x12\x11\x07\x00\x088=*\x04\x00\x1f3\x1a\x0f\xd2\x02\x90\x01\xd9\x03\x00\x01\xa8\x03\x91\x03\x15\x00\x05\xfc\x04\xeb\x04\x1a\x04\x00\x0b\xc6\x01\xe9\x01\xb2\x02\xc7\x02\x1e\x07\x04\x00\x19\x0b\xb2\x08\xf3\x07\xea\x01\x9b\x02&\xec\n\x91\x0b\x00\x0e\x0b\x01\x02,\x00a\x04\x05\x1e\x17\x15$`m\x05\x1f \x8e\x01_\x18\x10\x04QP\x07BK+B\x0b\xb6\x01\x9b\x01A\x1c;\x16\x10\n5\x01\x02\x01\x00\x14\x0b@E:\t\x1d41\n\x92\x08\xb1\x08\x04\x00\x1f\x0f\x12\x00:7\xba\x02\xbd\x02\x06\xc6\x02\x00\xcb\x02\x08\x07\x00\x05\x06\x04\x00\x17\x0c\x05\x08\x10\x1b\x1c&C\x12\x11\n\t\x04\x00#$)\x06\x00\n\t\x00\xcc\x02\x81\x02INM\t\x02\x08\x00\x07\x08\x04\x00\x07\x14\t\x0f\x06\x06\x00\x01\x02\x16\x00\x05\x01\x07\x08\x08\x00c\x0f\x10\x00\x02\x01\n\x01\x0e\x00\x15\x92\x01O\x12\xa6\x01\xa9\x01G\xd4\x01\x0c\x8d\x01Q4\x9c\x01\xd3\x01\x03\x00(\'\x00\x16\x13V\x1b\x1fP[\x12\x187\xa8\x01\xa7\x01DK\xda\x0b\xb3\x0b\xb8\x05\xdd\x05\x06\x1a\x181\x06\x00qvY\x1b\x02\x0405\x06\x05\x00\x10\r\x0e\x0b\x1c\x1d\x00B)\x19\x06\x05\x00\x10\x04\x13\x0e\rjg\x01\xba\x01\xb9\x01\x00NM\x10\x16%\n\t\x16\x15\x16\x15\x00F\x8a\x01\xcd\x01\x14<Q\xe0\t\xdf\t\x9c\x01OQ\x04\x06! %\t\n\x00\x05\x06\x00\x02\x00\x02\x03\x00\x04\x03\x18\x17\x06\x00?\x05\x06\x05\x06\x1a\x181\x00\x0289\x02\t\x08VQ\x03\x0c\x0b\x18\x17\x04\x03\x14\t\x0e\x17\x18\x178=\x06\x04\x00\x07\x10\x0f\x08\x07\x04\x05\x13\x02\x04\xc0\x01\xb1\x01\x0e\x13\x98\x01\x97\x01\\]\x04\x02#\x0b\x0821\x17\x124\x1b\x90\x01\x8f\x01\x0f\x10\r\x0e\xba\x02\xcb\x02LI\x06\x00\x05\x01>;\n\x00\x15\xb4\x04\xb5\x04\x00>-\x0f\x12\x11\x12\xb4\x01\xc3\x01\x0c\x00\t\x08\t\xa0\x01\x8f\x01 \x04\x00\x04\r-\x03\x05\x1a#\x10\r\x07\x06(\xf0\x01Q\xc1\x01\x02:Zx\x91\x02\x00\x120?\x01\x02\x06\x00\r\x01\x0e\r,)\x01\x12\x04\x00\x0f +\x0587\x05\x06\x0c\x08\x00!\t\x12!.\x13\x00\x0b@+\x13\x10\x08\x13\xc8\x02\xab\x02\x1d\x01\x04\x00E\xe4\x01\xe3\x01\x04\x03\x04\x03\x00\x08(-\x01\x14\x13\x0c\n\x13\x00\x01\x002+\x02\x01\x02\n\x03\x05\x03\x0e\x11\x08\x10\x0f29\x04\x00\x0387\x04\x00\x15\x12\x04\x0f\x05B;\x03\x01\x06\x03\x01\x04\x00\xd7\x01\n(\x10=\x03\x18\x17\x1c\x13\x08\xd6\x01\xe1\x01\x01\x06\x070/FE\x02\x01\xd4\x01\xbb\x01\x17\x16\x11\x010\x19\x17\x05\x00\r\x11&\x19\x0e\x0c\x0f\x12\x07\x06$!\x01\n\t\x07\x00\x03\x12\x00\x03\x0c\r\xc4\n\x81\n;\x1a\x17\x07\x08\x07\x12\x0e\x13\x03\x02\t\n\t\x12\x14%\xe6\x02\x91\x02Y\x06\x00\x02\x01\x00\x08\x01&+,)\x00\x01\x00\x02\x01\x00\x05\x01H;\x14\x16)\x03\x08\x07$\x0f\x9a\x02\xad\x02\x04\x00Y&#\x012\x1b\xf6\x01\xf5\x01\x96\x08\xa7\x08\x03FS\x08\x01\x00\x08\x00\x05\t\x06\x16\x13\x08 \x1f\xcc\x02\xe9\x01q\x06\n\x07\xd8\x01\xcf\x01$5\x14\x00\x01\x07\x00\x02\t\n\x00\x06\x04\x00W\x0f\x10\x14\x1c#\t\x01\x08\n\r\xae\x01\xb1\x01\xb8\x01\x85\x01\x1dVF}+\x03\x10\x00\x07\t\xc8\x06\xcd\x06\x9a\x0e\x93\x0e\x07\x08\x14\x1f>9\n\x0b\x02\x00\x07$\x1f \x0f\x03\xd2\x01\x00\x03\x05\x01\x00\xd8\x02\x02\xe2\x01Q\xccW\xffI\x89\x0b\x8e\x1c\xd1\x1d\x00\xca\x17\xf9\x15\x00\xc0\x01\x02\xf0\x11\xf0\x1b\xa1/\x00\xe88\x00\xd6\x08\xa5@\xf2\x03\x89\x05\x8e&\x8d&\x8a\x1a\xe2\x1c\xd7$\xb9\x08\x80\x08\xa8\n\xfa\x02\xbb\x1f\xda\r\xc5\x0e\xb0\x14\x83\x13\x98\xa6\x02\x97\xa6\x02\x8e\\\x8d\\\x8e\xd4\x01\xeb\xd4\x01\x04\x00#\xc2\x04\xf2F\xeb-\xbd\x0f\xab\r\x9eD\x91E\xd9\x01\x00\x8eD\x9b*\xee\x01\x9b\x19\x93\x01\xfe\x14\x83\x01\xa5\x15\x04\x06\x00\x01\x03\x04\x00\x01\x04\x08\x00\x01\x03\x04\x00\x05\x04\x01\x02\n\x00\x11\x03\x00\x04\x03\x04\x03\x04\x00\x03\x04\x00\t\x04\x00\x03\x00\x04\x04\x00\x01\x03\x0c\x00\x0f\x04\x03\x04\x03\x04\x03\x02\x01\x06\x00\x05\x04\x03\x04\x0c\x00\x01\x03\x04\x00\x03\x04\x03\n\x00\x07\x02\x00\x02\x03\x04\x00\x19\x02\x01\x04\x00\x03\x00\x04\x00\x03\x00\x02\x01\x04\x06\x00\x05\x03\x00\x04\x08\x00\x05\x03\x04\x03\x04\x00\x01\x0e\x03\xda\x02\x00\xd7\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xcb\xc79%from scipy.optimize import curve_fit\n\x01\n*w_text_output(content=\"\"\"\n## _(Optional)_ \x12Dose Curve Fitting\x02\n\n\x04\"\"\")\x01\n\x01\n\x16if dosage_info is True\x17 and log_dosage is True\x02:\n\x01\n\x02  \x01\n\x02  \x15# Select a dataframe\n\x02  \x02# Ddf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\x01\n\x02  \rdf_options = \x01[#k for k, v in globals().items() if \nisinstance\x04(v, \x07pd.Data\x01F\x04rame\x01)\x01]\x01\n\x02  \x06print(\ndf_options\x01)\x01\n\x02  \x01\n\x02  \x1dselected_df_name = w_select(\n\x02  \x18  options = df_options,\n\x02  @  label=\"Select a result from a previous data transformation:\",\n\x02  \x19  default=df_options[-1]\n\x02  \x02)\n\x02  \x01\n\x02  \x1dif selected_df_name is None:\n\x02  \n  exit(0)\n\x02  \x01\n\x02  1df = globals().get(selected_df_name.value, None)\n\x02  \x01\n\x02  \x10if df is None: \n\x02  \n  exit(0)\n\x02  \x01\n\x02  \x01d\x18ef safe_convert(value):\n\x02  \x02  \x05try:\n\x02  \x04    \x14return float(value)\n\x02  \x02  \x13except ValueError:\n\x02  \x04    \x07return \x010\x03.0\n\x02  \x01\n\x02  \x02df\x01[\x01\"\x06Dosage\x01\"\x04] = \x02df\x01[\x01\"\x06Dosage\x01\"\x15].apply(safe_convert)\x03\n  \x01\n\x02  \x15x_column = w_select(\n\x02  >  label=\"Select the column for dose concentration (X axis):\",\n\x02  \x15  options=df.columns\n\x02  \x02)\n\x02  \x01\n\x02  \x18drug_column = w_select(\n\x02  :  label=\"Select a column for the therapeutic candidate:\",\n\x02  \x15  options=df.columns\n\x02  \x01)\x01\n\x1b\n  if drug_column.value is \x05None:\x01\n\x02  \x02  !groups_to_keep = w_multi_select(\n\x02  \x12    label=\"Select \x16therapeutic candidates\x08 to keep\x01:\x03\",\n\x02  \x0c    options=)[\"Select a therapeutic candidate column\"]\x02,\n\x02  \x0c    default=\x01[\x01]\x01\n\x02  \x03  )\x03\n  }else:\n    groups_to_keep = w_multi_select(\n      label=\"Select therapeutic candidates to keep:\",\n      options=df[drug_column\x06.value\x1a].unique(),\n      default=\x01[\x01]\x06\n    )\x01\n\x02  \x01\n\x02  \x15y_column = w_select(\n\x02  -  label=\"Select the column for the Y axis:\",\n\x02  \x15  options=df.columns\n\x02  \x02)\n\x02  \x01\n\x02  Pif x_column.value is None or y_column.value is None or drug_column.value is NoneE or groups_to_keep.value is [\"Select a therapeutic candidate column\"]\x1d or groups_to_keep.value is [\x01]\x02:\n\x02  \n  exit(0)\n\x02  \x01\n\x02  [# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n\x02  \x1b# Y=100/(1+10^(X-LogIC50))\n\x02  6def log_inhibitor_vs_normalized_response(x, LogIC50):\n\x02  \'  return 100 / (1 + 10**(x - LogIC50))\n\x02  \x01\n\x02  d# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\n\x02  Jdef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n\x02  5  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\x02  \x01\n\x02  ]# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\n\x02  /def inhibitor_vs_normalized_response(x, IC50):\n\x02  \x1e  return 100 / (1 + x / IC50)\n\x02  \x01\n\x02  f# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\n\x02  Cdef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n\x02  -  return 100 / (1 + (IC50 / x) ** HillSlope)\n\x02  \x01\n\x02  \x1ddose_response_eq_options = {\n\x02  R  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n\x02  m  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n\x02  K  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n\x02  e  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n\x02  \x02}\n\x02  \x01\n\x02  \x1ddose_response_eq = w_select(\n\x02  .  label=\"Choose the curve fitting equation:\",\n\x02  1  options=list(dose_response_eq_options.keys()),\n\x02  E  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n\x02  \x02)\n\x02  \x01\n\x02  #if dose_response_eq.value is None:\n\x02  \n  exit(0)\n\x02  \x03  \n\x02  @selected_eq =  dose_response_eq_options[dose_response_eq.value]\n\x02  \x01\n\x02  %# Generate one curve per oligo group\n\x02  \'# Function to fit curve for each group\n\x02  6def fit_curve(group_df, x, y, group, model_function):\n\x02  Q    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n\x02  ,    # Extract x and y values from the group\n\x02  \x1b    if not group_df.empty:\n\x02  \"      x_data = group_df[x].values\n\x02  !      y_data = group_df[y].values\x01\n\x02  \x01\n\x02  \x06      \x01\n\x02  \x07      \n\x02  \x1e      # Perform curve fitting\n\x02  \x1e      popt, pcov = curve_fit(\n\x02  \x19        model_function, \n\x02  \x11        x_data, \n\x02  \x11        y_data, \n\x02  1        # p0=[y_data.max(), y_data.min(), 0.05],\n\x02  \x16        # maxfev=5000\n\x02  \x08      )\n\x02  \x01\n\x02  B      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n\x02  3      # Predict y values based on the fitted curve\n\x02  7      y_predicted = model_function(x_predicted, *popt)\n\x02  \x07      \n\x02  4      # Create a DataFrame for the predicted values\n\x02  l      predicted_df = pd.DataFrame({\'Predicted Curve - X\': x_predicted, \'Predicted Curve - Y\': y_predicted})\n\x02  \x07      \n\x02  \x19      # Add group column\n\x02  \x84\x01      predicted_df[f\"Predicted Curve - {group}\"] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n\x02  \x07      \n\x02  #      # Add original observed data\n\x02  @      predicted_df[\"Experimental Data - X\"] = pd.Series(x_data)\n\x02  @      predicted_df[\"Experimental Data - Y\"] = pd.Series(y_data)\n\x02  M      predicted_df[f\"Experimental Data - {group}\"] = group_df[group].iloc[0]\n\x02  \x01\n\x02  ?      # # Group by concentration, calculate the mean and stdev\n\x02  U      avg_per_group_df = group_df.groupby(x).agg({y: [\'mean\', \'std\']}).reset_index()\n\x02  A      avg_per_group_df[f\"avg {group}\"] = group_df[group].iloc[0]\n\x02  \x01\n\x02  \xad\x01      avg_per_group_df.columns = [f\"Aggregate Data - {x}\", f\"Aggregate Data - Mean {y} per {group}\", f\"Aggregate Data - STDEV {y} per {group}\", f\"Aggregate Data - {group}\"]\n\x02  \x01\n\x02  F      result_df = pd.concat([predicted_df, avg_per_group_df], axis=1)\n\x02  \x01\n\x02  \x16      return result_df\x01\n\x0b\n  df = df[\x03df[\x11drug_column.value\x01]\x05.isin\x01(\x0egroups_to_keep\x06.value\x01)\x01]\x01\n\x02  \x01\n\x02  5predicted_dfs = df.groupby(drug_column.value).apply(\n\x02  \r  fit_curve,\n\x02  \x14  x=x_column.value,\n\x02  \x14  y=y_column.value,\n\x02  \x1b  group=drug_column.value,\n\x02  \x1d  model_function=selected_eq\n\x02  \x02)\n\x02  \x01\n\x02  \"# Generate a unique variable name\n\x02  1result_df = predicted_dfs.reset_index(drop=True)\n\x02  \x01\n\x02  7# Generate a unique variable name in the globals space\n\x02  \x10print(globals())\x01\n\noutlier_df\x14Log Transform Dosage9This block applies a log transform to the dosage column.\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")7[k for k, v in globals().items() if hasattr(v, \"iloc\")]\x02]]\x11globals().items()\x03;pr\x01\n\x02# \x02# \x02# \x07hasattr\x06\"iloc\"\x04type\x01f\x01D\x08if dose_\x0f  print(\"here\")\x02  \x03\n  q  x_column = w_select(\n    label=\"Select the column for dose concentration (X axis):\",\n    options=df.columns\n  )\x0egroups_to_keep\x05grous\x06multi_\nps to keep\x02[]\x01]\x02\"\"\x04drug\x0bdrug_column\t.unique()\x01)\x02  \x02  \x06groups\x18df[drug_column].unique()\x18df[drug_column].unique()\x01\"\x01\"\x01]\x01[\x01]\x1aSelect a therapeutic candd\x05idate\x07 column\x08        \x01]\x04drug\x04 in \x01)\x02no\x02  )[\"Select a therapeutic candidate column\"]\'\"Select a therapeutic candidate column\"\x1edf[drug_column.value].unique()\x01[\x01]\x1edf[drug_column.value].unique()\x05list(\x01_\x01)\x01\n\x02\n\n\x01\n\x04    \x06      \x04    \x06      \x011\x14    log_transform_df\x15dosage_column_2.value\x10log_transform_df\x15dosage_column_2.value\x06      \x9f\x06def find_best_match(columns, search_str):\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n\n# Example usage:\nimport pandas as pd\n\n# Create a sample dataframe\ndata = {\n    \'name\': [\'Alice\', \'Bob\', \'Charlie\'],\n    \'age\': [25, 30, 35],\n    \'address\': [\'123 St\', \'456 Ave\', \'789 Blvd\']\n}\ndf = pd.DataFrame(data)\n\n# List of columns from the dataframe\ncolumns = df.columns.tolist()\n\n# Search string\nsearch_str = \'ad\'\n\n# Find the best match\nresult = find_best_match(\x11qpcr_data.columns\x02, \x01\"\x04Well\x01\".)\nprint(result)  # Output should be \'address\'\n\xe8\x02from lplots.widgets.ldata import w_ldata_picker\nimport pandas as pd\n\n# Select a CSV file using the widget\ncsv = w_ldata_picker(label=\"Condition CSV\")\n\n# If the user has not selected a file yet, exit the code\nif csv.value is None:\n\texit(0)\n\n# If the user has selected a file, read the selected file into a Pandas DataFrame\ndf = pd.read_csv(csv.value.download())\x07columns\nsearch_str\x02Cq\x06Target\x03Amp\rtransform_df \x02= ;log_transform_df[log_transform_df[\"oligo#s\"].str.contains(\"\x08OLI1179a\x01\"\x02, \x08na=False\x01)\x01 \x01|+ log_transform_df[\"oligo#s\"].str.contains(\"\x08OLI1179b\x0c\", na=False)\x02]\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x03log!transform_df = log_transform_df[]\x12log_transform_df[]\x01]\x02\"\"\x07oligo#s\x05 = \"\"\x08OLI1179b\x01=\tOLI1179b \x01 \x02\"\"\x02\"\"\x051179b\x07 is in \x02= \x051179b\x01)\x02, \n\n\nOLI1179b\x02or\x08OLI1179a\xa8\x0ffrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n    options=df_options,\n    label=\"Select a result from a previous data transformation:\",\n    default=df_options[-1],\n)\n\nif selected_df_name is None:\n    exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None:\n    exit(0)\n\n\ndef normalization(df):\n\n    x_column = w_select(label=\"Select the column for the X axis:\", options=df.columns)\n\n    y_column = w_select(label=\"Select the column for the Y axis:\", options=df.columns)\n\n    group_column = w_select(label=\"Select a column for the group:\", options=df.columns)\n\n    if x_column.value is None or y_column.value is None or group_column.value is None:\n        exit(0)\n\n    # Add replicate column\n    grouped = df.groupby([x_column.value, group_column.value])\n\n    def assign_replicates(group):\n        group[\"Replicate\"] = range(1, len(group) + 1)\n        return group\n\n    # Assign replicate to reach group\n    df = grouped.apply(assign_replicates).reset_index(drop=True)\n\n    # For each group at each X point, calculate the average Y\n    avg_df = (\n        df.groupby([group_column.value, x_column.value])[y_column.value]\n        .mean()\n        .reset_index()\n    )\n\n    # For each group, find the min and max\n    min_max_df = (\n        avg_df.groupby(group_column.value)[y_column.value]\n        .agg([\"min\", \"max\"])\n        .reset_index()\n    )\n\n    # Merge the min_max_df with original df\n    merged_df = pd.merge(df, min_max_df, on=group_column.value)\n\n    # Normalize the data for every group\n    # data - np.min(data)) / (np.max(data) - np.min(data)\n    normalized_df = merged_df\n    normalized_df[f\"Normalized {y_column.value}\"] = normalized_df[\n        y_column.value\n    ] - normalized_df[\"min\"] / (normalized_df[\"max\"] - normalized_df[\"min\"])\n\n    return normalized_df\n\n\nnormalized_df = normalization(df)\xd5\nfrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ngroup_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or group_column.value is None:\n  exit(0)\n\n# Add replicate column\ngrouped = df.groupby([x_column.value, group_column.value])\n\ndef assign_replicates(group):\n    group[\'Replicate\'] = range(1, len(group) + 1)\n    return group\n\n# Applying the function to each group\ndf_with_replicates = grouped.apply(assign_replicates).reset_index(drop=True)\n\nprint(df_with_replicates)\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the average dataset for every \"Group\"\n# Find min and max of average dataframe\n# Apply normalization to each group?\n\navg_df = df.groupby([\'group\', \'x\'])[\'y\'].mean().reset_index()\x12df_with_replicates\x12group_column.value\x05x_col.x_column\n                                    .\x06.value\x05y_col\x0ey_column.value\x03avg\x06avg_dfLmin_max_df = grouped.groupby(\'group\')[\'y\'].agg([\'min\', \'max\']).reset_index()\x14Assign replicate the\x0cto reach out\x05group\x06\n# For\x03For\xf8\x0bfrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ngroup_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or group_column.value is None:\n  exit(0)\n\n# Add replicate column\ngrouped = df.groupby([x_column.value, group_column.value])\n\ndef assign_replicates(group):\n    group[\'Replicate\'] = range(1, len(group) + 1)\n    return group\n\n# Assign replicate to reach group\ndf_with_replicates = grouped.apply(assign_replicates).reset_index(drop=True)\n\n# F\navg_df = df_with_replicates.groupby([group_column.value, x_column.value])[y_column.value].mean().reset_index()\n\nmin_max_df = grouped.groupby(\'group\')[\'y\'].agg([\'min\', \'max\']).reset_index()\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the average dataset for every \"Group\"\n# Find min and max of average dataframe\n# Apply normalization to each group\x06 each \xf4\x0bfrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ngroup_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or group_column.value is None:\n  exit(0)\n\n# Add replicate column\ngrouped = df.groupby([x_column.value, group_column.value])\n\ndef assign_replicates(group):\n    group[\'Replicate\'] = range(1, len(group) + 1)\n    return group\n\n# Assign replicate to reach group\ndf_with_replicates = grouped.apply(assign_replicates).reset_index(drop=True)\n\navg_df = df_with_replicates.groupby([group_column.value, x_column.value])[y_column.value].mean().reset_index()\n\nmin_max_df = grouped.groupby(\'group\')[\'y\'].agg([\'min\', \'max\']).reset_index()\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the average dataset for every \"Group\"\n# Find min and max of average dataframe\n# Apply normalization to each group\x06\n# For\x03For\x11For each group at\x87\x0cfrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ngroup_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or group_column.value is None:\n  exit(0)\n\n# Add replicate column\ngrouped = df.groupby([x_column.value, group_column.value])\n\ndef assign_replicates(group):\n    group[\'Replicate\'] = range(1, len(group) + 1)\n    return group\n\n# Assign replicate to reach group\ndf_with_replicates = grouped.apply(assign_replicates).reset_index(drop=True)\n\n# For each group a\navg_df = df_with_replicates.groupby([group_column.value, x_column.value])[y_column.value].mean().reset_index()\n\nmin_max_df = grouped.groupby(\'group\')[\'y\'].agg([\'min\', \'max\']).reset_index()\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the average dataset for every \"Group\"\n# Find min and max of average dataframe\n# Apply normalization to each group\x05 each-t each concentration, calculate the average Y\x07X point\'\n# For each group, find the min and max\x06avg_df\x05group\x12group_column.value\x02co\x04y_co\x0ey_column.value\t\n\nprint()\x07min_max\nmin_max_df\x0c\n\n# Normalid\x06ze the\x04data\x1fthe data for every group\nresult\x10normalized_df = \x01\n\x06\n# mer\x0cMerge the Df\x11min_max_df with d\x0boriginal DF\x10df\nmerged_min_ma\x03df+\x04 = v-pd.merge(df, min_max_df, on=\'group\')\n\nprint()\x08merge_df\tmerged_df\x01#\x01\n\x06group_\x0egroup_column.c\x05value\x13.df_with_replicates\x06merged\x02no\x08mergeddf\x11merged_df\nnormali\x0fnormalized_df[]\x01]\x02\"\"\x01\"\x01f\x0fNormalized {y_c\x0fy_column.value}\x08 = norma\x02df\xc1\x0efrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ngroup_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or group_column.value is None:\n  exit(0)\n\n# Add replicate column\ngrouped = df.groupby([x_column.value, group_column.value])\n\ndef assign_replicates(group):\n    group[\'Replicate\'] = range(1, len(group) + 1)\n    return group\n\n# Assign replicate to reach group\ndf_with_replicates = grouped.apply(assign_replicates).reset_index(drop=True)\n\n# For each group at each X point, calculate the average Y\navg_df = df_with_replicates.groupby([group_column.value, x_column.value])[y_column.value].mean().reset_index()\n\n# For each group, find the min and max\nmin_max_df = avg_df.groupby(group_column.value)[y_column.value].agg([\'min\', \'max\']).reset_index()\n\n# Merge the min_max_df with original df\nmerged_df = pd.merge(df, min_max_df, on=group_column.value)\n\n# Normalize the data for every group\nnormalized_df = merged_df\nnormalized_df[f\"Normalized {y_column.value}\"] = d\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the average dataset for every \"Group\"\n# Find min and max of average dataframe\n# Apply normalization to each group\x02df\x0fnormalized_df[]\x01]\x02y_\x0ey_column/value\x06.value\x01 \x01\n\x02 =\x0e-normalized_df\x01 \x01 \x02[]\x01]\x02\"\"\x03min\x05 / ()\x01)\x03nro\nnormalized\x0fnormalized_df[]\x01]\x02\"\"\x01\"\x03max\x01 \n - normali\x0fnormalized_df[]\x01]\x02\"\"\x03min\x03\n  \x04\ndef\x03def\x02de\x04def \x04def \x03def\x07def val\nnormalized\x05 norm\x0fnormalization()\x02df\x02):\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  8\n  # data - np.min(data)) / (np.max(data) - np.min(data)\x03\nre\x0f  return normal\rnormalized_df\x94\x03\n  \n  x_column = w_select(\n    label=\"Select the column for the X axis:\",\n    options=df.columns\n  )\n  \n  y_column = w_select(\n    label=\"Select the column for the Y axis:\",\n    options=df.columns\n  )\n  \n  group_column = w_select(\n    label=\"Select a column for the group:\",\n    options=df.columns\n  )\n  \n  \n  if x_column.value is None or y_column.value is None or group_column.value is None:\n    exit(0)\x03\n  \x02\nv\x0fnormalization()\x02df\x01)\x02df\ndf_options\x02df\x01n\x06ormali\x05resut\x01n\xd9\x0efrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\ndef normalization(df):\n  \n  x_column = w_select(\n    label=\"Select the column for the X axis:\",\n    options=df.columns\n  )\n  \n  y_column = w_select(\n    label=\"Select the column for the Y axis:\",\n    options=df.columns\n  )\n  \n  group_column = w_select(\n    label=\"Select a column for the group:\",\n    options=df.columns\n  )\n  \n  \n  if x_column.value is None or y_column.value is None or group_column.value is None:\n    exit(0)\n  \n  # Add replicate column\n  grouped = df.groupby([x_column.value, group_column.value])\n  \n  def assign_replicates(group):\n      group[\'Replicate\'] = range(1, len(group) + 1)\n      return group\n  \n  # Assign replicate to reach group\n  df = grouped.apply(assign_replicates).reset_index(drop=True)\n  \n  # For each group at each X point, calculate the average Y\n  avg_df = df_with_replicates.groupby([group_column.value, x_column.value])[y_column.value].mean().reset_index()\n  \n  # For each group, find the min and max\n  min_max_df = avg_df.groupby(group_column.value)[y_column.value].agg([\'min\', \'max\']).reset_index()\n  \n  # Merge the min_max_df with original df\n  merged_df = pd.merge(df, min_max_df, on=group_column.value)\n  \n  # Normalize the data for every group\n  # data - np.min(data)) / (np.max(data) - np.min(data)\n  normalized_df = merged_df\n  normalized_df[f\"Normalized {y_column.value}\"] = normalized_df[y_column.value] - normalized_df[\"min\"] / (normalized_df[\"max\"] - normalized_df[\"min\"])\n\n  return normalized_df\n\nnormalization(df)\x04orma\x10normalized_df = \x04# **\rqPCR Analyzer$**\n\nLayout to visualize and analyze \x05qPCR \x04data\x01.x# Markdown Example\n\nSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$\x1dPathway Enrichment Visualizer.outputs from Latch Pathway Enrichment workflow\x03Dat\x01\n?# **qPCR Analyzer**\n\nLayout to visualize and analyze qPCR data.\x82\x04import pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(content=\"Start here by importing the output file from your qPCR machine. It must be a CSV or an Excel (.xlsx) document.\")\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (CSV or Excel Sheet)\")\x01\n\xa1\x08\nif well_result_lpath.value is not None:\n  well_result_file = well_result_lpath.value.download()\n  # Check if  excel file\n  if \".xlsx\" in str(well_result_file):\n    well_result_df = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=well_result_df.sheet_names, default=\"Results\").value\n    skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    well_result_df = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))  \n  else:\n    well_result_df = pd.read_csv(well_result_file)\n\n  cq_column = w_select(label=\"Select the column from the qPCR Machine file that has the Cq values.\", options=well_result_df.keys())\n\n  well_column = w_select(label=\"Select the column from the qPCR Machine file that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n  if (cq_column.value is not None) and (well_column.value is not None):\n    w_text_output(content=\"Great! Continue onwards fellow soldier\")\n\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x01\n\x02\n\n\x02if\x02if\x03if \x02if\x07if well)well_result_lpath.value is None:\n  exit()\x010\x01)\x01\n\x08\nprint()\x04well\x17well_result_lpath.value\x04len(\x01\n\x03if \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")/from lplots.widgets.ldata import w_ldata_pickerX\n\nimport pandas as pd\n\n# Select a CSV file using the widget\ncsv = w_ldata_picker(label=\"\x04CSV\"\x02)\n\x01\n\x01\n\x1dif csv.value is None:\n  exit(\x010\x01)\x01\nX\n# Read the selected file into a Pandas DataFrame\ndf = pd.read_csv(csv.value.download())\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x02fr\x0ffrom lplots.the\x01s\x04fiel\x08widgets.\xf0\x01import pandas as pd\n\n# Select a CSV file using the widget\ncsv = w_ldata_picker(label=\"Condition CSV\", default=\"latch:///welcome/deseq2/conditions.csv\")\n\n# Read the selected file into a Pandas DataFrame\ndf = pd.read_csv(csv.value.download())\nCondition 2, default=\"latch:///welcome/deseq2/conditions.csv\"\x02if\x01)\xe3\x01from lplots.widgets.ldata import w_ldata_picker\n\nimport pandas as pd\n\n# Select a CSV file using the widget\ncsv = w_ldata_picker(label=\"CSV\")\n\n\nif csv.value is None:\n  exit(0)\n\n# Read the selected file into a Pandas DataFrame\ndf\x012$ = pd.read_csv(csv.value.download())\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")Lfrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\x01\n*w_text_output(content=\"\"\"\n## _(Optional)_ \x0fOutlier Removal\x01\n\x05\n\"\"\")\x01\n\x01\nFremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\x01\n\x04\nif \rsample_column\x19.value is None:\n  exit()\n,\nprint(delta_ct_df)\noutlier_df = delta_ct_df\x01\n\xb2\x05\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\t\n  group[\x01\"\x04\xf0\x9d\x9a\xab\x0eCt Fold Change\x01\"\x01]\x07 = 2**(\x01-\x07group[\'\x04\xf0\x9d\x9a\xab\x02Ct\x02\']\x01)\x03\n  \x07group[\'\x04\xf0\x9d\x9a\xab\x03Ct 9Filtered Percent Relative Expression\'] = outliers_grubbs(\x07group[\"\x04\xf0\x9d\x9a\xab\x10Ct Fold Change\"]\x04)\n  \rreturn group\n\x13\nif remove_outliers\x0f.value is True:\x01\n\x02  \routlier_df = \noutlier_df\t.groupby(\x01\"\tCondition\x01\";, as_index=False, group_keys=False).apply(grubbs_transform)\x01\n\x02  \x01\n\x02  \x0boutlier_df[\x0b\"Condition\"\x0f] = outlier_df[\x0b\"Condition\"\x0e].astype(str)\n\x02  \x17outlier_df.sort_values(\x0b\"Condition\"\x0f, inplace=True)\x10condition_column\x08sample_cHremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\n\x0econtrol_column\x02  \x14group[\'Fold Change\']\x02  \x03  \n\x0bdelta_ct_df\rsample_.valueO\n\nw_text_output(content=\"This block detects and removes outliers with Grubbs.\")\x14control_column.value\x14control_column.value\x14control_column.value\x05olumn\x06column\x01]\x01\"\x01_\x0bFold Change\x01_\x01_\x01_\x01\n\xe6\x01w_text_output(content=\"\"\"\n## _(Optional)_ Delta Delta Ct Calcation\n\nNow we are going to calculate Delta Delta Ct. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\x0fRemove Outliers\x06remove\nOptionally\x08 outier \x12tliers with Grubbs\x03\'s.\x0bdelta_ct_df\x02\n\nFremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)H\n\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\x11Check this box to\x01.\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x1a  outlier_df = delta_ct_df\x1c\n  delta_ct_df = delta_ct_df\noutlier_df\x02\n\n\x17result_df = delta_ct_df\tresult_df\tresult_df\x0bdelta_ct_df\x0bdelta_ct_df\x02\n\n\x0bdelta_ct_df\x0eoutlier _df = \x08\nremove_\x1dremove_outliers = delta_ct_df\x08\nprint()\x0bdelta_ct_df\noutlier_df\x02\n\n\xb7\x01w_text_output(content=\"\"\"\n## _(Optional)_ Remove Outliers\n\nCheck this box to remove outliers with Grubb\'s.\n\"\"\")\n\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\x02\n\n\x01\n\xb8\x01\nw_text_output(content=\"\"\"\n## _(Optional)_ Remove Outliers\n\nCheck this box to remove outliers with Grubb\'s.\n\"\"\")\n\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\xb1\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nfrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\nif control_column.value is None:\n  exit()\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\n    group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\'Fold Change\'])\n    return group\n  \noutlier_df = delta_delta_ct_df.groupby(control_column.value, as_index=False, group_keys=False).apply(grubbs_transform)\n\nw_text_output(content=\"This block detects and removes outliers with Grubbs.\")\n\noutlier_df[control_column.value] = outlier_df[control_column.value].astype(str)\noutlier_df.sort_values(control_column.value, inplace=True)Fremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\x16\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\x9a\x01\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.9\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\x01\n\x10imported_data = \x0ewell_result_df\x01\n+\nw_text_output(content=\"\"\"\n## _(Optional)_ \x03Use\n Metadata \x08Template\xaa\x05\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\nuse_metadata_sheet = False\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\n\nif (well_plate_metadata_lpath.value is not None):\n  if well_plate_metadata_lpath.value != \"\":\n    use_metadata_sheet = True\n    well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\x01\n\x8f\x01    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys()\n, default=#list(well_plate_metadata_df.keys())\x7f)\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  \rimported_data\x03 = \rimported_data\x01[\rimported_dataM[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    \rimported_data\x1b[col_name] = pd.to_numeric(\rimported_data~[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\x01\n\x11sheets_added = []\xc9\x06\n\nif use_metadata_sheet is True:\n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n\n    def sheet_to_well_plate_map(df):\n        well_plate_dict = {}\n        for idx, row in df.iterrows():\n            for col in df.columns:\n                try:\n                  well_id = f\"{idx_to_row_id[idx]}{col}\"\n                except KeyError:\n                  raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n                well_plate_dict[well_id] = row[col]\n        return well_plate_dict\x8d\x05\n    sheets_added = selected_metadata_variables.value\n    for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            # sheets_added.append(sheet_name)\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n    \n        # assert df.shape == (\n        #     16,\n        #     24,\n        # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n        \rimported_data\x0e[sheet_name] =\x01 \rimported_datal[\"Well\"].map(sheet_to_well_plate_map(df))\n\nif len(sheets_added) > 0:\n  w_text_output(content=f\"Added {len(sh\neets_added\x0c)} sheets: {\x02\',\x01 \x07\'.join(\x0csheets_added\x01)\x03}\")\x01\n\x02if\x12 len(sheets_added)\x03 ==> 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets\x02\")\x01\n\x01\n\x01 =If you want to merge your ourtput file with additional metadt\x05ata. \x1b, you can download it here:\x04 do \xae\x17\nw_text_output(content=\"Optional: If you want to merge your ourtput file with additional metadata, you can do your metadata sheet here\")\n\nuse_metadata_sheet = w_checkbox(label=\"Use separate metadata sheet\", default=False).value\n\nif use_metadata_sheet is True:\n  well_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\n  if well_plate_metadata_lpath.value is not None:\n    well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n# cq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq values.\", options=well_result_df.keys())\n\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  well_result_df = well_result_df[well_result_df[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\n# well_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\nif use_metadata_sheet is True:\n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n\n    def sheet_to_well_plate_map(df):\n        well_plate_dict = {}\n        for idx, row in df.iterrows():\n            for col in df.columns:\n                try:\n                  well_id = f\"{idx_to_row_id[idx]}{col}\"\n                except KeyError:\n                  raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n                well_plate_dict[well_id] = row[col]\n        return well_plate_dict\n      \n    for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n    \n        # assert df.shape == (\n        #     16,\n        #     24,\n        # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n        well_result_df[sheet_name] =well_result_df[\"Well\"].map(sheet_to_well_plate_map(df))\n    \n\x07so here\x1cthis here. Latch provides a \x1cthat you can fill out [here[\x02].\x01p\x0cqPCR results\x08machine \x04 now\x07, you c\tdo this h\x04here\x0bdownload [g\x06here] \x02, \x13, and upload below.\x02# \x1c\n  use_metadata_sheet = True\x02\n\n\x1ause_metadata_sheet = falseMFalse\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\x1e\n    use_metadata_sheet = True\x03 & \x01)\x01(\x01l\x02()\x06len*()\x1fwell_plate_metadata_lpath.value\x04 > 0\x02# \x01:\x06\n  if \x02  \x02  \x02  \x02  \x02  \x06 != \"\"\x01\"\x02\n\n\x9c\x02w_text_output(content=\"\"\"\n(Optional) If you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\x03## \x01(\x01)\nMerge Mete\x05adata\xf4\x01\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \x01_\x01_\x01e\x02 m\x05 data\x0b\n          \x02  \x04prin\x07w_text)\t_output()\x03:\"\"\x02\"\"\x01\"\x11Selected 4 sheets\x07conten=\x02t=5\n          w_text_output(content=\"Selected 4 sheets\")\x02  \x0e\n    count = -\x011\x0f\n      counter \x01+\x04 = +\x03= 1\x04 cou\x02er\ncounter = 4+ 1\n      w_text_output(content=\"Selected 4 sheets\")\x02  \x02  \x07counter\x01f\x01{\x01}\x01t\x02# \x02# \x02# \x07\n      \x02  Qcounter = counter + 1\n        w_text_output(content=f\"Selected {counter} sheets\")\x05Added\nsheet_name\x02  \x02  \x11sheets_added = []\x01]\x05\n    \x0b\n          \x02  \x07sheets+\x0f_added.append()\nsheet_name2w_text_output(content=f\"Added {sheet_name} sheet\")\x01\n\x01\n\x11sheets_added = []\x01\n\t\nif len()\x04shee\x0fsheets_added > \x05 > 0:\x02  \x05s: {}\x04shee\x0csheets_added\x14\n  sheets_added = []\x1dsheets_added = []\n    print()\x1ewell_plate_metadata_df.items()!selected_metadata_variables.value\x0fsheets_added = \x02# \x03{} \x05len()\x03she\x05Merge\x01\n\x0ewell_result_df\x0ewell_result_df\x0ewell_result_df\x0ewell_result_df\x0ewell_result_df\x16\n    sheets_added = []\x0ewell_result_df\x0ewell_result_df\x0csheets_added\x02et\x01[\x07my_list\x02()\x08Optional\x1f a plate map Excel that stores \x1fyou can add your plate map here\x1aa template plate map Excel\x05\"\"\"\"\"\x02\n\n\xfa\x01(Optional) If you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. Latch provides a template plate map Excel that you can download [here], fill out and upload below.\x02\n\n\x01\n\x12\nPlease ensure theLthat your plate map matches the format provided in the Excel template here. \x01[\x03]()\x03<br\x04/br>\x1dwell_plate_metadata_df.keys()\x0b    print()\x1dwell_plate_metadata_df.keys()#[\'condition\', \'dosages\', \'oligo#s\']\x05list(\x01)\x0ewell_result_df\rimported_data\rimported_data\x02  \x03 if\x02 >\x1b: {\', \'.join(sheets_added)}\x01=\x01=\x86\x05\n\n\n# use_metadata_sheet = w_checkbox(label=\"Use separate metadata sheet\", default=False).value\n\n# if use_metadata_sheet is True:\n#   well_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\n#   if well_plate_metadata_lpath.value is not None:\n#     well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n#     well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n#     assert type(well_plate_metadata_df) is dict\n#     selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n    \x0fw_text_output()\x02\"\"&Optional: Add your metadata sheet here\x08content=\xb5\x11\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n# cq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq values.\", options=well_result_df.keys())\n\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  well_result_df = well_result_df[well_result_df[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\n# well_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\nif use_metadata_sheet is True:\n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n\n    def sheet_to_well_plate_map(df):\n        well_plate_dict = {}\n        for idx, row in df.iterrows():\n            for col in df.columns:\n                try:\n                  well_id = f\"{idx_to_row_id[idx]}{col}\"\n                except KeyError:\n                  raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n                well_plate_dict[well_id] = row[col]\n        return well_plate_dict\n      \n    for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n    \n        # assert df.shape == (\n        #     16,\n        #     24,\n        # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n        well_result_df[sheet_name] =well_result_df[\"Well\"].map(sheet_to_well_plate_map(df))\n    \n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xdb\x1ddef f():\n    from typing import Union, List\n    import numpy as np\n    from scipy.stats import t\n\n    from lplots.widgets.text import w_text_input, w_text_output\n    from lplots.widgets.select import w_select\n    from lplots.widgets.multiselect import w_multi_select\n    from lplots.widgets.dataframe import w_dataframe_picker\n\n    df_picker = w_dataframe_picker(label=\"Input data\")\n    df = df_picker.value\n\n    cols = df.columns if df is not None else []\n    numeric_cols = df.select_dtypes(include=\"number\").columns if df is not None else []\n\n    measurement_col = w_select(\n        label=\"Measurement\",\n        options=numeric_cols,\n        default=numeric_cols[0] if len(numeric_cols) > 0 else None,\n    ).value\n\n    grouping_columns = w_multi_select(\n        label=\"Group by (Optional)\", options=cols, default=[]\n    ).value\n\n    outlier_method = w_select(\n        label=\"Select outlier removal method:\",\n        options=[\"Grubb\'s\", \"Standard Deviation\"],\n        default=\"Grubb\'s\",\n    ).value\n\n    if (\n        df is None\n        or measurement_col is None\n        or grouping_columns is None\n        or outlier_method is None\n    ):\n        return\n\n    # https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n    def outliers_grubbs(x: np.ndarray, alpha: float = 0.05) -> Union[np.ndarray, bool]:\n        res = np.zeros(x.shape)\n\n        dev = np.abs(x - np.mean(x))\n        val = np.max(dev)\n        ind = np.argmax(dev)\n\n        G = val / np.std(x, ddof=1)\n        N = len(x)\n        T = t.ppf(1 - alpha / (2 * N), N - 2) ** 2\n        result = G > (N - 1) / np.sqrt(N) * np.sqrt(T / (N - 2 + T))\n\n        if result:\n            np.put(res, ind, 1)\n\n        return res\n\n    res = df.copy()\n\n    if outlier_method == \"Standard Deviation\":\n        stdev_distance_w = w_text_input(\n            label=\"Remove outliers that are this many standard deviations away:\",\n            default=\"2\",\n        )\n        stdev_distance = stdev_distance_w.value\n\n        if stdev_distance == \"\":\n            stdev_distance_w._state[\"appearance\"] = {\"error_text\": \"Required\"}\n            return\n\n        try:\n            stdev_thres = float(stdev_distance)\n        except ValueError:\n            stdev_distance_w._state[\"appearance\"] = {\"error_text\": \"Invalid number\"}\n            return\n\n        if len(grouping_columns) > 0:\n            avg_df = (\n                res.groupby(grouping_columns, as_index=False)[measurement_col]\n                .agg([\"mean\", \"std\"])\n                .rename(columns={\"mean\": \"PE_mean\", \"std\": \"PE_std\"})\n            )\n            res = res.merge(avg_df, how=\"inner\", on=grouping_columns)\n\n            mask = (res[measurement_col] - res[\"PE_mean\"]) > stdev_thres * res[\"PE_std\"]\n        else:\n            mean = res[measurement_col].mean()\n            std = res[measurement_col].std()\n\n            mask = (res[measurement_col] - mean) > stdev_thres * std\n    else:\n        if len(grouping_columns) > 0:\n\n            def f(group):\n                res = outliers_grubbs(group[measurement_col])\n                return pd.DataFrame(res, index=group.index)\n\n            outlier_tags = res.groupby(\n                grouping_columns, as_index=False, group_keys=False\n            ).apply(f)[0]\n        else:\n            outlier_tags = outliers_grubbs(res[measurement_col])\n\n        mask = outlier_tags == 1\n\n    num_outliers = mask.sum()\n\n    if num_outliers == 0:\n        w_text_output(content=\"No outliers found\", appearance={\"message_box\": \"info\"})\n    else:\n        w_text_output(\n            content=f\"{num_outliers} outliers found\", appearance={\"message_box\": \"info\"}\n        )\n\n    globals()[f\"{df_picker.key}_outliers\"] = res.loc[mask, :]\n    globals()[f\"{df_picker.key}_no_outliers\"] = res.loc[~mask, :]\n\n\nf()\n\xdb\x1ddef f():\n    from typing import Union, List\n    import numpy as np\n    from scipy.stats import t\n\n    from lplots.widgets.text import w_text_input, w_text_output\n    from lplots.widgets.select import w_select\n    from lplots.widgets.multiselect import w_multi_select\n    from lplots.widgets.dataframe import w_dataframe_picker\n\n    df_picker = w_dataframe_picker(label=\"Input data\")\n    df = df_picker.value\n\n    cols = df.columns if df is not None else []\n    numeric_cols = df.select_dtypes(include=\"number\").columns if df is not None else []\n\n    measurement_col = w_select(\n        label=\"Measurement\",\n        options=numeric_cols,\n        default=numeric_cols[0] if len(numeric_cols) > 0 else None,\n    ).value\n\n    grouping_columns = w_multi_select(\n        label=\"Group by (Optional)\", options=cols, default=[]\n    ).value\n\n    outlier_method = w_select(\n        label=\"Select outlier removal method:\",\n        options=[\"Grubb\'s\", \"Standard Deviation\"],\n        default=\"Grubb\'s\",\n    ).value\n\n    if (\n        df is None\n        or measurement_col is None\n        or grouping_columns is None\n        or outlier_method is None\n    ):\n        return\n\n    # https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n    def outliers_grubbs(x: np.ndarray, alpha: float = 0.05) -> Union[np.ndarray, bool]:\n        res = np.zeros(x.shape)\n\n        dev = np.abs(x - np.mean(x))\n        val = np.max(dev)\n        ind = np.argmax(dev)\n\n        G = val / np.std(x, ddof=1)\n        N = len(x)\n        T = t.ppf(1 - alpha / (2 * N), N - 2) ** 2\n        result = G > (N - 1) / np.sqrt(N) * np.sqrt(T / (N - 2 + T))\n\n        if result:\n            np.put(res, ind, 1)\n\n        return res\n\n    res = df.copy()\n\n    if outlier_method == \"Standard Deviation\":\n        stdev_distance_w = w_text_input(\n            label=\"Remove outliers that are this many standard deviations away:\",\n            default=\"2\",\n        )\n        stdev_distance = stdev_distance_w.value\n\n        if stdev_distance == \"\":\n            stdev_distance_w._state[\"appearance\"] = {\"error_text\": \"Required\"}\n            return\n\n        try:\n            stdev_thres = float(stdev_distance)\n        except ValueError:\n            stdev_distance_w._state[\"appearance\"] = {\"error_text\": \"Invalid number\"}\n            return\n\n        if len(grouping_columns) > 0:\n            avg_df = (\n                res.groupby(grouping_columns, as_index=False)[measurement_col]\n                .agg([\"mean\", \"std\"])\n                .rename(columns={\"mean\": \"PE_mean\", \"std\": \"PE_std\"})\n            )\n            res = res.merge(avg_df, how=\"inner\", on=grouping_columns)\n\n            mask = (res[measurement_col] - res[\"PE_mean\"]) > stdev_thres * res[\"PE_std\"]\n        else:\n            mean = res[measurement_col].mean()\n            std = res[measurement_col].std()\n\n            mask = (res[measurement_col] - mean) > stdev_thres * std\n    else:\n        if len(grouping_columns) > 0:\n\n            def f(group):\n                res = outliers_grubbs(group[measurement_col])\n                return pd.DataFrame(res, index=group.index)\n\n            outlier_tags = res.groupby(\n                grouping_columns, as_index=False, group_keys=False\n            ).apply(f)[0]\n        else:\n            outlier_tags = outliers_grubbs(res[measurement_col])\n\n        mask = outlier_tags == 1\n\n    num_outliers = mask.sum()\n\n    if num_outliers == 0:\n        w_text_output(content=\"No outliers found\", appearance={\"message_box\": \"info\"})\n    else:\n        w_text_output(\n            content=f\"{num_outliers} outliers found\", appearance={\"message_box\": \"info\"}\n        )\n\n    globals()[f\"{df_picker.key}_outliers\"] = res.loc[mask, :]\n    globals()[f\"{df_picker.key}_no_outliers\"] = res.loc[~mask, :]\n\n\nf()\n\x86\"from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration (X axis):\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'Predicted Curve - X\': x_predicted, \'Predicted Curve - Y\': y_predicted})\n      \n      # Add group column\n      predicted_df[f\"Predicted Curve - {group}\"] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n      \n      # Add original observed data\n      predicted_df[\"Experimental Data - X\"] = pd.Series(x_data)\n      predicted_df[\"Experimental Data - Y\"] = pd.Series(y_data)\n      predicted_df[f\"Experimental Data - {group}\"] = group_df[group].iloc[0]\n\n      # # Group by concentration, calculate the mean and stdev\n      avg_per_group_df = group_df.groupby(x).agg({y: [\'mean\', \'std\']}).reset_index()\n      avg_per_group_df[f\"avg {group}\"] = group_df[group].iloc[0]\n\n      avg_per_group_df.columns = [f\"Aggregate Data - {x}\", f\"Aggregate Data - Mean {y} per {group}\", f\"Aggregate Data - STDEV {y} per {group}\", f\"Aggregate Data - {group}\"]\n\n      result_df = pd.concat([predicted_df, avg_per_group_df], axis=1)\n\n      return result_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\n# Generate a unique variable name\nresult_df = predicted_dfs.reset_index(drop=True)\xe7\x02from lplots.widgets.ldata import w_ldata_picker\nimport pandas as pd\n\n# Select a CSV file using the widget\ncsv = w_ldata_picker(label=\"Condition CSV\")\n\n# If the user has not selected a file yet, exit the code\nif csv.value is None:\n\texit()\n\n# If the user has selected a file, read the selected file into a Pandas DataFrame\ndf = pd.read_csv(csv.value.download())\x01 \xa4\x01import pandas as pd\n\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\x01\n1\nprev_completed = imported_qpcr_data is not None\n\x1bimported_qpcr_data_signal()\x01\n\x01\n\x14cleaned_columns = []\x02]\n\t\n\n# Fetch\rAsk for well-\x03_ci\x13olumn and cq_column\x8c\x01well_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n\xdd\x01\n  col_name = cq_column.value\n  try:\n    well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\x01\n.# At this point, well metadata has been merged\x03dat\t, Cq and \x07# FIlte\x0cFilter wells\x02\n\n\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \t\n\nprint()\x08bio_repl\x0ebio_replicates\x01\n\x02# \x02# $\n    final_columns = current_columns\x01 \tqpcr_data\x02# \x0fcurrent_columns\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02[]\x14housekeeping_options\x01[\x01]\x01]\x02[]\x01]\x02\n\n&sys.modules[__name__].__dict__.clear()\x0b\nimport sys\nSystemExit\x03sys\x02# \x02# \x14housekeeping_options.\n  current_columns.append(target_column.value)\x01\n\x01\nG\n# cq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\x01\n\tCq Column\x16 if imported_data is N\x14not None else pd.new\x01\n\x14import pandas as pd\n\x03## \x01\n\x01.\x0epd.DataFrame()\tqpcr_data\rimported_data\tqpcr_data\x03## \tqpcr_data4My experiment has a column for biological replicates\x0bSelect the \x95\x18from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nw_text_output(content=\"\"\"\n## Experiment set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\n\nif well_result_lpath.value is None:\n  exit()\n\nmain_df = well_result_df\nmain_df = main_df[main_df[\'Cq\'] != \'Undetermined\']\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\ntry:\n  housekeeping_options = main_df[target_column.value].unique()\n  current_columns.append(target_column.value)\nexcept:\n  housekeeping_options = [\"Please select a target column.\"]\n\nhousekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=housekeeping_options).value\n\n# import sys\n# sys.modules[__name__].__dict__.clear()\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nbio_replicates = w_checkbox(label=\"My experiment has a column for biological replicates\", default=False)\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the\", options=main_df.columns).value\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n\nmake_line()\n\ndosage_info = w_checkbox(label=\"Check if your experiment contains dosage information\", default=False).value\n\nmake_line()\n\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\ncurrent_columns = list(set(current_columns))\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in current_columns) and (x != \"Bio Replicate\"))])\n\nfinal_columns=current_columns\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, sample_column.value, target_column.value]\n  if dosage_info is True:\n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n  if bio_replicates.value is True:\n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n\n  print(current_columns)\n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n  else:\n    final_columns = current_columns\n    \n\n  # print(final_columns)\n  # main_df = main_df[list(final_columns)]\n  \n  \n  # current_columns.append(bio_rep_column)\n  \n  # print(current_columns)\n  # if additional_columns.value is not None:\n  #   final_columns = current_columns + additional_columns.value\n  # else:\n  #   final_columns = current_columns\n    \n\nprint(final_columns)\nmain_df = main_df[list(final_columns)]\n\n\n\nbiologica \x12l replicate column\x03My \x03has\x06dosage\x05\n    \x0c\nmake_line()\x02\n\n\x0bmake_line()\x03Add\x01q\x02  \tqpcr_data\x03\n\n\n\tprev_setp\x08tep_note\x0b_completed \x04v_no\x02Co\x02co\x0enot_completed \x1c = imported_data is not None\x12not prev_completed\x19imported_data is not None\x03\n  \x01\n\x02\np\x0ecolumn_select-\x1d_placeholder = prev_completed\x02\"\"\x0eprev_completed\x0eprev_completed\x02\"\"\x12Select a column\xe2\x80\xa6\x1a if prev_completed else \"\"\x1b\"Provide a readout file\xe2\x80\xa6\"\x0fmain_df.columns\x01 \x03\n  \x03\n  \x01\n\x11,\n  appearance={}\x08\n    \n  \x02\"\"\x0bplaceholder\x02: \x11\n  prev_completed\tdisabled \x02= \x12not prev_completed\x1acolumn_select_placeholder,\x01,\x05ready\x04only\x03\n  \x03\n  \x01\n\r,\n  readonly \x02= \x08not prev\x02  \x02  \x02  \x0eprev_completed\x02  \x11,\n  appearance={}\x08\n    \n  &(this contains your housekeeping gene)\x0chelp_text=\"\"&(this contains your housekeeping gene)\x02: \x01 \x01\"\x01\"1\n       \"placeholder\": column_select_placeholder,\x01,\x01T \n  housekeeping_placeholder = \"\" \"Please select a target column.\"\x01\"\x03\xe2\x80\xa6A\n   housekeeping_placeholder = \"Please select a target column\xe2\x80\xa6\"\x01S\x06 above\x05frist\x04irst\x07Select \x05 hous\x04gene\x03\n  \x03\n  \x01)\x01\n\x01\n\x10\n  appearance={}\x06\n  \n  \x02  \x02\"\"\x01d\x0bplaceholder\x04: \"\"\x18housekeeping_placeholder\x0e\n  placeholder\t\n  disapl\rbled=not prev\x0fprev_completed \x01,\x01,\x05ready\x04only\x1c sample condition annotation\x07sample \x03\n  \x03\n  \x01\n\x11,\n  appearance={}\x08\n    \n  \x02\"\"(\"placeholder\": column_select_placeholder\x08\n  ready\x02on\x06nly=\"\"\x04prev\x0eprev_completed\x04not \x01,\x01,\x01,\x01,\x01,\x01,\x05\n    \x05\n    \x03\n  \x10\n    readonly=re\x05not p\x03pre\x12prev_completed,\n  \x01,\x02  \x06peader\x01p\rappearance={}\x01 \x0c\n      \n    \x03\n  \x03\n  \x01\n\x01\n\x02\"\"\x0bplaceholder\x03: p\x05place\x19column_select_placeholder\x03\n  \x05\n    \x05\n    \x03\n  h\n     readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    }\x01\n\x01,\x01,\x03\n  \x03\n  \x05\n    \x07\n      \x07\n      \x05\n    \x07\n      \x05\n    \x05\n    \x03\n  \x03\n  \x01\n\x02\nc\x0ecolumn_opts = \x02\n\n\x02ty\x03ry \x02: \x02  \x14qpcr_data.columns\n  \x07\nexcpet\x18ept: \n  column_opts = []3\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\x1c\n  column_select_placeholder\x01 \x1e = \"Provide a readout file\xe2\x80\xa6\"\x0bcolumn_opts\x07\n  prev\x02  \xf6\"import pandas as pd\n\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nprev_completed = imported_data is not None\n\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\n## print(imported_data)\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\n\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=main_df.columns,\n  readonly=not prev_completed,\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = main_df[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n).value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select sample condition annotation column\", \n  options=main_df.columns,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nmake_line()\n\n# Replicates\nbio_replicates = w_checkbox(label=\"My experiment has a column for biological replicates\", default=False)\n\nif bio_replicates.value is True:\n  \n  bio_rep_column = w_select(\n    label=\"Select biological replicate column\", \n    options=main_df.columns,\n    readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    },\n  ).value\n\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n\nmake_line()\n\n# Dosage\ndosage_info = w_checkbox(label=\"My experiment has dosage information\", default=False).value\n\nif dosage_info is True:\n  \n  dosage_column = w_select(\n    label=\"Select dosage column\", \n    options=main_df.columns,\n    readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    }\n  )\n  \n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\n\nmake_line()\n\n\ncurrent_columns = list(set(current_columns))\n\n# Join additional columns\nadditional_columns = w_multi_select(label=\"Add additional columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in qpcr_data.columns if ((x not in current_columns))], default=sheets_added)\n\nfinal_columns = current_columns + additional_columns.value\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if dosage_info is True:\n    \n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n      \n  if bio_replicates.value is True:\n    \n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n      \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n    \nmain_df = main_df[list(final_columns)]\n\nqpcr_data = main_df\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n  \nif dosage_info is True:\n  qpcr_data = qpcr_data.rename(columns={dosage_column.value: \"Dosage\"})\n  \nif bio_replicates is True:\n  qpcr_data = qpcr_data.rename(columns={bio_rep_column.value: \"Bio Replicate\"})\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    qpcr_data[col].str.strip()\n\nqpcr_data_cleaned = qpcr_data\n\n\x01_\x02  \x02  \x12prev_completed = t\x04Ture\x04rue;\x18   prev_completed = True\x02Fa\x02  \x05False5  options=column_opts,\n  readonly=not prev_completed,5  options=column_opts,\n  readonly=not prev_completed,5  options=column_opts,\n  readonly=not prev_completed,\x02  6 options=column_opts,\n    readonly=not prev_completed,\tqpcr_data\x03\n  \x03\n  \nto include\x03\n  \x02  \x01\n\x10\n  appearance={}\x06\n  \n  @If no options appear, it means all columns are already included.\x02  \x02\"\"\x04hel[\x06p_text\x02= B: If no options appear, it means all columns are already included.\x02\"\"@If no options appear, it means all columns are already included.\x01,\x01,\x01m\x01,\x03col\x0bcolumn_opts\x05\n\nif \x01f\x04if )\x02()\x03pre\x0eprev_completed\x04not \x03 ex\x06exit()\x010\x03\n  \x01:\xcd\x16from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nw_text_output(content=\"\"\"\n## Experiment set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\n\nif well_result_lpath.value is None:\n  exit()\n\nmain_df = well_result_df\nmain_df = main_df[main_df[\'Cq\'] != \'Undetermined\']\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\ntry:\n  housekeeping_options = main_df[target_column.value].unique()\nexcept:\n  housekeeping_options = [\"Please select a target column.\"]\n\nhousekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=housekeeping_options).value\n\n# if target_column.value is not None:\n#   housekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n#   current_columns.append(target_column.value)\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nbio_replicates = w_checkbox(label=\"Check this if you have an existing column for biological replicates.\", default=False)\n\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n    \ndosage_info = w_checkbox(label=\"Check this if your experiment contains dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\ncurrent_columns = list(set(current_columns))\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in current_columns) and (x != \"Bio Replicate\"))])\n\nfinal_columns=current_columns\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, sample_column.value, target_column.value]\n  if dosage_info is True:\n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n  if bio_replicates.value is True:\n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n\n  print(current_columns)\n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n  else:\n    final_columns = current_columns\n    \n\nprint(final_columns)\nmain_df = main_df[list(final_columns)]\n\n\n\x03\n  \x01\n\x08\nprint()\x03col\tlumn_opts@Wait we\'re good plots threw me into a different layout randomly \x0f\n\nsheets_added=\x0f = sheets_addedX\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\x01cJbals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))sif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\x01\n\x02\n\n=main_df = main_df[main_df[cq_column.value] != \"Undetermined\"]\x0ewell_result_df\x0ewell_result_df\x0ewell_result_df\x01\n\x05if cq\x1ccq_column.value is not None:\x02  \x02\n\n\xd9\x06if well_column.value is not None:\n  remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  if remove_empty_wells:\n    removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n  \n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n  \n    if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\x02# \x02# \xfc\x01\n\ncq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq values.\", options=well_result_df.keys())\n\n# if cq_column.value is not None:\n#   well_result_df = well_result_df[well_result_df[cq_column.value] != \"Undetermined\"]\x91\t  # selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n\nwell_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n\nif well_column.value is not None:\n  remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  if remove_empty_wells:\n    removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n  \n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n  \n    if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\n\x02\n\n\x8c\x01well_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n\xc7\x07from lplots.widgets.checkbox import w_checkbox\n\ntarget_column = w_select(label=\"Select the column that contains the housekeeping gene\", options=main_df.columns)\n\nif target_column.value is not None:\n  housekeeping_gene = w_select(label=\"Select the housekeeping gene\", options=main_df[target_column.value].unique()).value\n\nsample_column = w_select(label=\"Select column with sample group / condition\", options=main_df.columns)\n\nbio_replicates = w_checkbox(label=\"Biological replicates exist\", default=True).value\n\nif bio_replicates is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\nelse:\n  main_df[\"Bio Replicate\"] = 1\n  bio_rep_column = \"Bio Replicate\"\n\ndosage_info = w_checkbox(label=\"Include dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n\n\x19\n########################\x0ctarget gene \x01(\x01)\x05False\x06.value\xbb\x02if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\x19select_additional_columns\x1fany additional metadata columns\x04join\x07columns\x01.\x01)\x19select_additional_columns\x03\n  \tcolumn_rr\x06ecord \x01s\x03ns \n_to_keep -\x1a=select_additional_columns\x01 \x02.b\x05value\x12additional_columns\x12additional_columns\n\nfinal_df \x03 = \x0efinal_df = mai\tmain_df[]\x07\nfinal+\x03_co\x14cleaned_columns = []\x04well\x0bwell_column\x01\n cleaned_columns = [well_column]\n\x1a\n  cleaned_columns.appendc\x02()\x0fcq_column.value*\n  cleaned_columns.append(cq_column.value)\x0bwell_column\t\n        \x07\nif tarLtarget_column.value is not None:\n  cleaned_columns.append(well_column.value)\rtarget_columnS\n\nif target_column.value is not None:\n  cleaned_columns.append(target_column.value)\rsample_column\rsample_column\x04\n  f\x04if b\xdd%from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\n\ncleaned_columns = []\n\ndef sheet_to_well_plate_map(df):\n    well_plate_dict = {}\n    for idx, row in df.iterrows():\n        for col in df.columns:\n            try:\n              well_id = f\"{idx_to_row_id[idx]}{col}\"\n            except KeyError:\n              raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n            well_plate_dict[well_id] = row[col]\n    return well_plate_dict\n\nif well_result_lpath.value is None:\n  exit()\n\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n\ncq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq values.\", options=well_result_df.keys())\n\nwell_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n\nif cq_column.value is not None:\n  well_result_df = well_result_df[well_result_df[cq_column.value] != \"Undetermined\"]\n  cleaned_columns.append(cq_column.value)\n\n\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n\n  # selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n  \n  if cq_column.value is not None:\n    col_name = cq_column.value\n    try:\n      well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n    except Exception:\n      raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n  \n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n      \n    for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n\n        well_result_df[sheet_name] =well_result_df[\"Well\"].map(sheet_to_well_plate_map(df))\n\nmain_df = well_result_df\n\n  # selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n\n\nif well_column.value is not None:\n  cleaned_columns.append(well_column.value)\n  remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  if remove_empty_wells:\n    removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n  \n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n  \n    if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\n########################\n\nfrom lplots.widgets.checkbox import w_checkbox\n\ntarget_column = w_select(label=\"Select the target gene column (contains the housekeeping gene)\", options=main_df.columns)\n\nif target_column.value is not None:\n  cleaned_columns.append(target_column.value)\n\nsample_column = w_select(label=\"Select column with sample group / condition\", options=main_df.columns)\n\nif sample_column.value is not None:\n  cleaned_columns.append(sample_column.value)\n\nbio_replicates = w_checkbox(label=\"Biological replicates exist\", default=False)\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  if \nelse:\n  main_df[\"Bio Replicate\"] = 1\n  bio_rep_column = \"Bio Replicate\"\n\ndosage_info = w_checkbox(label=\"Include dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join\", options=main_df.columns)\nif additional_columns.value is not None:\n  columns_to_keep = additional_columns.value\n\nfinal_df = main_df[]\x02io\xdd%from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\n\ncleaned_columns = []\n\ndef sheet_to_well_plate_map(df):\n    well_plate_dict = {}\n    for idx, row in df.iterrows():\n        for col in df.columns:\n            try:\n              well_id = f\"{idx_to_row_id[idx]}{col}\"\n            except KeyError:\n              raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n            well_plate_dict[well_id] = row[col]\n    return well_plate_dict\n\nif well_result_lpath.value is None:\n  exit()\n\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n\ncq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq values.\", options=well_result_df.keys())\n\nwell_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n\nif cq_column.value is not None:\n  well_result_df = well_result_df[well_result_df[cq_column.value] != \"Undetermined\"]\n  cleaned_columns.append(cq_column.value)\n\n\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n\n  # selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n  \n  if cq_column.value is not None:\n    col_name = cq_column.value\n    try:\n      well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n    except Exception:\n      raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n  \n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n      \n    for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n\n        well_result_df[sheet_name] =well_result_df[\"Well\"].map(sheet_to_well_plate_map(df))\n\nmain_df = well_result_df\n\n  # selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n\n\nif well_column.value is not None:\n  cleaned_columns.append(well_column.value)\n  remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  if remove_empty_wells:\n    removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n  \n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n  \n    if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\n########################\n\nfrom lplots.widgets.checkbox import w_checkbox\n\ntarget_column = w_select(label=\"Select the target gene column (contains the housekeeping gene)\", options=main_df.columns)\n\nif target_column.value is not None:\n  cleaned_columns.append(target_column.value)\n\nsample_column = w_select(label=\"Select column with sample group / condition\", options=main_df.columns)\n\nif sample_column.value is not None:\n  cleaned_columns.append(sample_column.value)\n\nbio_replicates = w_checkbox(label=\"Biological replicates exist\", default=False)\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  if \nelse:\n  main_df[\"Bio Replicate\"] = 1\n  bio_rep_column = \"Bio Replicate\"\n\ndosage_info = w_checkbox(label=\"Include dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join\", options=main_df.columns)\nif additional_columns.value is not None:\n  columns_to_keep = additional_columns.value\n\nfinal_df = main_df[]\x06bio_re bio_rep_column is not None:\n    \x02  +cleaned_columns.append(sample_column.value)\x0ebio_rep_column)\n  cleaned_columns.append(bio_rep_column)\x02  )\n  cleaned_columns.append(bio_rep_column)Iif bio_rep_column is not None:\n    cleaned_columns.append(bio_rep_column)\rdosage_column\rdosage_column\x02# \x08\n  print\x03\n  \x11cleaned_columns +\x02= !cleaned_columns + columns_to_keep\x02()\x06cleane\x0fcleaned_columns\x02  \x03\n# \x02# \x08\n  if \"\"\rBio Replicate\x18 not in cleaned_columns:\x02  0\nfrom lplots.widgets.checkbox import w_checkbox\n\x02# \tNow, we a>match the columns in your dataframe with their corresponding a\x02an\x08annotate\tg meaning\x05this \x04your\x01:\x01:\x01v\x04the \x07 column\x1a that annotates your condi\x19the condition of samples:\x03Do \x01b\x11 in your dataset?6you have an existing column for biological replicates?\nCheck this\x07here if\x04this\x01.\x10Check this if yu\x17our experiment contains!. If none appear, it means all ar\x15columns are included.\x03are\x07lready \nno options\x03\n\n\n\nNow that y\x1athis is complete, we are g\x01W\x0fYou will notice\x0fw_text_output()\x02\"\"\x01\"?Inspect the table below to ensure all your data is present. We \x1dYour columns will be renamed \x04We h\x99\x12from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\n\nw_text_output(content=\"Now, we are going to annotate the columns in your dataframe.\")\n\nif well_result_lpath.value is None:\n  exit()\n\nmain_df = well_result_df\n\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\nif target_column.value is not None:\n  housekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\n\nbio_replicates = w_checkbox(label=\"Check this if you have an existing column for biological replicates.\", default=False)\n\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  main_df = main_df.drop(columns=[\"Bio Replicate\"], errors=\'ignore\')\nelse:\n  main_df[\"Bio Replicate\"] = 1\n  bio_rep_column = \"Bio Replicate\"\n    \ndosage_info = w_checkbox(label=\"Check this if your experiment contains dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in main_df.columns) and (x != \"Bio Replicate\"))])\n\nfinal_columns = []\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value, bio_rep_column]:\n  # main_df = main_df.rename(columns={well_column.value: \'Well\'})\n  final_columns = [well_column.value, target_column.value, bio_rep_column, sample_column.value, cq_column.value]\n  if dosage_info is True and dosage_column.value is not None:\n    final_columns.append(dosage_column.value)\n  if additional_columns.value is not None:\n    final_columns = final_columns + additional_columns.value\nprint(final_columns)\n\nmain_df = main_df[final_columns]\n\nw_text_output(\"We  Inspect the table below to ensure all your data is present.\")\x06ave me\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x98\x12from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\n\nif well_result_lpath.value is None or well_plate_metadata_lpath.value is None:\n  exit()\n\nselected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n\ncq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq/Ct values.\", options=well_result_df.keys())\n\nwell_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID\", options=well_result_df.keys())\n\nif cq_column.value is not None:\n  col_name = cq_column.value\n  try:\n    well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nif None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\n  def sheet_to_well_plate_map(df):\n      well_plate_dict = {}\n      for idx, row in df.iterrows():\n          for col in df.columns:\n              try:\n                well_id = f\"{idx_to_row_id[idx]}{col}\"\n              except KeyError:\n                raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n              well_plate_dict[well_id] = row[col]\n      return well_plate_dict\n    \n  for sheet_name, df in well_plate_metadata_df.items():\n      if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n          continue\n  \n      assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n      df = df.drop(columns=[\"Well\"])\n  \n      # assert df.shape == (\n      #     16,\n      #     24,\n      # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n      well_result_df[sheet_name] =well_result_df[\"Well\"].map(sheet_to_well_plate_map(df))\n  \nmain_df = well_result_df\n# TODO - replace when Max fixes\n# main_df = main_df.fillna(\'\')\x03\n  \x17\nif use_metadata_sheet:\x03\n  \x85\x01\ncq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq/Ct values.\", options=well_result_df.keys())\n\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x03\n\n\n\xcd\x03    def sheet_to_well_plate_map(df):\n        well_plate_dict = {}\n        for idx, row in df.iterrows():\n            for col in df.columns:\n                try:\n                  well_id = f\"{idx_to_row_id[idx]}{col}\"\n                except KeyError:\n                  raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n                well_plate_dict[well_id] = row[col]\n        return well_plate_dict\x03\n\n\nZuse_metadata_sheet = w_checkbox(label=\"Use separate metadata sheet\", default=False).value\n\x0cfilter_cells\x04\n\n\n\n\x04\n\n\n\n\x14# Remove Empty wells\x01e\xc2\x01remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=True).value\n\nempty_well_string = w_text_input(label=\"Input the default Sample Name of empty wells:\", default=\"Sample 1\").value\x01\n\x01\n\x04if r\x16remove_empty_wells:\n  \x86\x01\n  cq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq/Ct values.\", options=well_result_df.keys())\x0fSelect remonal \nval method\x01)\x02[]\x01]\x02\"\"\x02\'\'\x10Search by string\x04, \"\"\x01\"\nList wells\x03\n  \x02\ni\x06.value\x07remonal\nval_method\x02  \x1a\n  if removal_method == \"\"\x01\"\x12\"Search by string\"\x02  \x02  \x03\n  *\n  if removal_method == \"Search by string\"\nList wells\xaa\x01:\n    selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\x80\x01\nwell_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID\", options=well_result_df.keys())\x0bwell_column\x01w\x0bempty_wells\x06remove\x18wells you want to remove\x06values\x01:\x02  \x02  Xif remove_empty_wells:\n  qpcr_data = qpcr_data[qpcr_data[\'Sample\'] != empty_well_string]\x02  \x02  \x07main_df\x07main_df\x05\n    @\n    main_df = main_df[qpcr_data[\'Sample\'] != empty_well_string]\x0bwell_column\x07main_df\x06not in\x0cremove_wellsh\n    df_filtered = df[~df.apply(lambda row: row.astype(str).str.contains(filter_string).any(), axis=1)]\n\x07main_df\x07main_df\x07main_df\x11empty_well_stringC\n    main_df = main_df[~main_df[\'well_column\'].isin(remove_wells)]\n\x0bwell_column\x01\'\x08\nprint()\x01)\x17well_result_lpath.value+ or well_plate_metadata_lpath.value is None[\n  if well_result_lpath.value is None or well_plate_metadata_lpath.value is None:\n  exit()\n\x02  \x05False\x08main_df[\x01]\x06.value\x11well_column.value\t.tolist()\x01)\x05list(\x0e))\n    print()\x05remov\x0cremove_wells\x08.options\x08.options\x02# \x05\n    \x06.value\x13string that denotesq# Remove undetermined Cq values\nremove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n\x0fundetermined_cq\x15Undetermined Cq vales\x18\n\nif remove_empty_wells:\x16remove_undetermined_cqD\n  main_df = main_df[~main_df[well_column.value].isin(remove_wells)]\x01 \x0fcq_column.value\x06 == \"\"\x0cUndetermined\x01(\x01!\x01S\x02\n\nNdf[\'Names\'].str.strip()\ndf[\'Blood Group\'].str.strip()\ndf[\'Gender\'].str.strip()\x02\n\n\rfor col in []\x10\'Well\', \'Target\'\x1eqpcr_data.columns:\n  qpcr_data\x05[col]\x03\n  9print(pd.api.types.is_string_dtype(string_series.dtype))\n\x01o\x03if \x01:\x02  \x0eqpcr_data[col]\x0ewell_result_df\x12final_columns = []\x0fmain_df.columns\x01[\x04, \"\"\x01\"\nBio Repluc\x01i\x05icate\x01]\x01\n\x0bad_cols = m)main_df.columns\nad_cols = main_df.columns\x10ad_cols.append()\x0f\"Bio Replicate\"\x07ad_cols\x06\nprint\x05list(\x01_\x01)\x02 v\x0fmain_df.columns\x0fmain_df.columns\nad_cols = \x02((\x04) ()\x01)\x01&\x04and \x07x != \"\"\rBio Replicate\x01)\x05\n    \x02# \x02# \x02# \x02# \x02# \x02# \x02  \x02  \x02  \x02  \x02  \x02# %\n    bio_rep_column = \"Bio Replicate\"\x0ebio_rep_column\x02# \x02# \x02# \x03\n  \x03\n  \x03\n  Z\n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\x01\n\x92\x02# additional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join\", options=main_df.columns)\n# if additional_columns.value is not None:\n#   columns_to_keep = additional_columns.value\n#   cleaned_columns = cleaned_columns + columns_to_keep\n\x02# \x02# \x02# \x02# \x12final_columns = []\x01]\x01\nZ\n# if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\x11cq_column.value, \x06target\rtarget_column\x03ssm\x04ampl\rsample_column\x01,\x10, bio_rep_column\x08\nprint()\x03bio\x0ebio_replicates\x02# \x01\n\x06.value\x0f, default=False\x01\n\x1e\nelse:\n  bio_rep_column = NoneD\n  main_df[\"Bio Replicate\"] = 1\n    bio_rep_column = \"Bio Replicate\"\x02# q\n  final_columns = [well_column.value, cq_column.value, sample_column.value, target_column.value, bio_rep_column]\x11 cq_column.value,\x01 ),  cq_column.value, sample_column.value, \x14\n  if dosage_column ..value is not None:\n    final_columns.append()\x03dos\x13dosage_column.value\x06\n    ieif additional_columns.value is not None:\n    final_columns = final_columns + additional_columns.value\x07print()\x06final_\rfinal_columns\rfinal_columns\x07main_df\x13, cq_column.value, \x01\n\x9f\x01\nif target_column.value is not None:\n  housekeeping_gene = w_select(label=\"Select the housekeeping gene\", options=main_df[target_column.value].unique()).value\n\x03\n\n\n\xb2\x02w_text_output(content=\"\"\"\n## _(Optional)_ Merge Metadata \n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")<Now, we are going to annotate the columns in your dataframe.\x11Experiment set-up\x02\n\nxhousekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\x02# \x02# \x02# \x02\n\n\x03if \x04try \x08:\n  targ\x14housekeeping_optiosn\x03ns \xf2\x15from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nw_text_output(content=\"\"\"\n## Experiment set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\n\nif well_result_lpath.value is None:\n  exit()\n\nmain_df = well_result_df\nmain_df = main_df[main_df[\'Cq\'] != \'Undetermined\']\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\ntry:\n  housekeeping_options\n\nhousekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n\n# if target_column.value is not None:\n#   housekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n#   current_columns.append(target_column.value)\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nbio_replicates = w_checkbox(label=\"Check this if you have an existing column for biological replicates.\", default=False)\n\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n    \ndosage_info = w_checkbox(label=\"Check this if your experiment contains dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\ncurrent_columns = list(set(current_columns))\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in current_columns) and (x != \"Bio Replicate\"))])\n\nfinal_columns=current_columns\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, sample_column.value, target_column.value]\n  if dosage_info is True:\n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n  if bio_replicates.value is True:\n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n\n  print(current_columns)\n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n  else:\n    final_columns = current_columns\n    \n\nprint(final_columns)\nmain_df = main_df[list(final_columns)]\n\n\n\x02= + = main_df[target_column.value].unique()\n  #except:\n  housekeeping_options = []\x01]\x02\"\"\x01\"\x15Please select a Targe\r target colun\x03mn.\x14housekeeping_options\x14bio_replicates.value)\n    if bio_rep_column.value is not None:\x02  \x02\n\n\x02# \x02  \x02  \x01\n\"  main_df = main_df[final_columns]\x08input_df\x05main_\x07main_df\x02  \x01\n\x8e\x02additional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in main_df.columns) and (x != \"Bio Replicate\"))])\x02\n\n\x13\nfinal_columns = []\x0fcurrent_columns\x1b\n  current_columns.append()\x13target_column.value\xcd\x01\nif target_column.value is not None:\n  housekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n  current_columns.append(target_column.value)\rsample_column\rsample_columnT\n  if sample_column.value is not None:\n  current_columns.append(sample_column.value)\x0ebio_rep_column\x0ebio_rep_column\x0b\n  if dosag3dosage_column.value is not None:\n    bio_rep_column&current_columns.append(bio_rep_column)*    current_columns.append(bio_rep_column)\x0ebio_rep_column*    current_columns.append(bio_rep_column)\x0ebio_rep_column\x08dosage_c\x13dosage_column.value\x02  \x02\n\n\x10well_column._sin\x06gnal()\x02\"\"\x01=\x06Sample\x08 is True\x01\n\x11\nfinal_columns=[]\x01]\x0fcurrent_columns\x0fcurrent_columns\rfinal_columns\rtarget_column\rsample_column\x02# \x02# \x02# \x02# \x02# \x07efault \x02()\x06():\n  \x02  \x07\n  try \x02: \x14x in df[\'id\'].values\x02  \x0chas_value = \x01x$qpcr_data.columns\n    return x;\n    \x19except: \n    return None;\x1d\n  default=getColumnDefault()\x02\"\"\x02cq\x01C\x01,\"\n  default=getColumnDefault(\"Cq\"),\x06Target\'\n   default=getColumnDefault(\"Target\"),\x08Conditio\x04tion\x12\n    if has_value \x10:\n      return x\x02  \x02  \x07else : \x01:\x01\n\x01\n\xd8#w_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nprint(imported_qpcr_data)\nqpcr_data = imported_qpcr_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n\ndef getColumnDefault(x):\n  try: \n    has_value = x in qpcr_data.columns\n    if has_value:\n      return x\n    else\n  except: \n    return None\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  default=getColumnDefault(\"Cq\"),\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  default=getColumnDefault(\"Target\"),\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n).value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select sample condition annotation column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  default=getColumnDefault(\"Condition\"),\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nmake_line()\n\n# Replicates\nbio_replicates = w_checkbox(label=\"My experiment has a column for biological replicates\", default=False)\n\nif bio_replicates.value is True:\n  \n  bio_rep_column = w_select(\n    label=\"Select biological replicate column\", \n    options=column_opts,\n    readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    },\n  ).value\n\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n\nmake_line()\n\n# Dosage\ndosage_info = w_checkbox(label=\"My experiment has dosage information\", default=False).value\n\nif dosage_info is True:\n  \n  dosage_column = w_select(\n    label=\"Select dosage column\", \n    options=column_opts,\n    readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    }\n  )\n  \n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\n\nmake_line()\n\n\ncurrent_columns = list(set(current_columns))\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\n\nfinal_columns = current_columns + additional_columns.value\n\nif not prev_completed:\n  exit(0)\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if dosage_info is True:\n    \n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n      \n  if bio_replicates.value is True:\n    \n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n      \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n    \nmain_df = qpcr_data[list(final_columns)]\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n  \nif dosage_info is True:\n  qpcr_data = qpcr_data.rename(columns={dosage_column.value: \"Dosage\"})\n  \nif bio_replicates is True:\n  qpcr_data = qpcr_data.rename(columns={bio_rep_column.value: \"Bio Replicate\"})\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    qpcr_data[col].str.strip()\x02\n\n\x04: et\x12\n      return None\x0b\n    print)\x02()\x04jhas\x04hass\thas_value\x10 is True:\n      \x11 print(has_value)\x01x\x11\n        print(x)\x05, has\thas_value\x03\n  \x07defautl\x05lt=\"\"\x01C\tcondition\x01,\x08 is True\x02# \x02# \x05\n    #\n    if removal_method is not None:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \xda\x01\n  qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\", dosage_column.value: \"Dosage\", bio_rep_column: \"Bio Replicate\"})\x12.value is not None\tqpcr_data\x07main_df\x07main_df\tqpcr_data\x06.value\x08 is True\x17if dosage_info is True:\x03bio\x0ebio_replicates\x0ebio_rep_column\x0ebio_replicates\x01p\x05rint(\x01)\"print(imported_qpcr_data_signal())\x02# \x02# \n (e.g. A1)\x01.\x02# \x02# \x81\x02\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n\n  selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\x02# \x03for\x04text\t\n\nif well\x1ewell_column.value is not None:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \t.unique()\x01)(\n      if remove_wells.value is not None\x07\n      \x01:\x02  \x02  \x06.value\x06.value\x07 for tx\x03ext\x12imported_qpcr_data\x12imported_qpcr_data\x0fcurrent_columns\x0fcurrent_columns\x02# \x02# \x02# \x02# \x02# \x04set(\x01)\x0fcurrent_columns\x03\n  \x07print()\rfinal_columns\x0fcurrent_columns\x02\n\n\x17current_columns = set()\x0fcurrent_columns\x05list(\x02))\x05list(\x01)-\ncurrent_columns = list(set(current_columns))\x01\n3\n    if dosage_column.value not in current_columns:\x02  \x02  \x08\nprint()\rfinal_columns\t\n  curren\x14current_columns = []\x17  current_columns = []\nLwell_column.value, cq_column.value, sample_column.value, target_column.value\tif dosage\x13dosage_info is True\x06.value\x06:\n    X\n    if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\x02  \x07\n      \xf0\x01if bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\x02  \x02  \x02  \x06\n  pri\xd4\x13from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nw_text_output(content=\"Now, we are going to annotate the columns in your dataframe.\")\n\nif well_result_lpath.value is None:\n  exit()\n\nmain_df = well_result_df\nmain_df = main_df[main_df[\'Cq\'] != \'Undetermined\']\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\nif target_column.value is not None:\n  housekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n  current_columns.append(target_column.value)\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nbio_replicates = w_checkbox(label=\"Check this if you have an existing column for biological replicates.\", default=False)\n\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n    \ndosage_info = w_checkbox(label=\"Check this if your experiment contains dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\ncurrent_columns = list(set(current_columns))\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in current_columns) and (x != \"Bio Replicate\"))])\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, sample_column.value, target_column.value]\n  if dosage_info is True:\n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n  if bio_replicates.value is True:\n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n\n  pr\n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n\nprint(final_columns)\nmain_df = main_df[list(final_columns)]\n\n\n\x02nt\x05int()\x07current\x0fcurrent_columns\x05\n    \nelse:\n    \x01_\x01s\x03qpc\x02cp\x01c\x03pcr\x01s\x07eq_ex()\x012\x12)\n\nw_text_output()\x01*\ncontent={}\x01}\x02\"\"\x01f\x02{}\x05seq()\x01)\x03_ex\x013\x07\n\nprint\xce\x11from lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\n\nw_text_output(content=\"Now, we are going to annotate the columns in your dataframe.\")\n\nif well_result_lpath.value is None:\n  exit()\n\nmain_df = well_result_df\n\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\nif target_column.value is not None:\n  housekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=main_df[target_column.value].unique()).value\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\n\nbio_replicates = w_checkbox(label=\"Check this if you have an existing column for biological replicates.\", default=False)\n\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns).value\n  main_df = main_df.drop(columns=[\"Bio Replicate\"], errors=\'ignore\')\nelse:\n  main_df[\"Bio Replicate\"] = 1\n  bio_rep_column = \"Bio Replicate\"\n    \ndosage_info = w_checkbox(label=\"Check this if your experiment contains dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select the column that contains the dosage information\", options=main_df.columns)\n\nadditional_columns = w_multi_select(label=\"Select any additional metadata columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in well_result_df.columns if ((x not in main_df.columns) and (x != \"Bio Replicate\"))])\n\nprin\n\nfinal_columns = []\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value, bio_rep_column]:\n  # main_df = main_df.rename(columns={well_column.value: \'Well\'})\n  final_columns = [well_column.value, target_column.value, bio_rep_column, sample_column.value, cq_column.value]\n  if dosage_info is True and dosage_column.value is not None:\n    final_columns.append(dosage_column.value)\n  if additional_columns.value is not None:\n    final_columns = final_columns + additional_columns.value\nprint(final_columns)\n\nmain_df = main_df[final_columns]\n\x05(well\x03t()\x06well_d\x11result_df.columns\x01)\x1eprint(well_result_df.columns)\n\x0bimported_df\x0bimported_df\x02[]\x02[]\rimported_data\rimported_data , default=len(sheets_added) > 0:\x0csheets_added\x16, default=sheets_added\xc6\x05\nresult_df = main_df\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n\n  if bio_replicates.value is False:\n    main_df[\"Bio Replicate\"] = 1\n    bio_rep_column = \"Bio Replicate\"\n  else:\n    bio_rep_column = bio_rep_column\n    \n  if dosage_info:\n    renamed_df = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\", dosage_column.value: \"Dosage\", bio_rep_column: \"Bio Replicate\"})\n  else:\n    renamed_df = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\", bio_rep_column: \"Bio Replicate\"})\n\x05table\nfinal_data\tqpcr_data\tqpcr_data\tqpcr_data\tqpcr_data\x05\n    \x1f\nqpcr_data_cleaned = qpcr_data\n\x13My experiment has a\x03for\x01s\x05\n    \x03\nch\x0fw_text_output()\ncontent=\"\"\x05-----\x02\n\n\x1ew_text_output(content=\"-----\")\x0f\n\ndef make_line\x01l\'ine():\n  w_text_output(content=\"-----\")\x0bmake_line()\x01\n\x0cmake_line()\n;have merged all your data and have renamed your columns to \x01.\x05, idx\ridx_to_row_id\x19, sheet_to_well_plate_map\xdb\nif None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\n  def sheet_to_well_plate_map(df):\n      well_plate_dict = {}\n      for idx, row in df.iterrows():\n          for col in df.columns:\n              try:\n                well_id = f\"{idx_to_row_id[idx]}{col}\"\n              except KeyError:\n                raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n              well_plate_dict[well_id] = row[col]\n      return well_plate_dict\n    \n  for sheet_name, df in well_plate_metadata_df.items():\n      if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n          continue\n  \n      assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n      df = df.drop(columns=[\"Well\"])\n  \n      # assert df.shape == (\n      #     16,\n      #     24,\n      # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n      well_result_df[sheet_name] =well_result_df[\"Well\"].map(sheet_to_well_plate_map(df))\n  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01w\x03\n  \x08else:\n  \x06.value\x12dosage_column = \"\"\x04None\x04!= \"\x01\"\x18dosage_info is True and \rdosage_column\x12.value is not None\r\n  main_df = 8df = df.drop(columns=[column_to_drop], errors=\'ignore\')\n\x07main_df\x07main_df\x02\"\"\x0f\"Bio Replicate\"\x0f\"Bio Replicate\"\x01\"\x03\"\"\"\x01\"7\n  df = df.rename(columns={\'A\': \'Alpha\', \'B\': \'Beta\'})\n\x04main\x07main_df\x07main_df\x11well_column.value\x04Well\x19\n  well_column.value = \"\"\x01\"\x04Well\x02# \x01\n\x07print()\rimported_data\x0e | imported_dt\x0bata is None\x03 | \x07& impor\x05len()\rimported_data\x04 > 0\x03and\x0bqpcr_data =\xdc\x1bfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nw_text_output(content=\"\"\"\n## Experiment set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data \nif well_result_lpath.value is None and len(imported_data) > 0:\n  exit()\n\nmain_df = imported_data\nmain_df = main_df[main_df[\'Cq\'] != \'Undetermined\']\n\ntarget_column = w_select(label=\"Select the target column (this contains your housekeeping gene):\", options=main_df.columns)\n\ntry:\n  housekeeping_options = main_df[target_column.value].unique()\n  current_columns.append(target_column.value)\nexcept:\n  housekeeping_options = [\"Please select a target column.\"]\n\nhousekeeping_gene = w_select(label=\"Select the housekeeping gene:\", options=housekeeping_options).value\n\n# import sys\n# sys.modules[__name__].__dict__.clear()\n\n\nsample_column = w_select(label=\"Select the column that annotates the condition of samples:\", options=main_df.columns)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nmake_line()\n\nbio_replicates = w_checkbox(label=\"My experiment has a column for biological replicates\", default=False)\n\nif bio_replicates.value is True:\n  bio_rep_column = w_select(label=\"Select biological replicate column\", options=main_df.columns).value\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n\nmake_line()\n\ndosage_info = w_checkbox(label=\"My experiment has dosage information\", default=False).value\n\nif dosage_info is True:\n  dosage_column = w_select(label=\"Select dosage column\", options=main_df.columns)\n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\nmake_line()\n\ncurrent_columns = list(set(current_columns))\n\nadditional_columns = w_multi_select(label=\"Add additional columns you want to join. If no options appear, it means all columns are already included.\", options=[x for x in imported_data.columns if ((x not in current_columns) and (x != \"Bio Replicate\"))], default=sheets_added)\n\nfinal_columns=current_columns\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  if dosage_info is True:\n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n  if bio_replicates.value is True:\n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n\n  print(current_columns)\n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n  else:\n    final_columns = current_columns\n    \nprint(final_columns)\nmain_df = main_df[list(final_columns)]\n\nqpcr_data = main_df\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n\n  if bio_replicates.value is False:\n    qpcr_data[\"Bio Replicate\"] = 1\n    bio_rep_column = \"Bio Replicate\"\n  else:\n    bio_rep_column = bio_rep_column\n    \n  if dosage_info:\n    qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\", dosage_column.value: \"Dosage\", bio_rep_column: \"Bio Replicate\"})\n  else:\n    qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\", bio_rep_column: \"Bio Replicate\"})\n\nqpcr_data_cleaned = qpcr_data\n\n\x02 i\x0f= imported_data\x01$*# Remove Undetermined rows\nif Undetermined#cq_column.value is not None and if \x04:\n  \x10qpcr_data = qpcr\x0bqpcr_data[]\x02cq\x10cq_column.value \x06 != \"\"\x0cUndetermined\nqpcr_data[\x01]fif cq_column.value is not None:\n  qpcr_data = qpcr_data[qpcr_data[cq_column.value] != \"Undetermined\"]\n\x02\n\n\x81\x01# Remove Undetermined rows\nif cq_column.value is not None:\n  qpcr_data = qpcr_data[qpcr_data[cq_column.value] != \"Undetermined\"]\n\x07\n  try:\x02  \x05\n    \x14except:\n    continue\x07print()\x02\"\"\x07Removed\x0e\"Undetermined\"\x07\n  prit\x07print()\x02\"\"\x04HERE\x19column_select_placeholder\x12\n    print(\"HERE\")\x012\xe1\x01\n# Remove Undetermined rows\nif cq_column.value is not column_select_placeholder:\n  print(\"HERE\")\n  try:\n    print(\"HERE2\")\n    qpcr_data = qpcr_data[qpcr_data[cq_column.value] != \"Undetermined\"]\n  except:\n    print(\"Removed\")\x08\ntry:\n  \x03\n  \x02\'\'\x02Cqw\n\n# Remove Undetermined rows\ntry:\n  qpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\nexcept:\n  print(\"Removed\")\x01t\nry:\n      \x07\n      \x03esc\rxcept:\n      &\n      qpcr_data[col] = qpcr_data[col]\x02\n\n\x12final_columns = []\x1f\nif use_metadata_sheet is True:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x03\n\n\n\x08w_text_p\toutput=()\x02()\ncontent=\"\")In this next box, you are going to map wh\x16help us understand whi\x1aat the different columns m\x12in your data mean.\x06 label\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \tmapped_df\x01[\x01]\x03cal\x0eol in col for \x04 if 2[x for x in original_list if x not in remove_list]\x0fmain_df.columns\rfinal_columns\x07main_df\x1e\nprint(well_result_df.columns)\x07main_df\x02# \toutput_df\x07main_dfV\ndf_cleaned = df[~df.apply(lambda row: row.str.contains(\'Undetermined\')).any(axis=1)]\n\x07main_df\x07main_df\x03~df\x07main_df,df_cleaned = df[df[\'Cq\'] != \'Undetermined\']\n\x07main_df\x07main_df\x05main_\x02# \x02# \x02# \x02# \t\n  if bio\x1cbio_rep_column is True:\n    q\n  final_columns = [well_column.value, target_column.value, bio_rep_column, sample_column.value, cq_column.value]\x0b\n    final_\x16final_columns.append()\x0ebio_rep_column\x01\n\x01\n\xb4\x01from lplots.reactive import Signal\n\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\nimported_qpcr_data_signal()\xb4\x01from lplots.reactive import Signal\n\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\nimported_qpcr_data_signal()\x01\n\x01\n\x04cq__\x05defua\x01t\x05fualt\x10ault = qpcr_data\x17\npd.Series(list(\'abc\'))\n\n\ndef get \xe3#import pandas as pd\n\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.checkbox import w_checkbox\n\nprev_completed = imported_qpcr_data is not None\n\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nprint(imported_qpcr_data)\nqpcr_data = imported_qpcr_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n\ndef get\npd.Series(list(\'abc\'))\n\n# Cq Column\ncq_default = \n\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n).value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select sample condition annotation column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\nmake_line()\n\n# Replicates\nbio_replicates = w_checkbox(label=\"My experiment has a column for biological replicates\", default=False)\n\nif bio_replicates.value is True:\n  \n  bio_rep_column = w_select(\n    label=\"Select biological replicate column\", \n    options=column_opts,\n    readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    },\n  ).value\n\n  if bio_rep_column is not None:\n    current_columns.append(bio_rep_column)\n\nmake_line()\n\n# Dosage\ndosage_info = w_checkbox(label=\"My experiment has dosage information\", default=False).value\n\nif dosage_info is True:\n  \n  dosage_column = w_select(\n    label=\"Select dosage column\", \n    options=column_opts,\n    readonly=not prev_completed,\n    appearance={\n      \"placeholder\": column_select_placeholder\n    }\n  )\n  \n  if dosage_column.value is not None:\n    current_columns.append(dosage_column.value)\n\n\nmake_line()\n\n\ncurrent_columns = list(set(current_columns))\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\n\nfinal_columns = current_columns + additional_columns.value\n\nif not prev_completed:\n  exit(0)\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if dosage_info is True:\n    \n    if dosage_column.value is not None:\n      current_columns.append(dosage_column.value)\n      \n  if bio_replicates.value is True:\n    \n    if bio_rep_column is not None:\n      current_columns.append(bio_rep_column)\n      \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n    \nmain_df = qpcr_data[list(final_columns)]\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n  \nif dosage_info is True:\n  qpcr_data = qpcr_data.rename(columns={dosage_column.value: \"Dosage\"})\n  \nif bio_replicates is True:\n  qpcr_data = qpcr_data.rename(columns={bio_rep_column.value: \"Bio Replicate\"})\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    qpcr_data[col].str.strip()\n\n\n\x0bColumnDeffe\x15print(imported_data)\n\x05\n# Re\rTarget Column\x01\n\x0f# Sample column\x06\n# Bio\nReplicates\t\n# Dosage\x04\n# R\x17Join additional columns\x02# \x03 + *current_columns + additional_columns.value\x01 \x01 \x11\n# Rename columns\x0c\n# String an\x19leading / trailing spaces\x9b\x01from lplots.widgets.checkbox import w_checkbox\n\nhousekeeping_gene_column = w_select(label=\"Select the column that contains the housekeeping gene\", options=\x07main_df\x1c.columns, default=\"Target\")\n\x01\n.if housekeeping_gene_column.value is not None:\x01\n\x02  Khousekeeping_gene = w_select(label=\"Select the housekeeping gene\", options=\x07main_df0[housekeeping_gene_column.value].unique()).value\x01\n\x01\n\x01\n\x02# \x07main_df\x12[\'Sample Name\'] = \x07main_df\x1f[\'Sample\'].astype(str) + \"-\" + \x07main_df/[bio_rep_column.value].astype(int).astype(str)\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\tqpcr_data\tqpcr_data\x92\x05\n\nbio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=qpcr_data.columns, default=\"Biological Replicate\")\n\nuse_omit_column = w_checkbox(label=\"Use the Omit column to remove samples\", default=True).value\n\nremove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=True).value\n\nempty_well_string = w_text_input(label=\"Input the default Sample Name of empty wells:\", default=\"Sample 1\").value\n\nif remove_empty_wells:\n  qpcr_data = qpcr_data[qpcr_data[\'Sample\'] != empty_well_string]\n\nif use_omit_column:\n  qpcr_data = qpcr_data[qpcr_data[\'Omit\'] != True]\n\n# qpcr_data[\'Group\'] = qpcr_data[\'Sample\']\tqpcr_data\tqpcr_data\tqpcr_data\x06\n\n\n\n\n\n\x01\n\x02  _use_omit_column = w_checkbox(label=\"Use the Omit column to remove samples\", default=True).value\nreplicates\x12Include replicates.if housekeeping_gene_column.value is not None:\x0euse_replicates\x05False\x02  \x03\n  \x07main_df\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x01\n\x02# Pcontrol_column = w_select(label=\"Select column with control condition\", options=\x08delta_ct\r_df.columns)\n\x01\n\x07def cal\x0f_delta_delta_ct\x01(\x02df\x01)\x01:\x01\n\x02  \x02df\x1c[\"control_delta_ct_mean\"] = \x02df\x02[(\x02df;[control_column.value] == control_val.value)][\"_Ct\"].mean()\x03\n  \x02df\x0b[\"__Ct\"] = \x02df\n[\"_Ct\"] - \x02df\x1c[\"control_delta_ct_mean\"]\n  \x02df-[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-\x02df\x0c[\'__Ct\'])\n  \x02df\x1e[\"Percent Repression\"] = 100-(\x02df([\"Percent Relative Exp / Fold Exp\"]*100)\x0c\n  return df\x03\n  \x01\n&\nif control_column.value is not None:\nG  control_val = w_select(label=\"Select control condition\", options=set(\x08delta_ct\x1b_df[control_column.value]))\x03\n  \rsecond_filter\x15 = w_checkbox(label=\"\x05Group\x01 \x02by\x0c second colu\x02mn\x11\", default=False)\x01\n\x02  \x10if second_filter\x06.value\x08 is True\x01:\x01\n\x04    \x0econtrol_column\x02_2& = w_select(label=\"Select column with \x07second \x1ccontrol condition\", options=\x08delta_ct\x0c_df.columns)\x05\n    \x05\n    \x03if \x10control_column_2\x13.value is not None:\x01\n\x02  \x04    \x10second_condition\x03 = \x0bdelta_ct_df\x01[\x10control_column_2\x10.value].unique()\x07\n      \x01\n\x06\n  if \x0bcontrol_val\x13.value is not None:\x05\n    \x06delta_\x08delta_ct\x06_df = \x08delta_ct\x03_df\x01\n\x02  \x02  \x0ecolumn_list = \x01[8sample_column.value, target_column.value, bio_rep_column\x01]\x05\n    \x03if .dosage_info is True:\n      column_list.append(\x13dosage_column.value\x01)\x01\n\x02  \x02  \x03if \x12additional_columns\x06.value\x04 is \x08not None\x16:\n      column_list = \x13column_list + addit\x13ional_columns.value\x05\n    $column_list = list(set(column_list))\x05\n    \n\n    \n    \x1fif second_filter.value is True:\x01\n\x02  +    if control_column_2.value is not None:\n\x02  \x19      column_list.append(\x16control_column_2.value\x01)\x01\n\x02  \x06      \x0ecolumn_list = \x05list(\x04set(\x0bcolumn_list\x01)\x01)\x01\n\x02  \x02  \x02  \x0cdf_list = []\x01\n\x02  \x02  \x02  \x10if second_filter\x06.value\x08 is True\' and control_column_2.value is not None\x01:\x01\n\x02  :      for target in delta_delta_ct_df[target_column.value]\x01.\x07unique(\x01)\x01:\x01\n\x02  \x02  \x02  \x02  \x02  \x04for \x05val_2\x15 in second_condition:\x01\n\x02  *          filtered_df = delta_delta_ct_df[\x13(delta_delta_ct_df[\rtarget_column\x0b.value] == \x06target\x03) &\x01 .(delta_delta_ct_df[control_column_2.value] == \x05val_2\x01)\x01]\x01\n\x02  \n          \x0bfiltered_df\x01[\x01\"\x03_Ct\x01\"\x01]\x03 = \x0bfiltered_df\t.groupby(\x01[\x0ebio_rep_column\x02, \x14control_column.value\x01]\x03)[\'\x03_Ct\x14\'].transform(\'mean\')\x01\n\x02  \x15          filtered_df\x16 = cal_delta_delta_ct(\x0bfiltered_df\x01)\x01\n\x02  \x02  \x02  \x02  \x04    \x0bfiltered_df\x03 = \x0bfiltered_df\x18.drop_duplicates(subset=\x01[\x0ebio_rep_column\x02, \x0econtrol_column\x06.value\x01]\x01)\x01\n\x02  \x02  \x08        \x0fdf_list.append(\x0bfiltered_df\x01)\x01\n\x02  \x02  \x02  \x02  \x11delta_delta_ct_df\r = pd.concat(\x07df_list\x1d, axis=0, ignore_index=True)\n\n          \x02  \x01\n\x04    \x04else\x01:\x1a\n      df_list = []\n      >for target in delta_delta_ct_df[target_column.value].unique():[\n        filtered_df = delta_delta_ct_df[(delta_delta_ct_df[target_column.value] == target)\x01]\x01\n\x02  \x02  \x04    \x0bfiltered_df\x16 = cal_delta_delta_ct(\x0bfiltered_df\x01)$\n        df_list.append(filtered_df)\x07\n      Adelta_delta_ct_df = pd.concat(df_list, axis=0, ignore_index=True)\x01\n\x01\n\x01\n\x0einclude_dosage\x1aInclude dosage information\x06Filter\x02on\x01n\x02  \x02 =\x07is True\x01\n\x02  \x08delta_cq\x12  control_column_2Zw_select(label=\"Select column with second control condition\", options=delta_cq_df.columns)\x05val_2&set(delta_cq_df[control_column.value])\x10control_column_2\x02  \x0econtrol_column\x04    \x05\n    \x07\n      \x04    \x02  \x02  \x02  \x02  \x02  \x9b\x01\n      control_means = delta_delta_cq_df[delta_delta_cq_df[control_column.value] == control_val.value].groupby(target_column.value)[\"_Ct\"].mean().to_dict()\x01(0) & (control_column.value] == control_val.value)\x02_2\x02_2\x05\n    \x07\n      \x02  \x01[\xd3\x02\n      filtered_controls = delta_delta_cq_df[(delta_delta_cq_df[control_column] == control_val) & (delta_delta_cq_df[control_column_2] == control_val_2)]\n\n# Create a dictionary that maps each target to the mean value of `_Ct` for matching control values\ncontrol_means = filtered_controls.groupby(target_column)[ct_column].mean().to_dict()\n\x02  \x02  \x02  \x02# \x06.value\x06.value\x06.value\x06.value\x05\"_Ct\"\x06.value\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xb2\x03if housekeeping_gene.value is not None:\n    def delta_cq(group): \n      target_gene = group[group[housekeeping_gene_column.value] != housekeeping_gene.value][\'Cq\'].iloc[0]\n      hk_gene = group[group[housekeeping_gene_column.value] == housekeeping_gene.value][\'Cq\'].iloc[0]\n      group[\'_Cq\'] = target_gene - hk_gene\n      return group\n      \n    delta_cq_df = main_df.groupby(\'Well\', as_index=False, group_keys=False).apply(delta_cq)\x03\n  [\n  bio_replicates = w_checkbox(label=\"Includes biological replicates\", default=False).value\x03_Cq\x0cdelta_cq_gru\x03oup\x11Group samples by:\x08w_select\x07options\x03\n  \x03\n  \x01[\x01]\x01]\x02\"\"\x04Well\x04, \"\"\x03\n  \x03\n  \x03\n  \x03\n  \xb8\x02average_dict = housekeeping_df.set_index(\'Sample Name\')[\'Sample Group Cq Average\'].to_dict()\n# Map averages to df1 and subtract to create _Ct\ntarget_df[\'_Ct\'] = target_df[\'Sample Name\'].map(average_dict)\ntarget_df[\'_Ct\'] = target_df[\'Cq Average\'] - target_df[\'_Ct\']\n\ntarget_df[\'Rel Exp\'] = 2 ** -target_df[\'_Ct\']\x06Sample\x03\n  \x04\nif \n  if delta\x10delta_cq_group.b\nvalue == W\x02\"\"\x01\"\x04We;;\x02ll\x01:\x90\x03\n    def delta_cq(group): \n      target_gene = group[group[housekeeping_gene_column.value] != housekeeping_gene.value][\'Cq\'].iloc[0]\n      hk_gene = group[group[housekeeping_gene_column.value] == housekeeping_gene.value][\'Cq\'].iloc[0]\n      group[\'_Cq\'] = target_gene - hk_gene\n      return group\n      \n    delta_cq_df = main_df.groupby(\'Well\', as_index=False, group_keys=False).apply(delta_cq)\n    \n\n  if delt\x0edelta_cq_group\xf6\x06if housekeeping_gene.value is not None:\n  delta_cq_group = w_select(label=\"Group samples by:\", options=[\"Well\", \"Sample\"])\n\n  if delta_cq_group.value == \"Well\":\n    def delta_cq(group): \n      target_gene = group[group[housekeeping_gene_column.value] != housekeeping_gene.value][\'Cq\'].iloc[0]\n      hk_gene = group[group[housekeeping_gene_column.value] == housekeeping_gene.value][\'Cq\'].iloc[0]\n      group[\'_Cq\'] = target_gene - hk_gene\n      return group\n      \n    delta_cq_df = main_df.groupby(\'Well\', as_index=False, group_keys=False).apply(delta_cq)\n\n  if delt\n\n\n\naverage_dict = housekeeping_df.set_index(\'Sample Name\')[\'Sample Group Cq Average\'].to_dict()\n# Map averages to df1 and subtract to create _Ct\ntarget_df[\'_Ct\'] = target_df[\'Sample Name\'].map(average_dict)\ntarget_df[\'_Ct\'] = target_df[\'Cq Average\'] - target_df[\'_Ct\']\n\ntarget_df[\'Rel Exp\'] = 2 ** -target_df[\'_Ct\']\n\n  \x01.\"if delta_cq_group.value == \"Well\":\x06Sample\x05\n    P\n    target_df = target_df = qpcr_data[qpcr_data[\'Target\'].isin(target_options)]\x06= mainH    target_df = mainqpcr_data[qpcr_data[\'Target\'].isin(target_options)]\n\tmain_df[]\x02\"\"\x08main_df.\x02[]\x01]\x06target\x14target_column.column\x05value\x0e!=housekeepig_\x07ng_geneI\n    target_df = main_df[main_df[target_column.value]!=housekeeping_gene]\x0fhousekeeping_df\x01=\x02  \x02  \x05sa,pl\x11mple_column.value\x13sample_column.value\x05\n    \x0ffinal_cq_column\x02  \x02  \x02  \x02  \x02  \x02  \x1c\n    delta_cq_df = target_df\x03\n  \x06Technc\x05ical \nTechnical \nTechnical \x0c_housekeepig\x02ng\x1dfinal_cq_column_housekeeping_\x06tarhet\x03get\x10control_column_2\x10control_column_2\x12      print(\"HI\")\n\x02  \x02  \x02  \x02  \x02  \x06    if\x12additional_columns\x04True\x02co\x02io\x01\n\xd9\x01# include_dosage = w_checkbox(label=\"Include dosage information\", default=False)\n\n# if include_dosage is True:\n#   dosage_column = w_select(label=\"Select column with dosage information\", options=delta_cq_df.columns)\n\n\x07print()\rcontrol_means\x02# \x02# \x05list(\x01)\x05\n    \x05\n    \x05\n    \x02# \x06      \x07\n      \x01\\\x13\n      df_list = []\x01]\x10second_condition\x19\n        second_condition!for target in delta_delta_ct_df[]\x01]\x02\"\"\x13target_column.value\x05list(\x06values\x01)\x11delta_delta_ct_df\rtarget_column\x07control\x0b\n          \x01]\x0econtrol_column\x11control_val.value\x01 \x13control_val_2.value\x0b\n          a\n          control_means = filtered_controls.groupby(target_column.value)[\"_Ct\"].mean().to_dict()\x0bfiltered_df\x02  \xa0\x02\n          \n      \n      filtered_controls = delta_delta_ct_df[(delta_delta_ct_df[control_column.value] == control_val.value) & (delta_delta_ct_df[control_column_2.value] == control_val_2.value)]\n      control_means = filtered_controls.groupby(target_column.value)[\"_Ct\"].mean().to_dict()\x0b\n          q\n          delta_delta_ct_df[\"control_delta_ct_mean\"] = delta_delta_ct_df[target_column.value].map(control_means)^\n          control_df = filtered_df[(delta_delta_ct_df[target_column.value] == target)].mean()\x01)\x02[]\x02\"\"\x03_Ct\x0bfiltered_df\x07control\x0econtrol_column\x07control\x11control_val.value\x0cval_filtered\x15control_val_filtered\nSfiltered_df[(filtered_df[control_column.value] == control_val.value)][\"_Ct\"].mean()\x11delta_delta_ct_df\x01]\x01\"\x0bfiltered_df\x0bfiltered_df\x02df\n\'Category\'\x05Value\x01]\x14bio_replicate_colum.\x01n\x07controlo[\"control_delta_ct_mean\"] = filtered_df[(filtered_df[control_column.value] == control_val.value)][\"_Ct\"].mean()\x04__Ct\' - filtered_df[\"control_delta_ct_mean\"]\x1f    print(control_column.value)\"\n      print(control_column.value)\x01\"\x01\"\x02HI\xd0\x01\n          delta_delta_ct_df[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-delta_delta_ct_df[\'__Ct\'])\n    delta_delta_ct_df[\"Percent Repression\"] = 100-(delta_delta_ct_df[\"Percent Relative Exp / Fold Exp\"]*100)\x0bfiltered_df\x0bfiltered_df\x0bfiltered_df\x0bfiltered_df\x02df\x02df\x0e\'replicate_id\'\x01\n\x02\'\'\x03tar\x02_2\x02# \x02  \x02  \x02  \x02  \x01`\x08        \x0fconcatenated_df\n[df1, df2]\x07\n      \x02  \x02  \x02  \x02  \x02  \x02  \x02  7 & (delta_delta_ct_df[control_column_2.value] == val_2)\t\n        \x04    \x0bfiltered_df\x0bfiltered_df\x01\n\x0bfiltered_df\x0bfiltered_df\x0bfiltered_df\x02  \t  print():df[(df[control_column.value] == control_val.value)].head()\x01[\x01]\x02\"\"\x01\"\x03_Ct\x02# \x0c\n    print()\x02\"\"\x01\"\x02YO}\n    cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column])[cq_column.value].mean().reset_index()\x11delta_delta_ct_df\x11delta_delta_ct_df\x02\"\"\x01\"\x03_Ct\x89\x01\n    delta_delta_ct_df = delta_delta_ct_df.groupby([sample_column.value, target_column.value,bio_rep_column])[\"_Ct\"].mean().reset_index()\x8b\x01\n      delta_delta_ct_df = delta_delta_ct_df.groupby([sample_column.value, target_column.value,bio_rep_column])[\"_Ct\"].mean().reset_index()\x18, control_column_2.value\xa3\x01\n      delta_delta_ct_df = delta_delta_ct_df.groupby([sample_column.value, target_column.value,bio_rep_column, control_column_2.value])[\"_Ct\"].mean().reset_index()\x19,  control_column_2.value\xa1\x01\n    delta_delta_ct_df = delta_delta_ct_df.groupby([sample_column.value, target_column.value,bio_rep_column, control_column_2.value])[\"_Ct\"].mean().reset_index()\x02# \x01 \x04    \x05\n    \x18, control_column_2.value\x0bcolumn_list\x0bcolumn_list\x04dosa\x06      Tif control_column_2.value is not None:\n      column_list.append(dosage_column.value)\x13dosage_column.value\x02# \x02# \x02# \x02# \x02# \x02# \x01)o\n    grouped = df.groupby([\'Target\', \'drug_name\', \'dose_name\', \'bio_name\'])[[\'Cq\', \'_Ct\']].mean().reset_index()\x02)[\x01]\x06column\x01)\x02  \xa6\x01delta_delta_cq_df[\'control_delta_cq_mean\'] = delta_delta_cq_df.groupby(target_column).transform(\n    lambda x: x.loc[x[control_column] == control_val, \'_Ct\'].mean()\n)\x01.\x06.value\x06.value\xae\x01delta_delta_cq_df[\'control_delta_cq_mean\'] = delta_delta_cq_df.groupby(target_column).transform(\n        lambda x: x.loc[x[control_column] == control_val, \'_Ct\'].mean()\n    )\x06.value\x06.value\x02\"\"\x01\"\x06Sample\x06.value\x0bcontrol_val\x0econtrol_column\x87\x01control_means = delta_delta_cq_df[delta_delta_cq_df[control_column] == control_val].groupby(target_column)[ct_column].mean().to_dict()\n\x06.value\x06.value\x06.value\x01\"\x01\"\x03_Ct\x0c\n    print()\x01)\rcontrol_meansm delta_delta_cq_df[delta_delta_cq_df[control_column.value] == control_val.value].groupby(target_column.value_\x03){}\x02[]\x02\"\"\x03_CtRdelta_delta_cq_df[mean_col] = delta_delta_cq_df[target_column].map(control_means)\n\x01\"\x01\"\x15control_delta_cq_mean\x06.value\x02x/\x11delta_delta_cq_df\x11delta_delta_cq_df\x11delta_delta_cq_dfM\n    delta_cq_df[\'Percent Relative Expression\'] = 2 ** (-delta_cq_df[\'__Ct\'])\x11delta_delta_cq_df\x11delta_delta_cq_df\x01\nAtarget_df[\"Percent Repression\"] = 100-(target_df[\"Fold Exp\"]*100)\x02  \x02  \x11delta_delta_cq_df\x11delta_delta_cq_df\x02  \x02  4\n    target_df[\"Fold Exp\"] = 2 ** -target_df[\'__Ct\']\x12 / Fold Expression\x03Exp\x1fPercent Relative Exp / Fold Exp\xc2\x08dosage_column = w_select(label=\"Select column with dosage information\", options=well_result_df.columns)\nvehicle_control_column = w_select(label=\"Select column with vehicle control condition\", options=well_result_df.columns)\nif vehicle_control_column.value is not None:\n  print(vehicle_control_column.value)\n  vehicle_control = w_select(label=\"Select vehicle control condition\", options=set(main_df[vehicle_control_column.value]))\n\n  if vehicle_control.value is not None:\n    control_delta_cq_mean = delta_cq_df[delta_cq_df[vehicle_control_column.value] == vehicle_control.value][\'_Cq\'].mean()\n    \n    delta_cq_df[\'__Cq\'] = delta_cq_df[\'_Cq\'] - control_delta_cq_mean\n    delta_cq_df[\'Percent Relative Expression\'] = 2 ** (-delta_cq_df[\'__Cq\'])\n    \n    delta_cq_df = delta_cq_df[delta_cq_df[housekeeping_gene_column.value] == housekeeping_gene.value]\n    new_cols = [well_column.value, vehicle_control_column.value, \'_Cq\', \'__Cq\', \'Percent Relative Expression\']\n    if dosage_column.value is not None:\n      new_cols.append(dosage_column.value)\n    delta_delta_cq_df = delta_cq_df[new_cols]\xce\x01include_dosage = w_checkbox(label=\"Include dosage information\", default=False)\n\n\n\nif include_dosage:\n  dosage_column = w_select(label=\"Select column with dosage information\", options=delta_cq_df.columns)\n\n\n\x08delta_cq\x1e  print(control_column.value)\n\x08delta_cq\x01\n\x0fvehicle_control\x96\x02\n    control_delta_cq_mean = delta_cq_df[delta_cq_df[vehicle_control_column.value] == vehicle_control.value][\'_Ct\'].mean()\n    \n    delta_cq_df[\'__Ct\'] = delta_cq_df[\'_Ct\'] - control_delta_cq_mean\n    delta_cq_df[\'Percent Relative Expression\'] = 2 ** (-delta_cq_df[\'__Ct\'])\n    \xdf\x02    # delta_cq_df = delta_cq_df[delta_cq_df[housekeeping_gene_column.value] == housekeeping_gene.value]\n    # new_cols = [well_column.value, vehicle_control_column.value, \'_Cq\', \'__Cq\', \'Percent Relative Expression\']\n    # if dosage_column.value is not None:\n    #   new_cols.append(dosage_column.value)\n    # delta_delta_cq_df = delta_cq_df[new_cols]\x02# \x02# \x01\n\x04 is \x07is True\x03\n  \x0bcontrol_val\x0bcontrol_val\x0econtrol_column\x05\n    $\n    delta_delta_cq_df = delta_cq_df\x05\n    \x0c\n    print()\x15control_delta_cq_mean\x05\n    \x0c\n    print()Jdelta_cq_df[delta_cq_df[control_column.value] == control_val.value][\'_Ct\']\x05\n    \x05\n    \x02  \x02  \x1bfor target in delta_cq_df[]\x01]\x02\'\'\x01\'\x14target_column.values\x0f.values:\n      \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \xcc\x03\n    list_of_dd_ct_df = []\n\n# Group by the Target column\nfor target_group, group_df in delta_cq_df.groupby(\'Target\'):\n    # Calculate the mean of the control group within this target group\n    control_delta_cq_mean = group_df[group_df[control_column] == control_val][\'_Ct\'].mean()\n    \n    # Create a new __Ct column that subtracts the control mean\n    group_df[\'__Ct\'] = group_df[\'_Ct\'] - control_delta_cq_mean\n    \n    # Calculate Percent Relative Expression\xd8\x02    group_df[\'Percent Relative Expression\'] = 2 ** (-group_df[\'__Ct\'])\n    \n    # Append this group\'s processed DataFrame to the list\n    list_of_dd_ct_df.append(group_df)\n\n# Concatenate all processed groups back into one DataFrame\ndelta_delta_cq_df = pd.concat(list_of_dd_ct_df)\n\n# Print or inspect the final DataFrame\nprint(delta_delta_cq_df)\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x13target_column.value\x06.value\x01n\x1a\n    list_of_dd_ct_df = []\x01]\x07\n      \x07print()\x16target_group, group_df\x07\n      \x02  \x02# \x13list_of_dd_ct_df = \xc0\x03\n    delta_cq_df[\'control_delta_cq_mean\'] = delta_cq_df.groupby(target_column.iloc[0])[\'_Ct\'].transform(\n    lambda x: x[delta_cq_df[control_column] == control_val].mean()\n)\n\n# Subtract the calculated mean from the _Ct column to create a new __Ct column\ndelta_cq_df[\'__Ct\'] = delta_cq_df[\'_Ct\'] - delta_cq_df[\'control_delta_cq_mean\']\n\n# Calculate Percent Relative Expression\ndelta_cq_df[\'Percent Relative Expression\'] = 2 ** (-delta_cq_df[\'__Ct\'])\n\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x06.value\x06value.\xb6\x01delta_cq_df[\'control_delta_cq_mean\'] = delta_cq_df.groupby(target_column).apply(\n    lambda x: x.loc[x[control_column] == control_val, \'_Ct\'].mean()\n).reset_index(level=0, drop=True)\x06.value\x06.value4\n    delta_delta_cq_df = pd.concat(list_of_dd_ct_df)\x0bdelta_cq_df\x11control_val.value\x0b\n    print9\x02()\x01)\x0bdelta_cq_df\x02# \x02# \x08delta_cq\x08delta_cq\x11delta_delta_cq_df\x11delta_delta_cq_df\x11delta_delta_cq_df\x02# \x01\n\x07\n      \x07\n      \x02  \x02  \x02  \rdf_list = [] \xf7\x07\n      for target in delta_delta_ct_df[target_column.value].unique():\n          for val_2 in second_condition:\n            filtered_df = delta_delta_ct_df[(delta_delta_ct_df[target_column.value] == target) & (delta_delta_ct_df[control_column_2.value] == val_2)]\n            filtered_df[\"_Ct\"] = filtered_df.groupby([bio_rep_column, control_column.value])[\'_Ct\'].transform(\'mean\')\n            filtered_df[\"control_delta_ct_mean\"] = filtered_df[(filtered_df[control_column.value] == control_val.value)][\"_Ct\"].mean()\n            filtered_df[\"__Ct\"] = filtered_df[\"_Ct\"] - filtered_df[\"control_delta_ct_mean\"]\n            filtered_df[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-filtered_df[\'__Ct\'])\n            filtered_df[\"Percent Repression\"] = 100-(filtered_df[\"Percent Relative Exp / Fold Exp\"]*100)\n            filtered_df = filtered_df.drop_duplicates(subset=[bio_rep_column, control_column.value])\n            df_list.append(filtered_df)\n        delta_delta_ct_df = pd.concat(df_list, axis=0, ignore_index=True)\x02# \x02# \x02# \x02# \x02# \x03cua\x04late\x0bfiltered_df\x0bfiltered_df\x0bfiltered_df\x15          filtered_df\x0bfiltered_df\x15          filtered_df\x0bfiltered_df\x06filter\x0bfiltered_df\x0bfiltered_df\x11delta_delta_ct_df\x11delta_delta_ct_df\x08 is True\x02# \x02# \x02# \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xfd\x03from lplots.widgets.checkbox import w_checkbox\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nprint(df_options)\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\ncolumn_to_transform = w_select(\n  options=df.columns,\n  label=\"Select a column to apply the transformation to:\",\n)\xf5\x04\n\nw_text_output(content=\"\"\"\n**Special Handling of 0**\nIt is common to transform X values to their logarithms, which is required before fitting some models to your data. Since the logarithm of zero is undefined, if you enter X=0 that value will be empty (missing) after transformation. This analysis  lets you substitute some other value (a tiny concentration) for zero before taking the logarithm. For example if your data go from 10^-9 to 10^-3 molar and you plan to take the logarithm, consider changing the 0 value to 10^-11.\n\"\"\")\n\nreplace_zero = w_checkbox(\n  label=\"If X=0, replace with a different value.\",\n  default=True\n)1\n\nif column_to_transform.value is None:\n  exit(0)\x84\x01\n\nif replace_zero.value:\n  value_to_replace_with = w_text_input(\n    label=\"If X=0, change the concentration to the following value.\x1c Please enter a decimal numb\x02er\x01:!\",\n    default=0.000000000001\n  )\x01\n\x03\n  \ttry:\n    \nfloat_valu\x03e_t\x17o_replace_with = float(\x1bvalue_to_replace_with.value\x01)\x03\n  \x04exce\x02pt\x14:\n    w_text_output(\x08content=\x01f\x01\"\x01{\x1cfloat_value_to_replace_with}\x18 is not a valid number. \x1cPlease enter a valid number.\x01\"\x01)\n\n    exit(\x010\x01)\x01\n\x06\n  df[\x19column_to_transform.value\x07] = df[\x19column_to_transform.value\n].replace(\x010\x02, \x06float(\x1bvalue_to_replace_with.value\x01)\x01)\x82\x01\n\nlog_transform_df = df\nlog_transform_df[f\"Log {column_to_transform.value}\"] = np.log(log_transform_df[column_to_transform.value])\x04exit\x01}\x05 is n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x85\x03from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\x03\n  {\nlog_transform_df = sample_average_df\nlog_transform_df[dosage_column.value] = np.log(log_transform_df[dosage_column.value])\x03\n  \x02\nw\x02te\x03the\x02\nc\x03log\x04colu\x06x_colu\x07coliumn\x16umn_to_transform = the\x03the\x02th\x03the\x03 = \x03the\x02co\x17column_to_transform the\x01 \x04thje\x02tr\x0ftransform = the\x07w+selec\x02w+\x08_select)\x02()\x04\n  \n\x0coptions= the\x04itio\noptions= d\x16df.columns,\n  label=\"\"\x01\"\x15Select the column you\x17to apply log transform:\x0b,\n  default\x05\n  de\x08default=zlog_transform_df = sample_average_df\nlog_transform_df[dosage_column.value] = np.log(log_transform_df[dosage_column.value])\x11sample_average_df\x02df\x02df\x03f\"\"\x04Log(\xc1\x04# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\ncolumn_to_transform = w_select(\n  options=df.columns,\n  label=\"Select the column to apply log transform:\",\n)\n\nlog_transform_df = df\nlog_transform_df[f\"Log(\"dosage_column.value] = np.log(log_transform_df[dosage_column.value])\x16 {dosage_column.value}\x13column_to_transform\x13column_to_transform\x05\n\npir\x02pr\x08print)df\x07print()\x07df_iopt\x02df\ndf_options\ndf_options\x04\n\nif\tif column+column_to_transform.value is None:\n  exit()\x010\x02\n\n\x06w_ the\x01W\x05w_txt\x0btextoutput_\x01_\x02()\ncontent=\"\"\x05\"\"\"\"\"\x02\n\n\x0f**Special Jamdl\x0fHandling of 0**\x06\nw_che\x01w\xd8\x03\nit is common to transform X values to their logarithms, which is required before fitting some models to your data. Since the logarithm of zero is undefined, if you enter X=0 that value will be empty (missing) after transformation. This analysis  lets you substitute some other value (a tiny concentration) for zero before taking the logarithm. For example if your data go from 10-9 to 10-3 molar and you plan to take the logarithm, consider changing the 0 value to 10-11.\x01I\x01^\x01^\x01^\x05\n\nthe\x03the\x01w\x02\n\n\x04from\x07from w_\x0ffrom lplots.wdi\x08idggets.\x1eets.checkbox import w_checkbox\x07w_check\nw_checkbox\x05w_che\x07w_check\x0cw_checkbox()\x04\n  \n\x06label+\x07\n  labl\x04el-=\x03=\"\"\x01\"\x03the\x03the\'If X=0, replace with a different value.\x10,\n  default=True\x05bool(\x01)\x04True\x03\n  m\ncolumn_to_transform = w_select(\n  options=df.columns,\n  label=\"Select the column to apply log transform:\",\n)\x03the\x03the\x01a\x08ation to\x04\n\nif\x02if\x03if \x0creplace_zero\xa6\nfrom lplots.widgets.checkbox import w_checkbox\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nprint(df_options)\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\ncolumn_to_transform = w_select(\n  options=df.columns,\n  label=\"Select a column to apply the transformation to:\",\n)\n\nw_text_output(content=\"\"\"\n**Special Handling of 0**\nIt is common to transform X values to their logarithms, which is required before fitting some models to your data. Since the logarithm of zero is undefined, if you enter X=0 that value will be empty (missing) after transformation. This analysis  lets you substitute some other value (a tiny concentration) for zero before taking the logarithm. For example if your data go from 10^-9 to 10^-3 molar and you plan to take the logarithm, consider changing the 0 value to 10^-11.\n\"\"\")\n\nreplace_zerw_checkbox(\n  label=\"If X=0, replace with a different value.\",\n  default=True\n)\n\nif \n\nif column_to_transform.value is None:\n  exit(0)\n\nlog_transform_df = df\nlog_transform_df[f\"Log {column_to_transform.value}\"] = np.log(log_transform_df[column_to_transform.value])\x03 = \x10replace_zero =  \x02if\x02if\x16if replace_zero.value \x07:\n  val\xc2\nfrom lplots.widgets.checkbox import w_checkbox\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nprint(df_options)\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\ncolumn_to_transform = w_select(\n  options=df.columns,\n  label=\"Select a column to apply the transformation to:\",\n)\n\nw_text_output(content=\"\"\"\n**Special Handling of 0**\nIt is common to transform X values to their logarithms, which is required before fitting some models to your data. Since the logarithm of zero is undefined, if you enter X=0 that value will be empty (missing) after transformation. This analysis  lets you substitute some other value (a tiny concentration) for zero before taking the logarithm. For example if your data go from 10^-9 to 10^-3 molar and you plan to take the logarithm, consider changing the 0 value to 10^-11.\n\"\"\")\n\nreplace_zero = w_checkbox(\n  label=\"If X=0, replace with a different value.\",\n  default=True\n)\n\nif replace_zero.value:\n  va\n\nif column_to_transform.value is None:\n  exit(0)\n\nlog_transform_df = df\nlog_transform_df[f\"Log {column_to_transform.value}\"] = np.log(log_transform_df[column_to_transform.value])\x03ue_ :\n  value_to_replace_with = w_ch\x0ctext_input()\x08\n    \n  \x08label=\"\"\x01:\x05If X  =0, change the concentration to:1\n\nif column_to_transform.value is None:\n  exit(0)\r\n    default=\x01,\x0e0.000000000000\x0e0.0000000000018 the following value. Note: Please enter a float number.\x15enter a decimal numbe1\n\nif column_to_transform.value is None:\n  exit(0)\x06 Note:\x01r\x01.\x02  \x03\'A\'\x03\'A\'\told_value\tnew_value\x01\n\x04floa\x03flo\x05float\x05float\x05value\x03\n  \x05\n  if\x02if\x02if\x07print()\x06type()\x1bvalue_to_replace_with.value\x02  \x03try\ttry float\x04rey \x05value\x05float\x03ye_\x02po\x02  \x04exce\x02lt\x06 Value\nValueError\x01:\n\n    eixt9\x02()\x01)\x020)\x9d\x01from lplots.reactive import Signal\n\nw_text_output(content=\"\"\"\n## Generate Summary Statistics\n\nSelect columns to group on to generate summary statistics.\n\"\"\")\x1c\n\ndelta_delta_ct_df_signal()\x01\n\x04\nif \x14control_column_value\xbc\x01 is None or control_val.value is None:\n  # Set zero state for summary_plot_group\n  summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\x01\n\x97\x01\nremove_cols = [\"Cq\", \"Mean Control \xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xabCt\", \"Relative Expression\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Expression\"]\n\x08\nif len(\x1adelta_delta_ct_df_signal()\x01)\x05 > 0:\x01\n\x02  bsum_col_options = list(filter(lambda x: x not in remove_cols, delta_delta_ct_df_signal().columns))\x01\n\x1belse:\n  sum_col_options = [\x01]z\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = sum_col_options)\n\n\x06metric\x04 = w\x16_select(label=\"Select \x04metr\x02ic\x0f:\", options = [\x85\x01\"Cq\", \"Mean Control \xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xabCt\", \"Relative Expression\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Expression\"\x04])\n\n\tstatistic\x04 = w\x16_select(label=\"Select \tstatistic\x14:\", options = [\"Mean\x01 \x16and Standard Deviation\x04\", \"\x0cMean and SEM\x1f\"])\n\n\ndef create_summary_stats(\x1csummary_plot_group, metric, \tstatistic\x03):\n\x03\n  \x03if \x0eoutlier_signal\x06() is \x04None\x13:\n    summary_df = \x17delta_delta_ct_df_signa\x01l\x1c()\n  else:\n    summary_df = \routlier_signaZl()\n  \n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group\x03 + \x01[\x06metric\x01]\x1d\n  average_stats = summary_df\x01\n#  average_stats.columns.name = None\x01\n*  average_stats = average_stats[agg_stats]\t\n  print(\raverage_stats\x01)\x01\n1\n  if statistic == \"Mean and Standard Deviation\":\x12\n    average_stat_\x05error\x03 = /average_stats.groupby(summary_plot_group).std()\x05\n    \x05error(_columns = {col: f\"{col} SD\" for col in \x12average_stat_error*.columns if col not in summary_plot_group}\x03\n  \x04else :\n    # statistic == \"Mean and S\x02EM\x01\"D\n    average_stat_error = average_stats.groupby(summary_plot_group).\x03sem\x02()#\n    error_columns = {col: f\"{col} \x03SEMI\" for col in average_stat_error.columns if col not in summary_plot_group}\x03\n  F\n  average_stats = average_stats.groupby(summary_plot_group).mean()\n  hmean_columns = {col: f\"{col} Mean\" for col in average_stats.columns if col not in summary_plot_group}\n  8average_stats.rename(columns=mean_columns, inplace=True)\x03\n  \x12average_stat_error\x10.rename(columns=\rerror_columns\x12, inplace=True)\n  (average_stats = pd.merge(average_stats, \x12average_stat_error\x18, on=summary_plot_group)\x01\n\xa4\x01\n  #################\n  # Add table view\n  average_stats_all = summary_df\n  average_stats_all.columns.name = None\n  average_stats_all = average_stats_all[agg_stats]\n\x01\n%  mean_column_name = f\"{metric} Mean\"\x03\n  naverage_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group)[metric].transform(\'mean\')\n5\n  # Compute the mean of each group and keep all rows\x18\n  if statistic == \"Mean\x17 and Standard Deviation\x02\":\x01\n\x02  \x02  \x05error\x1d_column_name = f\"{metric} SD\"\x01\n\x02  \x02  \x12average_stats_all[\x11error_column_name0] = average_stats_all.groupby(summary_plot_group\x02)[\x06metric\x12].transform(\'std\')\x03\n   if statistic == \"Mean and SEM\":\n\x04    \x11error_column_name\x0e = f\"{metric} \x01S\x02EM\x02\"\n\x04    \x12average_stats_all[\x11error_column_nameE] = average_stats_all.groupby(summary_plot_group)[metric].transform(\'\x03sem\x05\')\n  \x03\n  Qis_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group)\n  Gaverage_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n  Qis_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group)\n  ,average_stats_all.loc[~is_first_occurrence, \x11error_column_name\x08] = None\x01\n1\n  return average_stats, average_stats_all\n  \nif \x01N\x08one in [\x18summary_plot_group.value\x02, \x06metric\x06.value\x02, \tstatistic\x07.value]D:\n  exit()\n\naverage_stats, average_stats_all = create_summary_stats(\x12summary_plot_group\x06.value\x08, metric\x06.value\x0b, statistic\x06.value\x02)\n\x19\n# Set zero state for sim\nummary+plo\xac\x01_plot_group\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\x03 []\x01]\x01\n\x01\n\x03\nif\x02if\x05if \"\"\x0bcontrol_val\x04 the\x07is not \xa2\x0fw_text_output(content=\"\"\"\n## Generate Summary Statistics\n\nSelect columns to group on to generate summary statistics.\n\"\"\")\n\n# Set zero state for summary_plot_group\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\n\n\nif \"control_val\" is not\n\nif control_column.value is None or control_val.value is None:\n  exit(0)\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\n\nprint(remove_outliers)\nif remove_outliers.value is True:\n    delta_delta_ct_df = after_removal\n\nif summary_plot_group.value is not None:\n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n  average_stats = delta_delta_ct_df\n  average_stats.columns.name = None\n  average_stats = average_stats[agg_stats]\n  average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\n  average_stats.rename(columns=mean_columns, inplace=True)\n\n  #################\n  # Add table view\n  average_stats_all = delta_delta_ct_df\n  average_stats_all.columns.name = None\n  average_stats_all = average_stats_all[agg_stats]\n  \n  # Compute the mean of each group and keep all rows\n  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n  \n\n\x03in \r in globals()\x07) or \"\"\x03cot\xb7\x0fw_text_output(content=\"\"\"\n## Generate Summary Statistics\n\nSelect columns to group on to generate summary statistics.\n\"\"\")\n\n# Set zero state for summary_plot_group\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\n\n\nif \"control_val\" is not in globals() or \"co\"\n\nif control_column.value is None or control_val.value is None:\n  exit(0)\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\n\nprint(remove_outliers)\nif remove_outliers.value is True:\n    delta_delta_ct_df = after_removal\n\nif summary_plot_group.value is not None:\n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n  average_stats = delta_delta_ct_df\n  average_stats.columns.name = None\n  average_stats = average_stats[agg_stats]\n  average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\n  average_stats.rename(columns=mean_columns, inplace=True)\n\n  #################\n  # Add table view\n  average_stats_all = delta_delta_ct_df\n  average_stats_all.columns.name = None\n  average_stats_all = average_stats_all[agg_stats]\n  \n  # Compute the mean of each group and keep all rows\n  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n  \n\n\x02co\ncontrol_ci\x05olumn\x13 is not in global()\x01)\x03s()\x0b):\n  exit()\x010\x01)\x94\x01\n  # Set zero state for summary_plot_group\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\x02  \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x85\x0cif control_column.value is None:\n  exit()\nif control_val.value is None:\n  exit()\n  \nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\n\nif summary_plot_group.value is not None:\n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n  average_ct = delta_delta_ct_df\n  average_ct.columns.name = None\n  average_ct = average_ct[agg_stats]\n  average_ct = average_ct.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_ct.columns if col not in summary_plot_group.value}\n  average_ct.rename(columns=mean_columns, inplace=True)\n\n  #################\n  # Add table view\n  average_ct_table = delta_delta_ct_df\n  average_ct_table.columns.name = None\n  average_ct_table = average_ct_table[agg_stats]\n  \n  # Compute the mean of each group and keep all rows\n  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    average_ct_table[mean_column_name] = average_ct_table.groupby(summary_plot_group.value)[column].transform(\'mean\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_ct_table.duplicated(subset=summary_plot_group.value)\n    average_ct_table.loc[~is_first_occurrence, mean_column_name] = None\n  \n\n\x04\xf0\x9d\x9a\xab\x03all\x11average_stats_all\x11average_stats_all\x11average_stats_all\x11average_stats_all\x11average_stats_all\x11average_stats_all\x11average_stats_all\x11average_stats_all\raverage_stats\raverage_stats\raverage_stats\raverage_stats\raverage_stats\raverage_stats\raverage_stats\raverage_stats\x02\n\n\xe0\x01w_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\x01G\x04\n## \tGenerate \x01 \x18delta_delta_ct_df_signal\x02  \x01]\x03SEMhif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\n\x12Summary Statistics\x02\n\n\xa3\x01  \nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\x0bNow we are \x1dSelect columns to group on ot\x1fto generate summary statistics.\x03\n  \xa1\x01\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\x01\n<if remove_outliers.value is True:\n  delta_ct_df = outlier_df\x1a  delta_ct_df = outlier_df\x11delta_delta_ct_df\x01a\x04fter\rafter_removal\x01l\x03\n  \x02  \x02  \x02  \x01\nGif remove_outliers.value is True:\n    delta_delta_ct_df = after_removal\x03\n  \x08\nprint()\rremove_values\x0fremove_outliers\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x02ifKif control_column.value is not None:\n  if control_column.value is not None:\x03col\nontrol_val!\n    # Get average Fold Change + \x15stats across grouping\r\n    w_select\x05plott\x04__Ct\x06plot_g\x0esummary_plot_gzif control_column.value is not None:\n  if control_val.value is not None:\n    summary_plot_\n    # Get stats across grouping\x08roup = w\x16roup = w_text_output()\x02\"\"\x1eSelect a group to plot against\x16summary statistics for\x01g\x01:\x06, defa\x12 options = default\tdelta)ct_\x14_delta_ct_df.columns\x05\n    \x06label=\x06select\x1e, default=condition_column.vla\x14control_column.value\x03\n  \x02\n\n\x04\nif \x05\nif \n\x16opt_filter_check.value\t is True:\x02  \x02  \x02  \x02  \x08Select a\x16opt_filter_check.value\x04True\x0eAttributeError\x04True\x04errp\x02or\x01 \x04opt_\x06metric\x02  \x1fif statistic == \"Mean and SEM\":\x03std\x02sd\x10average_stats_sd\x02SD\x10average_stats_sd\nsd_columns\x02  \x10average_stats_sd\x03\n  \x02  \x05agg_s\x94\x02if control_column.value is not None:\n  if control_val.value is not None:\n    summary_plot_group = w_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=control_column.value)\n    \n  # Get stats across grouping\n    agg_\n  \x01t\x06stats:1\n    average_ct = df.groupby(\'Condition\').mean()\n\n\n    if sm\x19summary_plot_group.valuei\r is not None;\x01:\x02  \x02  \x05 = []\x02\"\"\x0bFold Change\x04, \"\"\x06{ercet\x12Percent Repression\x03, P\x02\"\"\x1bPercent Relative Expression\x04, \"\"\x01\"\x02\"\"\x02Cq\x02. \x04, \"\"\x03_Ct\x03, \n\x02\"\"\x04__Ct\x02, \x11delta_delta_ct_df\x02Cq\x01 \x0bFold Change\x0bFold Change\tCondition1\n      df[\'zipcode\'] = df.zipcode.astype(str)\n\\\\\\%average_ct = delta_delta_ct_df\n      \naverage_ct\naverage_ct\x18summary_plot_group.value\x02[]\x18summary_plot_group.value\x18\n      average_ct.drop()\x19well_column.value, axis=1\x010\x011\x18summary_plot_group.value\raverage_ct = \x06multi_\x96\x05if control_column.value is not None:\n  if control_val.value is not None:\n    summary_plot_group = w_multiselect(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=control_column.value)\n    if summary_plot_group.value is not None:\n      agg_stats = [\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n      average_ct = delta_delta_ct_df\n      average_ct = average_ct.drop(well_column.value, axis=1)\n      average_ct[summary_plot_group.value] = average_ct[summary_plot_group.value].astype(str)\n      average_ct = delta_delta_ct_df.groupby(summary_plot_group.value).mean()\n\n  \x01_\x01[\x01]\x02# \x02# \x02# \x02# \x02# \x02# \x02[]\x02[]\tagg_stats\x05 + []\x1c summary_plot_group.value + \x01]\x02# \x02# \x02# \x18\n      delta_delta_ct_df\x06print(\x01)\x02# \tagg_stats\x19\n      print(df.columns)\n\x02# \x11delta_delta_ct_df.\n      s.reset_index(0).reset_index(drop=True)2\n      average_ct = delta_delta_ct_df[[agg_stats]]\naverage_ct\naverage_ct\x1e\n            print(agg_stats)\n\naverage_ct\x0caverage_ct= \x01 \x1e\n      df.columns.name = None\n\naverage_ct\x0e\n      print()\x12average_ct.columns\x02# \x0c\n      main_\x08\n      p\xc1\x06if control_column.value is not None:\n  if control_val.value is not None:\n    summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\n    if summary_plot_group.value is not None:\n      agg_stats =  summary_plot_group.value + [\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n      average_ct = delta_delta_ct_df\n      average_ct.columns.name = None\n      # average_ct = average_ct[[agg_stats]]\n      print(average_ct.columns)\n      \n      main_\n\n      # average_ct = average_ct.drop(well_column.value, axis=1)\n      # average_ct[summary_plot_group.value] = average_ct[summary_plot_group.value].astype(str)\n      # average_ct = delta_delta_ct_df.groupby(summary_plot_group.value).mean()\n\n  \x18rint(average_ct.columns) \n      print(average_ct.columns)\x07main_df\x02# \naverage_ct\x03\n  \x16hi = delta_delta_ct_df\x1d\n      # Create grouped Stats\x07\n      \x03\n  \x02  \x02  \x06# Add \x02  \x13# Add table view\n  \x02  \x02  \x9f\x06\ngroup_var = \'Condition\'\nagg_stats = [\'_Ct\', \'Cq\', \'__Ct\', \'Fold Change\', \'Percent Repression\', \'Percent Relative Expression\']\n\n# Calculate means and merge them back to the original DataFrame\nmean_values = df.groupby(group_var)[agg_stats].mean().reset_index()\nmean_values = mean_values.rename(lambda x: x + \'_Mean\', axis=\'columns\')\n\n# Add a marker for the first occurrence in each group\ndf[\'is_first\'] = df.groupby(group_var).cumcount() == 0\n\n# Merge the mean values back to the DataFrame only on the first occurrences\ndf = df.merge(mean_values, how=\'left\', left_on=group_var, right_on=f\'{group_var}_Mean\')\n\n# Fill non-first rows with NaN for the mean columns\nfor col in agg_stats:\n    df.loc[~df[\'is_first\'], f\'{col}_Mean\'] = np.nan\n\n# Drop helper column\ndf.drop(columns=[\'is_first\'], inplace=True)\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x18summary_plot_group.value\x07table_m\x0b_average_ct\x10table_average_ct\x10table_average_cts\n      average_ct = delta_delta_ct_df\n      average_ct.columns.name = None\n      average_ct = average_ct[agg_stats]\x07\n      \x02  \x11#################\x1d\n      ######################\x10table_average_ct\x10table_average_ct\x10table_average_ct\x10table_average_ct\x10table_average_ct\x10table_average_ct\x10table_average_ct\x10table_average_ct\x18summary_plot_group.value\x10table_average_ct\x10table_average_ct\x18summary_plot_group.value\x18summary_plot_group.value\tgroup_var\tgroup_var\x18summary_plot_group.value\x02df\x10table_average_ct\x10table_average_ctY[\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\x10table_average_ct\x0bmean_values\x0bmean_values\x0bmean_valuesY[\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]% and if outlier_method.value is None:\x04 not!average_stats = delta_delta_ct_df\nsummary_df\x02  !\n  summary_df = delta_delta_ct_df\nsummary_df\rafter_removal\x03\n  \xb4\x01average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\x04_std\x03stdL\n  average_stats_std = average_stats.groupby(summary_plot_group.value).std()\x04_std\x03\n  \x03std\x02SD\x10average_stats_sd;\n  average_stats.rename(columns=mean_columns, inplace=True)\x10average_stats_sd\nsd_columns\x08\n  # SD \t\n  # Mean\x03\n  \x03\n  ,\n  print (pd.merge(df1, df2, on=\'company\'))\n\x10average_stats = \raverage_stats\x10average_stats_sd\x18summary_plot_group.value\x02# \x02# \x02# &\n    sd_column_name = f\"{column}_Mean\"\x02SD\tstatistic\x02[]\x0c\n  if statis\x16statistic == statistic\x01\"\x01\"\x04Mean\x01:\x02  \x02  \x02  \x1a\n  if statistic == \"Mean\":\x12Standard Deviation\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x05\n    \nelse:\n    \x02  \x02  \x05\n    %if statistic == \"Standard Deviation\":\x05\n    \x1fsd_column_name = f\"{column}_SD\"\x02  \x97\x01is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\x8f\x01sd_column_name = f\"{column}_SD\"\n    average_stats_all[sd_column_name] = average_stats_all.groupby(summary_plot_group)[column].transform(\'std\')\n\x12summary_plot_group\x06metric\tstatistic\toperation\toperation\toperation\tstatistic\tstatistic\x02  \x07print()\tagg_stats\t  print()\nsummary_df\nsummary_df\x0c\n    print()\x02\"\"\x03man\x03ean\x02  \x07print()\tstatistic\tstatistic\tstatistic\x06column\x06column\x06metric\x06metric\x06metric\x06metric\x07print()\x10remove_outliers)\x02()\x01)\x07_signal\x02\"\"\x03\", \x13Relative Expressionp[\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"Relative Expression\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Expression\"]\x05\n\n\n\n\n$if remove_outliers.value is True:\n  \x05\nelse\x02  \x01:+if remove_outliers.value is True:\n\n  else:\n\t_signal()\x18outlier_removal_signal()\x07\n  else\x01:\x02  ,\n    summary_df = delta_delta_ct_df_signal()\x01\n\x08\nw_check\x1fopt_filter_check = w_checkbox()\x08label=\"\" Select to add an optional filter\n, default \x06=False\x010\x01 \x11tandard Deviation\x01:\x02  \x03\n  \x04    \x05\n    \x02  \x1bMean and Standard Deviation\x0cMean and SEM\xa7\x01\n    sd_columns = {col: f\"{col} SD\" for col in average_stats_sd.columns if col not in summary_plot_group}\n    average_stats_sd.rename(columns=sd_columns, inplace=True)E\n  average_stats_sd = average_stats.groupby(summary_plot_group).std()\x03sem\x8e\x03average_stats = average_stats.groupby(summary_plot_group).mean()\n    mean_columns = {col: f\"{col} Mean\" for col in average_stats.columns if col not in summary_plot_group}\n    average_stats.rename(columns=mean_columns, inplace=True)\n    sd_columns = {col: f\"{col} SD\" for col in average_stats_sd.columns if col not in summary_plot_group}\n    average_stats_sd.rename(columns=sd_columns, inplace=True)U\n    average_stats = pd.merge(average_stats, average_stats_sd, on=summary_plot_group)U\n    average_stats = pd.merge(average_stats, average_stats_sd, on=summary_plot_group)\x03sem\x11average_stats_sem\x11average_stats_sem\x11average_stats_sem\x02# \x02# \t  exit(0)\x01\n\x01\n\x04from\"from lplots.reactive import Signal\x02\n\n\x1fdelta_delta_ct_df_columns = teh\x08Signal()\x01)\x02[]\x01]\x1d\nif delta_delta_ct_df_columns\x02\"\"\x01\"\x19delta_delta_ct_df_columns\x11 not in globals()\x02):\x02  \x1bdelta_delta_ct_df_columns()\x05\n    \x07print()\x04here\x01\"\x01\"\nsummary_df\x01 \x01 \x01 \x01 \x11remove_outliers()\x01:\x1d\n\ndef create_summary_stats():\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x03\n  (if summary_plot_group.value is not None:Aif summary_plot_group.value is not None:\n  create_summary_stats()\x02\\\\\t\n  exit()\x01\n\x0e\n  return aver\x13average_stats, aver\x11average_stats_all#average_stats, average_stats_all = \x03\n  \x18delta_delta_ct_df_signal\x08.columns\x16\ncolumn_options_smmary\tsum_col_ikoptions = delta_delta_ct_df_signal().columns my_list = list(filter(lambda x: x not in [2, 5, 8], my_list))\n\"delta_delta_ct_df_signal().columns\x0c\nremove_cols\x04s = \x0bremove_colsp[\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"Relative Expression\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Expression\"]\x04\"\", \x01\"\x0fsum_col_options\n\"\xf0\x9d\x9a\xabCt\", \rMean Control \x02\n\n\x03selx\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = sum_col_options)\n\nstatistics\x04 sta\tstatistic\x02[]\x02\"\"\x01\"\x12Standard Deviation\x04, \"\"\x02\"\"\x04Mean\x02, \toperationa\nstatistic = w_multi_select(label=\"Select operation:\", options = [\"Mean\", \"Standard Deviation\"])\n\x07operato\x03ion\x06_value\x02me\x01\n\x14control_column.value\x0b\n  exit(0)\n\x01m\x06_multi\toperation\x1c\"Mean\", \"Standard Deviation\"\toperation\x06_multi\toperation\x12Standard Deviation\x05  \n  \x0fremove_outliers\x04True\x16outlier_removal_signal\x17delta_delta_ct_df_signa\x06.valuep[\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"Relative Expression\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Expression\"]\x01\n\x01\n\xd5\x04\n  average_stats_sd = average_stats.groupby(summary_plot_group.value).std()\n  \n  # Mean\n  average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\n  average_stats.rename(columns=mean_columns, inplace=True)\n\n  # SD \n  sd_columns = {col: f\"{col}_SD\" for col in average_stats_sd.columns if col not in summary_plot_group.value}\n  average_stats_sd.rename(columns=sd_columns, inplace=True)\n\n  average_stats = pd.merge(average_stats, average_stats_sd, on=summary_plot_group.value)\x01\n\x02  \xcd\x01  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"Relative Expression\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    sd_column_name = f\"{column}_SD\"\xf4\x04    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n    average_stats_all[sd_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'std\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, sd_column_name] = None\n\x08 is None\x03tri\x05etric\x02oc\x02\n\n\x01\n\xbb\x05mean_column_name = f\"{column}_Mean\"\n    sd_column_name = f\"{column}_SD\"\n    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n    average_stats_all[sd_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'std\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, sd_column_name] = None\x03\n  \x02sd\x01\n\x0esd_column_name\x06.value\x06column\x02  \x98\x01\nis_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\x02  \x02  \x0esd_column_name\x02  \x02  \x02  \x02  \x02  \x02  (    mean_column_name = f\"{metric} Mean\"\n\x10  sd_column_name\x02SDt      average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group)[metric].transform(\'mean\')\n\x02  \x0esd_column_name\x03std\x04    \x04    \x04    \x04    \x0esd_column_name\x1a\nprint(control_val.value)\n\x01)\x01\n\x01\n\x07print()\x07control\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x01z\x02# \x02# \x02# \x02# \x02# \x02# \x02# X\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\tgroup_var\x04\"Cq\"\x02Cq\x08oligo#s\n\x02Cq\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x07print()\x04cont\x11control_val.value\x01\n\x01\n\topt_filet\x90\x01ter = summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df_columns_signal())\n(Add an optional filter on a given column)if summary_plot_group.value is not None:\n\nopt_filter\r  opt_filter.}opt_filter = w_multi_select(label=\"Add an optional filter on a given column:\", options = delta_delta_ct_df_columns_signal())\n\x06_value\x05Selec\x14t the values to keep\x01\n\nopt_filter\x02[]\x13delta_delta_ct_df[]\x02\'\'\nopt_filter\x10opt_filter.value\x03.un\xfc\x16from lplots.reactive import Signal\n\n\nw_text_output(content=\"\"\"\n## Generate Summary Statistics\n\nSelect columns to group on to generate summary statistics.\n\"\"\")\n\nif control_column.value is None or control_val.value is None:\n  # Set zero state for summary_plot_group\n  summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\n  exit(0)\n\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df_columns_signal())\n\nopt_filter = w_select(label=\"Add an optional filter on a given column:\", options = delta_delta_ct_df_columns_signal())\n\nif opt_filter.value is not None:\n  opt_filter_value = w_multi_select(label=\"Select the values to keep:\", options = delta_delta_ct_df[opt_filter.value].u)\n\nif summary_plot_group.value is not None:\n\n  summary_df = delta_delta_ct_df\n  if remove_outliers.value is True and outlier_method.value is not None:\n    print(\"here\")\n    summary_df = after_removal\n\n  \n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n  average_stats = summary_df\n  average_stats.columns.name = None\n  average_stats = average_stats[agg_stats]\n  average_stats_sd = average_stats.groupby(summary_plot_group.value).std()\n  \n  # Mean\n  average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\n  average_stats.rename(columns=mean_columns, inplace=True)\n\n  # SD \n  sd_columns = {col: f\"{col}_SD\" for col in average_stats_sd.columns if col not in summary_plot_group.value}\n  average_stats_sd.rename(columns=sd_columns, inplace=True)\n\n  average_stats = pd.merge(average_stats, average_stats_sd, on=summary_plot_group.value)\n\n\n  #################\n  # Add table view\n  average_stats_all = summary_df\n  average_stats_all.columns.name = None\n  average_stats_all = average_stats_all[agg_stats]\n  \n  # Compute the mean of each group and keep all rows\n  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    sd_column_name = f\"{column}_SD\"\n    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n    average_stats_all[sd_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'std\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, sd_column_name] = None\n  \n\n\x03iqu\x07nique()\x01)\x05\n    \'\n  if opt_filter_value is not None and \x1bopt_filter is not None and \x1f:\n    summary_df = summary_df[]\x10opt_filter.value\x0bsummary_df[\x07.isin()\x16opt_filter_value.value\x01]\x06.value\x01:\x08\n    if \t\n    try:\x02  \x02  \x02  \t\n        \x0eexcept:\n      \x02  \x07print()\x02\"\"\x11No value selected\x01\n\t\n        \x08if len()\x10opt_filter_value\x16opt_filter_value.value\x16opt_filter_value.value\x02 <\x88\x19from lplots.reactive import Signal\n\n\nw_text_output(content=\"\"\"\n## Generate Summary Statistics\n\nSelect columns to group on to generate summary statistics.\n\"\"\")\n\nif control_column.value is None or control_val.value is None:\n  # Set zero state for summary_plot_group\n  summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\n  exit(0)\n\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df_columns_signal())\n\nopt_filter = w_select(label=\"Add an optional filter on a given column:\", options = delta_delta_ct_df_columns_signal())\n\nif opt_filter.value is not None:\n  opt_filter_value = w_multi_select(label=\"Select the values to keep:\", options = delta_delta_ct_df[opt_filter.value].unique())\n\nif summary_plot_group.value is not None:\n\n  summary_df = delta_delta_ct_df\n  if remove_outliers.value is True and outlier_method.value is not None:\n    print(\"here\")\n    summary_df = after_removal\n\n  if opt_filter is not None:\n    try:\n      if opt_filter_value.value is not None:\n        if len(opt_filter_value.value) <\n        summary_df = summary_df[summary_df[opt_filter.value].isin(opt_filter_value.value)]\n    except:\n      print(\"No value selected\")\n\n  \n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n  average_stats = summary_df\n  average_stats.columns.name = None\n  average_stats = average_stats[agg_stats]\n  average_stats_sd = average_stats.groupby(summary_plot_group.value).std()\n  \n  # Mean\n  average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\n  average_stats.rename(columns=mean_columns, inplace=True)\n\n  # SD \n  sd_columns = {col: f\"{col}_SD\" for col in average_stats_sd.columns if col not in summary_plot_group.value}\n  average_stats_sd.rename(columns=sd_columns, inplace=True)\n\n  average_stats = pd.merge(average_stats, average_stats_sd, on=summary_plot_group.value)\n\n\n  #################\n  # Add table view\n  average_stats_all = summary_df\n  average_stats_all.columns.name = None\n  average_stats_all = average_stats_all[agg_stats]\n  \n  # Compute the mean of each group and keep all rows\n  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    sd_column_name = f\"{column}_SD\"\n    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n    average_stats_all[sd_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'std\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, sd_column_name] = None\n  \n\n\x01 \x04> 0:\x02  \x19delta_delta_ct_df_columns\x02()\x01)\x04siga\x0ecolumns_signal\x07_signal delta_delta_ct_df_columns_signal\x05\n    saverage_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\x0esd_column_name\x03std\xa2\x01\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\x0esd_column_name\x03\n  \x03\n  \x03\n  I  remove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\x06\n  if \x01 \x03.va\xda\x14from lplots.reactive import Signal\n\nw_text_output(content=\"\"\"\n## Generate Summary Statistics\n\nSelect columns to group on to generate summary statistics.\n\"\"\")\n\nif control_column.value is None or control_val.value is None:\n  # Set zero state for summary_plot_group\n  summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = [])\n  exit(0)\n\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df_columns_signal())\n\nif summary_plot_group.value is not None:\n\n  if remove_outliers.v\n\n  \n  ######################\n  # Create grouped Stats\n  agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n  average_stats = delta_delta_ct_df\n  average_stats.columns.name = None\n  average_stats = average_stats[agg_stats]\n  average_stats_sd = average_stats.groupby(summary_plot_group.value).std()\n  \n  # Mean\n  average_stats = average_stats.groupby(summary_plot_group.value).mean()\n  mean_columns = {col: f\"{col}_Mean\" for col in average_stats.columns if col not in summary_plot_group.value}\n  average_stats.rename(columns=mean_columns, inplace=True)\n\n  # SD \n  sd_columns = {col: f\"{col}_SD\" for col in average_stats_sd.columns if col not in summary_plot_group.value}\n  average_stats_sd.rename(columns=sd_columns, inplace=True)\n\n  average_stats = pd.merge(average_stats, average_stats_sd, on=summary_plot_group.value)\n\n\n  #################\n  # Add table view\n  average_stats_all = delta_delta_ct_df\n  average_stats_all.columns.name = None\n  average_stats_all = average_stats_all[agg_stats]\n  \n  # Compute the mean of each group and keep all rows\n  for column in [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n    mean_column_name = f\"{column}_Mean\"\n    sd_column_name = f\"{column}_SD\"\n    average_stats_all[mean_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'mean\')\n    average_stats_all[sd_column_name] = average_stats_all.groupby(summary_plot_group.value)[column].transform(\'std\')\n\n    # Retaining the mean only at the first occurrence of each group\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, mean_column_name] = None\n    is_first_occurrence = ~average_stats_all.duplicated(subset=summary_plot_group.value)\n    average_stats_all.loc[~is_first_occurrence, sd_column_name] = None\n  \n\n\x04lue \x12alue is True:\n    \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x88\x10if control_column.value is not None:\n  if control_val.value is not None:\n    summary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\n    if summary_plot_group.value is not None:\n      ######################\n      # Create grouped Stats\n      agg_stats =  summary_plot_group.value + [\"Cq\", \"\xf0\x9d\x9a\xabCt\", \"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n      average_ct = delta_delta_ct_df\n      average_ct.columns.name = None\n      average_ct = average_ct[agg_stats]\n      # average_ct[summary_plot_group.value] = average_ct[summary_plot_group.value].astype(str)\n      average_ct = average_ct.groupby(summary_plot_group.value).mean()\n\n      # #################\n      # # Add table view\n      # table_average_ct = delta_delta_ct_df\n      # table_average_ct.columns.name = None\n      # table_average_ct = table_average_ct[agg_stats]\n\n      # # Calculate means and merge them back to the original DataFrame\n      # mean_values = table_average_ct.groupby(summary_plot_group.value)[[\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]].mean().reset_index()\n      # mean_values = mean_values.rename(lambda x: x + \'_Mean\', axis=\'columns\')\n      \n      # # Add a marker for the first occurrence in each group\n      # table_average_ct[\'is_first\'] = table_average_ct.groupby(summary_plot_group.value).cumcount() == 0\n      \n      # # Merge the mean values back to the DataFrame only on the first occurrences\n      # table_average_ct = table_average_ct.merge(mean_values, how=\'left\', left_on=\"Cq\", right_on=f\'Cq_Mean\')\n      \n      # # Fill non-first rows with NaN for the mean columns\n      # for col in [\"Cq\", \"_Ct\", \"__Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n      #     table_average_ct.loc[~table_average_ct[\'is_first\'], f\'{col}_Mean\'] = np.nan\n      \n      # # Drop helper column\n      # table_average_ct.drop(columns=[\'is_first\'], inplace=True)\n      \n\n  \x04\xf0\x9d\x9a\xab\xa9\x01\n      mean_columns = {col: f\"{col}_Mean\" for col in average_ct.columns if col not in summary_plot_group.value}\n    average_ct.rename(columns=mean_columns, inplace=True)\x97\x06agg_stats = summary_plot_group.value + [\"Cq\", \"\xce\x94Ct\", \"\xce\x94\xce\x94Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]\n    average_ct = delta_delta_ct_df\n    average_ct.columns.name = None\n    average_ct = average_ct[agg_stats]\n\n    # Compute the mean of each group and keep all rows\n    for column in [\"Cq\", \"\xce\x94Ct\", \"\xce\x94\xce\x94Ct\", \"Fold Change\", \"Percent Repression\", \"Percent Relative Expression\"]:\n        mean_column_name = f\"{column}_Mean\"\n        average_ct[mean_column_name] = average_ct.groupby(summary_plot_group.value)[column].transform(\'mean\')\n\n        # Retaining the mean only at the first occurrence of each group\n        is_first_occurrence = ~average_ct.duplicated(subset=summary_plot_group.value)\n        average_ct.loc[~is_first_occurrence, mean_column_name] = None\x02\n\n\x10if control_value)if control_column.value is None:\n  exit()\x01)\t\n  exit()\x01)\x03\n  \x01\n\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x06_table\x10average_ct_table\x10average_ct_table\x10average_ct_table\x10average_ct_table\x10average_ct_table\x10average_ct_table\x10average_ct_table\x02  \x01 \x02| \x02or\x10remove_outliers \r= w_checkbox(\x05label\x02=\"\x0fRemove outliers\x01\"\x0c, default = \x05False\x01)R\n\nfrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\nif \x01c\xa4\x06ontrol_column.value is None:\n  exit()\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\n    group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\'\x05Fold \x06Change2\'])\n    return group\n  \noutlier_df = delta_delta_c\x01t\x0c_df.groupby(\x0econtrol_column\x9d\x01.value, as_index=False, group_keys=False).apply(grubbs_transform)\n\nw_text_output(content=\"This block detects and removes outliers with Grubbs.\")\n\noutlier_df[#control_column.value] = outlier_df[\x0econtrol_column+.value].astype(str)\noutlier_df.sort_values(\x0econtrol_column\x15.value, inplace=True)\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x01-\x01\'\x01\"\x01T\tvehicle_c\x1bPercent Relative Expression\x01q\x16vehicle_control_column\x08vehicle_\x16vehicle_control_column\x16vehicle_control_column\x17Percent Relative Exp / \x04Exp\n*w_text_output(content=\"\"\"\n## _(Optional)_ \x11Log Transform Dos\x03age:\n\nThis block applies a log transform to the dosage column.\x05\n\"\"\")\x01\n\x01\n\x06print(\x15remove_outliers.value\x01)\x01\n\x01\nGif remove_outliers.value is True:\n    delta_delta_ct_df = after_removal\x01\n\rlog_dosage = \x05False\x01\n\x01\n\x15def safe_log10(x):\n  \ttry:\n    \x1creturn np.log10(float(x))\n  $except (ValueError, TypeError):\n    ^return 0\n\n# Apply this function to the specified column and store the result in the new column\x01\n\x01\n\x03if \x0bdosage_info\t is True:\x01\n\x01\n\x0f  dosage_column\x02_2S = w_select(label=\"Select the column that contains the dosage information\", options\x01=\x11delta_delta_ct_df\t.columns)\x16\n  log_transform_df = \x11delta_delta_ct_df\x06\n  if \"dosage_column_2.value is not None:`\n    log_transform_df[\"Log Dosage\"] = delta_delta_ct_df[dosage_column_2.value].apply(safe_log10)\x01\n\x15    log_dosage = True\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")$log_transform_df = sample_average_df\xa8\x01log_transform_df[dosage_column.value] = np.log(log_transform_df[dosage_column.value])\n\nw_text_output(content=\"This block applies a log transform to the dosage column.\")\x01\n\x03dos\x01 \x02  \x02  \noutlier_df\xb7\x01Delta Delta Ct Calcation\n\nNow we are going to calculate Delta Delta Ct. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\x01g\x04True\x01\n\x01\"\x01\"\nLog Dosage\x0c\"Log Dosage\"\x0c\"Log Dosage\"\x02# \x02# \x02# \x02# \x02# \x02# \x0210\noutlier_df\x15dosage_column_2.value\x02\n\n\x03pro\x05int()\x08np.log()\x03100\x0210\x0210\x02# \x02  \x04    \x02  \x04    [\nog_transform_df[\"Log Dosage\"] = delta_delta_ct_df[dosage_column_2.value].apply(safe_log10)\x01l\tdeltadelt\x11delta_delta_ct_df\x03\n  \x02  \x01\n\x03\n  \x03\n  \x85\x03  def safe_convert(value):\n    try:\n        return int(value)\n    except ValueError:\n        return 0\n\n# Apply the conversion function to the dosage column\ndf[dosage_column] = df[dosage_column].apply(safe_convert)\n\n# Apply a logarithmic transformation, handling zeroes\ndf[dosage_column] = df[dosage_column].replace(0, 1)  # Avoid log(0) errors\ndf[dosage_column] = np.log(df[dosage_column])\x05float\x02  \x02  \x02  \x02  \x02  \x07\n      \x1dlog_transform_df = outlier_df\x10log_transform_df\x06.value\x10log_transform_df\x06.value\x02# \x02# \x02# \x02.0\x019\x03\n  \x1a  if dosage_info is True:\n\x08=main_df\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x01\n\x02do\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x010\x0fdosage_column_2\x0fdosage_column_2\x0fdosage_column_2\x0fdosage_column_2\x031.o\x010\noutlier_df\x03\n  \x03\n  \x02  \x03\n  \x06.value\n\n  print()\x01h\x02\"\"\x04here\x18print(control_val.value)\xd3\x02\nif control_column.value is None:\n  exit()\nif control_val.value is None:\n  exit()\n\nsummary_plot_group = w_multi_select(label=\"Select a group to plot summary statistics for:\", options = delta_delta_ct_df.columns, default=[control_column.value])\n\nprint(remove_outliers)\nif remove_outliers.value is True:\n    delta_delta_ct_df = after_removal\x0bdosage_info\x11delta_delta_ct_df\x94\x01remove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nfrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\xc7\x06\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\n    group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\'Percent Relative Exp / Fold Exp\'])\n    return group\n  \noutlier_df = delta\xb9\x02_ct_df.groupby(control_column.value, as_index=False, group_keys=False).apply(grubbs_transform)\n\nw_text_output(content=\"This block detects and removes outliers with Grubbs.\")\n\noutlier_df[control_column.value] = outlier_df[control_column.value].astype(str)\noutlier_df.sort_values(control_column.value, inplace=True)+\nif control_column.value is None:\n  exit()\n\x06_delta\xa8\x0ffrom scipy.optimize import curve_fit\nimport pandas as pd\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n    options=df_options,\n    label=\"Select a result from a previous data transformation:\",\n    default=df_options[-1],\n)\n\nif selected_df_name is None:\n    exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None:\n    exit(0)\n\n\ndef normalization(df):\n\n    x_column = w_select(label=\"Select the column for the X axis:\", options=df.columns)\n\n    y_column = w_select(label=\"Select the column for the Y axis:\", options=df.columns)\n\n    group_column = w_select(label=\"Select a column for the group:\", options=df.columns)\n\n    if x_column.value is None or y_column.value is None or group_column.value is None:\n        exit(0)\n\n    # Add replicate column\n    grouped = df.groupby([x_column.value, group_column.value])\n\n    def assign_replicates(group):\n        group[\"Replicate\"] = range(1, len(group) + 1)\n        return group\n\n    # Assign replicate to reach group\n    df = grouped.apply(assign_replicates).reset_index(drop=True)\n\n    # For each group at each X point, calculate the average Y\n    avg_df = (\n        df.groupby([group_column.value, x_column.value])[y_column.value]\n        .mean()\n        .reset_index()\n    )\n\n    # For each group, find the min and max\n    min_max_df = (\n        avg_df.groupby(group_column.value)[y_column.value]\n        .agg([\"min\", \"max\"])\n        .reset_index()\n    )\n\n    # Merge the min_max_df with original df\n    merged_df = pd.merge(df, min_max_df, on=group_column.value)\n\n    # Normalize the data for every group\n    # data - np.min(data)) / (np.max(data) - np.min(data)\n    normalized_df = merged_df\n    normalized_df[f\"Normalized {y_column.value}\"] = normalized_df[\n        y_column.value\n    ] - normalized_df[\"min\"] / (normalized_df[\"max\"] - normalized_df[\"min\"])\n\n    return normalized_df\n\n\nnormalized_df = normalization(df)\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xef\x01from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\x01\n\x07\nprint(\ndf_options\x01)\x02\n\n\x03if \x10selected_df_name\x04 is \rNone:\n  exit(\x010\x01)\x01\n2\ndf = globals().get(selected_df_name.value, None)\n\x01\n\x17if df is None: \n  exit(\x010\x02)\n\xb3\x02\nprint(df)\n\ndose_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\x8d\x06\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + X / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\x03\n  \x1areturn 100 / (1 + (IC50 / \x01x\x0f) ** HillSlope)\x01\n\x01\n\x1bdose_response_eq_options = \x01{+\n  \"log(inhibitor) vs. normalized response\"&: log_inhibitor_vs_normalized_response>,\n  \"log(inhibitor) vs. normalized response -- Variable slope\"/: log_inhibitor_vs_normalized_response_variable),\n  \"[Inhibitor] vs. normalized response\"\": inhibitor_vs_normalized_response;,\n  \"[Inhibitor] vs. normalized response -- Variable slope\"+: inhibitor_vs_normalized_response_variable\x01\n\x01}\x01\nV\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=%list(dose_response_eq_options.keys())\x03\n)\n\x01\n\nselected_e\x07quation\x1b = dose_response_eq.value\n\n\x02eq\x06uation\x03 = \x01 \x19dose_response_eq_options[\x17selected_equation.value\x01]\x08\n    \n  \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x01$\x05# the\xd9\x01Select a dataframe\n\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = res, label=\"Select a dataframe\")\nselected_df = globals().get(selected_df_name.value, None)\x01f\x04df_o\ndf_options\nSelect the\x04thje\x01a/the result from a previous data transformation:\x01a\x02\'\'\x02\n\n\x07\n\npritn\x07print)s\x02()\x08selected\x0bselected_df\x02df\x02df\x02df\x07print()\x02df\x05\n\ncol\x03the\nw_select()\x04\n  \n\x16options=df.columns,\n  \x07\n  lebl\x04able\x02e;\x01l\x03kl=\x04l=\"\"\nSelect the\x08the colu\xc2\x02# Select a dataframe\n\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\ndf = globals().get(selected_df_name.value, None)\n\nprint(df)\n\nw_select(\n  label=\"Select the col\"\n  options=df.columns,\n)\x03mn \x07umn for\x17for dose concentration:\x01,\x02do\x02do\x03dos\x06dose_c\x03dos\x07dose+co\t_column  \x02= \x03\n\nt\x03the\x04cond\x01c\x0btherapeutci\x0edrug_column = \x02dr\x05druh+\x15g_column = w_select()\x04\n  \n\x07label=:\x02\"\"\x05Selec\x13Select a column for\x03the\x16a column for the drug:\x04for \x0b for hte th\xa3\x03# Select a dataframe\n\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\ndf = globals().get(selected_df_name.value, None)\n\nprint(df)\n\ndose_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for\n)\x03for\x0b the thepra*rapeutic candidate:\",\n  options=df.columns\x02\\\n\x03\n\ny\x0cy_column  te\x05= the\x06= thje\nw_select()\x04\n  \n\x08label+\"\"\x01S\x01=\x05l=:\"\"\x02\"\"\x19Select the column for you\x03fpr\x02of\x01r\x03for\nfor the Y \x05 xis:\x01a\x05axos:\x01i\x03is:\x16,\n  options=df.columns\x05\n\nthe\x02do\tdose+resp\x05_repo\x16dose_response_eq = the\x03the\x03the\nw_select()\x04\n  \n\x02\n\n\x01o\x02do\x02do\x1cdose_response_eq_options = ]\x02[]\x04\n  \n\x02\"\"\x03log\x02lo#log(inhibitor) vs. response (thjree\x05\n  \"\"\x08log(inhi#(inhibitor) vs. normalized response\x06,\n  \"\"\x13log(inhibitor) cs. * vs. normalized response -- Variable slope\x06,\n  \"\"#[Inhibitor] vs. normalized response\x06,\n  \"\"([Inhibitor] vs. normalized response (Var\x05-- Va\xb2\x06# Select a dataframe\n\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\ndf = globals().get(selected_df_name.value, None)\n\nprint(df)\n\ndose_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ndose_response_eq_options = [\n  \"log(inhibitor) vs. normalized response\",\n  \"log(inhibitor) vs. normalized response -- Variable slope\",\n  \"[Inhibitor] vs. normalized response\",\n  \"[Inhibitor] vs. normalized response -- V\"\n]\n\ndose_response_eq = w_select(\n  \n)\x06riable\x0f Variable slope\x0b\n  label=\"\"\nSelect th \x01e\x0cthe type of \x06Selec *t the type of dose response curve fitting \x03Cdh\nChoose the\x02cu\nthe curve \x1bthe curve fitting equation.\x11,\n  options=dose_\x18dose_response_eq_options\x01:\x05\n\nthe\x02uf\x02if\x02if\x03if \x03mat\x04=mat\x01m\x02if\x02if\x01f\x02if\x11if dose_response_\x02  \x10dose_response_eq\x03.va\x06value \x0bvalue == \"\"\x01\"(\"log(inhibitor) vs. normalized response\",\"log(inhibitor) vs. normalized response\":\n  \x05\n\nthe\x1fselected_dose_response_eq = the\x16dose_response_eq.value\x03mat\x02ma\x0bmatch selec\x1dselected_dose_response_eq:\n  \x04\ncas\x06  case6\n  case \"log(inhibitor) vs. normalized response\":\n    \x02\n\n\xf8\x01# Define the one-phase exponential decay function (https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_exponential_decay_1phase.htm)\ndef one_phase_exponential_decay(x, Y0, Plateau, k):\n    return (Y0 - Plateau) * np.exp(-k * x) + Plateau\x02\n\n$from scipy.optimize import curve_fit\x05\n\nthe\x03dos\x02do\x03deo\x05dose-\x03_re\x05\n\nfur\x03cur\x03cur\x02ve\x0frve_fitting_the\x0coptions = {}\x04\n  \n*\"log(inhibitor) vs. normalized response\": \x03def\x03def\x02de\x03def\x03def+def log_inhibitor_vs_normalized_response*()\x02()\x18Y=100/(1+10^(X-LogIC50))\x01\na\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Euq\x18Y=100/(1+10^(X-LogIC50))\x06x, the\x05y, oc\x0bIC50):\n  re\x02re\x02re\x07return \x02re\x0freturn 100 / ()\x051 + 2\x0210\'\n  return 100 / (1 + 10**(X - LogIC50))\x01x\x07LogIC50\x03\n  \x04\nthe\x03def\x02de\x02de\x02de\x01d\x03\n  \x04\ndef\x03def5def log_inhibitor_vs_normalized_response(x, LogIC50):\t_variable\x05\n  re\x02re\x02re\x07return 5\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\x03, v\tHillSlopeb\nhttps://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\x02##b https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\x03\n  \x04\ndef\x04deef\x03def\x03def\x1bdef inhibitor_vs_normalized$log_inhibitor_vs_normalized_response\x02()\x07x, IC50\x18:\n  100 / (1 + X / IC50)\x07return \x03\n  \x01\n[\nhttps://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\x02# \x01\n\x95\x01# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable()\x12x, IC50, HillSlope\x04:\n  \xed\x01\n\ndose_response_eq_options = [\n  \"log(inhibitor) vs. normalized response\",\n  \"log(inhibitor) vs. normalized response -- Variable slope\",\n  \"[Inhibitor] vs. normalized response\",\n  \"[Inhibitor] vs. normalized response -- Variable slope\"\n]\x01\n\x18dose_response_eq_options\xfa\x01\n# Define the one-phase exponential decay function (https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_exponential_decay_1phase.htm)\ndef one_phase_exponential_decay(x, Y0, Plateau, k):\n    return (Y0 - Plateau) * np.exp(-k * x) + Plateau\n\x19selected_dose_response_eqQmatch selected_dose_response_eq:\n  case \"log(inhibitor) vs. normalized response\":\x02re\x05retur\x01X\x01\n\x04dose\x03dso\x02  \x01d\x03dos\x01[\x01]\x01}\x02: \x03euq\x01e\x03the\x03the\x03the\x01]\x05uqati\x02if\x02if\x01)\x02  \x03df_\x03the\x02if\x02if\x02if\x02if\x02if\x06select\x01.\x06.value\x08not None\x01)y# Markdown Example\n\nSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$\n\n$$\n\\Delta \x04\n$$\nx# Markdown Example\n\nSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$F$$\n\\Delta {Cq}_{target} = {Cq}_{{target}} - {Cq}_{{housekeeping}}\n$$\n\n\x02- 7{Cq}_{target} = {Cq}_{{target}} - {Cq}_{{housekeeping}}Sw_text_output(content=\"You data has been merged and we have renamed the columns to ;a standard naming scheme. Inspect the data below to ensure \x0call your val\x1bues and columns are present\x01.\x03\")\n\x02\n\n\x01\n\x14renamed_df = main_df\x01\n\x0c\n# TO DO FIX\x01\n\x02# \nrenamed_df\x01[\t\"oligo#s\"\x04] = \nrenamed_df\x01[\t\"oligo#s\"\x0e].str.strip()\n\x01\n\x01\n\x01\n\\if None not in [well_column.value, cq_column.value, sample_column.value, target_column.value\x02]:\x01\n%\n  if bio_replicates.value is False:\n\x02  \x1f  main_df[\"Bio Replicate\"] = 1\n\x02  \"  bio_rep_column = \"Bio Replicate\"\x03\n  \x04else\x01:\x01\n\x02  \x02  \x11bio_rep_column = \x13bio_rep_column\n    \x01\n\x11  if dosage_info:\x01\n\x02  \x02  \nrenamed_df\x8d\x01 = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\",\x01 \x1fdosage_column.value: \"Dosage\", !bio_rep_column: \"Bio Replicate\"})\x03\n  \xa1\x01else:\n    renamed_df = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\",\" bio_rep_column: \"Bio Replicate\"})\x01\n\x01\n\x01\n\x02# \rsample_column\t.value = \x01\'\nCondition\'\x01\n\x01\n\x02\n\n^cols = df.select_dtypes([\'object\']).columns\ndf[cols] = df[cols].apply(lambda x: x.str.strip())_cols = df.select_dtypes([\'object\']).columns\ndf[cols] = df[cols].apply(lambda x: x.str.strip())\n\nrenamed_df\nrenamed_df\nrenamed_df\x04cols\x07oligo#s\x04cols\x01\"\x01\"\x07oligo#s,df = df.replace(r\"^ +| +$\", r\"\", regex=True)\nrenamed_df\trawlossDF\x14\'damage_description\'\trawlossDF\x14\'damage_description\'\x02\n\n\x02\"\"\x05\"\"\"\"\"\x02\n\n\x17## Run me to merge data\x07if None\x10, bio_rep_column\x0bwell_column\x07print()\x13sample_column.value\x01s\x04.set\x06.value\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x88\x01w_text_output(\"We have merged all your data and have renamed your columns. Inspect the table below to ensure all your data is present.\")\x08content=Idf = df.rename(columns={\'oldName1\': \'newName1\', \'oldName2\': \'newName2\'})\n\x07main_df\x07main_df\x0bwell_columm\x07n.value\x04Well\x01a\x06Target\x02\'\'\x01\'\x14 target_column.value\x04, \'\'\x16sample_column.value = \x03: C\x02\'\'\x01\'\tCondition\x16, cq_column.value = \"\"\x02Cq\x1a, dosage_column.value = \"\"\x06Dosage\x05, bio\xbb\x01main_df = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value = \"Cq\", dosage_column.value = \"Dosage\", bi})\n\x02_r\x0bo_replicate\x12bio_rep_column: \"\"\rBio Replicate\x01:\x01:\x02\n\n\x0fw_text_output()\ncontent=\"\"\x07We have\x0eYou data has e0been merged and we have renamed the columns to a\x07main_df\x1f dosage_column.value: \"Dosage\",\n standard \x11everything looks \x0boks correct\x03yes\ncleaned_df\x07main_df\x0fif dosage_info:\"    dosage_column.value: \"Dosage\",\x1f dosage_column.value: \"Dosage\",\x01\n\x1dbio_replicates.value is True:\x03if \x05False\x03\n  ?main_df[\"Bio Replicate\"] = 1\n  bio_rep_column = \"Bio Replicate\"\x02  \x03\n  \x02  \x02  \x02\n\n\x07w_text_\x07output(\x07content\x02=\"\x1dInspect the plot below to see\x1b the Cq value across wells.\x01\"\x01)\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x05putpu\x06output\x01\"\x01t\x01\nKif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n\x02  \x1dw_text_output(content=f\"Now, Owe just subtract the housekeeping gene from the target to get the _Ct column.\")\x01\n\x03\n  \x18w_text_output(content=f\"%You can view a merged table with all \x16non-housekeeping gene \x08targets ,by checking out the delta_ct_df table below.\x02\")h\n  \n  delta_ct_df = cleaned_df\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = cleaned_df.drop(\x01\"\x04Well\x01\"\', axis=1)\n\n  targets = list(cleaned_df[\x01\"\x06Target\x01\"\x84\x01].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct\x06_table\x02_2&\'\n    data = delta_ct_df[(delta_ct_df[\x01\"\x06Target\x01\"\x1c] == target) | (delta_ct_df[\x01\"\x06Target\x01\"\x01]\x17 == housekeeping_gene)].\n    data = data[data[\"Cq\"] != \"Undetermined\"]Z\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\x01\"\x06Target\x01\"\x02, \x01\"\x02Cq\x01\"\x13])],\n      columns=\x01\"\x06Target\x01\"\x0f,\n      values=\x01\"\x02Cq\x01\"\xba\x01\n    ).reset_index()\n    data[\'_Ct\'] = data[target] - data[housekeeping_gene]\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\x01\"\x02Cq\x01\"\x1e] = data_T[target]\n    data_T[\x01\"\x06Target\x01\"\xe7\x01] = target\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n\n\x01 \x012\x01\n\rdelta_ct_df= \x0edelta_ct_df= \n\x01 \ncleaned_df\x012\x03\n  \x03\n  \xa7\x01  w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {list(_ct_df.keys())}\")\x18Now, you will see a _ct \x02  \x15you will see a _ct \")\x11well_column.value\x13target_column.value\x012\x13target_column.value\x14target_column.value]\x13target_column.value\x0fcq_column.value\x13target_column.value\x0fcq_column.value\x0fcq_column.value\x13target_column.value\x02# \x02# \x02  \x01 RNow, we just subtract the housekeeping gene from the target to get the _Ct column.\tin the da\rby selecting \x07in the \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xdb\r\n\n\nif housekeeping_gene is not None:\n  w_text_output(content=\"We are now going to calculate Delta Ct by grouping our technical replicates and subtracting the Cq values of the housekeeping gene from our that of the target genes.\")\n  w_text_output(content=\"If you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\")\n  delta_ct_group = w_select(label=\"To calculate Delta Ct, group technical replicates:\", options=[\"Well\", \"Sample\"])\n\nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  delta_ct_df = cleaned_df\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = cleaned_df.drop(well_column.value, axis=1)\n\n  targets = list(cleaned_df[target_column.value].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct\'\n    data = delta_ct_df[(delta_ct_df[target_column.value] == target) | (delta_ct_df[target_column.value] == housekeeping_gene)]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([target_column.value, cq_column.value])],\n      columns=target_column.value,\n      values=cq_column.value\n    ).reset_index()\n    # data[\'_Ct\'] = data[target] - data[housekeeping_gene]\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[cq_column.value] = data_T[target]\n    data_T[target_column.value] = target\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xeb\x8a\x01from lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport numpy as np\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\nfrom latch.ldata.path import LPath\nimport os\nimport datetime\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncondition_column_value = None\nrun_name_signal = Signal(None)\noutdir_signal = Signal(None)\noutput_ready_signal = Signal(None)\n\nwell_col_signal = Signal(None)\ncq_col_signal = Signal(None)\ntarget_col_signal = Signal(None)\nhk_signal = Signal(None)\ntreat_col_signal = Signal(None)\ncontrol_signal = Signal(None)\ngroup_col_signal = Signal(None)\n\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\nTo start, either import your own qPCR data or check the **Use Test Data** box to use a test dataset.\n\nFor uploading your own data, please provide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\ndef demo_dataset():\n  demo_latch_path = LPath(\"latch:///qPCR_Demo/output.csv\")\n\n  try:\n    a = demo_latch_path.size()\n    print(a)\n\n  except:\n    local_dir = \"/root/qPCR_Demo/output.csv\"\n    os.system(\n        f\"/opt/mamba/envs/plots-faas/bin/aws s3 cp s3://latch-public/test-data/22353/output.csv {local_dir}\"\n    )\n\n    demo_latch_path.upload_from(local_dir)\n\n    print(\"Downloaded\")\n\ndef find_best_match(columns, search_str):\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n\ndef create_comparison_table(groups, control, experiment):\n    # data = {\'Group\': groups, \'Example Comparison\': [f\"{group} vs. {control} (CONTROL)\" for group in groups]}\n    # df = pd.DataFrame(data)\n    # return df.to_markdown(index=False)\n    if experiment is None:\n      header = \"| Group   | Example Comparison        |\\n|:--------|:--------------------------|\\n\"\n      rows = [f\"| {group}     | {group} vs. {control} (CONTROL)     |\\n\" for group in groups]\n    else:\n      experimental_condition_str = \", \".join(experiment)\n      sample_experiment = experiment[0]\n      header = \"| Group   | Experimental Condition        | Example Comparison                      |\\n|:--------|:-------------------|:----------------------------------------|\\n\"\n      rows = [f\"| {group}     | {experimental_condition_str}     | {group} {sample_experiment} vs. {group} {control} (CONTROL)     |\\n\" for group in groups]  \n    return header + \'\'.join(rows)\n\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n\ndef import_data(use_test_data):\n  demo_dataset()\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n\n  if use_test_data.value is True:\n    well_def = \"latch:///qPCR_Demo/output.csv\"\n  else:\n    well_def = None\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    default=well_def,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n\n  if use_test_data.value is True:\n    well_col_def = \"Well Position\"\n  else:\n    well_col_def = None\n  well_column = w_select(\n    label=\"Well column\", \n    required=imported_qpcr_data is not None,\n    options=well_opt,\n    default=well_col_def,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # Add error checking for the Well column to make sure it includes A1, A2, A3\n  if imported_qpcr_data is not None and well_column.value is not None:\n    well_col_signal(well_column.value)\n    if not \"A1\" in list(imported_qpcr_data[well_column.value]):\n      w_text_output(\n        content=\"The column you selected doesn\'t contain well IDs (e.g. A1).\",\n        appearance={\n          \"message_box\": \"warning\",\n        }\n      )\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    readonly=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nuse_test_data = w_checkbox(label=\"Use test data\", default=False)\n\nimported_data, current_columns, sheets_added, well_column = import_data(use_test_data)\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required to calculate \xe2\x88\x86Cq, \xe2\x88\x86\xe2\x88\x86Cq, and fold change.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Cq column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  default=find_best_match(qpcr_data.columns, \"Cq\") if qpcr_data is not None else None,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\n  cq_col_signal(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Target column\", \n  default=find_best_match(qpcr_data.columns, \"Target\") if qpcr_data is not None else None,\n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  target_col_signal(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nif use_test_data.value is True:\n  hk_def = [\"B2M\"]\nelse:\n  hk_def = None\nhousekeeping_gene = w_multi_select(\nlabel=\"Housekeeping gene(s)\", \noptions=housekeeping_options,\nreadonly=not prev_completed,\nrequired=prev_completed,\ndefault=hk_def,\nappearance={\n  \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nif housekeeping_gene.value is not None:\n  hk_signal(housekeeping_gene.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\nif use_test_data.value is True:\n  cond_def = \"dose_name\"\nelse:\n  cond_def = None\ncondition_column = w_select(\n  label=\"Experimental condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  default=cond_def,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the control condition for calculating \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt.\"\n    \"\"\"\n  },\n)\n\nif condition_column.value is None:\n  control_val = w_select(\n    label=\"Control condition\",\n    appearance={\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    },\n    readonly=True,\n    options=[],\n  )\nelse:\n  treat_col_signal(condition_column.value)\n  qpcr_data = qpcr_data[~pd.isna(qpcr_data[condition_column.value])]\n  if use_test_data.value is True:\n    control_def = \"DMSO\"\n  else:\n    control_def = None\n  control_val = w_select(\n    label=\"Control condition\", \n    options=qpcr_data[condition_column.value].unique(),\n    default =control_def,\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\",\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    }\n    )\n  \ngroup_column = None\nif use_test_data.value is True:\n  group_def = True\nelse:\n  group_def = False\n\ngrouping_checkbox = w_checkbox(label=\"Add optional Group column\", default=group_def)\nif grouping_checkbox.value is True:\n  if use_test_data.value is True:\n    group_col_def = \"drug_name\"\n  else:\n    group_col_def = None\n  \n  group_column = w_select(\n    label=\"Group column\", \n    options=column_opts,\n    required=prev_completed,\n    readonly=not prev_completed,\n    default=group_col_def,\n    appearance={\n      \"placeholder\": column_select_placeholder,\n      # \"description\": \"\"\"\n      # A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n      # \"\"\"\n    },\n  ).value\n\n  if group_column is not None:\n    current_columns.append(group_column)\n    group_col_signal(group_column)\nelse:\n  if condition_column.value is not None:\n    current_columns.append(condition_column.value)\n    group_column = condition_column.value\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nw_text_output(content=\"\"\"\n## Output Results\nSelect a directory to save your outputs to\n\"\"\")\n\n\nrun_name = w_text_input(label=\"Run Name:\", appearance={\n      \"placeholder\": \"Add a run name...\",\n    }, default=None)\noutput_dir = w_ldata_picker(\n  label=\"Select output directory\", \n  required=True,\n  default=\"latch:///qpcr_outputs/\"\n)\n\nif run_name.value is not None:\n  run_name_signal(run_name.value)\nif output_dir.value is not None:\n  outdir_signal(output_dir.value)\n\noutput_ready = w_checkbox(label=f\"Check if output folder looks correct: \\n {output_dir.value.path}{run_name.value}\", default=False)\noutput_ready_signal(output_ready.value)\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, group_column, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, group_column]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, group_column, target_column.value]:\n  condition_column_value = condition_column.value\n  if condition_column_value is not None:\n    final_columns.append(condition_column_value)\n  qpcr_data = qpcr_data[list(set(final_columns))]\n  \n  if \x10condition_column\xa6\x02.value is not None:\n      w_text_output(content=f\"\"\"\n  ### Preview Study Design\n  Inspect the table below to see if groupings make sense.\n        \"\"\")\n      ###################\n      # Create table preview:\n      if grouping_checkbox.value is True:\n        group_values = qpcr_data[group_column\xb5\x07].unique()\n        experimental_values = qpcr_data[condition_column_value].unique()\n        markdown_table = create_comparison_table(group_values, control_val.value, experimental_values)\n      elif condition_column_value is not None:\n        group_values = qpcr_data[condition_column_value].unique()\n        markdown_table = create_comparison_table(group_values, control_val.value, None)\n      else:\n        markdown_table = None\n      if markdown_table is not None:\n        w_text_output(content=f\"\"\"\n  {markdown_table}\n        \"\"\")\n\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\nqpcr_data_signal(qpcr_data)\nqpcr_data_plotting = qpcr_data.rename(columns={well_column.value: \'Well\', cq_column.value: \'Cq\', target_column.value: \'Target\'})\n\n\n\n\n\n9qpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\x05\ntry:\x02  \x02  \x02  \x02  \x02  \x02  \x0fexcept:\n  print\x019\x01(\x01)\x01\"\x01\"\x01\"\x10Skipping for now\x03\n  8qpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\x04cont\x14control_column.value\x02# \x02# \x02# \x02# \x02# \x02# \x03202\x042024\nnow.time()\x17datetime.datetime.now()\x03str\x01*\x01(\x01)\x06now = \x13dt = datetime.now()\x01\nTprint(\"Original datetime:\", dt)\n\n# set seconds and microseconds to zero\ndt_truncated\x03 = \x02dt\t.replace(\nsecond=0, \x0emicrosecond=0)\x17datetime.datetime.now()\x03now\x03now\x03now\x87\x01max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n    print(\"File path with the highest number:\", max_file_path)\x02  \x01(\x05, the\x02, \x04True\x11download_file_if \x0b_not_exists\x02re\rremote_path, :\n  file_name = well_result_lpath.value.path.split(\"/\")[-1]\x07remote_\x0bremote_path\x02  \x08max_file\rmax_file_path\x0eremote_path.do\ndownload()\x01)\x13well_result_file = \x19\n# Download file if non e\x08e exists\x08download\x1ddownload_file_if_not_exists()\x17well_result_lpath.value\x11well_result_lpath\x01h\x01;\x01l\x01l\xd0\x04def download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n    \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        print(\"Files found:\")\n        for file_path in matching_files:\n            print(file_path)\n        return max_file_path\n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_path.download()\x04down\x08download\x1cdownload_file_if_not_exists(\x01)\x01l\x03\n  \x06\n  # a\x1dAdd error checking for the we\x06WEll c\rell column\n  \x03\n  \x03\n  \x03\n  \x03\n  \x04 ro -to make sure it includes A1, A2, A3\n  print()\x02qp\x0bqpcr_data[]\x01]\x04if q\x08imported*imported_qpcr_data is not None:\n    print)\x02()\x06import\x14imported_qpcr_data[]\x01]\x02\"\"\x01\"\x04well\x10well_column.vaue\x03lue\x05\n    \x92\x01else:\n  if housekeeping_gene.value is None:\n  housekeeping_gene._state[\"appearance\"] = {\"error_text\": f\"* Required - {housekeeping_placeholder}\"}\n\x0fdelta_ct_option\x0fdelta_ct_option\x02\"\"\x8b\x01\nif housekeeping_gene.value is None:\n  housekeeping_gene._state[\"appearance\"] = {\"error_text\": f\"* Required - {housekeeping_placeholder}\"}\n\rsample_column\rsample_column\xb3\x01, \"placeholder\": column_select_placeholder,\n    \"help_text\": \"This is the highest level condition that you have split your samples. \\\n    It is likely a drug or condition column.\"\x1f, \"error_text\": f\"* Required\", \x8a\x04try:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_multi_select(\n  label=\"Housekeeping gene(s)\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nif housekeeping_gene.value is not None:\n  hk_signal(housekeeping_gene.value)\xb0\x07\n\ndef create_comparison_table(groups, control, experiment):\n    # data = {\'Group\': groups, \'Example Comparison\': [f\"{group} vs. {control} (CONTROL)\" for group in groups]}\n    # df = pd.DataFrame(data)\n    # return df.to_markdown(index=False)\n    if experiment is None:\n      header = \"| Group   | Example Comparison        |\\n|:--------|:--------------------------|\\n\"\n      rows = [f\"| {group}     | {group} vs. {control} (CONTROL)     |\\n\" for group in groups]\n    else:\n      experimental_condition_str = \", \".join(experiment)\n      sample_experiment = experiment[0]\n      header = \"| Group   | Experimental Condition        | Example Comparison                      |\\n|:--------|:-------------------|:----------------------------------------|\\n\"\n      rows = [f\"| {group}     | {experimental_condition_str}     | {group} {sample_experiment} vs. {group} {control} (CONTROL)     |\\n\" for group in groups]  \n    return header + \'\'.join(rows)\nu\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\x02# \x05\n    \trequired-\x02d+\x04=rue\x05True,\x02# \x02# \x02# \x13\n    required=True,\x01#\x0b\n    priont\x04nt()\x02\'\'\x05hello\x02\"\"\tPlease fe\x06ill ut\x0e out the value\x07\n    eq\x08reqired=\x0erequired=True,\x02# \x02# \x02# \x11\n  required=True,\x0f\n  required-Tru\x06=TRue,\x04rue,\x11\n  required=True,\x08Select t\x02Se\x06Select\nSelect the\x1fSelect the group column (e.g. t\xe6jfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    required=True,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    well_plate_metadata_lpath._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select the group column (e.g. \", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"help_text\": \"This is the highest level condition that you have split your samples. \\\n    It is likely a drug or condition column.\"\n  },\n)\nif sample_column.value is None:\n  sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n    \"error_text\": f\"* Required\"}\n\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Select control condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"help_text\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation. \\\n    It might be the same column as the sample condition column selected above.\"\n  },\n)\n\nif control_column.value is None:\n  control_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n    \"error_text\": f\"* Required\"}\n  control_val = w_select(\n    label=\"Select control condition\", \n    readonly=True,\n    options=[],\n    appearance={\n      \"placeholder\": \"Select control column first\xe2\x80\xa6\",\n        \"error_text\": \"* Required\"\n    }\n\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x04isse\x01:\x0c\n  required-\x06=True,\x0bdescription\x0bdescription\x0c\n  required-\x06=True,\x11\n  required=True,\x07print()\x02\'\'\x05helloCdelta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\nSelect the\x03the\x16the column that specir\x14fies your experiment\x01S)Select the experimental condition column:\x07\n    eq\x02rq\x08equired-\x06=TRue,\x04rue,\x01S0elect the condition for your endogenous control:\x19Select the control condti\x06ition:\x0f for \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\x01 \x0ccalculation:\xa6ifrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    required=True,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    well_plate_metadata_lpath._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select the group column:\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"This is the highest level condition that you have split your samples. \\\n    It is likely a drug or condition column.\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Select the experimental condition column:\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation. \\\n    It might be the same column as the sample condition column selected above.\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select the control condition for \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"calculation:,  \n    readonly=True,\n    options=[],\n    appearance={\n      \"placeholder\": \"Select control column first\xe2\x80\xa6\",\n        \"error_text\": \"Required\"\n    }\n\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x01 \x01\"\x05\n    \x0erequired=True,\x02# \x0c\n    print()\x02\"\" No well plate metadata provided.\x0b\"If you the\x04Thr \x1fe group variable is defined the\x07as the jWithin a group variable, you may have several experimental conditions you want to compare between per grup%oup. For example, you may have a \"Sit\x02\'\'\x06Tissue\x01\"\x06 froupBgroup and multiple drug experimental conditions under that group. \x0bdescription\x0ecolumn should \x0btarget and \x02s.\x01t\x02he\x0b\n    appear\x0b\n    appear\rappearance={}\x0c\n      \n    \x02\"\"\x0bplaceholder\x04: \"\"\x01\"\x02Se\x02Se\x03the\x0bdescription\x15The control condition\x04Exam\xcdifrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    required=True,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select the group column:\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"Within a group variable, you may have several experimental conditions you want to compare between per group. For example, you may have a \'Tissue\' group and multiple drug experimental conditions under that group.\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Select the experimental condition column:\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation. \\\n    It might be the same column as the sample condition column selected above.\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select the control condition for \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation:\",  \n    readonly=True,\n    options=[],\n    appearance={\n      \"description\": \"Exa\"\n    }\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x04ple:\nExamples: \x07This wo>This is the actual control condition that you want to compute \x0eThis specifies\x02\n\n\x07# Exapl\x1cplain experimental design\nw_\x07\nw_text\x0fw_text_output()\x04\n  \n\ncontent=\"\"\x01\"vAnalysis may be grouped by one of the condition variables. Samples will only be compared to samples in the same group.\x02\"\"\x05\"\"\"\"\"\x06\n  \n  yAnalysis may be grouped by one of the condition variables. Samples will only be compared to samples in the same group.\n  \x93\x03\n  For example, an experiment may be repeated for multiple tissues using the same treatments. In that case, the Group variable should be set to \"Tissue\" and the Condition variable to \"Treatment\".\nThe resulting analysis would compare treatments but only when they are applied to the same tissue. If the Group variable was not set, the differences between the tissues themselves would confound the result.\x02  \x02\"\"\x01\"\x05\n    \x02\"\"\x05\"\"\"\"\"\n\n    \n    \x05hello\xdc\x04A \"group\" variable is a categorical variable used to organize data into distinct subsets and ensures that fold change and percent relative expression are calculated against a control within that subset. For example, an experiment may be repeated for multiple tissues using the same treatments. In that case, the Group variable should be set to \"Tissue\" and the Condition variable to \"Treatment\". The resulting analysis would compare treatments but only when they are applied to the same tissue. If the Group variable was not set, the differences between the tissues themselves would confound the result.\n\x8d\x03A \"group variable\" is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\x02**\x02**\x01\"\x04Expe\x15This is the condition\nThe column/The experimental condition variable stores condBthe conditions that you want to compare between samples, such as \"\x03\"\"\"\x02\"\"\x05\"\"\"\"\"\n\n    \n    kThe experimental condition variable stores the conditions that you want to compare between samples, such as\x01 \x0c\"Treatment\" \x0e, \"Untreated\" \x05, :NT\x03\"NT\x01:\x03\"ve\x08Vehicle\"\x01,\x07\", etc.\xf5jfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    required=True,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select the group column:\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Select the experimental condition column:\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the conditions that you want to compare between samples, such a s\"Treatment\", \"Untreated\", \"Vehicle\", etc.\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select the control condition for \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation:\",  \n    readonly=True,\n    options=[],\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x05\n    \x95\x01well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n      era\x0ereadonly=True,\x01\n\x03w_t\x0fw_text_output()\x08label=\"\"\x02hh\x01i\x07content\x1aStart here by importing yo\x13the machine output \x03fin\x0ele from your p\x1aqPCR machine. It must be o#a CSV or an Excel (.xlsx) document.\x07\n\n\n\n\n\n\n\x07\n      \x04\nif \x02  \x02  \x02\n\n\x01 \x02# \x02# \x02# \x02# \xa6\x02\n  # if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\xa4\x02# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\nf\n    if well_column.value is None:\n    well_column._state[\"appearance\"] = {\"error_text\": \"* Required\"}\",\n      \"error_text\": \"* Required\"\x02  \x02na\x03nae\x04name\x04path\x07\nfrom p\x06.split\x02()\x01)\x02\"\"\x01/\x02[]\x02-1\x01]\x02\n\n\x03teh\x07\n# Chec\x01k\x06ck the\nif file as\x02if\x0cif file has \x03has\x04has \x05has d\x14been downloaded \ndef\x03def\x02df\x17def check_file_exists()\x06_local\x17def check_file_exists()\x01)\x04tghe\x10remote_path, the\x07:\n  the\x01t\x02he\x03the\x03the\x1dfile_name = remote_path.value\x06.splut\x02it\x08\n  # the\x0fremote_path is \x01l\x08a Latch \x0fch path strinmg\x01g\x02is\x0bis an LPath\x12file_name = remote\x17remote_path.path.spliot\x03t()\x01)\x02\"\"\x01\"\x01/\x02[]\x02-1\x04]\n  \x03\nfi\xf0(import pandas as pd\nimport os\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n# Import Data\n## Import qPCR Readout File\n\nStart here by importing the output file from your qPCR machine. This file often contains columns such as _Cq_, _Target_, _Well_.\n\n\"\"\")\n\nimported_data = pd.DataFrame()\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (.csv, .xlsx)\")\n\n# Check if file is present\nif well_result_lpath.value is None:\n  exit(0)\n\n# Check if file has been downloaded \ndef check_file_exists(remote_path):\n  # remote_path is an LPath\n  file_name = remote_path.path.split(\"/\")[-1]\n  \n\nf\nwell_result_file = well_result_lpath.value.download()\n\nprint(well_result_lpath.value.path.split(\"/\")[-1])\nprint(well_result_file.name)\nprint(well_result_file)\nprint(os.getcwd())\n\n# Check if file is an excel file\nif \".xlsx\" in str(well_result_file):\n  imported_data = pd.ExcelFile(str(well_result_file))    \n  selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_data.sheet_names).value\n  # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n  skiprows = 24\n  if skiprows is not None and selected_sheet is not None:\n    imported_data = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n# File is a CSV\nelse:\n  imported_data = pd.read_csv(well_result_file)\n\ncq_opt = imported_data.keys() if imported_data is not None else [\"Please select a file first\"]\n\n# Set column values\ncq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\nwell_column = w_select(label=\"Select well column (e.g. A1)\", options=cq_opt)\n\nif (cq_column.value is not None) and (well_column.value is not None):\n  w_text_output(content=\"Machine data imported successfully.\")\n  current_columns = [cq_column.value, well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\nsheets_added = []\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Use Metadata Template\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\nuse_metadata = w_checkbox(label=\"Use metadata template file\", default=False)\n\nif use_metadata.value is False:\n  exit(0)\n\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\nif (well_plate_metadata_lpath.value is not None):\n  if well_plate_metadata_lpath.value != \"\":\n    use_metadata_sheet = True\n    well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  imported_data = imported_data[imported_data[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    imported_data[col_name] = pd.to_numeric(imported_data[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\nfor sheet_name, df in well_plate_metadata_df.items():\n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_data[sheet_name] = imported_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\nif len(sheets_added) > 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\")\nif len(sheets_added) == 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets\")\n\n\n\n\n\n\n\x03le_\x04file\x0cfile_name = \x01\n\x13current_columns the\x02- \x04= []\x01]\x01\n\x14current_columns = []\x12\nsheets_added = []\x01\nE\n######################\n# Machine Data Sheet #\n######################\x06Set de\x06defult\x03aul6empty defaults for current columns and sheets selected>\n# Set empty defaults for current columns and sheets selected \x02is\x06is not\x01\n\x02\n\n!if well_result_lpath.value None:\n\x03not\x04not \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01 \x02is\\\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (CSV or Excel Sheet)\")\n\nuse sP\nremove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=True).value\x12use_metadata_sheet\x12Use separate plate\x0f metadata sheet\x05False\x02\n\n\x16if use_metadata_sheet:\x03\n  \x02  Hwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\n\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x9b\x05\n\nif well_result_lpath.value is not None:\n    well_result_file = well_result_lpath.value.download()\n    if is_xlsx(well_result_file):\n      well_result_dtype = \"excel\"\n      well_result_df = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=xls.sheet_names, default=\"Results\").value\n      skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      qpcr_data = pd.read_excel(str(excel_file), sheet_name=selected_sheet, skiprows=int(skiprows))  \n    else:\n      well_result_dtype = \"csv\"\n      well_result_df = pd.read_csv(well_result_file)\x0c\n# Read well\x0bqPCR Result\x04str(\x01)\x03\n  \x02  \x1d# Check if it\'s an excel file\x01f\x01 \x01 \x03\n  \x05\nqpcr\nqpcr_data=\x05 = qp\x0bqpcr_data[]\x04qpcr\x0bqpcr_data[]\x02\'\'\x02Cq\x06 != \"\"\x0cUndetermined\xc3\x03\n\ndef demo_dataset():\n    demo_latch_path = LPath(\"latch:///Pathway_Enrichment/human_pe_demo\")\n\n    try:\n        a = demo_latch_path.size()\n        print(a)\n\n    except:\n        local_dir = Path(\"/root/human_pe_demo\")\n        os.system(\n            f\"/opt/mamba/envs/plots-faas/bin/aws s3 cp --recursive s3://latch-public/test-data/18440/human_pe_demo {local_dir}\"\n        )\n\n        demo_latch_path.upload_from(local_dir)\n\n        print(\"Downloaded\")\tqPCR_Demo\tqpcr_demo\x01#\x01#\x01,\x01 \x0f, appearance={}\x04\n  \n\x02\"\"\x02et\x06detail\x04: \"\"\r(.csv, .xlsx)\x02//\x02# \x04well\x08well_opt\x01 \n, appearea\x07ance={}\x04\n  \n\x03\n  \x03\n  \x03\n  \x01\n\x02  \x02  \x02\"\"\x02we\x01x\x04dtai\x05etail\x04: \"\"\t(e.x. A1)\x06\n    p\x02\"\"\x05plach\x07eholder\x04: \"\"\x06\n\nwell\x19well_opt_placeholder = \"\"\x0eSelect a colu,\x02,n\x05mn\xe2\x80\xa6% if imported_data is not None else \"\"\nProvide a \x11a readout file\xe2\x80\xa6\x01\n\x14well_opt_placeholder\x01,\x02# \x04None\x02# \x08\n  ready\x06only =\x02= \x15imported_data == null\x04None\x01=\x01,\x0eProvide your m@Start here by importing the output file from your qPCR machine. \rProvide your \x04 rad\x01e\x04ead \x03tou\x08out fileO\n\nuse_metadata = w_checkbox(label=\"Use metadata template file\", default=False)\n\t for expe\x02er\x13perimental metadata\x06\nif ()\x0cuse_metadata\x01!\x01 )if use_metadata.value is False:\n  exit(0)\x01t\to provide+https://www.youtube.com/watch?v=9zrvD-o8cII\x01Y\x07ou can \x8d\x01If you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \nIf you\'re \x03r a\x05qPCR *machine readout file doesn\'t contain exper\x01i\x08riement \x03al \x19experimental metadata you\x04you \x10 provide it ousi\x03youJusing a Excel template [here](https://www.youtube.com/watch?v=9zrvD-o8cII)\x01[\x01T\x02. \tDownload \x04can \x01,\x04 app\x03\n  \x03\n  \x01\n\x0bearance= {}\x02{}\x08\n    \n  \x02\"\"\x06detail\x04: \"\"\x02(x\x03.xs\x03lsx\x02xs\x03sx)\x01\n\x01]\x02an\x05 file\x0f Excel Template\x01 0 [](https://www.youtube.com/watch?v=9zrvD-o8cII)\x10Download Temlate\x04\xe2\x86\x93 \x01p\x05 \xe2\x86\x93 \x04\xf0\x9f\x93\x84\x01 \x8c.import pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\n# Set empty defaults for current columns and sheets selected \ncurrent_columns = []\nsheets_added = []\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n## Import Data\n### Import qPCR Readout File\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\")\n\n# Create imported data DF\n# imported_data = None\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output\", appearance={\n  \"detail\": \"(.csv, .xlsx)\"\n})\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n    \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\nif well_result_lpath.value is not None:\n\n  well_result_file = download_file_if_not_exists(well_result_lpath.value)\n\n  # Check if file is an excel file\n  if \".xlsx\" in str(well_result_file):\n    imported_data = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_data.sheet_names).value\n    # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    skiprows = 24\n    if skiprows is not None and selected_sheet is not None:\n      imported_data = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n  # File is a CSV\n  else:\n    imported_data = pd.read_csv(well_result_file)\n\nwell_opt = imported_data.keys() if imported_data is not None else [\"Please select a file first\"]\n\n# Set column values\n# cq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\n\nwell_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n\nwell_column = w_select(\n  label=\"Select well column\", \n  options=well_opt,\n  readonly=imported_data == None,\n  appearance={\n    \"detail\": \"(e.x. A1)\",\n    \"placeholder\": well_opt_placeholder\n  }\n)\n\nif (cq_column.value is not None) and (well_column.value is not None):\n  w_text_output(content=\"Machine data imported successfully.\")\n  current_columns = [cq_column.value, well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nuse_metadata = w_checkbox(label=\"Use template file to provide experimental metadata\", default=False)\n\nif use_metadata.value is False:\n  exit(0)\n\nw_text_output(content=\"\"\"\nIf your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84D ownload Template \xe2\x86\x93](https://www.youtube.com/watch?v=9zrvD-o8cII)\n\"\"\")\n\nwell_plate_metadata_lpath = w_ldata_picker(\n  label=\"Well Plate Metadata\", \n  appearance={\n    \"detail\": \"(.xlsx)\"\n  }\n)\n\nif (well_plate_metadata_lpath.value is not None):\n  if well_plate_metadata_lpath.value != \"\":\n    use_metadata_sheet = True\n    well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  imported_data = imported_data[imported_data[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    imported_data[col_name] = pd.to_numeric(imported_data[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\nfor sheet_name, df in well_plate_metadata_df.items():\n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_data[sheet_name] = imported_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\n# Text to show if sheets are added\nif len(sheets_added) > 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\")\nif len(sheets_added) == 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets\")\n\n\n\n\n\n\n\x01 \x03\n  \x05\n    \x02\n\n\x03\n  \x05\n    \x03\n  \x07\n      \x03\n  \x03\n  \x01\n\x02  \x01\n\x07\n      \x05\n    \x90\x01\nThe experimental condition variable stores the conditions you want to compare between samples, such as \"Treatment,\" \"Untreated,\" and \"Vehicle.\"\x0cplace_holder\x05_text\x01_\x06detail\x1b\"detail\": \"(.csv, .xlsx)\", \x04, \"\"\x10placeholder_text\x04: \"\"\x10Select a file...A, \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder*\"placeholder\": column_select_placeholder, *\"placeholder\": column_select_placeholder, )\"placeholder\": housekeeping_placeholder, \x15\nimported_data = None\t\n        \t\n        \t\n        \x07\n      \xde\x01\nw_text_output(content=\"\"\"\nIf your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://www.youtube.com/watch?v=9zrvD-o8cII)\n\"\"\")\n\x11Control conditionr,\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\x03\n\n\n\r### Infer the\x04tjhe\x1cInfer of targets and house k\x10keeping genesare\x06 are t\nin the sme\x0bame well\n\'\'\x04\nqpc\rqpcr_data.Wel\x92nfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Well column\", \n    required=imported_qpcr_data is not None,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    readonly=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required to calculate \xe2\x88\x86Cq, \xe2\x88\x86\xe2\x88\x86Cq, and fold change.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Cq column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Target column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Housekeeping gene\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Group column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Experimental condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the conditions you want to compare between samples, such as \"Treatment,\" \"Untreated,\" and \"Vehicle.\"\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Control condition\",\n    appearance={\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    },\n    readonly=True,\n    options=[],\n  )\nelse:\n  control_val = w_select(\n    label=\"Control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\",\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\n\n### Infer of targets and housekeeping genes are in the same well\nqpcr_data.We\n\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x02ll\x04ll[]\x010*well_0_data = qpcr_data[qpcr_data.Well == \x02]]\x01\n\x0c.well_0_data\x10.Target.unique()\x01)\x04len(\x05) > 0\x011\x05\nopri\x07print()\x1bwell_0_data.Target.unique()\x06print(\x01)\x02\n\n\x03\nif\x02if\x03wel\x0btarget_and=\x1d_housekeeping_in_same_well = \x1ell_0_data.Target.unique()) > 1\x1ell_0_data.Target.unique()) > 1\x02# \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x83\x01# cq_column = w_select(label=\"Select the column from the qPCR Machine file that has the Cq values.\", options=well_result_df.keys())\x05\n    \xde\x03\n  # cq_column = w_select(label=\"Select the column from the qPCR Machine file that has the Cq values.\", options=well_result_df.keys())\n\n# well_column = w_select(label=\"Select the column from the qPCR Machine file that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n# if (cq_column.value is not None) and (well_column.value is not None):\n#   w_text_output(content=\"Great! Continue onwards fellow soldier.\")\n#   current_columns = [cq_column.value, well_column.value]\x02  \x02  \x02  \x02  \x02  \x02# \x02[]\x01]\x02# \x03\n  \x02es\x01k\x04lse:\x05else:\x05else:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02\"\"\x01\"\x1aPlease select a file first\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x05\n    !w_text_output(content=\"\"\"----\"\"\")\x02# \x0c\n  \n  \n  \n  \xc5\x01cq_column = w_select(label=\"Select Cq value column\", options=[\"Please select a file first\"])\n    well_column = w_select(label=\"Select well column (e.g. A1)\", options=[\"Please select a file first\"])\x03\n  \x03\n  \x08  exit()\x010\x02\n\n\xa3\x02cq_opt = well_result_df.keys() if well_result_df is not None else [\"Fake Option\"]\n\n  w_text_output(content=\"\"\"----\"\"\")\n\n  # Set column values\n  cq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\n  well_column = w_select(label=\"Select well column (e.g. A1)\", options=cq_opt)\x01\n\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02\n\n!w_text_output(content=\"\"\"----\"\"\")\x1aPlease select a file first\x1aPlease select a file first!w_text_output(content=\"\"\"----\"\"\")!w_text_output(content=\"\"\"----\"\"\")\x01\n\x02\n\n\x16##################\n# O\x11Metadata Sheet ()\x07Optionl\x01a\x0c############\x02 #\x1e#############################\n\t\n\n\n\n\n\n\n\n\n\xbe\x02w_text_output(content=\"\"\"\n## _(Optional)_ Use Metadata Template\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\nw_ch\nw_checkbox\x0fuse_metadata = \x02()\x02\"\"\x06label=\x1bUse optional metadata sheet\x13metadata templatefi\x05 file\n, default \x06=False\x01\n\x03\n  \x1b## Import qPCR Readout File\x04Data\x06if use\x0euse_metadata.v\xa0\x12import pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(\n  content=\"\"\"\n# Import Data\n## Import qPCR Readout File\n\nStart here by importing the output file from your qPCR machine. This file often contains columns such as _Cq_, _Target_, _Well_.\n\n\"\"\")\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (.csv, .xlsx)\")\n\n# Check if file is present\nif well_result_lpath.value is None:\n  exit(0)\n\nwell_result_file = well_result_lpath.value.download()\n\n# Check if file is an excel file\nif \".xlsx\" in str(well_result_file):\n  well_result_df = pd.ExcelFile(str(well_result_file))    \n  selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=well_result_df.sheet_names).value\n  # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n  skiprows = 24\n  if skiprows is not None and selected_sheet is not None:\n    well_result_df = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n# File is a CSV\nelse:\n  well_result_df = pd.read_csv(well_result_file)\n\ncq_opt = well_result_df.keys() if well_result_df is not None else [\"Please select a file first\"]\n\n# Set column values\ncq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\nwell_column = w_select(label=\"Select well column (e.g. A1)\", options=cq_opt)\n\nif (cq_column.value is not None) and (well_column.value is not None):\n  w_text_output(content=\"Machine data imported successfully.\")\n  current_columns = [cq_column.value, well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\nsheets_added = []\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Use Metadata Template\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\nuse_metadata = w_checkbox(label=\"Use metadata template file\", default=False)\n\nif use_metadata.\n\n\n\n\n\n\n\n\x07alue is\x0cvalue is Tre\x0cue:\n  exit()\x010\x05FalseH\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\xb8\x15if (well_plate_metadata_lpath.value is not None):\n  if well_plate_metadata_lpath.value != \"\":\n    use_metadata_sheet = True\n    well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  imported_data = imported_data[imported_data[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    imported_data[col_name] = pd.to_numeric(imported_data[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nsheets_added = []\n\nif use_metadata_sheet is True:\n  if None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n\n    def sheet_to_well_plate_map(df):\n        well_plate_dict = {}\n        for idx, row in df.iterrows():\n            for col in df.columns:\n                try:\n                  well_id = f\"{idx_to_row_id[idx]}{col}\"\n                except KeyError:\n                  raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n                well_plate_dict[well_id] = row[col]\n        return well_plate_dict\n    sheets_added = selected_metadata_variables.value\n    for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            # sheets_added.append(sheet_name)\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n    \n        # assert df.shape == (\n        #     16,\n        #     24,\n        # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n        imported_data[sheet_name] =imported_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\nif len(sheets_added) > 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\")\nif len(sheets_added) == 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets\")\n\n\x03\n\n\nY#############################\n# Metadata Sheet (Optional) #\n#############################\x0cMachine Data\x05False\t\n  exit()\x010\x03\n  \x03\n  \x01\n\x01;\x01:\x03\n  \x03\n  \x01\n\x05\n    \x07\n      \x07\n      \x03\n  \x07\n      \x05\n    \x03\n  \x02  \x01#\x02ma\xa6\x01if (well_column.value is not None):\n  \n  w_text_output(\n    content=\"Machine data imported successfully.\",\n    appearance={\n      \"message_box\": \"success\",\n    },\n  )~ w_text_output(\n    content=\"Machine data imported successfully.\",\n    appearance={\n      \"message_box\": \"success\",\n    },\n  )\x07f\"\n    \x05\"\"\"\"\"#Machine data imported successfully.\x05\n    \x05\n    \x05\n    \x17sheets_added_display = \x15sheets_added_display \x01 \x03f{}\x02{}\x14sheets_added_display\x01\n\x01f\x02  \x02  \x01f\x01f\x01\n\x01D\x03ata\x0f\nfrom lplots.id#widgets.multiselect import w_multis\x07_select\x1aqpcr_data = imported_data\n\x1aqpcr_data = imported_data\n\x01\n\x01\n\x02\n\n\xae\x03def find_best_match(columns, search_str):\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\x0c\n  default=-\x05find_\x11find_best_match()\x01q\x0eqpcr_data.cilu\x0bcolumns, \"\"\x02Cq\x06 if q \x01q\x15qpcr_data is not None\r/qpcr_outputs\x01\n\x01\n\x1dw_text_output(content=\"\"\"\n## \x0b(Optional) \x06Output1\nSelect a directory to save your outputs to\n\"\"\")\n\x01\n)run_name = w_text_input(label=\"Run Name:\"\x01)\x01\n^\noutput_dir = w_ldata_picker(\n  label=\"Select output directory\", \n  required=True,\n  default=\"\x01/\x0cqpcr_outputs\x01\"6\n  # appearance={\n  # \"default\": \"(.csv, .xlsx)\"\n  # }\x02\n)\x01\n\n\nlatch:///\x02# \tlatch:///\x01/\x01\n\x10, required=True,\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x01\n,from latch.ldata.path import LPath\nimport os\x01 \x01\n\x01u\x0brun_name_si\x01n\x0egnal = Signal(\x01)\x04None\x04\nout\x05_dir_\x0fdir_signal = Si\x02ng\x04gnal\x01 \x01(\x01)\x04None\x02__\x02__\x03Sel\x01 \tDirectory\x07Results\x01\n<\nrun_name_signal = Signal(None)\noutdir_signal = Signal(None)\x01\n\x07result \x03if \x03run\x1brun_name.value is not None:\x01\n\x02  \x08run_name\x10run_name_signal(\x08.value)\n\x02  \x03if \x08run_name\x16.value is not None:\n  \x0frun_name_signal\x01(\x0erun_name.value\x01)\routdir_signal\routdir_signal\noutput_dir\noutput_dir\x10\nimport datetime\x01\n\x01\n\x19now = datetime.datetime()\t, default\x01 \x01=\x01 \x02\"\"\x13datetime.datetime()\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x11well_column.value\x02[]\x01]\x11well_column.value\x11well_column.value\x02[]\x11well_column.value\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x0cgroup_column\x0cgroup_column\x0cgroup_column\x0cgroup_column\x0cgroup_column\x0cgroup_column\x0cgroup_column\x0cgroup_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x10condition_column\x11sheets_added = []\x01\"\x01\"\x02\"\"\x01\"\x03Thi(his is the control condition for your de\x13\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculat\xe3_from lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\n\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n\n  \n  well_opt = []\n  if well_result_lpath.value is not None:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if imported_qpcr_data is None:\n  #   return None, None, None, None\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n   \n  if (well_plate_metadata_lpath.value is not None):\n    \n    if well_plate_metadata_lpath.value != \"\":\n      \n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n).value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select sample condition annotation column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"help_text\": \"This is the highest level condition that you have split your samples. It is likely a drug or condition column.\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ncontrol_column = w_select(\n  label=\"Select control condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": \"Select a column\xe2\x80\xa6\",\n    \"help_text\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calcula\"\n  },\n)\n\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select control condition\", \n    readonly=True,\n    options=[],\n    appearance={\n      \"placeholder\": \"Select control column first\xe2\x80\xa6\"\n    }\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Check if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x02io+tion. It might be the same column as your s+the sample condition column selected above.\x05\n    \x05\n    \x01\\\x01\\\x01\n\x03\n  \t\n  print \x02()\x10well_result_file\x01\n\x07print()\x02\"\"\x04test\x03\n  \x10\n  print(\"test\")\x02 2\x12  print(\"test 2\")\n\x013\x02.v\x06.value\x08\n    con\x07print()\x02\"\"\x06test 5\x02# \x01#\x01#\x01#\x01#\x01#\x01#\x01#\x01#\x01#\x01#\x01#\x01#\x03\n  \x02is\x05\n    \x03\n  \x07\n    \"\"\rappearance={}\n\n    \n    \x02  \x02\"\"\x07message\x01,\x04_box\x04: \"\"\x07success\x01,\x01m\x01,\\https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx\x98\x01from lplots.reactive import Signal\n\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\x01[\x01]\x06\n  if $if delta_ct_option.value is not Nome\x02ne\x02  \x01:\x07print()\x0fdelta_ct_option\x01\n\x01\n\x02\n\n\x0e# Check if pat\x02fi\x07file i \x04s ps\x06resent\x03\n  \nfile is an\x07\n      \x14\n  # Check for a CSV\rFile is a CSV\x02# \x12\n    skiprows = 24\x02\n\n\x0boptions = ]\x11input_options =[]\x01]\x01 \x02# \x83\x01\n\ncq_column = w_select(label=\"Select the column from the qPCR Machine file that has the Cq values.\", options=well_result_df.keys())\x01[\x01]\x01]\x02\n\n\x02# \x02# \x02# \x02# \x14\n\nif well_result_df.\x02\n\n\x05\n    \x03\n  \x03\n  \x9a\x01\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\x02  \x02  \n\n      red\x0ereadonly=True,\xb1\x01\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    readonly=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n      }\n    )\x04\n\n  \x02  \x05\n    U\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (CSV or Excel Sheet)\")\x03\n  \x08else:\n  \x1f\nuse_well_plate_metadata = True\x05False!\n  use_well_plate_metadata = True!\n  use_well_plate_metadata = True\t\nmachine)\n_output_ty\x0bwell_result\xb0\x01well_result_lpath = if is_xlsx(filename1):\n    print(filename1, \"is an Excel file!\")\n    # load it openpyxl\nelse:\n    print(filename1, \"is an CSV file!\")\n    # load it with csv\x02\n\n\x01\n\x9f\x01\n  if is_xlsx(filename1):\n    print(filename1, \"is an Excel file!\")\n    # load it openpyxl\nelse:\n    print(filename1, \"is an CSV file!\")\n    # load it with csv1\n  well_result_df = pd.read_csv(well_result_file)\x03\n  \x05dtype\x11well_result_dtype\x16\n  well_result_dtype =\ndtype = \"\"\x01\"\x03csv\x02  \x02  \x02  \x1e\n    well_result_dtype = \"csv\"\x05excel\x10well_result_file\x1b\n    well_result_df = \n    \x03\n  \x03\n  \x02  \x02  \x80\x03xls = pd.ExcelFile(str(excel_file))\n\nprint(xls.sheet_names)\n\nselected_sheet = w_select(label=\"Select results sheet from Excel file\", options=xls.sheet_names, default=\"Results\").value\n\nskiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n\nqpcr_data = pd.read_excel(str(excel_file), sheet_name=selected_sheet, skiprows=int(skiprows))\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x10well_result_file\x05\n    \x01O\x01,\rcontrol conti\x18dition for calculating d\x06\xf0\x9d\x9a\xabCt\x04\xf0\x9d\x9a\xabOfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\xb5\x02\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\x01\nb\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\xe2I\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\ndef find_best_match(columns, search_str):\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n\ndef create_comparison_table(groups, control, experiment):\n    # data = {\'Group\': groups, \'Example Comparison\': [f\"{group} vs. {control} (CONTROL)\" for group in groups]}\n    # df = pd.DataFrame(data)\n    # return df.to_markdown(index=False)\n    if experiment is None:\n      header = \"| Group   | Example Comparison        |\\n|:--------|:--------------------------|\\n\"\n      rows = [f\"| {group}     | {group} vs. {control} (CONTROL)     |\\n\" for group in groups]\n    else:\n      experimental_condition_str = \", \".join(experiment)\n      sample_experiment = experiment[0]\n      header = \"| Group   | Experimental Condition        | Example Comparison                      |\\n|:--------|:-------------------|:----------------------------------------|\\n\"\n      rows = [f\"| {group}     | {experimental_condition_str}     | {group} {sample_experiment} vs. {group} {control} (CONTROL)     |\\n\" for group in groups]  \n    return header + \'\'.join(rows)\n\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Well column\", \n    required=imported_qpcr_data is not None,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # Add error checking for the Well column to make sure it includes A1, A2, A3\n  if imported_qpcr_data is not None and well_column.value is not None:\n    if not \"A1\" in list(imported_qpcr_data[well_column.value]):\n      w_text_output(\n        content=\"The column you selected doesn\'t contain well IDs (e.g. A1).\",\n        appearance={\n          \"message_box\": \"warning\",\n        }\n      )\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    readonly=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required to calculate \xe2\x88\x86C\x01q\t, \xe2\x88\x86\xe2\x88\x86C\x01q\xea\x0c, and fold change.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Cq column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  default=find_best_match(qpcr_data.columns, \"Cq\") if qpcr_data is not None else None,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Target column\", \n  default=find_best_match(qpcr_data.columns, \"Target\") if qpcr_data is not None else None,\n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Housekeeping gene\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\xdb\x05\n# Sample column\nsample_column = w_select(\n  label=\"Group column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\xf6\x03\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Experimental condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the control condition for calculating \xf0\x9d\x9a\xab\x01C\x04\xf0\x9d\x9a\xab\x01t\xa1\x02\"\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Control condition\",\n    appearance={\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    },\n    readonly=True,\n    options=[],\n  )\nelse:\x01\n\x02  \xa6\x02control_val = w_select(\n    label=\"Control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\",\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    }\n  )\n\x01\n\xd7\x04# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\n# delta_ct_option = w_checkbox(\n#   label=\"Select if targets and housekeeping genes are in the same well.\",\n#   default=True,\n#   readonly=qpcr_data is None,    \n# )\n\n# if delta_ct_option is not None:\n#   try:\n#     delta_ct_option_signal(delta_ct_option.value)\n#   except:\n#     print(\"Not adding signal\")\xfa\x03\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\nc\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column\x06.values, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column\x06.value\xe4\x03]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column\x06.valuey: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column\x06.value\x95\x01, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column\x06.value\xd6\x02, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  else:\n    if control_column_value is not None:\n      final_columns.append(control_column_value)\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column\x06.value\xcd\x07: \'Condition\', cq_column.value: \"Cq\"})\n  \n  if control_column.value is not None:\n      w_text_output(content=f\"\"\"\n  ### Preview Study Design\n  Inspect the table below to see if groupings make sense.\n        \"\"\")\n      ###################\n      # Create table preview:\n      if control_column_value not in [\"Condition\", \"Target\"]:\n        print(qpcr_data, control_column_value)\n        group_values = qpcr_data[\"Condition\"].unique()\n        experimental_values = qpcr_data[control_column_value].unique()\n        markdown_table = create_comparison_table(group_values, control_val.value, experimental_values)\n      elif control_column_value == \"Condition\":\n        group_values = qpcr_data[\"Condition\"].unique()\n        markdown_table = create_comparison_table(group_values, control_val.value, None)\n      else:\n        markdown_table = None\n      if markdown_table is not None:\n        w_text_output(content=f\"\"\"\n  {markdown_table}\n        \"\"\")\n\n\n\n# Remove undetermined data\n9qpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\xe7\x01\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n### Infer of targets and housekeeping genes are in the same well\n\x01\n3if qpcr_data is not None and \"Well\" in qpcr_data: \nq  target_and_housekeeping_in_same_well = len(qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].Target.unique()) > 1\n?  delta_ct_option_signal(target_and_housekeeping_in_same_well)\n\x03  \nf  print(f\"Genes in the first well: {qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].Target.unique()}\")\n\x01\n/\n# print(qpcr_data)\n# print(qpcr_data_signal())\x1d\nqpcr_data_signal(qpcr_data)\n\x01.\x01C\x01.\x02\n\n\x1bgrouping_checkbox = w_check\x0cw_checkbox()\x08label=\"\"\x15Add a grouping column\x05Group\x01:\x0f, default=False\xd3\x05\ngrouping_checkbox = w_checkbox(label=\"Add a Group column:\", default=False)\n\n# Sample column\nsample_column = w_select(\n  label=\"Group column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)*grouping_checkbox = w_checkbox(label=\"Add \x01a\r Group column\x01:\x12\", default=False)\n\x01\n\x10# Sample column\n\x1asample_column = w_select(\n\x19  label=\"Group column\", \n\x17  options=column_opts,\n\x1b  required=prev_completed,\n\x1f  readonly=not prev_completed,\n\x0f  appearance={\n.    \"placeholder\": column_select_placeholder,\n\x04    \x13\"description\": \"\"\"\n\x04    \x8c\x03A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n\x04    \x04\"\"\"\n\x05  },\n\x01)\x01\n\x01\n\x10if sample_column\x06.value\x0e is not None:\n&  current_columns.append(sample_column\x06.value\x01)\x01\n\x14if grouping_checkbox\x04 ===\x0f.value is True:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01\n\x04    #else:\n  if control_column.value is \x05None:\x04not \x1c\n    current_columns.append(\rsample_column\x07.value)\x0econtrol_column\x06.value\x02# \x02# \x02# \x06.value)\n    sample_column = control_column.value\x08optional\x05\n    \x81\x02\nif use_metadata_sheet is True:\n  if well_plate_metadata_lpath.value is None:\n    exit()\n\n\n  selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\x07 is Tre\x05 True\x05\n    \x02  \x01\n\x07print()\x02()\x06import\rimported_data\x01\n\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x03\n  \x15original_columns = []\x01]0\n  original_columns = imported_qpcr_data.columns\n\n  if shee\x12sheets_added == []\x17]:\n    original_columns(imported_qpcr_data = imported_qpcr_data[\x01]\x03pri\xb6Ufrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nif \"qpcr_data_signal\" not in globals():\n  qpcr_data_signal = Signal([])\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  \n  well_opt = []\n  if well_result_lpath.value is not None:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  original_columns = imported_qpcr_data.columns\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n   \n  if (well_plate_metadata_lpath.value is not None):\n    \n    if well_plate_metadata_lpath.value != \"\":\n      \n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  pr\n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\n# print(imported_data)\n\n# w_text_output(content=\"\"\"\n# ## Experiment Set-up\n\n# Now, we are going to annotate the columns in your dataframe.\n# \"\"\")\n\n# def make_line():\n#   w_text_output(content=\"-----\")\n\n# qpcr_data = imported_data\n\n# try: \n#   column_opts = qpcr_data.columns\n#   column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n#   prev_completed = True\n\n# except: \n#   column_opts = []\n#   column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n#   prev_completed = False\n\n# # Cq Column\n# cq_column = w_select(\n#   label=\"Select Cq value column\",  \n#   options=column_opts,\n#   readonly=not prev_completed,\n#   appearance={\n#     \"placeholder\": column_select_placeholder,\n#   }\n# )\n\n# # Remove Undetermined rows\n# try:\n#   current_columns.append(cq_column.value)\n# except:\n#   print(\"Removed\")\n\n\n# # Target Column\n# target_column = w_select(\n#   label=\"Select target column\", \n#   options=column_opts,\n#   readonly=not prev_completed,\n#   appearance={\n#     \"help_text\": \"This contains your housekeeping gene\",\n#     \"placeholder\": column_select_placeholder,\n#   },\n# )\n\n# try:\n#   housekeeping_options = qpcr_data[target_column.value].unique()\n#   current_columns.append(target_column.value)\n#   housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \n# except:\n#   housekeeping_options = []\n#   housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\n# housekeeping_gene = w_select(\n#   label=\"Select the housekeeping gene:\", \n#   options=housekeeping_options,\n#   readonly=not prev_completed,\n#   appearance={\n#     \"placeholder\": housekeeping_placeholder,\n#   },\n# ).value\n\n# # Sample column\n# sample_column = w_select(\n#   label=\"Select sample condition annotation column\", \n#   options=column_opts,\n#   readonly=not prev_completed,\n#   appearance={\n#     \"placeholder\": column_select_placeholder,\n#   },\n# )\n\n# if sample_column.value is not None:\n#   current_columns.append(sample_column.value)\n\n# delta_ct_option = w_checkbox(\n#   label=\"Check if targets and housekeeping genes are in the same well.\",\n#   default=True,\n#   readonly=qpcr_data is None,    \n# )\n\n# make_line()\n  \n# current_columns = list(set(current_columns))\n\n# # Join additional columns\n# additional_columns = w_multi_select(\n#   label=\"Add additional columns to include\", \n#   options=[x for x in column_opts if ((x not in current_columns))], \n#   default=sheets_added,\n#   appearance={\n#     \"help_text\": \"If no options appear, it means all columns are already included.\",\n#   },\n# )\n# final_columns = current_columns + additional_columns.value\n\n# if not prev_completed:\n#   exit()\n\n# if None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n#   current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n#   if additional_columns.value is not None:\n#     final_columns = current_columns + additional_columns.value\n    \n#   else:\n#     final_columns = current_columns\n\n# # Rename columns\n# if None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n#   qpcr_data = qpcr_data[list(final_columns)]\n#   qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n  \n# # String leading / trailing spaces\n# for col in qpcr_data.columns:\n#   print(col)\n#   if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n#     try:\n#       qpcr_data[col].str.strip()\n#     except:\n#       qpcr_data[col] = qpcr_data[col]\n\n# control_column = w_select(\n#   label=\"Select control condition column\",\n#   options=qpcr_data.columns,\n#   readonly=qpcr_data is None,\n#   appearance={\n#     \"placeholder\": \"Select a column\xe2\x80\xa6\",\n#   },\n# )\n\n\n# if control_column.value is None:\n#   control_val = w_select(\n#     label=\"Select control condition\", \n#     readonly=True,\n#     options=[],\n#     appearance={\n#       \"placeholder\": \"Select control column first\xe2\x80\xa6\"\n#     }\n#   )\n# else:\n#   control_val = w_select(\n#     label=\"Select control condition\", \n#     options=qpcr_data[control_column.value].unique(),\n#     appearance={\n#       \"placeholder\": \"Select condition\xe2\x80\xa6\"\n#     }\n#   )\n\n# # Remove undetermined data\n# qpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# qpcr_data_signal(qpcr_data)\n\x02nt\x02  \x02  \x07print()!selected_metadata_variables.value\x02\"\"\x02HI\x02, \x01i\x02f %selected_metadata_variables.value == # or well_plate_metadata_lpath is []\x01]\x02[].\n    imported_qpcr_data = imported_qpcr_data[]\x07origina\x10original_columns\x05\n    \x07print()\x02\'\'\x01\'\x02HI\x02  \x02  \x02  \x03\n  \x02  \x02  \x02  \x03\n  \x02  \x02  \xe6\x01if well_plate_metadata_lpath.value is None or well_plate_metadata_lpath is []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n    print(\'HI\')\n    return imported_qpcr_data, current_columns, sheets_added, well_column\x02  \x02  \x02  \x02  \x02  \x02  \x1bselected_metadata_variables\x1bselected_metadata_variables\x02  \x02  \x02  \x07print()\x02\"\"\x01\"\x03HEY\r\n            \x0bprint(\"HEY)0\nfrom lplots.widgets.checkbox import w_checkbox\n\x07\n      \x14\".xlsx\" in filename\n\x03if \x16str(well_result_file):,\nfrom lplots.widgets.select import w_select\n\x0b\nimport xls\x02  \x02  $xls = pd.ExcelFile(str(excel_file))\n\x0ewell_result_df\x10well_result_file\x0ewell_result_df\x04chec\nw_checkbox&options=[\"Please select a file first\"]\x05\n    \r\n  # Set real\x07values \rcolumn values\x14  # Placeholder colu\x06widget\ndropdowns \x13You\'re ready to go!\x05Data \x16Machine data imported.\x0e successfully.\x02Se\x04peci\x15elect Cq value column\x0bwell column%label=\"Select well column (e.g. A1)\",\x19\"Select Cq value column\",\t.csv, .cl\xba\x0fimport pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Readout File\n\nStart here by importing the output file from your qPCR machine. This file often contains columns such as _Cq_, _Target_, _Well_.\n\n\"\"\")\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (.csv, .c)\")\n\n\n\n# Check if file is present\nif well_result_lpath.value is not None:\n  well_result_file = well_result_lpath.value.download()\n  \n  # Check if file is an excel file\n  if \".xlsx\" in str(well_result_file):\n    well_result_df = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=well_result_df.sheet_names, default=\"Results\").value\n    # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    skiprows = 24\n    if skiprows is not None and selected_sheet is not None:\n      well_result_df = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n\n  # File is a CSV\n  else:\n    well_result_df = pd.read_csv(well_result_file)\n\n  # Set column values\n  cq_column = w_select(label=\"Select Cq value column\", options=well_result_df.keys())\n  well_column = w_select(label=\"Select well column (e.g. A1)\", options=well_result_df.keys())\n  \n  if (cq_column.value is not None) and (well_column.value is not None):\n    w_text_output(content=\"Machine data imported successfully.\")\n    current_columns = [cq_column.value, well_column.value]\n\nelse:\n  # Placeholder dropdowns \n  cq_column = w_select(label=\"Select Cq value column\", options=[\"Please select a file first\"])\n  well_column = w_select(label=\"Select well column (e.g. A1)\", options=[\"Please select a file first\"])\n\n\x01s\x04xlsx\x03\n  \x04\n  w\x02\n\n\rw_text_output\x13\n    w_text_output=\x02()\ncontent=\"\"\x05\"\"\"\"\"\x05\n    \x04----\x03\n  $\n  w_text_output(content=\"\"\"----\"\"\")#  w_text_output(content=\"\"\"----\"\"\")\x02# \xb8\x01\n      cq_column = w_select(label=\"Select Cq value column\", options=well_result_df.keys())\n  well_column = w_select(label=\"Select well column (e.g. A1)\", options=well_result_df.keys())\x02# \xb8\x01\n      cq_column = w_select(label=\"Select Cq value column\", options=well_result_df.keys())\n  well_column = w_select(label=\"Select well column (e.g. A1)\", options=well_result_df.keys())\x02  \x02  \x02  \x02  \x02  \x02  \x06\n  els\x05else:## w_text_output(content=\"\"\"----\"\"\")\x01 \x03[if\x08if wellR\x0ewell_result_df\x04try:\x9a\x01\n\ndef catch(func, handle=lambda e : e, *args, **kwargs):\n    try:\n        return func(*args, **kwargs)\n    except Exception as e:\n        return handle(e)\x08_options\x02  \x02  #  w_text_output(content=\"\"\"----\"\"\")\x03\n  \x02  !w_text_output(content=\"\"\"----\"\"\")\x02  \x04 the\x03The\x03The\x03The\x03The\x07The out\x03The\x04The \rThe file neds%This file often contains columns such\x13 such as **Cq**, &&\x15**Target**, **Well Po\xa7\x0eimport pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(\n  content=\"\"\"\nStart here by importing the output file from your qPCR machine. It must be a CSV or an Excel (.xlsx) document. This file often contains columns such as **Cq**, **Target**, **Well P\n\n\"\"\")\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (CSV or Excel Sheet)\")\n\ncolumn_ready = False\n\nif well_result_lpath.value is not None:\n  well_result_file = well_result_lpath.value.download()\n  # Check if  excel file\n  print(well_result_file)\n  if \".xlsx\" in str(well_result_file):\n    well_result_df = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=well_result_df.sheet_names, default=\"Results\").value\n    skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    if skiprows is not None and selected_sheet is not None:\n      well_result_df = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n      column_ready = True\n  else:\n    well_result_df = pd.read_csv(well_result_file)\n    column_ready = True\n\n  # if column_ready:\n  cq_column = w_select(label=\"Select the column from the qPCR Machine file that has the Cq values.\", options=well_result_df.keys())\n\n  well_column = w_select(label=\"Select the column from the qPCR Machine file that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n  if (cq_column.value is not None) and (well_column.value is not None):\n    w_text_output(content=\"Great! Continue onwards fellow soldier\")\n\n\x04siti\nosition**.\x03\n  \x02**\x03***\nImport the\tqPCR File\x0eReadout File**\x04    \x01\n\x01.\t_Cq_, the\r_Target_, the\x03the\x06_well \x06Well_.\x01.\x04None\x03\n  \x04try:\x02  \x05\n    \x08except()\x02\"\"\x11Not adding signal\x0b:\n    print\tqpcr_data\tqpcr_data\x08\nprint()\tqpcr_data\x07\nprint9\x02()\x12qpcr_data_signal()\x01?\x02# \x04None\x02# \x02\n\n\xe2\x01try: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\x19column_select_placeholder\x19column_select_placeholder\x19\n    current_columns = []\"cq_column.value, well_column.value\x01\"\x16\n  target_col_signal()\x13target_column.value\x05\n    \x11well_col_signal()\x11well_column.value!\n  cq_col_signal(cq_column.value)\xae\x06\nif control_column.value is not None:\n    w_text_output(content=f\"\"\"\n### Preview Study Design\nInspect the table below to see if groupings make sense.\n      \"\"\")\n    ###################\n    # Create table preview:\n    if control_column_value not in [\"Condition\", \"Target\"]:\n      group_values = qpcr_data[\"Condition\"].unique()\n      experimental_values = qpcr_data[control_column_value].unique()\n      markdown_table = create_comparison_table(group_values, control_val.value, experimental_values)\n    elif control_column_value == \"Condition\":\n      group_values = qpcr_data[\"Condition\"].unique()\n      markdown_table = create_comparison_table(group_values, control_val.value, None)\n    else:\n      markdown_table = None\n    if markdown_table is not None:\n      w_text_output(content=f\"\"\"\n{markdown_table}\n      \"\"\")\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x01\n\x01\n\xc3\x01def remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\x02\n\n\r# Remove stri\xb2\x01quotations from columns\n# Apply the function to all string columns\nfor col in df.select_dtypes(include=[\'object\']).columns:\n    df[col] = df[col].apply(remove_surrounding_quotes)\tqpcr_data\x01\n\x02  \x04try:\x0esample_column \x02is\x05 None\x01=\x03\n\n\n\x01\n\x01\n\xa0\x01\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required to calculate \xe2\x88\x86Ct, \xe2\x88\x86\xe2\x88\x86Ct, and fold change.\n\"\"\")\x01(\x01)\x02Oo\x07ptional\x08 Output \x13Select a directory\n\x18 to save your outputs to\x01\n\x01\n\x02w_\x95\x01\n\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\noutput_dir\x17Select output directory\x02# \x02# \x02# \x02# \x01\n\x02\n\n\x01w\x19run_name = w_ldata_picker\x01q\x07w_text-\x08_input()\x02\"\"\x08label=\"\"\tRun Name:\x02\n\n\x07default\x0b\n  default=\x02# \x02# \x02# \x02\"\"\x05\n    \x83\x01well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\x07\n      \rdefault=None,\x01\"\x01\"\x01\"\x01\"\x0eprev_completed\x1aimported_qpcr_data is None\x04not \x0eprev_completed\x0eprev_completed\x0eprev_completed\x06pre_co\x0eprev_completed\x02# \x01W\tCq column\x01:\x01\"\x02Tr\x0carget column\x11Housekeeping gene\x0cGroup column\x01\"\x01\"\x01\"\x11Experimental cond\x0fcondition colym\x01u\x03umn\x11Control condition\x1dSelect the control condition:\x04Cntr\x11Control condition\r\n    appearea\x07ance=\"\"\x01\"\x02{}\x0c\n      \n    \x02\"\"\x0bdescription\x04: \"\"\x01\"\x01O\x1cThis is often the untreated \n, Vehicle \x01  , vehicle, or another condition \x86mfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Well column\", \n    required=imported_qpcr_data is not None,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      # \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    readonly=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required to calculate \xe2\x88\x86Cq, \xe2\x88\x86\xe2\x88\x86Cq, and fold change.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Cq column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Target column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Housekeeping gene\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Group column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Experimental condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the conditions you want to compare between samples, such as \"Treatment,\" \"Untreated,\" and \"Vehicle.\"\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Control condition\",\n    appearance={\n      \"description\": \"This is often the untreated, vehicle, or another condition\"\n    }\n    readonly=True,\n    options=[],\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x02sp\x1d specific to your experiment.\n condition\x0c\n    print()\x02\"\"\x04here\n\n  print()\x10well_result_file\x0c\n    print()\x02\"\"\x01\"\x04HERE\x07\n\nready\rcolumn_ready=\x08 = False\x06\n    i\t\n    if w\x02sk\xff\x0cimport pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(content=\"Start here by importing the output file from your qPCR machine. It must be a CSV or an Excel (.xlsx) document.\")\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (CSV or Excel Sheet)\")\n\ncolumn_ready = False\n\nif well_result_lpath.value is not None:\n  well_result_file = well_result_lpath.value.download()\n  # Check if  excel file\n  print(well_result_file)\n  if \".xlsx\" in str(well_result_file):\n    print(\"HERE\")\n    well_result_df = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=well_result_df.sheet_names, default=\"Results\").value\n    skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    if s\n    well_result_df = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n    print(\"here\")\n  else:\n    well_result_df = pd.read_csv(well_result_file)\n\n  cq_column = w_select(label=\"Select the column from the qPCR Machine file that has the Cq values.\", options=well_result_df.keys())\n\n  well_column = w_select(label=\"Select the column from the qPCR Machine file that has the Well ID (e.g. A1).\", options=well_result_df.keys())\n\n  if (cq_column.value is not None) and (well_column.value is not None):\n    w_text_output(content=\"Great! Continue onwards fellow soldier\")\n\n\x05iprow\x03kip skiprows is not None and if sele\x11selected_sheet i \x0bs not None:\x02  \x02  \x1a\n      column_ready = True\x1e\n          column_ready = True\x03\n  \x16if column_ready = True\x01:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \xaa\x01\n    selected_metadata_variables = w_multi_select(label=\"Select the excel sheets you want to combine with your qPCR Machine CSV.\", options=well_plate_metadata_df.keys())\n\x05\n    \x02# \x03## \x01\n\x02  \x01\"\x05The y,column you selected doesn\'t contain well IdD\nIDs A1, A2\x01,\xe2vfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef find_best_match(columns, search_str):\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Well column\", \n    required=imported_qpcr_data is not None,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # Add error checking for the Well column to make sure it includes A1, A2, A3\n  if imported_qpcr_data is not None:\n    if not \"A1\" in list(imported_qpcr_data[well_column.value]):\n      w_text_output(\n        content=\"\"\"\n          The column you selected doesn\'t contain well IDs A1\n        \"\"\",\n        appearance={\n          \"message_box\": \"warning\",\n        }\n      )\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    readonly=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required to calculate \xe2\x88\x86Cq, \xe2\x88\x86\xe2\x88\x86Cq, and fold change.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Cq column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  default=find_best_match(qpcr_data.columns, \"Cq\") if qpcr_data is not None else None,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Target column\", \n  default=find_best_match(qpcr_data.columns, \"Target\") if qpcr_data is not None else None,\n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Housekeeping gene\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Group column\", \n  options=column_opts,\n  required=prev_completed,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Experimental condition column\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the conditions you want to compare between samples, such as \"Treatment,\" \"Untreated,\" and \"Vehicle.\"\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Control condition\",\n    appearance={\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    },\n    readonly=True,\n    options=[],\n  )\nelse:\n  control_val = w_select(\n    label=\"Control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\",\n      \"description\": \"Often the untreated condition, vehicle, or another condition specific to your experiment.\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\n# delta_ct_option = w_checkbox(\n#   label=\"Select if targets and housekeeping genes are in the same well.\",\n#   default=True,\n#   readonly=qpcr_data is None,    \n# )\n\n### Infer of targets and housekeeping genes are in the same well\n\nif qpcr_data is not None:  \n  target_and_housekeeping_in_same_well = len(qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].Target.unique()) > 1\n  delta_ct_option_signal(target_and_housekeeping_in_same_well)\n  \n  print(f\"Genes in the first well: {qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].Target.unique()}\")\n\n# if delta_ct_option is not None:\n#   try:\n#     delta_ct_option_signal(delta_ct_option.value)\n#   except:\n#     print(\"Not adding signal\")\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x05 A2, \x02()\x07e.g. A1A. Please make sure you select a column that contains the well ID.\x06.value\x015\x03\n\n\n\x02w_\x0cw_checkbox()\x01c\x08label=\"\"\x04Use \x03\n  \x01s\x03et(\x01),s3://latch-public/test-data/22353/output.csv\x11\n  demo_dataset()\x0b/output.csv4\n  w._state[\"appearance\"] = {\"error_text\": \"hello\"}\n\n\n  if wellUwell_result_lpath.value is None:\n    w._state[\"appearance\"] = {\"error_text\": \"hello\"}\x11well_result_lpath\x04else\x0cSelect a CSV\x01y\x06a filepif well_result_lpath.value is None:\n    well_result_lpath._state[\"appearance\"] = {\"error_text\": \"Select a file\"}\x0bwell_column\x04well\x0bwell_column\x08 is True\x02# \x02# \x02# \t\n        \x02re\x02re\t\n        \x02re\x02re\x07return \x02re\x08if len()\x05mathc\x06ching_\x0ematching_files\x01 \x03> 0\tmatching_\x02hcwif matching_files:\n      print(\"Files found:\")\n      for file_path in matching_files:\n          print(file_path)\n      \x05len()\x08matching\x0ematching_files\x04 > 0\t\n        \x06\n     \x0c return True\x08\n  retur\x02n \x0f    return Fals\x01e\x02\n\n\x03\nif\x02if<\nwell_result_file = Path(well_result_lpath.value.download())\x01\n\x01\n\x03\nif\x02if\x02if\x02if\x02if\x03if \x01)\x0bif check_if\x16check_if_file_exists()\x05file_\tfile_name\x01L\x17:\n  well_result_file\n  \x05\nekse\x08else:\n  \x0e\n      print()\x13max(matching_files)\x03min\x01m\x03max\x0b else None,\x0c\n  deefault-Tdefault=find_best_match(qpcr_data.columns, \"Cq\") if qpcr_data is not None else None,\x06Target\x05\n    \x05else:\xed2import pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\n# Set empty defaults for current columns and sheets selected \ncurrent_columns = []\nsheets_added = []\nimported_qpcr_data = None\n\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(\n  label=\"qPCR Machine Output\", \n  appearance={\n  \"detail\": \"(.csv, .xlsx)\"\n  }\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\nwell_opt = []\nif well_result_lpath.value is not None:\n  well_result_file = download_file_if_not_exists(well_result_lpath.value)\n  print(well_result_file)\n\n  # Check if file is an excel file\n  if \".xlsx\" in str(well_result_file):\n    imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n    \n    # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    skiprows = 24\n    \n    if skiprows is not None and selected_sheet is not None:\n      imported_qpcr_data = pd.read_excel(\n        str(well_result_file), \n        sheet_name=selected_sheet, \n        skiprows=int(skiprows)\n      )\n      \n    well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n      \n  # File is a CSV\n  else:\n    imported_qpcr_data = pd.read_csv(well_result_file)\n    well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n# Set column values\nwell_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n\nwell_column = w_select(\n  label=\"Select well column\", \n  options=well_opt,\n  readonly=imported_qpcr_data is None,\n  appearance={\n    \"detail\": \"(ex: A1)\",\n    \"placeholder\": well_opt_placeholder\n  }\n)\n\nif (well_column.value is not None):\n  \n  current_columns = [well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\nIf your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n\"\"\")\n\nuse_metadata = w_checkbox(\n  label=\"Use template file to provide experimental metadata\", \n  default=False\n)\n\n# Add a signal to trigger the next block\ntry:\n  imported_qpcr_data_signal(list(imported_qpcr_data.columns))\nexcept:\n  print(\"Skipping signal\")\n\nif use_metadata.value is False:\n  exit(0)\n\n\n\nwell_plate_metadata_lpath = w_ldata_picker(\n  label=\"Well Plate Metadata\", \n  appearance={\n    \"detail\": \"(.xlsx)\"\n  }\n)\n\n\nif (well_plate_metadata_lpath.value is not None):\n  \n  if well_plate_metadata_lpath.value != \"\":\n    \n    use_metadata_sheet = True\n    well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\n# if cq_column.value is not None:\n#  imported_qpcr_data = imported_qpcr_data[imported_qpcr_data[cq_column.value] != #\"Undetermined\"]\n#  col_name = cq_column.value\n  \n#  try:\n#    imported_qpcr_data[col_name] = pd.to_numeric(imported_qpcr_data[col_name])\n    \n#  except Exception:\n#    raise ValueError(f\"The selected column {col_name} contains values that are #not numbers.\")\n\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\n\nfor sheet_name, df in well_plate_metadata_df.items():\n  \n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n  else\n    \n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\n#Text to show if sheets are added\nif len(sheets_added) > 0:\n  sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n  \nif len(sheets_added) == 0:\n sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n\nw_text_output(\n    content=f\"\"\"\nMachine data imported successfully.\n\n{sheets_added_display}\n    \"\"\",\n    appearance={\n      \"message_box\": \"success\",\n    },\n  )\n\nimported_qpcr_data_signal(list(imported_qpcr_data.columns))\n$:\n    imported_qpcr_data[sheet_name]\" = imported_qpcr_data[sheet_name].\x06drop()\x12sheet_name, axis=1\x05\n    \x04try:\x02  \x11qpcr_data.columns\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x05elseL\x01:\x08\nprint()Jqpcr_data, delta_ct_option, housekeeping_gene, control_column, control_val\x06.value\x06.value\x03\n  \x06print*\x02()\x14control_column.value\x05\n    \x07print()\x11control_val.value\x0c\n    print()\x02\"\"\x04HERE\x05\n    \x03\n  \x02  \x02  \x02  \x07print()\x11control_val.value\n].unique()\x05\n    \x07print()(qpcr_data[control_column.value].unique()\x02  \x02# \x02# Wreturn qpcr_data, delta_ct_option.value, housekeeping_gene, control_column, control_val\x04None\x04None\x01[\x01]\x01[\x01]\x01]\x01]\x04None\x04None\tqpcr_data\tqpcr_data\x06exit()\x04\ntru\x02y:\x02  \x03\n  \x11except:\n  print()\x02\"\"\x08Skipping-\n  qpcr_data = qpcr_data[list(final_columns)]\x02# \x02# \x02# \x08\nprint()\x01r\x07prev_co\x02pm\x08ompleted\x03\n\n\n\x80\x01  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\xce(def import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  \n  \n  well_opt = []\n  if well_result_lpath.value is not None:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  if imported_qpcr_data is None:\n    exit()\n    \n  original_columns = imported_qpcr_data.columns\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n   \n  if (well_plate_metadata_lpath.value is not None):\n    \n    if well_plate_metadata_lpath.value != \"\":\n      \n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\xce(def import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  \n  \n  well_opt = []\n  if well_result_lpath.value is not None:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  if imported_qpcr_data is None:\n    exit()\n    \n  original_columns = imported_qpcr_data.columns\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n   \n  if (well_plate_metadata_lpath.value is not None):\n    \n    if well_plate_metadata_lpath.value != \"\":\n      \n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\x06retur \x18n None, None, None, None\x0bcolumn_opts\x07try:\n  \x03\n  \x1eexcept:\n  current_columns = []\x01]S\ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []:final_columns = current_columns + additional_columns.value\rfinal_columnsuwell_result_lpath = w_ldata_picker(\n  label=\"qPCR Machine Output\", \n  appearance={\n  \"detail\": \"(.csv, .xlsx)\"\n  }\n)\n\x02  \x02  \x02  \x02  \x02  \x03\n  x\n  if imported_qpcr_data is None:\n    return None, None, None, None\n    \n  original_columns = imported_qpcr_data.columns\x02# \x02# \x06\n  try\x02  \x05\n    )except:\n    return None, None, None, None\x01:\x02# )\nrun_name = w_text_input(label=\"Run Name:\x13\", default=str(now)\x01)\x01\n\x03\", \x0eplaceholder=\"\"\x11Add a run name...\x01\n\xfe\x03appearance={\n      \"placeholder\": column_select_placeholder,\n      # \"description\": \"\"\"\n      # A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n      # \"\"\"\n    },\"appearance={\n      \"placeholder\": \x19column_select_placeholder\x07,\n    }\x01,\x0cplaceholder=\x13\"Add a run name...\"\x01\n\x01\n\x9f\x01w_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\x17LatchBio qPCR Processor\x02er\x03\"\"\"\x01L\x07Plotter\x03<> \x02\n\n\tProcesser\x08Analyzer0To start, either opt to import your own qPCR daa\x0eta or utilize \x18test with a test datasetNTo start, either opt to import your own qPCR data or test with a test dataset\n\ntry it out\x01.\x07\nFor un\x05ploat\x07ding yu\x0eour own data, \x08please p\tget going\x1bcheck the Use Test Data boc\x01x\x06to use\x01*\x01*\x01*\x01*\x03\n  \x17\n  use_test_data = w_ch\x0cw_checkbox()\x02\"\"\x01\"\x01Y\x05Use e\x01Y\ttest data\x0f, default=False\x06label=\x05\xe2\x88\x86Cq\x05\xe2\x88\x86Cq\x03\n  \x07print()\x02\"\"\x01\"\x02HI\x03\n  \x0bprint(\"HI\")\x04YOOO\x01\n\x02  \x07print()\x02\"\"\x01\"\x02HI*, qpcr_data[control_column.value].unique()\x02# \x06np.nan\x13\nimport numpy as np\x04None@qpcr_data = qpcr_data[~pd.isna(qpcr_data[control_column.value])]\x01\n\t*Required\x01 \x03\n  d\n  if well_column.value is None:\n    well_column._state[\"appearance\"] = {\"error_text\": \"* Required\"}\x19well_plate_metadata_lpath\x19well_plate_metadata_lpath\x19well_plate_metadata_lpath\x05else:\x03\n  \x19well_plate_metadata_lpathFif w.value is None:\n  w._state[\"appearance\"] = {\"error_text\": \"hello\"}\x01\n\tcq_column\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0fcurrent_columns\x0fcurrent_columns\x01\n\x07 as _df\x01_\x01_\x01_\x01_\x01)\x01_\x01_\x01\n\xe2\x18\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nprint(imported_qpcr_data)\nqpcr_data = imported_qpcr_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\nprint(column_opts)\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  qpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n).value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select sample condition annotation column\", \n  options=column_opts,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\n\nmake_line()\n\n\ncurrent_columns = list(set(current_columns))\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\n\nfinal_columns = current_columns + additional_columns.value\n\nif not prev_completed:\n  exit(0)\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n    \nmain_df = qpcr_data[list(final_columns)]\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  qpcr_data = main_df.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n  \n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \xbc\x01\n\ncontrol_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\x01\n\"# if control_column.value is None:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x04not \x02# \x02# \x06.value \n    readonly=qpcr_data is None,\x02# \x01,\x08 idx_to_\ridx_to_row_id\x0f, idx_to_row_id\x03\n  \x07print()\x03colu\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\x01\n\x01\n\x04from\x04from\x06sedeq_\x07seq_ex \x02= \x05if \"\"\x04sweq\x05eq_ex\x04 no \x0et in globals()\x14):\n  seq_ex=Signal()\x011\x04)\n  \x05\nw)tx\x05_text\x0fw_text_output()\ncontent=\"\"\x01\"\x01f\x08seq_ex()\x01{\x01}\x07.sample\x01\n\x01\ne\n# Add a signal to trigger the next block\nimported_qpcr_data_signal(list(imported_qpcr_data.columns))<imported_qpcr_data_signal(list(imported_qpcr_data.columns))\n\x0e\n      print()\x12imported_qpcr_data\x07\n      \x05\n    \x07print()\x0eselected_sheet\x06\"hi\", \xdb2import pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\n# Set empty defaults for current columns and sheets selected \ncurrent_columns = []\nsheets_added = []\nimported_qpcr_data = None\n\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(\n  label=\"qPCR Machine Output\", \n  appearance={\n  \"detail\": \"(.csv, .xlsx)\"\n  }\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\nwell_opt = []\nif well_result_lpath.value is not None:\n  well_result_file = download_file_if_not_exists(well_result_lpath.value)\n  print(well_result_file)\n\n  # Check if file is an excel file\n  if \".xlsx\" in str(well_result_file):\n    imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n    print(\"hi\",selected_sheet)\n    \n    # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    skiprows = 24\n    \n    if skiprows is not None and selected_sheet is not None:\n      imported_qpcr_data = pd.read_excel(\n        str(well_result_file), \n        sheet_name=selected_sheet, \n        skiprows=int(skiprows)\n      )\n      \n    well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n      \n  # File is a CSV\n  else:\n    imported_qpcr_data = pd.read_csv(well_result_file)\n    well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n# Set column values\nwell_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n\nwell_column = w_select(\n  label=\"Select well column\", \n  options=well_opt,\n  readonly=imported_qpcr_data is None,\n  appearance={\n    \"detail\": \"(ex: A1)\",\n    \"placeholder\": well_opt_placeholder\n  }\n)\n\nif (well_column.value is not None):\n  \n  current_columns = [well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\nIf your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n\"\"\")\n\nuse_metadata = w_checkbox(\n  label=\"Use template file to provide experimental metadata\", \n  default=False\n)\n\n# Add a signal to trigger the next block\nimported_qpcr_data_signal(list(imported_qpcr_data.columns))\n\nif use_metadata.value is False:\n  exit(0)\n\n\n\nwell_plate_metadata_lpath = w_ldata_picker(\n  label=\"Well Plate Metadata\", \n  appearance={\n    \"detail\": \"(.xlsx)\"\n  }\n)\n\n\nif (well_plate_metadata_lpath.value is not None):\n  \n  if well_plate_metadata_lpath.value != \"\":\n    \n    use_metadata_sheet = True\n    well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\n# if cq_column.value is not None:\n#  imported_qpcr_data = imported_qpcr_data[imported_qpcr_data[cq_column.value] != #\"Undetermined\"]\n#  col_name = cq_column.value\n  \n#  try:\n#    imported_qpcr_data[col_name] = pd.to_numeric(imported_qpcr_data[col_name])\n    \n#  except Exception:\n#    raise ValueError(f\"The selected column {col_name} contains values that are #not numbers.\")\n\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\n\nfor sheet_name, df in well_plate_metadata_df.items():\n  \n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n    \n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\n#Text to show if sheets are added\nif len(sheets_added) > 0:\n  sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n  \nif len(sheets_added) == 0:\n sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n\nw_text_output(\n    content=f\"\"\"\nMachine data imported successfully.\n\n{sheets_added_display}\n    \"\"\",\n    appearance={\n      \"message_box\": \"success\",\n    },\n  )\n\nimported_qpcr_data_signal(list(imported_qpcr_data.columns))\n\x01 \x06key=\"\"\x05sheet\x02, \x05\n    \x02  \x02  \x07print()\x1eimported_qpcr_data.sheet_names\x02\"\"\x05REsui\x06esults\x04 in \x01_\x08signal()\x06.value\x02\n\n\x06exit()\x010\x01\n\x04try:\x02  \x03\n  \x11except:\n  print()\x02\"\"\x01\"\x0fSkipping signal\x03\n  \x12treat_col_signal()\x16condition_column.value\x17\n    group_col_signal()\x01)\x12group_column.value\x06.value\x06\n    p\x07print()\rfinal_columns\x05.vslu\x04alue\x06.value,well_result_lpath.value.path.split(\"/\")[-1]\n\x05Path(\x0e)\n\nwell_result\x17well_result_file.renmae\x05ame()\tfile_name\x14\n# Check if file has\x15is downloaded alreayd\x02dy\x05ady. \xdf(import pandas as pd\nimport os\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n# Import Data\n## Import qPCR Readout File\n\nStart here by importing the output file from your qPCR machine. This file often contains columns such as _Cq_, _Target_, _Well_.\n\n\"\"\")\n\nimported_data = pd.DataFrame()\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (.csv, .xlsx)\")\n\n# Check if file is present\nif well_result_lpath.value is None:\n  exit(0)\n\n# Check if file is downloaded already.\nfile_name = well_result_lpath.value.path.split(\"/\")[-1]\nwell_result_file = Path(well_result_lpath.value.download())\nwell_result_file.rename(file_name)\n\nprint(well_result_lpath.value.path.split(\"/\")[-1])\nprint(well_result_file.name)\nprint(well_result_file)\nprint(os.getcwd())\n\n# Check if file is an excel file\nif \".xlsx\" in str(well_result_file):\n  imported_data = pd.ExcelFile(str(well_result_file))    \n  selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_data.sheet_names).value\n  # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n  skiprows = 24\n  if skiprows is not None and selected_sheet is not None:\n    imported_data = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n# File is a CSV\nelse:\n  imported_data = pd.read_csv(well_result_file)\n\ncq_opt = imported_data.keys() if imported_data is not None else [\"Please select a file first\"]\n\n# Set column values\ncq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\nwell_column = w_select(label=\"Select well column (e.g. A1)\", options=cq_opt)\n\nif (cq_column.value is not None) and (well_column.value is not None):\n  w_text_output(content=\"Machine data imported successfully.\")\n  current_columns = [cq_column.value, well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\nsheets_added = []\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Use Metadata Template\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\nuse_metadata = w_checkbox(label=\"Use metadata template file\", default=False)\n\nif use_metadata.value is False:\n  exit(0)\n\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\nif (well_plate_metadata_lpath.value is not None):\n  if well_plate_metadata_lpath.value != \"\":\n    use_metadata_sheet = True\n    well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  imported_data = imported_data[imported_data[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    imported_data[col_name] = pd.to_numeric(imported_data[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\nfor sheet_name, df in well_plate_metadata_df.items():\n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_data[sheet_name] = imported_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\nif len(sheets_added) > 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\")\nif len(sheets_added) == 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets\")\n\n\n\n\n\n\n\x05if so\x08\nprint()\x05file_\x13file_name, well_res\x12well_result_file, \x05\nfeom\x0efrom pathlib i\x0c import Path\x02# \t\n\nprint()\x06Path()\x10well_result_file\x10well_result_file\x05Path(\x01)\x02\n\n\xcd\x02# Define the pattern for the file path\npattern = \"/root/.latch/lpath/*/5-01-well-result.csv\"\n\n# Check if any file matches the pattern\nmatching_files = glob.glob(pattern)\n\nif matching_files:\n    print(\"Files found:\")\n    for file_path in matching_files:\n        print(file_path)\nelse:\n    print(\"No files found matching the pattern.\")\x01f\x06{file_\nfile_name}\x0c\nimport flob\x04glob\x02\n\n\x03def\x0edef check_oif_\x10if_file_exists()\tfile_name\x08:\n  file\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01\n\x02\n#\x01w\x01\n\x05\"\"\"\"\"\x02\"\"\x01\"\x0f\n              \x0f\n              \x03\n  \x01\n\x03\n  \x01\n\x02\n\n\x01P\x03RIN\x08\nprint()\x02\"\"\x02HI\n\n  print()\x02\"\"\x01\"\x04HI 2\x02\n\n\xaa\x03### Infer of targets and housekeeping genes are in the same well\n\nprint(\"HI\")\nif qpcr_data is not None and \"Well\" in qpcr_data: \n  print(\"HI 2\")\n  target_and_housekeeping_in_same_well = len(qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].Target.unique()) > 1\n  delta_ct_option_signal(target_and_housekeeping_in_same_well)\n  \n  print(f\"Genes in the first well: {qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].Target.unique()}\")\n\x01\n\x01\n\x8a\x01from lplots.reactive import Signal\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])j\n\n\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\x14imported_data_signal\x14imported_data_signal\x02\n\nOif \"imported_data_signal\" not in globals():\n  imported_data_signal = Signal([])\x15\nimported_data_signal\x14imported_data_signal\tqpcr_data\tqpcr_data\x10qpcr_data_signal\x01)\x07_signal\x12qpcr_data_signal()\tqpcr_data\xf6\x02\n  import pandas as pd\n  from pathlib import Path\n  import os\n  import glob\n  from lplots.widgets.text import w_text_input, w_text_output\n  from lplots.widgets.ldata import w_ldata_picker\n  from lplots.widgets.checkbox import w_checkbox\n  from lplots.widgets.select import w_select\n  from lplots.widgets.multiselect import w_multi_select\n  from lplots.reactive import Signal\x01\n\x03,, \r sheets_added\x02, \x0csheets_added\x01 \x0e, sheets_added\x0e, sheets_added\x0e, sheets_added\x0e, sheets_added\x0e, sheets_added\x0e, sheets_added\x01.\x0e, sheets_added\r, well_column\r, well_column\r, well_column\r, well_column\r, well_column\r, well_column\r, well_column\x0f, house_keeping\x0ckeeping_gene\x13, housekeeping_gene\t\n        \xd7\x04\n  control_column = w_select(\n  label=\"Select control condition column\",\n  options=seq(),\n  readonly=delta_ct_group is None,\n  appearance={\n    \"placeholder\": \"Select a column\xe2\x80\xa6\",\n  },\n)\n\ngroups_done = False\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select control condition\", \n    readonly=True,\n    options=[],\n    appearance={\n      \"placeholder\": \"Select control column first\xe2\x80\xa6\"\n    }\n  )\n  \ncontrol_val = w_select(\n  label=\"Select control condition\", \n  options=set(delta_ct_df[control_column.value]),\n  appearance={\n    \"placeholder\": \"Select condition\xe2\x80\xa6\"\n  }\n)\n\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \tqpcr_data\tqpcr_data\x02, \x1bcontrol_column, control_val\x1d, control_column, control_val$len(well_0_data.Target.unique()) > 1\x02f\"\x01\"\x01{\x01}\x06Number\x19Genes in the first well: \x19\ndelta_ct_option_signal()\x01)$target_and_housekeeping_in_same_well\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x01\n\x03\ni \x02if\x19if qpcr_data is not None:\x02  \x02  \x02  \x02  \x02  \x02  .qpcr_data[qpcr_data.Well == qpcr_data.Well[0]].qpcr_data[qpcr_data.Well == qpcr_data.Well[0]]\x03\n  $target_and_housekeeping_in_same_well\x02ri\x07print()$target_and_housekeeping_in_same_well\x01t\x01t\x01t\x03/Ct\x03\n  \x02  \x07except:\x0e\n      print()\x02\"\"\xd63import pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\n# Set empty defaults for current columns and sheets selected \ncurrent_columns = []\nsheets_added = []\nimported_qpcr_data = None\n\nif \"imported_qpcr_data_signal\" not in globals():\n  imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(\n  label=\"qPCR Machine Output\", \n  appearance={\n  \"detail\": \"(.csv, .xlsx)\"\n  }\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\nwell_opt = []\nif well_result_lpath.value is not None:\n  well_result_file = download_file_if_not_exists(well_result_lpath.value)\n  print(well_result_file)\n\n  # Check if file is an excel file\n  if \".xlsx\" in str(well_result_file):\n    imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n    \n    # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    skiprows = 24\n    \n    if skiprows is not None and selected_sheet is not None:\n      imported_qpcr_data = pd.read_excel(\n        str(well_result_file), \n        sheet_name=selected_sheet, \n        skiprows=int(skiprows)\n      )\n      \n    well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n      \n  # File is a CSV\n  else:\n    imported_qpcr_data = pd.read_csv(well_result_file)\n    well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n# Set column values\nwell_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n\nwell_column = w_select(\n  label=\"Select well column\", \n  options=well_opt,\n  readonly=imported_qpcr_data is None,\n  appearance={\n    \"detail\": \"(ex: A1)\",\n    \"placeholder\": well_opt_placeholder\n  }\n)\n\nif (well_column.value is not None):\n  \n  current_columns = [well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\nIf your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n\"\"\")\n\nuse_metadata = w_checkbox(\n  label=\"Use template file to provide experimental metadata\", \n  default=False\n)\n\n# Add a signal to trigger the next block\ntry:\n  imported_qpcr_data_signal(list(imported_qpcr_data.columns))\nexcept:\n  print(\"Skipping signal\")\n\nif use_metadata.value is False:\n  exit(0)\n\n\n\nwell_plate_metadata_lpath = w_ldata_picker(\n  label=\"Well Plate Metadata\", \n  appearance={\n    \"detail\": \"(.xlsx)\"\n  }\n)\n\n\nif (well_plate_metadata_lpath.value is not None):\n  \n  if well_plate_metadata_lpath.value != \"\":\n    \n    use_metadata_sheet = True\n    well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\n# if cq_column.value is not None:\n#  imported_qpcr_data = imported_qpcr_data[imported_qpcr_data[cq_column.value] != #\"Undetermined\"]\n#  col_name = cq_column.value\n  \n#  try:\n#    imported_qpcr_data[col_name] = pd.to_numeric(imported_qpcr_data[col_name])\n    \n#  except Exception:\n#    raise ValueError(f\"The selected column {col_name} contains values that are #not numbers.\")\n\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\n\nfor sheet_name, df in well_plate_metadata_df.items():\n  \n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n  else:\n    try:\n      imported_qpcr_data = imported_qpcr_data.drop(sheet_name, axis=1)\n    except:\n      print()\n  \n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\n#Text to show if sheets are added\nif len(sheets_added) > 0:\n  sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n  \nif len(sheets_added) == 0:\n sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n\nw_text_output(\n    content=f\"\"\"\nMachine data imported successfully.\n\n{sheets_added_display}\n    \"\"\",\n    appearance={\n      \"message_box\": \"success\",\n    },\n  )\n\nimported_qpcr_data_signal(list(imported_qpcr_data.columns))\n\x01\"\x02\"\"\x04here\x02# \x02# \x02# \x02# \x02# \x02==\x04\n\n\n\n\x8c\x05# control_column = w_select(\n#   label=\"Select control condition column\",\n#   options=qpcr_data.columns,\n#   readonly=qpcr_data is None,\n#   appearance={\n#     \"placeholder\": \"Select a column\xe2\x80\xa6\",\n#   },\n# )\n\n\n# if control_column.value is None:\n#   control_val = w_select(\n#     label=\"Select control condition\", \n#     readonly=True,\n#     options=[],\n#     appearance={\n#       \"placeholder\": \"Select control column first\xe2\x80\xa6\"\n#     }\n#   )\n# else:\n#   control_val = w_select(\n#     label=\"Select control condition\", \n#     options=qpcr_data[control_column.value].unique(),\n#     appearance={\n#       \"placeholder\": \"Select condition\xe2\x80\xa6\"\n#     }\n#   )\x03\n  )if imported_qpcr_data is None:\n    exit()\x06)\n    \t\n        \x07print()\x02\"\"\x04HERE\x01.\x05value\xbc\x02\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n  \x13not prev_completed,\x03\n  \tif contro\x0econtrol_column\x03\n  \tqpcr_data+control_column_value = control_column.value\n.value \n  Rin [well_column.value, cq_column.value, sample_column.value, target_column.value]:\x02  \x17control_column_value = \x7fremapping = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\x05_dict\x07\n      \x01\n\x10remapping_dict[]\x14control_column.value\x01\n\x1dqpcr_data_signal = Signal([])\x01\n\x08delta_ct\x01\n\x12\ndelta_ct_signal()\x15delta_ct_option.value\x04None\x07option+\x01_\x16delta_ct_option_signal\x1bcontrol_column_value = None\x05None\n\x01\n\x06def in\rmport_data():\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x12\n  return imported\x12imported_qpcr_data\x0c\nimport_data\x01e\x02ed\x10 = import_data()\x02\n\n<imported_qpcr_data_signal(list(imported_qpcr_data.columns))\n*        # sheets_added.append(sheet_name)\n\x99\x01    # else:\n    #   try:\n    #     imported_qpcr_data = imported_qpcr_data.drop(sheet_name, axis=1)\n    #   except:\n    #     print(\"here\")\n    \n    asse\x03\n\n\n\xab\x01  w_text_output(\n    content=\"\"\"\n  ## Import qPCR Data\n  \n  Provide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n  )xif \"imported_qpcr_data_signal\" not in globals():\n    imported_qpcr_data_signal = Signal(list(pd.DataFrame().columns))\n  \x05\n    \x19return imported_qpcr_data\x19return imported_qpcr_data\x19return imported_qpcr_data\x03\n\n\n\x04def_\x15 generate_qpcr_data()\rimported_data\x12imported_qpcr_data\x01:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \t\n        \x13\n  return qpcr_data\x10return qpcr_data\x13generate_qpcr_data)\x01(\x01)3qpcr_data = generate_qpcr_data(imported_qpcr_data)\n\x02# \x11, current_columns\x11, current_columns\x11, current_columns\r, import_data\x0fcurrent_columns\x11, current_columns\x11, current_columns\xac\x04\n# Download file if none exists\n  def download_file_if_not_exists(remote_lpath):\n      file_name = remote_lpath.path.split(\"/\")[-1]\n      pattern = f\"/root/.latch/lpath/*/{file_name}\"\n      matching_files = glob.glob(pattern)\n    \n      if matching_files:\n          max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n          print(\"File path with the highest number:\", max_file_path)\n          return max_file_path\n        \n      else:\n          print(\"No files found matching the pattern.\")\n          return remote_lpath.download()\x04, cl\x04olum\x0fcurrent_columns!\n  qpcr_data = imported_qpcr_data\x01\n\x02\n\n\x91\x03  def sheet_to_well_plate_map(df):\n    well_plate_dict = {}\n    for idx, row in df.iterrows():\n      for col in df.columns:\n        try:\n          well_id = f\"{idx_to_row_id[idx]}{col}\"\n        except KeyError:\n          raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n        well_plate_dict[well_id] = row[col]\n    return well_plate_dict\x03\n  \x06print9\x02()\x02\"\"\x01\"\x05HELLO\x03\n  \n\n  print()\tqpcr_data\x01p\x06rint()\x12imported_qpcr_data\rimported_data\rimported_data\rimported_data\x01\n\x02or\x05pritn\x04nt()\rimported_data\rimported_data\x07print()\x0fcurrent_columns\n\n  print()\rfinal_columns\x14print(final_columns)\x03\n  0\n    current_columns.append(target_column.value)\x03\n\nR\x16# Remove undetermined > data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\tcq_column\t\n        \xd6\x01\n  delta_ct_df = qpcr_data_cleaned\ndelta_ct_group = w_select(\n  label=\"Select calculation option:\", \n  options=[\"Well\", \"Sample\"],\n  readonly=delta_ct_df is None,\n  appearance={\n    \"placeholder\": \"Select\xe2\x80\xa6\"\n  }\n)\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \tqpcr_data\x06\n  \n  \x1cdelta_ct_option = w_checkbos\x03x()\x08\n    \n  \x05\n    \x02  \x02  \x08label=\"\"\x01D\x08Check th7if targets and housekeeping genes are in the same well.\x0e\n    default =\x05=True\x01,Y,\n    readonly=qpcr_data is None,\n    appearance={\n      \"placeholder\": \"Select\xe2\x80\xa6\"\n    }\x17, delta_ct_option.value\x11, delta_ct_option\x11, delta_ct_option\x03\n  \x05\n    \xa7\x01\n    delta_ct_option = w_checkbox(\n    label=\"Check if targets and housekeeping genes are in the same well.\",\n    default=True,\n    readonly=qpcr_data is None,    \n  )\x0c\"A1\" in list\x05\n    \x07print()\x03;he\x02\'\'\x02hi\x02[]\x010\x01]\x01\"\x03b10\x04B10 \x05\" in \x03A10\x05list( \n\nimported_data = pd.DataFrame()\x01.\x15 This is the highest \x0coverarching \x01.\x1dSelect the control condition:\x01W\x15e are going to assing\x06to ass\x0cspecify Cq, \x16columns that store Cq \x05, tar\x16target genes, house ke\x04Cq, <Now, we are going to annotate the columns in your dataframe.\x03Now\rWe are going <Now, we are going to annotate the columns in your dataframe.\x17We are going to assign /specify the experimental variables required for\xd6jfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    required=True,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nWe are going to specify the experimental variables required fo\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select the group column:\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Select the experimental condition column:\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the conditions you want to compare between samples, such as \"Treatment,\" \"Untreated,\" and \"Vehicle.\"\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select the control condition:\",  \n    readonly=True,\n    options=[],\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x06 calcu\xa0kthe experimental variables required to calculate from lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (s.startswith(\"\'\") and s.endswith(\"\'\")):\n            return s[1:-1]\n    return s\n\ndef import_data():\n  \n  # Set empty defaults for current columns and sheets selected \n  current_columns = []\n  sheets_added = []\n  original_columns = []\n  imported_qpcr_data = None\n  \n  ######################\n  # Machine Data Sheet #\n  ######################\n  \n  # Read qPCR Result\n  well_result_lpath = w_ldata_picker(\n    label=\"qPCR Machine Output\", \n    required=True,\n    appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\n  )\n  \n  well_opt = []\n  if well_result_lpath.value is None:\n    print(\"Please fill out the value\")\n    #well_result_lpath._state[\"appearance\"] = {\"detail\": \"(.csv, .xlsx)\", \"error_text\": \"* Required\", \"placeholder\": \"Select a file...\"}\n  else:\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n  \n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n      imported_qpcr_data = pd.ExcelFile(str(well_result_file))    \n      selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_qpcr_data.sheet_names).value\n      \n      # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n      skiprows = 24\n      \n      if skiprows is not None and selected_sheet is not None:\n        imported_qpcr_data = pd.read_excel(\n          str(well_result_file), \n          sheet_name=selected_sheet, \n          skiprows=int(skiprows)\n        )\n        \n      well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n        \n    # File is a CSV\n    else:\n      imported_qpcr_data = pd.read_csv(well_result_file)\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n\n  # Set column values\n  well_opt_placeholder = \"Select a column\xe2\x80\xa6\" if imported_qpcr_data is not None else \"Provide a readout file\xe2\x80\xa6\"\n  \n  well_column = w_select(\n    label=\"Select well column\", \n    required=True,\n    options=well_opt,\n    readonly=imported_qpcr_data is None,\n    appearance={\n      \"detail\": \"(ex: A1)\",\n      \"placeholder\": well_opt_placeholder\n    }\n  )\n\n  # if well_column.value is None:\n  #   well_column._state[\"appearance\"] = {\"error_text\": \"* Required\", \"detail\": \"(ex: A1)\",\n  #     \"placeholder\": well_opt_placeholder}\n\n  try:\n    original_columns = imported_qpcr_data.columns\n  except:\n    return None, None, None, None\n  \n  if (well_column.value is not None):  \n    current_columns = [well_column.value]\n  w_text_output(content=\"\"\"----\"\"\")\n  \n  #############################\n  # Metadata Sheet (Optional) #\n  #############################\n  \n  w_text_output(content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\")\n  \n  use_metadata = w_checkbox(\n    label=\"Use template file to provide experimental metadata\", \n    default=False\n  )\n  \n  if use_metadata.value is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  well_plate_metadata_lpath = w_ldata_picker(\n    label=\"Well Plate Metadata\", \n    required=True,\n    appearance={\n      \"detail\": \"(.xlsx)\"\n    }\n  )\n\n  if well_plate_metadata_lpath.value is None:\n    print(\"No well plate metadata provided.\")\n  else:\n    if well_plate_metadata_lpath.value != \"\":\n\n      use_metadata_sheet = True\n      well_plate_metadata_file = download_file_if_not_exists(well_plate_metadata_lpath.value)\n      well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n      assert type(well_plate_metadata_df) is dict\n      selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n      if selected_metadata_variables.value is None or selected_metadata_variables.value == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if well_plate_metadata_lpath.value is None:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if use_metadata_sheet is False:\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n  \n  if None not in [well_column.value, selected_metadata_variables.value]:\n    idx_to_row_id = {\n      0: \"A\",\n      1: \"B\",\n      2: \"C\",\n      3: \"D\",\n      4: \"E\",\n      5: \"F\",\n      6: \"G\",\n      7: \"H\",\n      8: \"I\",\n      9: \"J\",\n      10: \"K\",\n      11: \"L\",\n      12: \"M\",\n      13: \"N\",\n      14: \"O\",\n      15: \"P\",\n  }\n  \n  sheets_added = selected_metadata_variables.value\n  if sheets_added == []:\n    imported_qpcr_data = imported_qpcr_data[original_columns]\n  \n  for sheet_name, df in well_plate_metadata_df.items():\n    \n    if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      continue\n    \n    assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n    df = df.drop(columns=[\"Well\"])\n    imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(sheet_to_well_plate_map(df, idx_to_row_id))\n  \n  #Text to show if sheets are added\n  if len(sheets_added) > 0:\n    sheets_added_display = f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n    \n  if len(sheets_added) == 0:\n   sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n  \n  w_text_output(\n      content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n      appearance={\n        \"message_box\": \"success\",\n      },\n    )\n  return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\")\n\ndef make_line():\n  w_text_output(content=\"-----\")\n\nqpcr_data = imported_data\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n  prev_completed = True\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n  prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n  label=\"Select Cq value column\",  \n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n  }\n)\n\n# Remove Undetermined rows\ntry:\n  current_columns.append(cq_column.value)\nexcept:\n  print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n  label=\"Select target column\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"description\": \"This column contains your target and housekeeping genes.\",\n    \"placeholder\": column_select_placeholder,\n  },\n)\n\ntry:\n  housekeeping_options = qpcr_data[target_column.value].unique()\n  current_columns.append(target_column.value)\n  housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n  \nexcept:\n  housekeeping_options = []\n  housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n  label=\"Select the housekeeping gene:\", \n  options=housekeeping_options,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": housekeeping_placeholder,\n  },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n  label=\"Select the group column:\", \n  options=column_opts,\n  required=True,\n  readonly=not prev_completed,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    A group variable is a categorical variable used to organize data into distinct subsets, ensuring comparisons are made only within these subsets. For example, in an experiment repeated for multiple tissues using the same treatments, the group variable should be set to \"Tissue\" and the condition variable to \"Treatment\". This ensures that treatments are compared only within the same tissue type.\n    \"\"\"\n  },\n)\n\nif sample_column.value is not None:\n  current_columns.append(sample_column.value)\n\ntry: \n  column_opts = qpcr_data.columns\n  column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept: \n  column_opts = []\n  column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n  label=\"Select the experimental condition column:\",\n  options=column_opts,\n  readonly=not prev_completed,\n  required=True,\n  appearance={\n    \"placeholder\": column_select_placeholder,\n    \"description\": \"\"\"\n    The experimental condition variable stores the conditions you want to compare between samples, such as \"Treatment,\" \"Untreated,\" and \"Vehicle.\"\n    \"\"\"\n  },\n)\n\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select the control condition for \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation:\",  \n    readonly=True,\n    options=[],\n  )\nelse:\n  control_val = w_select(\n    label=\"Select control condition\", \n    options=qpcr_data[control_column.value].unique(),\n    appearance={\n      \"placeholder\": \"Select condition\xe2\x80\xa6\"\n    }\n  )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n  label=\"Select if targets and housekeeping genes are in the same well.\",\n  default=True,\n  readonly=qpcr_data is None,    \n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n  try:\n    delta_ct_option_signal(delta_ct_option.value)\n  except:\n    print(\"Not adding signal\")\nelse:\n  delta_ct_option._state[\"appearance\"] = {\"error_text\": \"* Required\"}\n\n\nmake_line()\n  \ntry:\n  current_columns = list(set(current_columns))\nexcept:\n  current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n  label=\"Add additional columns to include\", \n  options=[x for x in column_opts if ((x not in current_columns))], \n  default=sheets_added,\n  appearance={\n    \"help_text\": \"If no options appear, it means all columns are already included.\",\n  },\n)\ntry:\n  final_columns = current_columns + additional_columns.value\nexcept:\n  final_columns = []\n\n\nif not prev_completed:\n  exit()\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  current_columns = [well_column.value, cq_column.value, target_column.value, sample_column.value]\n  \n  if additional_columns.value is not None:\n    final_columns = current_columns + additional_columns.value\n    \n  else:\n    final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n  print(col)\n  if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n    try:\n      qpcr_data[col].str.strip()\n    except:\n      qpcr_data[col] = qpcr_data[col]\n      \nremapping_dict = {well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"}\n\n# Rename columns\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  control_column_value = control_column.value\n  if control_column.value in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n    control_column_value = remapping_dict[control_column.value]\n  qpcr_data = qpcr_data[list(final_columns)]\n  qpcr_data = qpcr_data.rename(columns={well_column.value: \'Well\', target_column.value: \'Target\', sample_column.value: \'Condition\', cq_column.value: \"Cq\"})\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\'Cq\'] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\'object\']).columns:\n  qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x04 \xe2\x88\x86\x0cCq,  \xe2\x88\x86 \xe2\x88\x86\x14Cq, and fold change.\rexperimental \x01\n&\n  if sample_column.value is not None:psample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n    \"error_text\": f\"* Required\"}\x0econtrol_column\x14\"Select a column\xe2\x80\xa6\"- - Select a control condition column first...\r* Required - \x01p\x06rint()\x12imported_qpcr_data\x02# \x02  \x02  U\n      well_opt = imported_qpcr_data.keys() if imported_qpcr_data is not None else []\x0eselected_sheet\x08well_opt\x05 = []\x01s\x05elect\x06Select\x08Are your\x12in the same ell as\r well as your\x01?\x01\"\x01\"\x03Yes\x04True\x16 are in the same well.\x06 ell a\x03and\tSelect if\xb0\x03\n\ndef find_best_match(columns, search_str):\n    # Check for exact match first\n    if search_str in columns:\n        return search_str\n    \n    # Find the best partial match with at least 2 matching starting letters\n    best_match = max(\n        (col for col in columns if col.startswith(search_str[:2])),\n        key=lambda col: sum(c1 == c2 for c1, c2 in zip(col, search_str)),\n        default=None\n    )\n    \n    return best_match\n* Required\tcq_column]\n\nif cq_column.value is None:\n  cq_column._state[\"appearance\"] = {\"error_text\": \"* Required\"}\rtarget_column\rtarget_column\x01\nd\nif target_column.value is None:\n  target_column._state[\"appearance\"] = {\"error_text\": \"* Required\"}\x11housekeeping_gene\x11housekeeping_gene\x06.value\x15\nhousekeeping_gene - \x1a= housekeeping_gene.value\n\x01 \x1a- housekeeping_placeholder\x01f\x01f\x02{}\x01{\x01}\x02\n\n*def find_best_match(columns, search_str):\n\x01 !and well_column.value is not None\x0b/output.csv\nqpcr_demo/\x02De\tqPCR_Demo\x02  \x02  ~os.system(\n        f\"/opt/mamba/envs/plots-faas/bin/aws s3 cp s3://latch-public/test-data/22353/output.csv {local_dir}\"\n    )\n\x03\"ls\x07cd root\'\n    os.system(\n        \"cd root\"\n    )\x01s\x02ls\x05 \\ ls,\n    os.system(\n        \"cd root \\ ls\"\n    )\x06cd ~ ]\x04\\ ls\x01~\tqPCR_Demo\x06/root/\n\n  if use_\x10use_test_data ==\x07:\n    q*well_default=latch:///qPCR_Demo/output.csv\x01\"\x01\"9\n    default=well_default=\"latch:///qPCR_Demo/output.csv\"\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x05\n    \xd5\x01else:\n    well_result_lpath = w_ldata_picker(\n      label=\"qPCR Machine Output\", \n      required=True,\n      default=\"latch:///qPCR_Demo/output.csv\"\n      appearance={\n      \"detail\": \"(.csv, .xlsx)\"\n      }\n    )\x01,\x07print()\x02  \x01)\x010\x04not \x05\n    :\n  appearance={\n        \"message_box\": \"success\",\n      },\x02  \x0b\n    w_text\x0fw_text_output()\x02()\x0c\n      \n    \ncontent=\"\"\x01\"\x02\"\"\x05\"\"\"\"\"\x07\n      \x01,>\n      appearance={\n        \"message_box\": \"success\",\n      },\x07warning\x07\n      \x05\n    \x0e\n    if not \"\"\x03A1 \x02 n\x03in ,list(imported_qpcr_data[well_column.value]):\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01\n\x01\n\xaf\x06  if control_column.value is not None:\n    w_text_output(content=f\"\"\"\n### Preview Study Design\nInspect the table below to see if groupings make sense.\n      \"\"\")\n    ###################\n    # Create table preview:\n    if control_column_value not in [\"Condition\", \"Target\"]:\n      group_values = qpcr_data[\"Condition\"].unique()\n      experimental_values = qpcr_data[control_column_value].unique()\n      markdown_table = create_comparison_table(group_values, control_val.value, experimental_values)\n    elif control_column_value == \"Condition\":\n      group_values = qpcr_data[\"Condition\"].unique()\n      markdown_table = create_comparison_table(group_values, control_val.value, None)\n    else:\n      markdown_table = None\n    if markdown_table is not None:\n      w_text_output(content=f\"\"\"\n{markdown_table}\n      \"\"\")\x02\n\n\xaf\x06  if control_column.value is not None:\n    w_text_output(content=f\"\"\"\n### Preview Study Design\nInspect the table below to see if groupings make sense.\n      \"\"\")\n    ###################\n    # Create table preview:\n    if control_column_value not in [\"Condition\", \"Target\"]:\n      group_values = qpcr_data[\"Condition\"].unique()\n      experimental_values = qpcr_data[control_column_value].unique()\n      markdown_table = create_comparison_table(group_values, control_val.value, experimental_values)\n    elif control_column_value == \"Condition\":\n      group_values = qpcr_data[\"Condition\"].unique()\n      markdown_table = create_comparison_table(group_values, control_val.value, None)\n    else:\n      markdown_table = None\n    if markdown_table is not None:\n      w_text_output(content=f\"\"\"\n{markdown_table}\n      \"\"\")\x13if well_result_file\x02  \x84\x05cq_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Cq values.\", options=well_result_df.keys())\n\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  well_result_df = well_result_df[well_result_df[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    well_result_df[col_name] = pd.to_numeric(well_result_df[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nwell_column = w_select(label=\"Select the column from the qPCR Machine CSV that has the Well ID (e.g. A1).\", options=well_result_df.keys())\x02  \x04file\x04file\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x03\n  \"\n  if cq_column.value is not None:\x01(#) and (cq_column.value is not None)\x0bwell_column\x08\n    w_e\x0fw_text_output()\ncontent=\"\"\x01C\x14Great! Continue to a\x16onwards fellow soldier\x01p\x06rint()\x0erun_name.value\x02# \x02# \x02# \x06.value\x02\"\"\x02YO\x02, \x0e, default=None\x01\n\t  print()\x02\"\"\x04YOOO\n and len()\x0erun_name.value\x04 > 0\x01\n\x06\nw_che\x16output_ready = w_check\x0cw_checkbox()\x02\"\"\x08label=\"\"\x19Check this box if folder \x1doutput folder looks correct: \x01f\x02{}\x03\\n \tout.value\noutput_dir\x06.path,\x02{}\x06run_am\nname.value\x01/\x01,\x0e default=False\x02\n\n\x01\n\x01\nroutput_ready = w_checkbox(label=f\"Check if output folder looks correct: \\n {output_dir.value.path}{run_name.value}\x01/\x12\", default=False)\n\x19\noutput_ready_signal = Si\x01n\x04gnal\x01N\x01(\x01)\x04None\x14output_ready_signal(\x01)\x12output_ready.value\x01q\x1dpcr_data_plotting = qpcr_dataQdata = data.rename(columns={\'old_name1\': \'new_name1\', \'old_name2\': \'new_name2\'})\n\tqpcr_data\x06target\x13target_column.value\x04well\x0bwell_column\x04Well\x03cq_\rcq_column.val\x03lue\x02Cq\x17, cq_column.value: \'Cq\'\x04targ\rtarget_column\x06Target\x01\n\x01\n\x02\n\n\x07printht\x07print()\x04well\x10well_result_file\x01.\x04name\x06\nprint\x1cprint(well_result_file.name)\t\nprinthte\x03pri\x8b\'import pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\n\n######################\n# Machine Data Sheet #\n######################\n\nw_text_output(\n  content=\"\"\"\n# Import Data\n## Import qPCR Readout File\n\nStart here by importing the output file from your qPCR machine. This file often contains columns such as _Cq_, _Target_, _Well_.\n\n\"\"\")\n\nimported_data = pd.DataFrame()\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (.csv, .xlsx)\")\n\n# Check if file is present\nif well_result_lpath.value is None:\n  exit(0)\n\nwell_result_file = well_result_lpath.value.download()\n\nprint(well_result_file.name)\nprint(well_result_file)\npr\n\n# Check if file is an excel file\nif \".xlsx\" in str(well_result_file):\n  imported_data = pd.ExcelFile(str(well_result_file))    \n  selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=imported_data.sheet_names).value\n  # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n  skiprows = 24\n  if skiprows is not None and selected_sheet is not None:\n    imported_data = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n# File is a CSV\nelse:\n  imported_data = pd.read_csv(well_result_file)\n\ncq_opt = imported_data.keys() if imported_data is not None else [\"Please select a file first\"]\n\n# Set column values\ncq_column = w_select(label=\"Select Cq value column\", options=cq_opt)\nwell_column = w_select(label=\"Select well column (e.g. A1)\", options=cq_opt)\n\nif (cq_column.value is not None) and (well_column.value is not None):\n  w_text_output(content=\"Machine data imported successfully.\")\n  current_columns = [cq_column.value, well_column.value]\n\nw_text_output(content=\"\"\"----\"\"\")\nsheets_added = []\n\n#############################\n# Metadata Sheet (Optional) #\n#############################\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Use Metadata Template\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\nuse_metadata = w_checkbox(label=\"Use metadata template file\", default=False)\n\nif use_metadata.value is False:\n  exit(0)\n\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\")\nif (well_plate_metadata_lpath.value is not None):\n  if well_plate_metadata_lpath.value != \"\":\n    use_metadata_sheet = True\n    well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n    well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n    assert type(well_plate_metadata_df) is dict\n    selected_metadata_variables = w_multi_select(label=\"Select sheets to combine with qPCR machine data\", options=well_plate_metadata_df.keys(), default=list(well_plate_metadata_df.keys()))\n\nif well_plate_metadata_lpath.value is None:\n  exit()\n\n# Ask for well_column and cq_column\nif cq_column.value is not None:\n  imported_data = imported_data[imported_data[cq_column.value] != \"Undetermined\"]\n  col_name = cq_column.value\n  try:\n    imported_data[col_name] = pd.to_numeric(imported_data[col_name])\n  except Exception:\n    raise ValueError(f\"The selected column {col_name} contains values that are not numbers.\")\n\nif use_metadata_sheet is False:\n  exit(0)\n  \nif None not in [well_column.value, cq_column.value, selected_metadata_variables.value]:\n  idx_to_row_id = {\n    0: \"A\",\n    1: \"B\",\n    2: \"C\",\n    3: \"D\",\n    4: \"E\",\n    5: \"F\",\n    6: \"G\",\n    7: \"H\",\n    8: \"I\",\n    9: \"J\",\n    10: \"K\",\n    11: \"L\",\n    12: \"M\",\n    13: \"N\",\n    14: \"O\",\n    15: \"P\",\n}\n\ndef sheet_to_well_plate_map(df):\n  well_plate_dict = {}\n  for idx, row in df.iterrows():\n    for col in df.columns:\n      try:\n        well_id = f\"{idx_to_row_id[idx]}{col}\"\n      except KeyError:\n        raise ValueError(f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\")\n      well_plate_dict[well_id] = row[col]\n  return well_plate_dict\n\nsheets_added = selected_metadata_variables.value\nfor sheet_name, df in well_plate_metadata_df.items():\n  if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n      # sheets_added.append(sheet_name)\n    continue\n  assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n  df = df.drop(columns=[\"Well\"])\n  imported_data[sheet_name] = imported_data[\"Well\"].map(sheet_to_well_plate_map(df))\n\nif len(sheets_added) > 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\")\nif len(sheets_added) == 0:\n  w_text_output(content=f\"Added {len(sheets_added)} sheets\")\n\n\n\n\n\n\n\x03unt\x08\nprint()\x0bos.getcwd()\timport os\x08\nprint()\x04wekk\x0bwell_result\x16well_result_lpath.name\x07.value.\x05.path\x05.path\x02# \x02# \x02# \x02# \x02# \x014\x02\xc3\xb7\x12  if column_ready:\x02# \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xa2\x06import pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\n\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine CSV\", default=\"latch://5727.account/dianne_qpcr_test/5-01-well-result.csv\")\nwell_plate_metadata_lpath = w_ldata_picker(label=\"Well Plate Metadata\", default=\"latch://5727.account/dianne_qpcr_test/5-01-qpcr-metadata.xlsx\")\n\nif well_result_lpath.value is not None:\n  well_result_file = well_result_lpath.value.download()\n  well_result_df = pd.read_csv(well_result_file)\n\nif well_plate_metadata_lpath.value is not None:\n  well_plate_metadata_file = well_plate_metadata_lpath.value.download()\n  well_plate_metadata_df = pd.read_excel(well_plate_metadata_file, sheet_name=None)\n  assert type(well_plate_metadata_df) is dict\x0cOutput (CSV \x06 or XL\x03Exe\ncel Sheet)\x01_\x10_current_columns\x10_current_columns\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x0e_imported_data\x01_\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\x0csheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\r_sheets_added\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x12imported_qpcr_data\x01\n\xd4\x01\nwell_col_signal = Signal(None)\ncq_col_signal = Signal(None)\ntarget_col_signal = Signal(None)\nhk_signal = Signal(None)\ntreat_col_signal = Signal(None)\ncontrol_signal = Signal(None)\ngroup_col_signal = Signal(None)\x02\n\n\xd3\x01well_col_signal = Signal(None)\ncq_col_signal = Signal(None)\ntarget_col_signal = Signal(None)\nhk_signal = Signal(None)\ntreat_col_signal = Signal(None)\ncontrol_signal = Signal(None)\ngroup_col_signal = Signal(None)d# Add a signal to trigger the next block\nimported_qpcr_data_signal(list(imported_qpcr_data.columns))\x02  \x02  \x02  \x02  \rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\rimported_data\x17well_downloaded = False\x1b\n    well_downloaded = True\x05file_\x14well_file_downloaded\x02\n\n*if well_file_downloaded is False:\n  exit()\x02  \xa5\x05for sheet_name, df in well_plate_metadata_df.items():\n        if selected_metadata_variables.value and sheet_name not in selected_metadata_variables.value:\n            # sheets_added.append(sheet_name)\n            continue\n    \n        assert \"Well\" in df.columns, \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n    \n        # assert df.shape == (\n        #     16,\n        #     24,\n        # ), f\"Well table has shape {df.shape}, not the required shape of 16 x 24\"\n        imported_data[sheet_name] = imported_data[\"Well\"].map(sheet_to_well_plate_map(df))\xdd\x11import pandas as pd\n\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(\n  content=\"\"\"\n## Import qPCR Readout File\n\nStart here by importing the output file from your qPCR machine. This file often contains columns such as _Cq_, _Target_, _Well_.\n\n\"\"\")\n\n\n# Read qPCR Result\nwell_result_lpath = w_ldata_picker(label=\"qPCR Machine Output (.csv, .xlsx)\")\n\n# Check if file is present\nif well_result_lpath.value is not None:\n  well_result_file = well_result_lpath.value.download()\n  \n  # Check if file is an excel file\n  if \".xlsx\" in str(well_result_file):\n    well_result_df = pd.ExcelFile(str(well_result_file))    \n    selected_sheet = w_select(label=\"Select results sheet from Excel file\", options=well_result_df.sheet_names).value\n    # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n    skiprows = 24\n    w_text_output(content=\"\"\"----\"\"\")\n    if skiprows is not None and selected_sheet is not None:\n      well_result_df = pd.read_excel(str(well_result_file), sheet_name=selected_sheet, skiprows=int(skiprows))\n      cq_column = w_select(label=\"Select Cq value column\", options=well_result_df.keys())\n      well_column = w_select(label=\"Select well column (e.g. A1)\", options=well_result_df.keys())\n      \n\n  # File is a CSV\n  else:\n    well_result_df = pd.read_csv(well_result_file)\n    w_text_output(content=\"\"\"----\"\"\")\n  # Set column values\n    cq_column = w_select(label=\"Select Cq value column\", options=well_result_df.keys() )\n    well_column = w_select(label=\"Select well column (e.g. A1)\", options=well_result_df.keys())\n  if (cq_column.value is not None) and (well_column.value is not None):\n    w_text_output(content=\"Machine data imported successfully.\")\n    current_columns = [cq_column.value, well_column.value]\nelse:\n\n  w_text_output(content=\"\"\"----\"\"\")\n\n  # Placeholder dropdowns \n  cq_column = w_select(label=\"Select Cq value column\", options=[\"Please select a file first\"])\n  well_column = w_select(label=\"Select well column (e.g. A1)\", options=[\"Please select a file first\"])\n\n\x01 \x06and \"\"\x01w\x04Well\x08 in qpcr\tqpcr_data\x01\n\x01\n\x06w_text\x0fw_text_output()\x01)\ncontent=\'\'\x02\"\"\x05\"\"\"\"\"\x02\n\n\x05  The\x03The\tThere the&are two typical experiment set ups the\x18ups that we often see: \",Single condition, or multiple conditions.\n  \x0b\n  In a sin\x04FOr \t\n        \x07print()\x03qcr\x04qcpr\x04qpcr\x13qpcr_data, control_\x14control_column_value\x03\n  \x07print()\x03*\'\'\x02\'\'\x08hello pa\x16appending group columnT\n  if sample_column.value is not None:\n  current_columns.append(sample_column.value)\x03\n  \x03\n  T\n  if sample_column.value is not None:\n  current_columns.append(sample_column.value)\x0econtrol_column\x03\n  \x03\n  \n\n  print()\x0fcurrent_columns\x03\n  \x19\n  print(current_columns)\x05\n     else:\n    final_columns.append()\x14control_column_value\x0c\n    if cont\x19control_column_value is o\tnot None:\x02  \x07\n    \"\"\x04helpxappearance={\n    \"help_text\": \"This contains your housekeeping gene\",\n    \"placeholder\": column_select_placeholder,\n  },\x05_text\x16: This is the highest \x17main condition of inter;he highest level split of your samples. It is likely a drug\tcondition\x18that you have split your\x0e or condition.\x07 column\x12\n    \"help_text\": \x0b\n# Created \x06 impot\x0crted data DF\x0bAssume file\x01F\x01 \t\n# Add UI text to show if sheets are added\x01T\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xde\x01import warnings\nimport pandas as pd\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\nfrom lplots.reactive import Signal\n\nif \"delta_\x0bdelta_cq_df#_signal\" not in globals():\n  delta_\x0bdelta_cq_df\xb3\x01_signal = Signal(delta_ct_signal())\n\nremove_outliers_signal = Signal(False)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\"Relative Expression\"] = pd.to_numeric(2 ** (-df_group[\'\x06\xf0\x9d\x9a\xabCq\x1e\']))\n  df_group[\'Mean Control \x06\xf0\x9d\x9a\xabCq\x18\'] = df_group[(df_group[\ntreat_col_\x06signal\x01(\x01)\x1a] == control_val.value)][\"\x06\xf0\x9d\x9a\xabCq\x1a\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq\x0f\"] = df_group[\"\x06\xf0\x9d\x9a\xabCq\x1c\"] - df_group[\"Mean Control \x06\xf0\x9d\x9a\xabCq4\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq\xbe\x01\'])\n  df_group[\"Percent Expression\"] = (df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq0 Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq_. This will be calculated using the value you selected earlier as your control condition.\"\"\")\n\n\x01\n\x0bdelta_cq_df\x1d = delta_ct_signal()\n\nif len(\x0bdelta_cq_df<) == 0:\n  w_text_output(\ncontent=f\"\"\"\nWarning: Fix error in \x06\xf0\x9d\x9a\xabCq\x11 calculation cell\n or comple\x10te earlier steps@.\n\"\"\",\nappearance={\n\"message_box\": \"warning\",\n  })\n  exit()\n\nif \x12treat_col_signal()1 is None:\n  exit()\n\ndef calculate_delta_delta_ct(\x14control_column_value\x12, control_val):\n  \x0bdelta_cq_df\x14 = delta_ct_signal()\x01 >\n  grouping_columns = [target_col_signal(), treat_col_signal()\x01]\x17\n  if group_col_signal(+) is not None:\n    grouping_columns.append(\x12group_col_signal()\x01)\x03\n  \x03\n  zgroups = []\n  group_text = []\n  is_tuple = False\n  \n  # Create Groups\n  if len(grouping_columns) == 3:\n    is_tuple = True\x0e\n    for x in \x0bdelta_cq_df\x01[\x12group_col_signal()\n].unique()\x01:\x01\n\x02  \r    for i in \x0bdelta_cq_df\x01[\x13target_col_signal()\x0c].unique():\n\x02  \x17        groups.append((\x01x\x02, \x01i\x03))\n\x02  #        group_text.append(f\"Group: \x01{\x01x\x01}\x02 |\x01 \tTarget: {\x01i\x01}\x02 |\x01 \x07Control\x01:\x02 {\x12treat_col_signal()/} = {control_val.value}\")\n  else:\n    for i in \x0bdelta_cq_df\x01[\x13target_col_signal()=].unique():\n      groups.append(i)\n      group_text.append(f\"\x06Target\x05: {i}\x02 |\x0b Control: {\x12treat_col_signal()\x89\x01} = {control_val.value}\")\n  \n  \n  # Create result dataframes\n  if len(groups) > 0:\n    ctrl_dataframes = {}\n    dataframes = {}\n    \n    \x0bdelta_cq_df\x08_temp = \x0bdelta_cq_df\x10\n    hk_genes = \x0bdelta_cq_df\x1f[\"Housekeeping Gene\"].unique()\n$    \n\n    for hk in hk_genes:\n      \x0bdelta_cq_df\x1b = delta_ct_signal()\n      \x0bdelta_cq_df\x03 = \x0bdelta_cq_df\x01[\x0bdelta_cq_df%[\"Housekeeping Gene\"] == hk]\n      # \x0bdelta_cq_df\x03 = \x0bdelta_cq_df\xc7\x01.drop([\"Housekeeping Gene\"], axis=1)\n  \n      for i in range(len(groups)):\n        if is_tuple:\n          # Control DF\n          df_name = f\"ctrl_{groups[i][0]}_{hk}_{groups[i][1]}\"\n          data = \x0bdelta_cq_df\x02[(\x0bdelta_cq_df\x01[\tgroup_col\x07_signal\x02()\x0f] == groups[i][\x010\x06]) & (\x0bdelta_cq_df\x01[\x11target_col_signal\x02()0] == groups[i][1])]\n          data = data[(data[\x11treat_col_signal(\x01)q] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control \x06\xf0\x9d\x9a\xabCq\x10\'] = data[(data[\x11treat_col_signal(\x01)\x1a] == control_val.value)][\"\x06\xf0\x9d\x9a\xabCq|\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n    \n          # Delta Delta DF\n          df_name = f\"\xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq6_{groups[i][0]}_{hk}_{groups[i][1]}\"\n          data = \x0bdelta_cq_df\x02[(\x0bdelta_cq_df\x01[#group_col_signal()] == groups[i][0]\x05) & (\x0bdelta_cq_df\x01[$target_col_signal()] == groups[i][1]\xcf\x01)]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          # Control DF\n          df_name = f\'ctrl_{groups[i]}_{hk}\'\n          data = \x0bdelta_cq_df\x01[\x0bdelta_cq_df\x01[\x13target_col_signal(),] == groups[i]]\n          data = data[(data[\x11treat_col_signal(\x01)_] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \x06\xf0\x9d\x9a\xabCq\x0b\'] = data[\"\x06\xf0\x9d\x9a\xabCq)\"].mean()\n          print(data[[\"Group\",\"\x06\xf0\x9d\x9a\xabCq\x10\",\"Mean Control \x06\xf0\x9d\x9a\xabCqw\"]])\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n    \n          # Delta Delta DF\n          df_name = f\'\xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq$_{groups[i]}_{hk}\'\n          data = \x0bdelta_cq_df\x01[\x0bdelta_cq_df\x01[\x13target_col_signal()\xd5\x02] == groups[i]]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n  \n    for name, df in ctrl_dataframes.items():\n        locals()[name] = df\n    for name, df in dataframes.items():\n        locals()[name] = df\n    \n    control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n    delta_\x0bdelta_cq_df\xc5\x01 = pd.concat(dataframes.values(), ignore_index=True)\n    group_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in group_text])\n    result_bullets = [g for g in list(dataframes.keys())]\n\n    return delta_\x0bdelta_cq_dfZ, dataframes.items(), group_bullets, result_bullets, grouping_columns, control_df\n\n\ndelta_\x0bdelta_cq_dff, result_dfs, group_bullets, result_bullets, grouping_columns, controls_df = calculate_delta_delta_ct(\x12treat_col_signal()\x82\x01, control_val)\n\n# for name, df in result_dfs:\n#   locals()[name] = df\n#   try:\n#     del df\n#   except:\n#     print(\"Skip\")\ndelta_\x0bdelta_cq_df\x0e_signal(delta_\x0bdelta_cq_df\x01)\x01\n\x06delta_\x0bdelta_cq_df\x0b_plotting =\x01 \x06delta_\x0bdelta_cq_df\x11.rename(columns={\x11treat_col_signal(\x01)\x03: \'\x07Treatme\x01n\x01t\x01\'\x02})\x01\n+w_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCqo will be calculated in the following groups:\n{group_bullets} \\n\n\n### Controls\n\nWe start by getting the average \x06\xf0\x9d\x9a\xabCq\xbd\x01 value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \x06\xf0\x9d\x9a\xabCq6``` column for each group will be subtracted from the \x06\xf0\x9d\x9a\xabCq@ of each biological replicate:\"\"\")\n\nw_text_output(content=\"\"\"\n$$\x0f\\Delta\\Delta {C\x01q\r} = \\Delta {C\x01q\x1c} - {Mean Control} \\Delta {C\x01q\x01}9$$\n\"\"\")\n\nw_text_output(content=f\"\"\"\nInspect the ```delta_\x0bdelta_cq_df:``` table to view all results. You can see the new ```\xf0\x9d\x9a\xab\x06\xf0\x9d\x9a\xabCq\xa7\x02``` column and other statistics columns in this created dataframe. \n\"\"\")\n\n####################\n# Save output table\nlatch_path = outdir_signal()\nrun = run_name_signal()\nif latch_path is None or run is None or output_ready_signal() is False:\n  exit()\nos.makedirs(f\"./{run}\", exist_ok=True) \ndelta_\x0bdelta_cq_dfD.to_csv(f\"./{run}/results.csv\")\nlatch_path.upload_from(f\"./{run}\")\n\n\x07text_ut\toutput = \x02()\x01)\x02w_\x08content-\x03=\"\"!Now we are going to calcullate De2ate Delta Delta Ct. First, you need to select the \ryour groups. \x18what your control condit\xef\x17import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"Now we are going to calculate Delta Delta Ct. First, you need to select what your control condi. \")\ncontrol_column = w_select(label=\"Select column with control condition\", options=delta_ct_df.columns)\n\n\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n    if (control_column.value != sample_column.value) & (control_column.value != target_column.value):\n      grouping_columns = [target_column.value, sample_column.value, control_column.value]\n    elif (control_column.value == sample_column.value):\n      grouping_columns = [target_column.value, control_column.value]\n    elif (control_column.value == target_column.value):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[target_column.value].unique():\n        for j in delta_ct_df[sample_column.value].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[target_column.value].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, target_column.value, sample_column.value)\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      dataframes = {}\n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[target_column.value] == groups[i][0]) & (delta_ct_df[sample_column.value] == groups[i][1])]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n        else:\n          df_name = f\'df_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[target_column.value] == groups[i]]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n      \n      # Example usage of the created dataframes\n      for name, df in dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n  \x02io\x07tion is.Is it a sample type? Is it a drug? Select that!e column that contains it and we\'\rthis control \x01.\x14This is most likeley\x18 or a drug concentration\x01.\x04the \x11that contains the\xf9\x01control_column = w_select(label=\"Select column with control condition\", options=delta_ct_df.columns)\n\n\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  \x15if control_val is ot \x18.value is not None:\n    \x02  \x0cw_text_out()\x02\"\"\x01\"\x02hi\x02\n\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")(w_text_output(content=f\"Hello, {name}!\")\x18\n    if contrcontrol_val(control_val.value != target_column.value\x01(\x01)\x1c(sample_column.target_column\x08value | \x01:\x01(\x01)\x18& (control_val.value != \x1bWe notice that you have gen\x01 \x0bselected a \x01\n\x90\x01w_text_output(content=f\"\"\"\nYou can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{result_bullets} \\n\n\n\"\"\")\x0fInspect the ```\x14\n\nInspect the ``````\x06delta_\xee+import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\nfrom lplots.reactive import Signal\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\ntry: \n  print(delta_ct_group.value)\n  \nexcept: \n  print(\"delta_ct_group is None\")\n    \n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\n\ncontrol_column = w_select(\n  label=\"Select control condition column\",\n  options=seq(),\n  readonly=delta_ct_group is None,\n  appearance={\n    \"placeholder\": \"Select a column\xe2\x80\xa6\",\n  },\n)\n\ngroups_done = False\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select control condition\", \n    readonly=True,\n    options=[],\n    appearance={\n      \"placeholder\": \"Select control column first\xe2\x80\xa6\"\n    }\n  )\n  exit()\n  \ncontrol_val = w_select(\n  label=\"Select control condition\", \n  options=set(delta_ct_df[control_column.value]),\n  appearance={\n    \"placeholder\": \"Select condition\xe2\x80\xa6\"\n  }\n)\n\n\n\nif control_val.value is None:\n  exit()\n  \n# Determine columns to group on\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  is_tuple = True\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n\n\n# Create result dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n  dataframes = {}\n  \n  delta_ct_df_temp = delta_ct_df\n\n  for i in range(len(groups)):\n    if is_tuple:\n      # Control DF\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = data[(data[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      # Control DF\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = data[(data[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[\"\xf0\x9d\x9a\xabCt\"].mean()\n      print(data[[\"Group\",\"\xf0\x9d\x9a\xabCt\",\"Mean Control \xf0\x9d\x9a\xabCt\"]])\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  for name, df in dataframes.items():\n      locals()[name] = df\n  \n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n  # delta_delta_ct_df_columns = delta_delta_ct_df.columns\n\n  delta_delta_ct_df_columns_signal(list(delta_delta_ct_df.columns))\n\n\ngroup_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in group_text])\nresult_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{group_bullets} \\n\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate:\"\"\")\n\nw_text_output(content=\"\"\"\n$$\n\\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control} \\Delta {Ct}\n$$\n\"\"\")\n\nw_text_output(content=f\"\"\"\nYou can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{result_bullets} \\n\n\nInspect the ```delta```\n\n\"\"\")\n\nw_text_output(content=f\"\"\"\nInspect the ```\n\n\"\"\")\n\x05delta\r_delta_ct_df \x1b table to view all results.\x01)\x01\"\x03\"\")\x01\n\x04tryL\x01\n\x08  del df\x08.items()\x01\n\x01\n\x01\n\x1fdelta_ct_df = delta_ct_signal()\x10else:\n          \x03df_\tgroups[i]\x16\n          delta_ct_df\x01\'3\n          dataframes[df_name] = pd.DataFrame(data)\rdelta_ct_df[]\x01]\x02\"\"\x08target_v\x0ccolumn.value2\n          data = delta_ct_df[target_column.value]\x0cdelta_ct_df[\x10 == groups[i][0]\x01(\x05) & ]2(delta_ct_df[target_column.value] == groups[i][0])\rsample_column\x011\x04data\xb9\x01\n          data = delta_ct_df[(delta_ct_df[target_column.value] == groups[i][0]) & (delta_ct_df[sample_column.value] == groups[i][1])]\n          dataframes[df_name] = pd.DataFrame(data)\t\n        \'locals()[var_name] = pd.DataFrame(data)\x02  \x02  \x04name\x02df\x9a\x01\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.%We start by getting the average\xf0\x9d\x9a\xabCt\x01 7 value of the control condition in every group. Below, \x1eYou can navigate to the ``````\rcontrol_table9 to see all the replicates that will be used as controls.\xd8\x01\n\nThe Mean Control \xf0\x9d\x9a\xabCt for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt column below in the dataframe created for each group: {list(dataframes.keys())}\x03```\n``` column\x01`\x02``\xec$import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is None:\n  exit()\n  \ncontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\nif control_val.value is None:\n  exit()\n  \n\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n  is_tuple = True\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\nprint(groups, \"Target\", \"Condition\")\n\n\n# Create control dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n  # Example usage of the created dataframes\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n  # Create delta delta cf dataframe\n  dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n    else:\n      df_name = f\'df_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n  \n  # Example usage of the created dataframes\n  for name, df in dataframes.items():\n      locals()[name] = df\n\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the ne`w ``\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt column below in the dataframe created for each group: {list(dataframes.keys())}\n\n\"\"\")\n\n\x03```\x02w \x01\n2\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\x17list(dataframes.keys())\x14Calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\x0b\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_\x01\n\x01\n\xa7%import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is None:\n  exit()\n  \ncontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\nif control_val.value is None:\n  exit()\n  \n\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n  is_tuple = True\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\nprint(groups, \"Target\", \"Condition\")\n\n\n# Create control dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n  # Example usage of the created dataframes\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n  # Create delta delta cf dataframe\n  dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n    else:\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n  \n  # Example usage of the created dataframes\n  for name, df in dataframes.items():\n      locals()[name] = df\n\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n\n\n#\n## Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{\', \'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])}\n\n\"\"\")\n\n\x02/n\x01<\x02# \x02# \x02# \x02# \x02# \x02# \x02# ?\n\nw_text_output(content=f\"We notice that you have selected a \")\x0cIgnore tis c\x04hise\x17s cell, Bronte\'s coding\x03\n\n\n\xa3\x01run_name = w_text_input(label=\"Run Name:\")\n\noutput_dir = w_ldata_picker(\n  label=\"Select output directory\", \n  required=True,\n  default=\"latch:///qpcr_outputs/\"\n)\n\x02# \x02# \x02# \x02# \x02# \x02# \x16\n# Save output table\n\n$\nfrom latch.ldata.path import LPath\n9\nlatch_path = LPath(\"latch:///welcome/deseq2/design.csv\")\x02# \x07print()\noutput_dri\x08ir.value\x05.path\x02\n\n\x7flatch_path = LPath(\"latch:///welcome/deseq2/design.csv\")\n  latch_path.upload_from(\"./test.txt\")\n  print(local_path.read_text())\x02# \x10output_dir.value\x02# \n\npd.to_csv\x11delta_delta_ct_df\x02()\x02\"\"\x92\x04\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n  \n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\'/\')[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n      \n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \n./test.txt\x11delta_delta_ct_df\x07results\x03csv\r./results.csv\x07 + run+\x06_name,\x01/\x06.value\x05.path\x06LPath(\x01)\x03 } \x04+ \"\"\x01\"\x01/\x02# \x02# \x08\nprint()\x03lat\nlatch_path\x0frun_name.value/\x01f\x01{\x01}!f\"./{run_name.value}/results.csv\"\x11\nos.mkdir(path) \n\x0erun_name.value\timport os\x07OSError\x04os \n\x16f\"./{run_name.value}/\"E\ntry:\n    os.mkdir(path)\nexcept OSError as error:\n    print(error)   !os.mkdir(f\"./{run_name.value}/\") \x08NameErro\x01\"\x01\"\x01u\x02yo\x01\n\x11, , exist_ok=True\x08makedirs\x0c\nimport os \n\x02\n\n`run_name_signal(run_name.value)\nif outdir_signal.value is not None:\n  outdir_signal(output_dir)\n\x15\n####################\x11run_name_signal()\routdir_signal\x11run_name_signal()\x01)\t\nrun_name\x03  =\x13= run_name_signal()\x01)\x03run\x03run\x03run\t\nif latch\"latch_path is None or run is None:\x02  \x02  \x02  \x03\n  \x08  exit()\x01)G\n\n####################\n# Save output table\nlatch_path = outdir_signal()\x06.value=\nrun = run_name_signal()\nif latch_path is None or run is None\x01:\x01\n\x85\x01  exit()\nos.makedirs(f\"./{run}\", exist_ok=True) \ndelta_delta_ct_df.to_csv(f\"./{run}/results.csv\")\nlatch_path.upload_from(f\"./{run}\")\n\x01 \x10\ngroup_text = []\x01]\x12group_text.append(a\n    group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")Df\"Group: {i}. Control: {control_column.value} = {control_val.value}\"3\n\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\x01\n\x95\x01w_text_output(content=\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\"\"\")\n\x01f\xe4\x02\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {\', \'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\x02\n\n\xd8\x02  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {\', \'.join([f\'* ```{gene}```\' for gene in ()])} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\n\x06Groups6\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:0{\', \'.join([\'* ```{g}```\' for g in group_text])}\x02# \x02# \x02# \x02# \x02# \x01f\x01-\x01*\x01\n\x01T\x02he\x17will be subtracted from\x0ceach biologc\x04ical\x01\n\x8a\x01from lplots.reactive import Signal\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\x01_\x05delta\x02\n\n9if remove_outliers.value is True:\n  delta_ct_df = outlier\noutlier_df\x01\n\x0cresult_df = \x02  \x11delta_delta_ct_df\x8d\x03\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\"\"\")\n\n\nw_text_output(content=f\"\"\"\nThe Mean Control \xf0\x9d\x9a\xabCt for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt column below in the dataframe created for each group: {list(dataframes.keys())}\n\"\"\")\x05\nw_te\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x01\n\xf9\x02def calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\x9d\x01import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n\n\xc3\x03def calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\xc3\x03def calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\x02  \x02  \x02  \x03\n  \x02  \x02  \xf4\x05dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x07control\x07\n      \x02  !# Create delta delta cf dataframe\x81%import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\nif remove_outliers.value is True:\n  delta_ct_df = outlier_df\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create control dataframes\n    if len(groups) > 0:\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n      # Create delta delta cf dataframe\n      dataframes = {}\n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n        else:\n          df_name = f\'df_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n      \n      # Example usage of the created dataframes\n      for name, df in dataframes.items():\n          locals()[name] = df\n  \n      delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n  \n\n  \x02  \x02  \x05\n    \x05\n    \x02  \x02  \xfb\x01w_text_output(content=f\"Now we are going to subtract the Mean Control \xf0\x9d\x9a\xabCt for each group from the \xf0\x9d\x9a\xabCt of every biological replicate. You can see the new \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt column below in the dataframe created for each group: {list(dataframes.keys())}\")\t\n  exit()\x01)\x03\n  *\nif control_column.value is None:\n  exit()\x0bcontrol_val\x03\n  \x02\n\n\xe0\x01w_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\x08# Groups+will be calculated in the following groups:\x02# \x01i\x02# \x05group\x01c\x06df_grp\x03oup\x1dcalc_delta_delta_ct(df_group)\x04data\r\n  df_group[]\x02\'\'\x01\'\x07Controo\x05l _CtF = = df[(df[control_column.value] == control_val.value)][\"_Ct\"].mean()\x03Ave\x04Mean\x02 f\x02- \x0bfor Control\x08df_group\x08df_group df_group[\'Mean _Ct for Control\']\x08df_group\x08df_group\x08df_group\x08df_group\x08df_group\x08Control \x10Mean Control _Ct<  df[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-df[\'__Ct\'])\x0bFold Change<  df[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-df[\'__Ct\'])\x02df\x08df_group\x08df_group\x08df_group\nExpression\nRepression\x08df_group\x0bFold Change\x08df_group\x07data = +\n          data = calc_delta_delta_ct(data)\t\n        =delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\x06delta_\ndataframes\x02\n\n\x8f\x01import warnings\n\n# Ignore specific pandas warnings or all warnings\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\x01T\nhis will b\x01 \x1de calculated using the value \x01u\x0cyou selected\x10 earlier as your\n### Groups\x07Results\x04\n\n\n\n\n### Groups\x07Contros\x01l\x0e\n\n### Controls\x07Results\x02\n\n\x1e\nThe control groups for every \x02\n\n\x02\n\n\x14delta_ct_group.value\x01#\" to update\n#remove_outliers. v avl\x11value to update\n\n\x06print(\x01)\x06print(\x01)6\n## DON\'T DELETE THE PRINT STATEMENTS BELOW\n# WE NEED \x05# the\x02We\x0fWe need to vall\x07call \"\"\x06.valye\x02ue\x17 on the two cells that \x03on \x12 on the two cells \x02on\x04 the\x10on the two cells\x06 OTHER\x18, OTHERWISE THIS CELL WO\x07ILL MOT\tNOT REACT\x03CAL\nalculation\x03\n  Gdf_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\x1e2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])A\n  df_group[\"Percent Expression\"] = (df_group[\"Fold Change\"]*100)\x1adelta_delta_cq_df_plotting# = delta_delta_cq_df_plotting.dropt\x02()\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x01\n\x01\n\x01\n\x06\ntry: \x02  \x03\n  \x0f\nexpect: \n  pri\x02  \x03\n  \x06except\n\n  print()\x02\"\"\x14delta_ct_group doesn\x07is none\x01N\x03\n  \x03\n  \x05\n  ty\x04ry: \x02  \x05\n    \n\n  except \x11: \n    seq = Sing\x02gn\x02  \x02  \x08Signal()\x02[]\x03\n  \x03\n  \x01\n\x04,\n  \x12 control condition\x07 column\x06placeH\tholder={}\x08\n    \n  \rappearance={}\x08\n    \n  \x02\"\"\x01s\x0bplaceholder\x04: \"\"\x0fSelect a colu,n\x05mn\xe2\x80\xa6\x07\n  read\x1ddonly=delta_ct_group is None,\x01,\x01,\x05\n    \x05\n    \x10\n    readonly=\"\"\x01t\x04True\x05\n    \x01,\x10,\n    placehlder\x06older=\rappearance={}\x0c\n      \n    \x02\"\"\x0bplaceholder\x04: \"\"\x08Selct a \x08ect Cont\x05connt\x03rol\x14trol column first\xe2\x80\xa6\x03\n  \x02  \x02  \x03\n  \x02  \x01\n\x06,\n  se\x02  \x02  \x02  \x02  \x06select\x03sel\x06electC\rappearance={}\x08\n    \n  \x02\"\"\x0bplaceholder\x04: \"\"\x04Sele\rect condition\x03\xe2\x80\xa6\x04\"\xe2\x80\xa6\x01\"\x04\"\xe2\x80\xa6\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCq\x06\xf0\x9d\x9a\xabCt\x01f\x03low\x03at(\x01)\x01/\r.to_numeric()\x10\n  .to_numeric()!df_group[\"Relative Expression\"] =\x1fdf_group[\"Relative Expression\"]\xe9,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\nfrom lplots.reactive import Signal\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\ntry: \n  print(delta_ct_group.value)\n  \nexcept: \n  print(\"delta_ct_group is None\")\n    \n\ndef calc_delta_delta_ct(df_group):\n  df_group[\"Relative Expression\"] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Relative Expression\"] df_group[\"Relative Expression\"]=.to_numeric()\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Expression\"] = (df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\n\ncontrol_column = w_select(\n  label=\"Select control condition column\",\n  options=seq(),\n  readonly=delta_ct_group is None,\n  appearance={\n    \"placeholder\": \"Select a column\xe2\x80\xa6\",\n  },\n)\n\ngroups_done = False\nif control_column.value is None:\n  control_val = w_select(\n    label=\"Select control condition\", \n    readonly=True,\n    options=[],\n    appearance={\n      \"placeholder\": \"Select control column first\xe2\x80\xa6\"\n    }\n  )\n  exit()\n  \ncontrol_val = w_select(\n  label=\"Select control condition\", \n  options=set(delta_ct_df[control_column.value]),\n  appearance={\n    \"placeholder\": \"Select condition\xe2\x80\xa6\"\n  }\n)\n\n\n\nif control_val.value is None:\n  exit()\n  \n# Determine columns to group on\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  is_tuple = True\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n\n\n# Create result dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n  dataframes = {}\n  \n  delta_ct_df_temp = delta_ct_df\n\n  for i in range(len(groups)):\n    if is_tuple:\n      # Control DF\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = data[(data[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      # Control DF\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = data[(data[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[\"\xf0\x9d\x9a\xabCt\"].mean()\n      print(data[[\"Group\",\"\xf0\x9d\x9a\xabCt\",\"Mean Control \xf0\x9d\x9a\xabCt\"]])\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  for name, df in dataframes.items():\n      locals()[name] = df\n  \n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n  # delta_delta_ct_df_columns = delta_delta_ct_df.columns\n\n  delta_delta_ct_df_columns_signal(list(delta_delta_ct_df.columns))\n\n\ngroup_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in group_text])\nresult_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{group_bullets} \\n\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate:\"\"\")\n\nw_text_output(content=\"\"\"\n$$\n\\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control} \\Delta {Ct}\n$$\n\"\"\")\n\nw_text_output(content=f\"\"\"\nYou can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{result_bullets} \\n\n\nInspect the ```delta_delta_ct_df``` table to view all results.\n\n\"\"\")\n\x02= \x0epd.to_numeric(\x01+\x02))\x01\n\x01\n\x01\n\x01\n\x0b\n$$\\KaTeX$$\x14\n    # Create Groups\x02\n\n\xa0\x02df[\"control_delta_ct_mean\"] = df[(df[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df[\"__Ct\"] = df[\"_Ct\"] - df[\"control_delta_ct_mean\"]\n  df[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-df[\'__Ct\'])\n  df[\"Percent Repression\"] = 100-(df[\"Percent Relative Exp / Fold Exp\"]*100)\x02\n\n\x01\n\xce\x02\ndef cal_delta_delta_ct(df):\n  df[\"control_delta_ct_mean\"] = df[(df[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df[\"__Ct\"] = df[\"_Ct\"] - df[\"control_delta_ct_mean\"]\n  df[\'Percent Relative Exp / Fold Exp\'] = 2 ** (-df[\'__Ct\'])\n  df[\"Percent Repression\"] = 100-(df[\"Percent Relative Exp / Fold Exp\"]*100)\n  return df\n  \x12\n          print()\x04data\x01:\x1c\n    returndelta_delta_ct_df\x02# \x01 \x05\n    \x05\n    \x05\n    \x02  \x02  \x01\\\x05\n    \x01\n@group_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in group_text])\nNresult_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])\n\xfc\x05w_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{group_bullets} \\n\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate:\"\"\")\n\nw_text_output(content=\"\"\"\n$$\n\\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control} \\Delta {Ct}\n$$\n\"\"\")\n\nw_text_output(content=f\"\"\"\nYou can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{result_bullets} \\n\n\nInspect the ```delta_delta_ct_df``` table to view all results.\n\n\"\"\")\x01\n\x02  \x02  \x02  \x02  \x02  \x02  \x01\n\x01\n\x07, group\x13group_bullets, resu\x0eresult_bullets\x01\n\x02  \x02  \x1areturn delta_delta_ct_df, \x1dgroup_bullets, result_bullets\x01\n\x01\n\x13delta_delta_ct_df, \x1dgroup_bullets, result_bullets\x03 = \x1bcontrol_column, control_val\x19calculate_delta_delta_ct(\x0econtrol_column\x0e, control_val)\x03\n  \x14\n  delta_ct_signal()\x12delta_ct_signal = \x02df\x01\n\x07print()\x02::\x02\"\"\x01\"\x02HI\x01\n\x01\n\x06print(\x01)\x11control_val.value\x16remove_outliers_signal\x03\n  \n\n  if bio \x02\"\"\x01\"\x03Bio\x06 Repli\x0b Replicate \x1d in delta_ct_df.columns:\n    \x15\n  delta_ct_df_temp  \r= delta_ct_df\x03\n  \x10delta_ct_df_temp\x1a\n    delta_ct_df_temp.drop/if \"Bio Replicate\" in delta_ct_df_temp.columns:\x04Well6\n      if \"Bio Replicate\" in delta_ct_df_temp.columns:+delta_ct_df_tempdf.drop([\'B\', \'C\'], axis=1)\x03\n  \x02  \x11# Drop columns o \x05to gr#Average across biological replicate\x10group can be vir\x01r\x08esult_df\x02, \ndataframes\t.values()\x02, \x01s\x01\n\x01\n\x10for name, df in \x12dataframes.items()\x04:\n  \x06      \x13locals()[name] = df\tresult_df\x01s\x05del b\x02df\x12, grouping_columns\x12, grouping_columns\x03\n  \x01\n\x05\nif \"\x10qpcr_data_signal\x16\" not in globals():\n  \x10qpcr_data_signal\n = Signal(\x02[]\x01)\x18delta_delta_ct_df_signal\x18delta_delta_ct_df_signal\x1a\ndelta_delta_ct_df_signal(\x01)\x11delta_delta_ct_df\x03# H\x05\n    \x05\n    \x05\n    \x05\n    \x05\n    \x07\n      \x11\n      control_df\x08\n      w\xd7\x18import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"Now we are going to calculate Delta Delta Ct. First, you need to select what your control condition is. This is likely a sample type or a drug concentration. \")\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\n\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n    if (control_column.value != sample_column.value) & (control_column.value != target_column.value):\n      grouping_columns = [target_column.value, sample_column.value, control_column.value]\n    elif (control_column.value == sample_column.value):\n      grouping_columns = [target_column.value, control_column.value]\n    elif (control_column.value == target_column.value):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[target_column.value].unique():\n        for j in delta_ct_df[sample_column.value].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[target_column.value].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, target_column.value, sample_column.value)\n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      dataframes = {}\n\n      \n      control_df\n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[target_column.value] == groups[i][0]) & (delta_ct_df[sample_column.value] == groups[i][1])]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n        else:\n          df_name = f\'df_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[target_column.value] == groups[i]]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n      \n      # Example usage of the created dataframes\n      for name, df in dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n  \x05_text\x06w_text\x0fw_text_output()\x02\"\"\x01W\ncontent=\"\"\x0bWe start ny\x17by getting the average \x01 \x0bdelta_ct_df\x0bdelta_ct_df\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x14control_column_value\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x1cprint(control_column_value)\n\x0bdelta_ct_df\x0bdelta_ct_df\x06\xf0\x9d\x9a\xabCt\x14control_column_value\x14control_column_value\x0bdelta_ct_df\xe1\x03\n  # Determine columns to group on\n  if (control_column_value != \"Condition\") & (control_column_value != \"Target\"):\n    grouping_columns = [\"Target\", \"Condition\", control_column_value]\n  elif (control_column_value == \"Condition\"):\n    grouping_columns = [\"Target\", control_column_value]\n  elif (control_column_value == \"Target\"):\n    w_text_output(content=\"Error, target column cannot be the control condition.\")\n    exit()\n  else:\n    w_text_output(content=\"Error.\")\n    exit()\n  \x0bdelta_ct_df\x08\"Target\"2      for j in delta_ct_df[\"Condition\"].unique():\n\x01i\x01j\t{(i, j)}.\x01:\x14control_column_value\x0bdelta_ct_df\x08\"Target\"\x05Group\x01.\x14control_column_value\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x14    print(hk_genes)\n\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x08\"Target\"\x010\x0bdelta_ct_df\x0b\"Condition\"\x14control_column_value\x06\xf0\x9d\x9a\xabCt\x14control_column_value\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x0bdelta_ct_df\x0bdelta_ct_df\x19\"Target\"] == groups[i][0]\x0bdelta_ct_df\x1c\"Condition\"] == groups[i][1]\x0bdelta_ct_df\x0bdelta_ct_df\x08\"Target\"\x14control_column_value\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x0bdelta_ct_df\x0bdelta_ct_df\x08\"Target\"\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x14control_column_value\x0bdelta_ct_df\x0bdelta_ct_df\x01\n\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x01\n\x01t\x01t\x01t\x01\n\x0bdelta_ct_df\x06\xf0\x9d\x9a\xabCt\x0bdelta_ct_df\x13target_col_signal()\x13target_col_signal()\x13target_col_signal()\x13target_col_signal()\x11target_col_signal\x13target_col_signal()\x12treat_col_signal()\x12treat_col_signal()\x12treat_col_signal()\x12treat_col_signal()\x10treat_col_signal\x12treat_col_signal()\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x16, control_column_value\x01)\x01)\n Condition\n Condition\x1dgroup_col_signal()delta_ct_df\x13target_col_signal()\x02  \x01x\x01.\x011\x01+\x01)\x01)\x02\"\"\tCondition\x02\"\"\tCondition\x02\"\"\x06Target\x02\"\"\x06Target\x02\"\"\x06Target\x02\"\"\tCondition\x02\"\"\x06Target\x1a\n    grouping_columns = []\x15grouping_columns = []\x0bgroups_done\x05False\x17\n    groups_done = True\x19\n      groups_done = True\x03ge \x96\x01We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\n\n\x01 \ncontrol_df\x04ctrl\x05ctrl_w\n          df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\x11\n          data[]\x02\"\"\x05Group( = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"w\n          df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\x04data\x04data\x04data\x05ctrl_\x0fctrl_dataframes\x0fctrl_dataframes\x0fctrl_dataframes\x0fctrl_dataframes\x9b\x01data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control _Ct\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()Q\n          data = delta_ct_df[(delta_ct_df[target_column.value] == groups[i][0])]\x10condition_column\x03col\x07ndition\x0econtrol_column\x11control_val.value\xaa\x02data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control _Ct\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\x02\"\"\tCondition\x02\"\"\x06Target\x02\"\"\x06Target\x02\"\"\x06Target\x02\"\"\tCondition\x02\"\"\tCondition\x02\"\"\x06Target\x02\"\"\x06Target\x05\"\"\"\"\"\x02\n\n\xd6\x01The Mean Control \xf0\x9d\x9a\xabCt for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt column below in the dataframe created for each group: {list(dataframes.keys())}\x11delta_ct_signal()\x01\n\x14import pandas as pd\n\x02# \x02# \x02# \x02# \x02# \x12\ndelta_ct_signal()\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02\n\n$control_column, control_val\n\ndef cal\x12calculate_delta_ct\x01d\x05delft\x03ta_\x02()\x1bcontrol_column, control_val\xd2\x01import warnings\nimport pandas as pd\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\nfrom lplots.reactive import Signalh\nif \"delta_delta_ct_df_columns_signal\" not in globals():\n  delta_delta_ct_df_columns_signal = Signal([])\xaa\x01\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\"Relative Expression\"] = pd.to_numeric(2 ** (-df_group[\'\xf0\x9d\x9a\xabCt\']))\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[\x14control_column.value\xeb\x02] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Expression\"] = (df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## \r_(Optional)_ B\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. #First, you need to select what your\x12 control condition\x03 is\x01.; This is likely a sample type or a drug concentration.\n\"\"\")\x01\n\x12\ndelta_ct_signal()\x01\n\x1f\n\ndef calculate_delta_delta_ct(\x0econtrol_column\x0e, control_val)\x01\n+\n\nif control_val.value is None:\n  exit()\n  \x01\n # Determine columns to group on\n\x04if (\x14control_column.value\x14 != \"Condition\") & (\x14control_column.value\x0f != \"Target\"):\n-  grouping_columns = [\"Target\", \"Condition\", \x14control_column.value\x02]\n\x06elif (\x14control_column.value\x12 == \"Condition\"):\n   grouping_columns = [\"Target\", \x14control_column.value\x02]\n\x06elif (\x14control_column.value\x0f == \"Target\"):\nQ  w_text_output(content=\"Error, target column cannot be the control condition.\")\n\t  exit()\n\x06else:\n\"  w_text_output(content=\"Error.\")\n\x08  exit()\x01\n\x01\n\x01\n\x0cgroups = []\n\x10group_text = []\n\x11is_tuple = False\n\x01\n\x10# Create Groups\n\x1fif len(grouping_columns) == 3:\n\x12  is_tuple = True\n+  for i in delta_ct_df[\"Target\"].unique():\n0    for j in delta_ct_df[\"Condition\"].unique():\n\x1c      groups.append((i, j))\n5      group_text.append(f\"Group: {(i, j)}. Control: {\x14control_column.value\x1a} = {control_val.value}\")\n\x06else:\n+  for i in delta_ct_df[\"Target\"].unique():\n\x15    groups.append(i)\n.    group_text.append(f\"Group: {i}. Control: {\x14control_column.value\x1a} = {control_val.value}\")\n\x01\n\x01\n\x1b# Create result dataframes\n\x14if len(groups) > 0:\n\x17  ctrl_dataframes = {}\n\x12  dataframes = {}\n\x03  \n!  delta_ct_df_temp = delta_ct_df\n\x01\n\x1f  for i in range(len(groups)):\n\x11    if is_tuple:\n\x13      # Control DF\n6      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\no      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n\x18      data = data[(data[\x14control_column.value\x19] == control_val.value)]\n7      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n/      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[\x14control_column.value*] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n4      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\x01\n\x17      # Delta Delta DF\n<      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\no      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n\'      data = calc_delta_delta_ct(data)\n/      dataframes[df_name] = pd.DataFrame(data)\n\x07      \n\n    else:\n\x13      # Control DF\n$      df_name = f\'ctrl_{groups[i]}\'\n=      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n\x18      data = data[(data[\x14control_column.value\x19] == control_val.value)]\n%      data[\"Group\"] = f\"{groups[i]}\"\n:      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[\"\xf0\x9d\x9a\xabCt\"].mean()\n<      print(data[[\"Group\",\"\xf0\x9d\x9a\xabCt\",\"Mean Control \xf0\x9d\x9a\xabCt\"]])\n4      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\x01\n\x17      # Delta Delta DF\n*      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n=      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n\'      data = calc_delta_delta_ct(data)\n/      dataframes[df_name] = pd.DataFrame(data)\n\x01\n+  for name, df in ctrl_dataframes.items():\n\x1a      locals()[name] = df\n&  for name, df in dataframes.items():\n\x1a      locals()[name] = df\n\x03  \nF  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\nG  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\x7f\n  # delta_delta_ct_df_columns = delta_delta_ct_df.columns\n\n  delta_delta_ct_df_columns_signal(list(delta_delta_ct_df.columns))\x01\n\x8d\x07\n\ngroup_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in group_text])\nresult_bullets = \'\\n\'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{group_bullets} \\n\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate:\"\"\")\n\nw_text_output(content=\"\"\"\n$$\n\\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control} \\Delta {Ct}\n$$\n\"\"\")\n\nw_text_output(content=f\"\"\"\nYou can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{result_bullets} \\n\n\nInspect the ```delta_delta_ct_df``` table to view all results.\n\n\"\"\")\n\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x03if \x11control_val.value\x0c is None:\n  \x02  \x06exit()\x01\n\x05\n#the\x05# the\tReact the3to delta_ct_df\nfrom lplots.reactive import Signal\n\n\x04 col\x04.vol\x07columns\x02\n\n\x02\nf\x01i\x03\n  \x01\n\x02\n\nK# React to delta_ct_df.columns\nfrom lplots.reactive import Signal\nseq = the\x08Signal()\x01)\x02[]\x01]\x05delta\x13delta_ct_df.columns\x03\nif\x03\nif\x05if \"\"\x03seq\x11 not in globals()\x02):\x02  \x05seq()\x01)\x01\n\x01\n\x0fw_text_output()\x02\"\"\x02te\xcb%import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\nw_text_output(\"t\")\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\n# React to delta_ct_df.columns\nfrom lplots.reactive import Signal\n\nif \"seq\" not in globals():\n  seq = Signal(delta_ct_df.columns)\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=seq())\n\ngroups_done = False\nif control_column.value is None:\n  exit()\n  \ncontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\nif control_val.value is None:\n  exit()\n  \n# Determine columns to group on\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  is_tuple = True\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n\n\n# Create result dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n  dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      # Control DF\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      # Control DF\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  for name, df in dataframes.items():\n      locals()[name] = df\n  \n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n\n\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{\', \'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])}\n\n\"\"\")\n\n\x02st\xc8%import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\nw_text_output()\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\n# React to delta_ct_df.columns\nfrom lplots.reactive import Signal\n\nif \"seq\" not in globals():\n  seq = Signal(delta_ct_df.columns)\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=seq())\n\ngroups_done = False\nif control_column.value is None:\n  exit()\n  \ncontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\nif control_val.value is None:\n  exit()\n  \n# Determine columns to group on\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  is_tuple = True\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n\n\n# Create result dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n  dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      # Control DF\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      # Control DF\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  for name, df in dataframes.items():\n      locals()[name] = df\n  \n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n\n\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{\', \'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])}\n\n\"\"\")\n\n\x02\"\"\x04tewt\x05str()\x05seq()\x03cpt\x07ontent=\x03\n  \x07print()\xbf%import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\n# React to delta_ct_df.columns\nfrom lplots.reactive import Signal\n\nif \"seq\" not in globals():\n  print\n  seq = Signal(delta_ct_df.columns)\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=seq())\n\ngroups_done = False\nif control_column.value is None:\n  exit()\n  \ncontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\nif control_val.value is None:\n  exit()\n  \n# Determine columns to group on\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  is_tuple = True\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n\n\n# Create result dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n  dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      # Control DF\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      # Control DF\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n\n      # Delta Delta DF\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  for name, df in dataframes.items():\n      locals()[name] = df\n  \n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n\n\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n</n>\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{\', \'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])}\n\n\"\"\")\n\n\x01\"\x02()\x02\"\"\x0bdefined seq\x03\n  \x1celse:\n  print(\"defined seq\")\x07 akread\x0elready defined\x02: \x01:\x0e, seq.sample()\x03\n  hcontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\x03\n  \x03els\x02[]\x01]\x03\n  \x1bdelta_delta_ct_df_columns()\x01)\x06list()\x19delta_delta_ct_df.columns\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x01\n\x02  \x01\n\x19delta_delta_ct_df_signal \t= Signal(\x02[]\x01)\x0fremove_outliers\x01 \x05False\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x92,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control _Ct\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x9b,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control _Ct\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\xad,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"Ct\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\xb6,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"Ct\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the \xf0\x9d\x9a\xabCt of every biological replicate. You can see the new \xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x04\xf0\x9d\x9a\xab\xb5,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"Ct\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control Ct for each group from the \xf0\x9d\x9a\xabCt of every biological replicate. You can see the new \xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\xbe,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"Ct\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control \xf0\x9d\x9a\xabCt for each group from the \xf0\x9d\x9a\xabCt of every biological replicate. You can see the new \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x02# \x18\n  grouping_columns = []\x01]\ntarget.col#t_column.value, sample_column.value\x19grouping_columns.append()\x14control_column.value\x07\n      \x07\n      \x02  \x02  \x0bDelta delt  a Ct will be calculated in the o\x11following groups:\x05\n    \x07\n      \x0celse:\n      =grouping_columns = [target_column.value, sample_column.value]\x07, contr\x14control_column.valueSgrouping_columns = [target_column.value, sample_column.value, control_column.value]. if (control_val.value != sample_column.value)\x01=\x07\n      \x84\x01else:\n      else if (control_val.value == sample_column.value):\n      grouping_columns = [target_column.value, control_column.value]\x07\n      \relse:\n      p\x0fw_text_output()\x06contet\x05nt=\"\"\x01\"\x07Error, 3else if (control_val.value == sample_column.value):\rtarget_column.target column cannot be the control condition.\x07\n      Zelse:\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\x07\n      \x02if\x02if\x13\n    grouping colum\x07print()\x08grouping\xbd\x07from lplots.widgets.text import w_text_input, w_text_output\n\ncontrol_column = w_select(label=\"Select column with control condition\", options=delta_ct_df.columns)\n\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n    if (control_val.value != sample_column.value) & (control_val.value != target_column.value):\n      grouping_columns = [target_column.value, sample_column.value, control_column.value]\n    elif (control_val.value == sample_column.value):\n      grouping_columns = [target_column.value, control_column.value]\n    elif (control_val.value == target_column.value):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n    else:\n      w_text_output(content=\"Error.\")\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    print(groupin)\n    \x04_col\xb2\x07from lplots.widgets.text import w_text_input, w_text_output\n\ncontrol_column = w_select(label=\"Select column with control condition\", options=delta_ct_df.columns)\n\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n    if (control_val.value != sample_column.value) & (control_val.value != target_column.value):\n      grouping_columns = [target_column.value, sample_column.value, control_column.value]\n    elif (control_val.value == sample_column.value):\n      grouping_columns = [target_column.value, control_column.value]\n    elif (control_val.value == target_column.value):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n    else:\n      w_text_output(content=\"Error.\")\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    pri\n    \x04nt()\x10grouping_columns\x05\n    \x08if len()\x13grouping_columns = \r\n      exit()\x01)\r\n      exit()\x01)\x03= 3\x08:\n      \x04else\x06      \x01:\x04else\x06      \x01:\x08\n      d\x0bgroups = []\x1e]\n      for i in delta_ct_df[]\x01]\x13target_column.value\t.unique()\x08)\n      \x02  2for j in delta_ct_df[target_column.value].unique()\rsample_column\t\n        \x02  \x0fgroups.append()\x02()\x04i, j\x94\x01\n      for i in delta_ct_df[target_column.value].unique()\n        for j in delta_ct_df[sample_column.value].unique()\n          groups.append((i, j))\x02# \x02# \x02# \x02# \x0b\n          \x07print()\x06groups\x01:\x01:\x01)_\n          w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\x0fGroup: Control:\x01.\x02{}\x06(i, j)\x01 \x02{}\x07control\x17control_column.value = \x19 = {control_column.value}\x0bcontrol_val\x13target_column.valuei\n        w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\x01i\x01:\x0e\n      print()\x06groups\x07\n      \x10\n    groups = []\x0c\n    print()\x05grous\x02ps\t\n        \rprint(groups)*, target_column.value, sample_column.value\x0econtrol_column\x0econtrol_column\x0econtrol_column\x0econtrol_column\x03\n  \x02  \x08if len()\x06groups\x8b\x02 > 0:\n      dataframes = {}\n\n# Create dataframes dynamically in a loop\nfor i in range(5):\n    df_name = f\'df_{i}\'\n    dataframes[df_name] = pd.DataFrame(data)\n\n# Example usage of the created dataframes\nfor name, df in dataframes.items():\n    print(f\"{name}:\\n{df}\\n\")\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x0blen(groups)\r\n    is_tuple\x0bple = False\x1b\n          is_tuple = False\x04True\x02  \x02  \x1f\n    # Create tabbed dataframes\x0e\n        if is&is_tuple:\n          df_name = groups[]\x01i\x02[]\x010\x03f\"{\x10}_{groups[i][0]}\x011\x01\"\x02# \x02\n\n\x0cgroup_bullerMts = bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])&([f\'* ```{g}```\' for g in group_text])\rgroup_bullets\x03 \\n\x11result_bullets = \x05resul\x0eresult_bullets\x03 \\n<\', \'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])\x08\\n\'.join\x02\'\'\x02\'\'\x07\n      \x07print()\x05group\x0e\n      print()\x04data\x01\n\x07print()\x08is_tuple+\n            print(group)\n      print(data)\tgroups[i]\r\n      prin()\x04data\x01t\x0e\n      print()\x04data\x02[]\x02[]\x02\"\"\x05Group\x02, \x06\xf0\x9d\x9a\xabCt\x01\"\x01\"\x15,Mean Control \xf0\x9d\x9a\xabCt\'\x02\"\"\x14Mean Control \xf0\x9d\x9a\xabCt\'\x0e\n      print()\x06target\x0e\n      print()\tgroups[i]\x10\n      print9\"HI\x02()\x02\"\"\x03HI)\x04data\x04data\x04data\x04data\x04data\x03 = \x01s\x07\n  try:\x02  \x01\n\x04    \x01\n\x14  except:\n    print(\x01)\x01\"\x01\"\x04Skip\x01\n\x15\n\n####### CALCULATE E\xff\rDELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x01\n\x01\n\xb5\x03w_text_output(content=\"\"\"\n## Delta Ct Calcation\n\nWe are now going to calculate Delta Ct (```_Ct```)by grouping our technical replicates and subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\"\"\")\n\x06Delta \x02__\x02()\x08Optional\x01 \x9d\x01Now we are going to calculate Delta Delta Ct. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\x01>\x01\n\x02  \x07print()\x02\"\"\x01\"\x04HERE\x02# \x02# \x02# \x01\"\x18 or output_ready_signal(\x01)\n) is False\x12treat_col_signal()\x12treat_col_signal()\x12treat_col_signal()\x12treat_col_signal()\x12treat_col_signal()\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x14control_column_value\x12treat_col_signal()\x01e\x01.\x03val\x01)\x06signal\x07control\rtreatment_col\x07control\x0bdelta_ct_df\x0bdelta_ct_df\x0b\'old_name1\'\tnew_name1\x1a, \'old_name2\': \'new_name2\'\tTreatment\x01)\x01t\x01l\x05ist()\x01)\x06Signal\x05list(\x01)\x01(\x05list(\x01)\x01(\x01)\x0e = Signal(list\x04list\x01)\x02# &\n\n  delta_delta_ct_df_columns_signal()\x06list()\x01)\x19delta_delta_ct_df.columns\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x82,import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\nprint(remove_outliers.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xabC\xf0\x9d\x9a\xabt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n\n    if (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n      grouping_columns = [\"Target\", \"Condition\", control_column.value]\n    elif (control_column.value == \"Condition\"):\n      grouping_columns = [\"Target\", control_column.value]\n    elif (control_column.value == \"Target\"):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[\"Target\"].unique():\n        for j in delta_ct_df[\"Condition\"].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[\"Target\"].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, \"Target\", \"Condition\")\n    \n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      groups_done = True\n      ctrl_dataframes = {}\n\n      w_text_output(content=\"We start by getting the average _Ct value of the control conditon in every group. Below is a table called control_table that shows this information:\") \n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n          data[\'Mean Control _Ct\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n          \n        else:\n          df_name = f\'ctrl_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n          data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n          data[\"Group\"] = f\"{groups[i]}\"\n          data[\'Mean Control _Ct\'] = data[(data[control_column.value] == control_val.value)][\"_Ct\"].mean()\n          ctrl_dataframes[df_name] = pd.DataFrame(data)\n      # Example usage of the created dataframes\n      for name, df in ctrl_dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n\n####### CALCULATE DELTA DELTA CT\nimport warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    # delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\")\n  \x01=\x04\xf0\x9d\x9a\xab\x04\xf0\x9d\x9a\xab\x01\n\x06\n# Tes\x07xt for \x03\n  \x03\n  \x05\n    \x16# Merge into single SF\x02DF\x07\n      \x05\n    \x02  \xfa\x01df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\x10\n      # COntrol\tontrol DF\x06result\n\n      # D\x05Delte\x0ca Delta data\x02DF\x12\n  dataframes = {}\x13\n      # Control DF\x02  \x02  \x03\n  \x02  \x02  \t# Delta d\xc1\x01Delta DF\n  df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\x02  \x02  \x03\n  \x05\n    =for name, df in dataframes.items():\n      locals()[name] = dfH\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\x0f# Determine con\x11lumns to group on\x12\n  is_tuple = True\x03\n\n\n\xe1\x01w_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\x11For each conditio\x07group, \x03\n\n\n\x01:\x08\n\n$$\n\n$$R\\Delta\\Delta \\text{Ct} = \\Delta \\text{Ct} - \\text{Mean Control } \\Delta \\text{Ct}\nW\n$$\n\\Delta {Ct}_{target, well} = {Cq}_{{target, well}} - {Cq}_{{housekeeping, well}}\n$$\x02# \x02# \x02# L\n\n# $$\n# \\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control } \\Delta {Ct}\n# $$\n\x01|\x06\\Delta\x01\n\x0bgroup value\x01\\K\n# $$\n# \\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control } \\Delta {Ct}\n# $$\n)\\Delta {Ct} - {Mean Control } \\Delta {Ct}\x02\n\n\x03w_r\x03tex\x0fw_text_output()\ncontent=\"\"O$$\n\\Delta\\Delta {Ct}_{groupvalue} = \\Delta {Ct} - {MeanControl} \\Delta {Ct}\n$$\n\x01\n\x05\"\"\"\"\"\x02\n\n\x02\n\n\x01\"N$$\n\\Delta\\Delta {Ct}_{groupvalue} = \\Delta {Ct} - {MeanControl} \\Delta {Ct}\n$$\x02\"\"\x03\"\"\"\x03\n\"\"\x01 \x02\n\nB$$\n\\Delta\\Delta {Ct} = \\Delta {Ct} - {Mean Control} \\Delta {Ct}\n$$\x04\"\"\")\x1aw_text_output(content=f\"\"\"\x01\n\x1b\nw_text_output(content=f\"\"\"\x05\n\"\"\")\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xb0\x12from lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n    content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n\n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\"/\")[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n\n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n    well_plate_dict = {}\n    for idx, row in df.iterrows():\n        for col in df.columns:\n            try:\n                well_id = f\"{idx_to_row_id[idx]}{col}\"\n            except KeyError:\n                raise ValueError(\n                    f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\"\n                )\n            well_plate_dict[well_id] = row[col]\n    return well_plate_dict\n\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (\n            s.startswith(\"\'\") and s.endswith(\"\'\")\n        ):\n            return s[1:-1]\n    return s\n\n\ndef import_data():\n\n    # Set empty defaults for current columns and sheets selected\n    current_columns = []\n    sheets_added = []\n    original_columns = []\n    imported_qpcr_data = None\n\n    ######################\n    # Machine Data Sheet #\n    ######################\n\n    # Read qPCR Result\n    well_result_lpath = w_ldata_picker(\n        label=\"qPCR Machine Output\",\n        required=True,\n        appearance={\"detail\": \"(.csv, .xlsx)\"},\n    )\n\n    well_opt = []\n\n    if \x0cwell_result_\x1ffile.value is None:\n      exit(\x010\x01)\xeeX\n\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n\n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n        imported_qpcr_data = pd.ExcelFile(str(well_result_file))\n        selected_sheet = w_select(\n            label=\"Select results sheet from Excel file\",\n            options=imported_qpcr_data.sheet_names,\n        ).value\n\n        # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n        skiprows = 24\n\n        if skiprows is not None and selected_sheet is not None:\n            imported_qpcr_data = pd.read_excel(\n                str(well_result_file),\n                sheet_name=selected_sheet,\n                skiprows=int(skiprows),\n            )\n\n        well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n\n    # File is a CSV\n    else:\n        imported_qpcr_data = pd.read_csv(well_result_file)\n        well_opt = (\n            imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n        )\n\n    # Set column values\n    well_opt_placeholder = (\n        \"Select a column\xe2\x80\xa6\"\n        if imported_qpcr_data is not None\n        else \"Provide a readout file\xe2\x80\xa6\"\n    )\n\n    well_column = w_select(\n        label=\"Select well column\",\n        options=well_opt,\n        required=True,\n        readonly=imported_qpcr_data is None,\n        appearance={\"detail\": \"(ex: A1)\", \"placeholder\": well_opt_placeholder},\n    )\n\n    try:\n        original_columns = imported_qpcr_data.columns\n    except:\n        return None, None, None, None\n\n    if well_column.value is not None:\n        current_columns = [well_column.value]\n    w_text_output(content=\"\"\"----\"\"\")\n\n    #############################\n    # Metadata Sheet (Optional) #\n    #############################\n\n    w_text_output(\n        content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\"\n    )\n\n    use_metadata = w_checkbox(\n        label=\"Use template file to provide experimental metadata\", default=False\n    )\n\n    if use_metadata.value is False:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    well_plate_metadata_lpath = w_ldata_picker(\n        label=\"Well Plate Metadata\", appearance={\"detail\": \"(.xlsx)\"}, required=True\n    )\n\n    if well_plate_metadata_lpath.value != \"\":\n\n        use_metadata_sheet = True\n        well_plate_metadata_file = download_file_if_not_exists(\n            well_plate_metadata_lpath.value\n        )\n        well_plate_metadata_df = pd.read_excel(\n            well_plate_metadata_file, sheet_name=None\n        )\n        assert type(well_plate_metadata_df) is dict\n        selected_metadata_variables = w_multi_select(\n            label=\"Select sheets to combine with qPCR machine data\",\n            options=well_plate_metadata_df.keys(),\n            default=list(well_plate_metadata_df.keys()),\n        )\n        if (\n            selected_metadata_variables.value is None\n            or selected_metadata_variables.value == []\n        ):\n            imported_qpcr_data = imported_qpcr_data[original_columns]\n            return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if well_plate_metadata_lpath.value is None:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if use_metadata_sheet is False:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if None not in [well_column.value, selected_metadata_variables.value]:\n        idx_to_row_id = {\n            0: \"A\",\n            1: \"B\",\n            2: \"C\",\n            3: \"D\",\n            4: \"E\",\n            5: \"F\",\n            6: \"G\",\n            7: \"H\",\n            8: \"I\",\n            9: \"J\",\n            10: \"K\",\n            11: \"L\",\n            12: \"M\",\n            13: \"N\",\n            14: \"O\",\n            15: \"P\",\n        }\n\n    sheets_added = selected_metadata_variables.value\n    if sheets_added == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n\n    for sheet_name, df in well_plate_metadata_df.items():\n\n        if (\n            selected_metadata_variables.value\n            and sheet_name not in selected_metadata_variables.value\n        ):\n            continue\n\n        assert (\n            \"Well\" in df.columns\n        ), \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n        imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(\n            sheet_to_well_plate_map(df, idx_to_row_id)\n        )\n\n    # Text to show if sheets are added\n    if len(sheets_added) > 0:\n        sheets_added_display = (\n            f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n        )\n\n    if len(sheets_added) == 0:\n        sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n\n    w_text_output(\n        content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n        appearance={\n            \"message_box\": \"success\",\n        },\n    )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(\n    content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\"\n)\n\n\ndef make_line():\n    w_text_output(content=\"-----\")\n\n\nqpcr_data = imported_data\n\ntry:\n    column_opts = qpcr_data.columns\n    column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n    prev_completed = True\n\nexcept:\n    column_opts = []\n    column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n    prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n    label=\"Select Cq value column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n    },\n)\n\n# Remove Undetermined rows\ntry:\n    current_columns.append(cq_column.value)\nexcept:\n    print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n    label=\"Select target column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"help_text\": \"This contains your housekeeping gene\",\n        \"placeholder\": column_select_placeholder,\n    },\n)\n\ntry:\n    housekeeping_options = qpcr_data[target_column.value].unique()\n    current_columns.append(target_column.value)\n    housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n\nexcept:\n    housekeeping_options = []\n    housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n    label=\"Select the housekeeping gene:\",\n    options=housekeeping_options,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": housekeeping_placeholder,\n    },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n    label=\"Select sample condition annotation column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n        \"help_text\": \"This is the highest level condition that you have split your samples. \\\n    It is likely a drug or condition column.\",\n    },\n)\n\n\nif sample_column.value is not None:\n    current_columns.append(sample_column.value)\n\ntry:\n    column_opts = qpcr_data.columns\n    column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept:\n    column_opts = []\n    column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n    label=\"Select control condition column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n        \"help_text\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation. \\\n    It might be the same column as the sample condition column selected above.\",\n    },\n)\n\ncontrol_val = w_select(\n        label=\"Select control condition\",\n        options=qpcr_data[control_column.value].unique(),\n        appearance={\"placeholder\": \"Select condition\xe2\x80\xa6\"},\n        required=True\n    )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n    label=\"Select if targets and housekeeping genes are in the same well.\",\n    default=True,\n    required=True,\n    readonly=qpcr_data is None,\n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n    try:\n        delta_ct_option_signal(delta_ct_option.value)\n    except:\n        print(\"Not adding signal\")\n\n\nmake_line()\n\ntry:\n    current_columns = list(set(current_columns))\nexcept:\n    current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n    label=\"Add additional columns to include\",\n    options=[x for x in column_opts if ((x not in current_columns))],\n    default=sheets_added,\n    appearance={\n        \"help_text\": \"If no options appear, it means all columns are already included.\",\n    },\n)\ntry:\n    final_columns = current_columns + additional_columns.value\nexcept:\n    final_columns = []\n\n\nif not prev_completed:\n    exit()\n\nif None not in [\n    well_column.value,\n    cq_column.value,\n    sample_column.value,\n    target_column.value,\n]:\n    current_columns = [\n        well_column.value,\n        cq_column.value,\n        target_column.value,\n        sample_column.value,\n    ]\n\n    if additional_columns.value is not None:\n        final_columns = current_columns + additional_columns.value\n\n    else:\n        final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n    print(col)\n    if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n        try:\n            qpcr_data[col].str.strip()\n        except:\n            qpcr_data[col] = qpcr_data[col]\n\nremapping_dict = {\n    well_column.value: \"Well\",\n    target_column.value: \"Target\",\n    sample_column.value: \"Condition\",\n    cq_column.value: \"Cq\",\n}\n\n# Rename columns\nif None not in [\n    well_column.value,\n    cq_column.value,\n    sample_column.value,\n    target_column.value,\n]:\n    control_column_value = control_column.value\n    if control_column.value in [\n        well_column.value,\n        cq_column.value,\n        sample_column.value,\n        target_column.value,\n    ]:\n        control_column_value = remapping_dict[control_column.value]\n    qpcr_data = qpcr_data[list(final_columns)]\n    qpcr_data = qpcr_data.rename(\n        columns={\n            well_column.value: \"Well\",\n            target_column.value: \"Target\",\n            sample_column.value: \"Condition\",\n            cq_column.value: \"Cq\",\n        }\n    )\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\"Cq\"] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\"object\"]).columns:\n    qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\xe8\x02from lplots.widgets.ldata import w_ldata_picker\nimport pandas as pd\n\n# Select a CSV file using the widget\ncsv = w_ldata_picker(label=\"Condition CSV\")\n\n# If the user has not selected a file yet, exit the code\nif csv.value is None:\n\texit(0)\n\n# If the user has selected a file, read the selected file into a Pandas DataFrame\ndf = pd.read_csv(csv.value.download())\x95kfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n    content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n\n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\"/\")[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n\n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n    well_plate_dict = {}\n    for idx, row in df.iterrows():\n        for col in df.columns:\n            try:\n                well_id = f\"{idx_to_row_id[idx]}{col}\"\n            except KeyError:\n                raise ValueError(\n                    f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\"\n                )\n            well_plate_dict[well_id] = row[col]\n    return well_plate_dict\n\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (\n            s.startswith(\"\'\") and s.endswith(\"\'\")\n        ):\n            return s[1:-1]\n    return s\n\n\ndef import_data():\n\n    # Set empty defaults for current columns and sheets selected\n    current_columns = []\n    sheets_added = []\n    original_columns = []\n    imported_qpcr_data = None\n\n    ######################\n    # Machine Data Sheet #\n    ######################\n\n    # Read qPCR Result\n    well_result_lpath = w_ldata_picker(\n        label=\"qPCR Machine Output\",\n        required=True,\n        appearance={\"detail\": \"(.csv, .xlsx)\"},\n    )\n\n    well_opt = []\n\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n\n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n        imported_qpcr_data = pd.ExcelFile(str(well_result_file))\n        selected_sheet = w_select(\n            label=\"Select results sheet from Excel file\",\n            options=imported_qpcr_data.sheet_names,\n        ).value\n\n        # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n        skiprows = 24\n\n        if skiprows is not None and selected_sheet is not None:\n            imported_qpcr_data = pd.read_excel(\n                str(well_result_file),\n                sheet_name=selected_sheet,\n                skiprows=int(skiprows),\n            )\n\n        well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n\n    # File is a CSV\n    else:\n        imported_qpcr_data = pd.read_csv(well_result_file)\n        well_opt = (\n            imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n        )\n\n    # Set column values\n    well_opt_placeholder = (\n        \"Select a column\xe2\x80\xa6\"\n        if imported_qpcr_data is not None\n        else \"Provide a readout file\xe2\x80\xa6\"\n    )\n\n    well_column = w_select(\n        label=\"Select well column\",\n        options=well_opt,\n        required=True,\n        readonly=imported_qpcr_data is None,\n        appearance={\"detail\": \"(ex: A1)\", \"placeholder\": well_opt_placeholder},\n    )\n\n    try:\n        original_columns = imported_qpcr_data.columns\n    except:\n        return None, None, None, None\n\n    if well_column.value is not None:\n        current_columns = [well_column.value]\n    w_text_output(content=\"\"\"----\"\"\")\n\n    #############################\n    # Metadata Sheet (Optional) #\n    #############################\n\n    w_text_output(\n        content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\"\n    )\n\n    use_metadata = w_checkbox(\n        label=\"Use template file to provide experimental metadata\", default=False\n    )\n\n    if use_metadata.value is False:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    well_plate_metadata_lpath = w_ldata_picker(\n        label=\"Well Plate Metadata\", appearance={\"detail\": \"(.xlsx)\"}, required=True\n    )\n\n    if well_plate_metadata_lpath.value != \"\":\n\n        use_metadata_sheet = True\n        well_plate_metadata_file = download_file_if_not_exists(\n            well_plate_metadata_lpath.value\n        )\n        well_plate_metadata_df = pd.read_excel(\n            well_plate_metadata_file, sheet_name=None\n        )\n        assert type(well_plate_metadata_df) is dict\n        selected_metadata_variables = w_multi_select(\n            label=\"Select sheets to combine with qPCR machine data\",\n            options=well_plate_metadata_df.keys(),\n            default=list(well_plate_metadata_df.keys()),\n        )\n        if (\n            selected_metadata_variables.value is None\n            or selected_metadata_variables.value == []\n        ):\n            imported_qpcr_data = imported_qpcr_data[original_columns]\n            return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if well_plate_metadata_lpath.value is None:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if use_metadata_sheet is False:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if None not in [well_column.value, selected_metadata_variables.value]:\n        idx_to_row_id = {\n            0: \"A\",\n            1: \"B\",\n            2: \"C\",\n            3: \"D\",\n            4: \"E\",\n            5: \"F\",\n            6: \"G\",\n            7: \"H\",\n            8: \"I\",\n            9: \"J\",\n            10: \"K\",\n            11: \"L\",\n            12: \"M\",\n            13: \"N\",\n            14: \"O\",\n            15: \"P\",\n        }\n\n    sheets_added = selected_metadata_variables.value\n    if sheets_added == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n\n    for sheet_name, df in well_plate_metadata_df.items():\n\n        if (\n            selected_metadata_variables.value\n            and sheet_name not in selected_metadata_variables.value\n        ):\n            continue\n\n        assert (\n            \"Well\" in df.columns\n        ), \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n        imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(\n            sheet_to_well_plate_map(df, idx_to_row_id)\n        )\n\n    # Text to show if sheets are added\n    if len(sheets_added) > 0:\n        sheets_added_display = (\n            f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n        )\n\n    if len(sheets_added) == 0:\n        sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n\n    w_text_output(\n        content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n        appearance={\n            \"message_box\": \"success\",\n        },\n    )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(\n    content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\"\n)\n\n\ndef make_line():\n    w_text_output(content=\"-----\")\n\n\nqpcr_data = imported_data\n\ntry:\n    column_opts = qpcr_data.columns\n    column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n    prev_completed = True\n\nexcept:\n    column_opts = []\n    column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n    prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n    label=\"Select Cq value column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n    },\n)\n\n# Remove Undetermined rows\ntry:\n    current_columns.append(cq_column.value)\nexcept:\n    print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n    label=\"Select target column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"help_text\": \"This contains your housekeeping gene\",\n        \"placeholder\": column_select_placeholder,\n    },\n)\n\ntry:\n    housekeeping_options = qpcr_data[target_column.value].unique()\n    current_columns.append(target_column.value)\n    housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n\nexcept:\n    housekeeping_options = []\n    housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n    label=\"Select the housekeeping gene:\",\n    options=housekeeping_options,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": housekeeping_placeholder,\n    },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n    label=\"Select sample condition annotation column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n        \"help_text\": \"This is the highest level condition that you have split your samples. \\\n    It is likely a drug or condition column.\",\n    },\n)\n\n\nif sample_column.value is not None:\n    current_columns.append(sample_column.value)\n\ntry:\n    column_opts = qpcr_data.columns\n    column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept:\n    column_opts = []\n    column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n    label=\"Select control condition column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n        \"help_text\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation. \\\n    It might be the same column as the sample condition column selected above.\",\n    },\n)\n\ncontrol_val = w_select(\n        label=\"Select control condition\",\n        options=qpcr_data[control_column.value].unique(),\n        appearance={\"placeholder\": \"Select condition\xe2\x80\xa6\"},\n        required=True\n    )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n    label=\"Select if targets and housekeeping genes are in the same well.\",\n    default=True,\n    required=True,\n    readonly=qpcr_data is None,\n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n    try:\n        delta_ct_option_signal(delta_ct_option.value)\n    except:\n        print(\"Not adding signal\")\n\n\nmake_line()\n\ntry:\n    current_columns = list(set(current_columns))\nexcept:\n    current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n    label=\"Add additional columns to include\",\n    options=[x for x in column_opts if ((x not in current_columns))],\n    default=sheets_added,\n    appearance={\n        \"help_text\": \"If no options appear, it means all columns are already included.\",\n    },\n)\ntry:\n    final_columns = current_columns + additional_columns.value\nexcept:\n    final_columns = []\n\n\nif not prev_completed:\n    exit()\n\nif None not in [\n    well_column.value,\n    cq_column.value,\n    sample_column.value,\n    target_column.value,\n]:\n    current_columns = [\n        well_column.value,\n        cq_column.value,\n        target_column.value,\n        sample_column.value,\n    ]\n\n    if additional_columns.value is not None:\n        final_columns = current_columns + additional_columns.value\n\n    else:\n        final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n    print(col)\n    if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n        try:\n            qpcr_data[col].str.strip()\n        except:\n            qpcr_data[col] = qpcr_data[col]\n\nremapping_dict = {\n    well_column.value: \"Well\",\n    target_column.value: \"Target\",\n    sample_column.value: \"Condition\",\n    cq_column.value: \"Cq\",\n}\n\n# Rename columns\nif None not in [\n    well_column.value,\n    cq_column.value,\n    sample_column.value,\n    target_column.value,\n]:\n    control_column_value = control_column.value\n    if control_column.value in [\n        well_column.value,\n        cq_column.value,\n        sample_column.value,\n        target_column.value,\n    ]:\n        control_column_value = remapping_dict[control_column.value]\n    qpcr_data = qpcr_data[list(final_columns)]\n    qpcr_data = qpcr_data.rename(\n        columns={\n            well_column.value: \"Well\",\n            target_column.value: \"Target\",\n            sample_column.value: \"Condition\",\n            cq_column.value: \"Cq\",\n        }\n    )\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\"Cq\"] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\"object\"]).columns:\n    qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x03\n  \x05\n  if\x04  if\x02if\x03if \x9ckfrom lplots.reactive import Signal\nimport pandas as pd\nfrom pathlib import Path\nimport os\nimport glob\nfrom lplots.widgets.text import w_text_input, w_text_output\nfrom lplots.widgets.ldata import w_ldata_picker\nfrom lplots.widgets.checkbox import w_checkbox\nfrom lplots.widgets.select import w_select\nfrom lplots.widgets.multiselect import w_multi_select\nfrom lplots.reactive import Signal\n\nqpcr_data_signal = Signal(None)\ndelta_ct_option_signal = Signal(None)\ncontrol_column_value = None\n\nw_text_output(\n    content=\"\"\"\n## Import qPCR Data\n\nProvide your qPCR machine readout file. This file often contains columns such as _Cq_, _Target_, _Well_.\"\"\"\n)\n\n# Download file if none exists\ndef download_file_if_not_exists(remote_lpath):\n    file_name = remote_lpath.path.split(\"/\")[-1]\n    pattern = f\"/root/.latch/lpath/*/{file_name}\"\n    matching_files = glob.glob(pattern)\n\n    if matching_files:\n        max_file_path = max(matching_files, key=lambda x: int(x.split(\"/\")[-2]))\n        print(\"File path with the highest number:\", max_file_path)\n        return max_file_path\n\n    else:\n        print(\"No files found matching the pattern.\")\n        return remote_lpath.download()\n\n\ndef sheet_to_well_plate_map(df, idx_to_row_id):\n    well_plate_dict = {}\n    for idx, row in df.iterrows():\n        for col in df.columns:\n            try:\n                well_id = f\"{idx_to_row_id[idx]}{col}\"\n            except KeyError:\n                raise ValueError(\n                    f\"Invalid well row {idx}. Make sure your metadata sheet has less than or equal to 16 rows.\"\n                )\n            well_plate_dict[well_id] = row[col]\n    return well_plate_dict\n\n\ndef remove_surrounding_quotes(s):\n    if isinstance(s, str):\n        if (s.startswith(\'\"\') and s.endswith(\'\"\')) or (\n            s.startswith(\"\'\") and s.endswith(\"\'\")\n        ):\n            return s[1:-1]\n    return s\n\n\ndef import_data():\n\n    # Set empty defaults for current columns and sheets selected\n    current_columns = []\n    sheets_added = []\n    original_columns = []\n    imported_qpcr_data = None\n\n    ######################\n    # Machine Data Sheet #\n    ######################\n\n    # Read qPCR Result\n    well_result_lpath = w_ldata_picker(\n        label=\"qPCR Machine Output\",\n        required=True,\n        appearance={\"detail\": \"(.csv, .xlsx)\"},\n    )\n\n    well_opt = []\n\n    i\n\n    well_result_file = download_file_if_not_exists(well_result_lpath.value)\n    print(well_result_file)\n\n    # Check if file is an excel file\n    if \".xlsx\" in str(well_result_file):\n        imported_qpcr_data = pd.ExcelFile(str(well_result_file))\n        selected_sheet = w_select(\n            label=\"Select results sheet from Excel file\",\n            options=imported_qpcr_data.sheet_names,\n        ).value\n\n        # skiprows = w_text_input(label=\"Number of rows to skip (to remove machine metadata):\", default=\"24\").value\n        skiprows = 24\n\n        if skiprows is not None and selected_sheet is not None:\n            imported_qpcr_data = pd.read_excel(\n                str(well_result_file),\n                sheet_name=selected_sheet,\n                skiprows=int(skiprows),\n            )\n\n        well_opt = imported_qpcr_data.keys() if selected_sheet is not None else []\n\n    # File is a CSV\n    else:\n        imported_qpcr_data = pd.read_csv(well_result_file)\n        well_opt = (\n            imported_qpcr_data.keys() if imported_qpcr_data is not None else []\n        )\n\n    # Set column values\n    well_opt_placeholder = (\n        \"Select a column\xe2\x80\xa6\"\n        if imported_qpcr_data is not None\n        else \"Provide a readout file\xe2\x80\xa6\"\n    )\n\n    well_column = w_select(\n        label=\"Select well column\",\n        options=well_opt,\n        required=True,\n        readonly=imported_qpcr_data is None,\n        appearance={\"detail\": \"(ex: A1)\", \"placeholder\": well_opt_placeholder},\n    )\n\n    try:\n        original_columns = imported_qpcr_data.columns\n    except:\n        return None, None, None, None\n\n    if well_column.value is not None:\n        current_columns = [well_column.value]\n    w_text_output(content=\"\"\"----\"\"\")\n\n    #############################\n    # Metadata Sheet (Optional) #\n    #############################\n\n    w_text_output(\n        content=\"\"\"\n  If your machine readout file doesn\'t contain experimental metadata you can provide it using an Excel Template file. [\xf0\x9f\x93\x84 Download Template \xe2\x86\x93](https://latch-public.s3.us-west-2.amazonaws.com/plot-templates/qpcr/latch_qPCR_metadata.xlsx)\n  \"\"\"\n    )\n\n    use_metadata = w_checkbox(\n        label=\"Use template file to provide experimental metadata\", default=False\n    )\n\n    if use_metadata.value is False:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    well_plate_metadata_lpath = w_ldata_picker(\n        label=\"Well Plate Metadata\", appearance={\"detail\": \"(.xlsx)\"}, required=True\n    )\n\n    if well_plate_metadata_lpath.value != \"\":\n\n        use_metadata_sheet = True\n        well_plate_metadata_file = download_file_if_not_exists(\n            well_plate_metadata_lpath.value\n        )\n        well_plate_metadata_df = pd.read_excel(\n            well_plate_metadata_file, sheet_name=None\n        )\n        assert type(well_plate_metadata_df) is dict\n        selected_metadata_variables = w_multi_select(\n            label=\"Select sheets to combine with qPCR machine data\",\n            options=well_plate_metadata_df.keys(),\n            default=list(well_plate_metadata_df.keys()),\n        )\n        if (\n            selected_metadata_variables.value is None\n            or selected_metadata_variables.value == []\n        ):\n            imported_qpcr_data = imported_qpcr_data[original_columns]\n            return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if well_plate_metadata_lpath.value is None:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if use_metadata_sheet is False:\n        return imported_qpcr_data, current_columns, sheets_added, well_column\n\n    if None not in [well_column.value, selected_metadata_variables.value]:\n        idx_to_row_id = {\n            0: \"A\",\n            1: \"B\",\n            2: \"C\",\n            3: \"D\",\n            4: \"E\",\n            5: \"F\",\n            6: \"G\",\n            7: \"H\",\n            8: \"I\",\n            9: \"J\",\n            10: \"K\",\n            11: \"L\",\n            12: \"M\",\n            13: \"N\",\n            14: \"O\",\n            15: \"P\",\n        }\n\n    sheets_added = selected_metadata_variables.value\n    if sheets_added == []:\n        imported_qpcr_data = imported_qpcr_data[original_columns]\n\n    for sheet_name, df in well_plate_metadata_df.items():\n\n        if (\n            selected_metadata_variables.value\n            and sheet_name not in selected_metadata_variables.value\n        ):\n            continue\n\n        assert (\n            \"Well\" in df.columns\n        ), \"Well column missing from excel sheet. Reach out to an engineer at Latch to ensure your metadata sheet is formatted correctly.\"\n        df = df.drop(columns=[\"Well\"])\n        imported_qpcr_data[sheet_name] = imported_qpcr_data[\"Well\"].map(\n            sheet_to_well_plate_map(df, idx_to_row_id)\n        )\n\n    # Text to show if sheets are added\n    if len(sheets_added) > 0:\n        sheets_added_display = (\n            f\"Added {len(sheets_added)} sheets: {\', \'.join(sheets_added)}\"\n        )\n\n    if len(sheets_added) == 0:\n        sheets_added_display = f\"Added {len(sheets_added)} sheets\"\n\n    w_text_output(\n        content=f\"\"\"\n  Machine data imported successfully.\n  \n  {sheets_added_display}\n      \"\"\",\n        appearance={\n            \"message_box\": \"success\",\n        },\n    )\n    return imported_qpcr_data, current_columns, sheets_added, well_column\n\n\nimported_data, current_columns, sheets_added, well_column = import_data()\n\nprint(imported_data)\n\nw_text_output(\n    content=\"\"\"\n## Experiment Set-up\n\nNow, we are going to annotate the columns in your dataframe.\n\"\"\"\n)\n\n\ndef make_line():\n    w_text_output(content=\"-----\")\n\n\nqpcr_data = imported_data\n\ntry:\n    column_opts = qpcr_data.columns\n    column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n    prev_completed = True\n\nexcept:\n    column_opts = []\n    column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n    prev_completed = False\n\n# Cq Column\ncq_column = w_select(\n    label=\"Select Cq value column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n    },\n)\n\n# Remove Undetermined rows\ntry:\n    current_columns.append(cq_column.value)\nexcept:\n    print(\"Removed\")\n\n\n# Target Column\ntarget_column = w_select(\n    label=\"Select target column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"help_text\": \"This contains your housekeeping gene\",\n        \"placeholder\": column_select_placeholder,\n    },\n)\n\ntry:\n    housekeeping_options = qpcr_data[target_column.value].unique()\n    current_columns.append(target_column.value)\n    housekeeping_placeholder = \"Select gene\xe2\x80\xa6\"\n\nexcept:\n    housekeeping_options = []\n    housekeeping_placeholder = \"Select a target column first\xe2\x80\xa6\"\n\nhousekeeping_gene = w_select(\n    label=\"Select the housekeeping gene:\",\n    options=housekeeping_options,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": housekeeping_placeholder,\n    },\n)\n\nhousekeeping_gene = housekeeping_gene.value\n\n# Sample column\nsample_column = w_select(\n    label=\"Select sample condition annotation column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n        \"help_text\": \"This is the highest level condition that you have split your samples. \\\n    It is likely a drug or condition column.\",\n    },\n)\n\n\nif sample_column.value is not None:\n    current_columns.append(sample_column.value)\n\ntry:\n    column_opts = qpcr_data.columns\n    column_select_placeholder = \"Select a column\xe2\x80\xa6\"\n\nexcept:\n    column_opts = []\n    column_select_placeholder = \"Provide a readout file\xe2\x80\xa6\"\n\ncontrol_column = w_select(\n    label=\"Select control condition column\",\n    options=column_opts,\n    readonly=not prev_completed,\n    required=True,\n    appearance={\n        \"placeholder\": column_select_placeholder,\n        \"help_text\": \"This is the control condition for your \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt calculation. \\\n    It might be the same column as the sample condition column selected above.\",\n    },\n)\n\ncontrol_val = w_select(\n        label=\"Select control condition\",\n        options=qpcr_data[control_column.value].unique(),\n        appearance={\"placeholder\": \"Select condition\xe2\x80\xa6\"},\n        required=True\n    )\n\n# if sample_column.value is None:\n#   sample_column._state[\"appearance\"] = {\"placeholder\": column_select_placeholder,\n#     \"help_text\": \"This is the highest level condition that you have split your samples. \\\n#      It is likely a drug or condition column.\", \"error_text\": f\"* Required\", }\n\n\ndelta_ct_option = w_checkbox(\n    label=\"Select if targets and housekeeping genes are in the same well.\",\n    default=True,\n    required=True,\n    readonly=qpcr_data is None,\n)\nprint(delta_ct_option)\nif delta_ct_option is not None:\n    try:\n        delta_ct_option_signal(delta_ct_option.value)\n    except:\n        print(\"Not adding signal\")\n\n\nmake_line()\n\ntry:\n    current_columns = list(set(current_columns))\nexcept:\n    current_columns = []\n\n# Join additional columns\nadditional_columns = w_multi_select(\n    label=\"Add additional columns to include\",\n    options=[x for x in column_opts if ((x not in current_columns))],\n    default=sheets_added,\n    appearance={\n        \"help_text\": \"If no options appear, it means all columns are already included.\",\n    },\n)\ntry:\n    final_columns = current_columns + additional_columns.value\nexcept:\n    final_columns = []\n\n\nif not prev_completed:\n    exit()\n\nif None not in [\n    well_column.value,\n    cq_column.value,\n    sample_column.value,\n    target_column.value,\n]:\n    current_columns = [\n        well_column.value,\n        cq_column.value,\n        target_column.value,\n        sample_column.value,\n    ]\n\n    if additional_columns.value is not None:\n        final_columns = current_columns + additional_columns.value\n\n    else:\n        final_columns = current_columns\n\n# String leading / trailing spaces\nfor col in qpcr_data.columns:\n    print(col)\n    if pd.api.types.is_string_dtype(qpcr_data[col].dtype):\n        try:\n            qpcr_data[col].str.strip()\n        except:\n            qpcr_data[col] = qpcr_data[col]\n\nremapping_dict = {\n    well_column.value: \"Well\",\n    target_column.value: \"Target\",\n    sample_column.value: \"Condition\",\n    cq_column.value: \"Cq\",\n}\n\n# Rename columns\nif None not in [\n    well_column.value,\n    cq_column.value,\n    sample_column.value,\n    target_column.value,\n]:\n    control_column_value = control_column.value\n    if control_column.value in [\n        well_column.value,\n        cq_column.value,\n        sample_column.value,\n        target_column.value,\n    ]:\n        control_column_value = remapping_dict[control_column.value]\n    qpcr_data = qpcr_data[list(final_columns)]\n    qpcr_data = qpcr_data.rename(\n        columns={\n            well_column.value: \"Well\",\n            target_column.value: \"Target\",\n            sample_column.value: \"Condition\",\n            cq_column.value: \"Cq\",\n        }\n    )\n\n\n# Remove undetermined data\nqpcr_data = qpcr_data[qpcr_data[\"Cq\"] != \"Undetermined\"]\n\n# Remove quotations from columns\nfor col in qpcr_data.select_dtypes(include=[\"object\"]).columns:\n    qpcr_data[col] = qpcr_data[col].apply(remove_surrounding_quotes)\n\n# print(qpcr_data)\n# print(qpcr_data_signal())\nqpcr_data_signal(qpcr_data)\n\x02if\x05f the\x03the\x08if well_\x04well\x06result\x07_result\x05lpath\x01)x# Markdown Example\n\nSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$x# Markdown Example\n\nSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$x# Markdown Example\n\nSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$\x01#\x01#\x01 \x01_\n(Optional)\x01_\x01 \x01 \x0cOutlier Plot\x02\n\n\x1eIn the plot below, the outlier\x01s\x11 will be plotted  in green, while retained datapoi+nts will be shown in orange. If no outliers\x11 are identified, :all points will be orange. \n\nThis plot is plotting the ```\rplot_outliers\x03```: table generated above. This table has a column called ```\nis_outlier\x03```\x12, which has a True\x07/False \x12value for each row\x14, denoting if that r\x1dow was identied as an outlier\x01.\x10Markdown ExampledSupported syntax:\n- [GitHub-flavored Markdown](https://github.github.com/gfm/)\n- Math via $$\\KaTeX$$\x02**\x02**\x01_\x01_\x01w\x01 \x03usi\x01t\x01a\x04the \x0ball of the \x01l\x0eoutlier_signal\x01.\x01 \x01c\x01w\xfd\x02def f():\n    from typing import Union, List\n    import numpy as np\n    from scipy.stats import t\n\n    from lplots.widgets.text import w_text_input, w_text_output\n    from lplots.widgets.select import w_select\n    from lplots.widgets.multiselect import w_multi_select\n    from lplots.widgets.dataframe import w_dataframe_picker\n\n    df_picker = w_dataframe_picker(label=\"Input data\"\x02, $\n                                   \x12appearance={\n    \"\thelp_text\x04\": \"\x0bSelect the \x05table+ that you would like to remove outliers for\x02 (\x07likely \x0fdelta_ct_df or \x06delta_\x0bdelta_ct_df\x01)\x01.\x07\"\n    }\x01)\x03\n  \xa1\x01\n    df = df_picker.value\n\n    cols = df.columns if df is not None else []\n    numeric_cols = df.select_dtypes(include=\"number\").columns if df is not None else [\x08\"\xf0\x9d\x9a\xabCt\"\xa1\x01]\n\n    measurement_col = w_select(\n        label=\"Measurement\",\n        options=numeric_cols,\n        default=numeric_cols[0] if len(numeric_cols) > 0 else None,\x01\n\x02  \x12      appearance={\x0e\"help_text\": \"\x16Select the metric outl\x15iers will be removed \x04for.\x01\"\x01}r\n    ).value\n\n    grouping_columns = w_multi_select(\n        label=\"Group by (Optional)\", options=cols, default=[]\x01,\x01\n\x02  \x02  \x04    \x1aappearance={\"help_text\": \"\x08Add colu\x18mns here if you want to \x1eremove outliers within specifi\x02ed\x08 groups.\x02\"}\xac\x14\n    ).value\n\n    outlier_method = w_select(\n        label=\"Select outlier removal method:\",\n        options=[\"Grubb\'s\", \"Standard Deviation\"],\n        default=\"Grubb\'s\",\n    ).value\n\n    if (\n        df is None\n        or measurement_col is None\n        or grouping_columns is None\n        or outlier_method is None\n    ):\n        return\n\n    # https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n    def outliers_grubbs(x: np.ndarray, alpha: float = 0.05) -> Union[np.ndarray, bool]:\n        res = np.zeros(x.shape)\n\n        dev = np.abs(x - np.mean(x))\n        val = np.max(dev)\n        ind = np.argmax(dev)\n\n        G = val / np.std(x, ddof=1)\n        N = len(x)\n        T = t.ppf(1 - alpha / (2 * N), N - 2) ** 2\n        result = G > (N - 1) / np.sqrt(N) * np.sqrt(T / (N - 2 + T))\n\n        if result:\n            np.put(res, ind, 1)\n\n        return res\n\n    res = df.copy()\n\n    if outlier_method == \"Standard Deviation\":\n        stdev_distance_w = w_text_input(\n            label=\"Remove outliers that are this many standard deviations away:\",\n            default=\"2\",\n        )\n        stdev_distance = stdev_distance_w.value\n\n        if stdev_distance == \"\":\n            stdev_distance_w._state[\"appearance\"] = {\"error_text\": \"Required\"}\n            return\n\n        try:\n            stdev_thres = float(stdev_distance)\n        except ValueError:\n            stdev_distance_w._state[\"appearance\"] = {\"error_text\": \"Invalid number\"}\n            return\n\n        if len(grouping_columns) > 0:\n            avg_df = (\n                res.groupby(grouping_columns, as_index=False)[measurement_col]\n                .agg([\"mean\", \"std\"])\n                .rename(columns={\"mean\": \"PE_mean\", \"std\": \"PE_std\"})\n            )\n            res = res.merge(avg_df, how=\"inner\", on=grouping_columns)\n\n            mask = (res[measurement_col] - res[\"PE_mean\"]) > stdev_thres * res[\"PE_std\"]\n        else:\n            mean = res[measurement_col].mean()\n            std = res[measurement_col].std()\n\n            mask = (res[measurement_col] - mean) > stdev_thres * std\n    else:\n        if len(grouping_columns) > 0:\n\n            def f(group):\n                res = outliers_grubbs(group[measurement_col])\n                return pd.DataFrame(res, index=group.index)\n\n            outlier_tags = res.groupby(\n                grouping_columns, as_index=False, group_keys=False\n            ).apply(f)[0]\n        else:\n            outlier_tags = outliers_grubbs(res[measurement_col])\n\n        mask = outlier_tags == 1\n\n    num_outliers = mask.sum()\n\x80\x01\n    globals()[f\"{df_picker.key}_outliers\"] = res.loc[mask, :]\n    globals()[f\"{df_picker.key}_no_outliers\"] = res.loc[~mask, :]\x01\n\x02  \x1a  res[\'is_outlier\'] = mask\x01\n\x02  \x02  \x02re\x02s[\x01\'\x08outlier_\x06metric\x01\'\x01]\x07 = res[\x0fmeasurement_col\x01]\x01\n\x02  \x02  \x0cglobals()[f\"\x04plot\x0f_outliers\"] = r\x02es\x01\n\x02  \x02  \x0eoutlier_signal\x01(\x11res.loc[~mask, :]\x01)\x01\n\x01\n\x02  \x02  vif num_outliers == 0:\n        w_text_output(content=\"No outliers found\", appearance={\"message_box\": \"info\"})\n    else:\x01\n\x02  \x06      \x14output_strings = []\n\x02  \x02  \x02  \x02  \x12for index, row in \x10res.loc[mask, :]\r.iterrows():\n\x02  \x02  \x02  \x02  \x13    row_string = f\"\x01{\x04row[\x12target_col_signal(\x01)\x02]}\x01-\x01{\x0fmeasurement_col\x01}\x01-\x05{row[\x0fmeasurement_col\x04]}\"\n\x02  \x02  \x02  \x02  %    output_strings.append(row_string)\x01\nK\n        w_text_output(\n            content=f\"{num_outliers} outliers found\x01:\x01 \x01{\x01\'\x02, \x01\'\x06.join(\x0eoutput_strings\x01)\x01}/\", appearance={\"message_box\": \"info\"}\n        )\x01\n\x01\n\x02  \x02  \x16w_text_output(content=\x01f\x03\"\"\"\x05\nThe \x03```\x18{df_picker.key}_outliers\x03```\r table shows \x0bidentified \x08outliers\x07. \nThe \x03```\x1b{df_picker.key}_no_outliers\x03```\r table shows \x0eyour data with\x13 outliers removed. \x01\n\x02  \x02  \x04\"\"\")\x01\n\x01\n;w_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\n\x01RFemove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\x01\n\x01\n\x18outlier_signal = Signal(\x04None\x01)\x04\nf()\x8c\x0bfrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\n\"\"\")\n\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nif sample_column.value is None:\n  exit()\n\nprint(delta_ct_df)\noutlier_df = delta_ct_df\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\n  group[\"\xf0\x9d\x9a\xabCt Fold Change\"] = 2**(-group[\'\xf0\x9d\x9a\xabCt\'])\n  group[\'\xf0\x9d\x9a\xabCt Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"\xf0\x9d\x9a\xabCt Fold Change\"])\n  return group\n\nif remove_outliers.value is True:\n  outlier_df = outlier_df.groupby(\"Condition\", as_index=False, group_keys=False).apply(grubbs_transform)\n  \n  outlier_df[\"Condition\"] = outlier_df[\"Condition\"].astype(str)\n  outlier_df.sort_values(\"Condition\", inplace=True)\x02\"\"\x06\xf0\x9d\x9a\xabCt\x08\"\xf0\x9d\x9a\xabCt\"\x15, default=delta_ct_df\x01[\x01]\x02  \x01 \x11res[\'is_outlier\']\x10res.loc[mask, :]\x02\\n\r\n            \x01\\\x03n \\\t.values()\x01)\x02[]\x02\"\"\tCondition\x08, Target\x02\"\"\x06Target\x01]\x01:\x02df Row {row[\'index\']}: Condition \\\"\x1frow[\'Condition\']}\\\", Target \\\"{\x08\'Target\'\x07\\\", Cq \x04\'Cq\'\n          \x07\n      \x02  \x02# \x02# \x02# \x01,\x01\"\x01-\x02\"\"\x02, \x02\'\'\x02\'\'\x01\'\x03\\n \x03\\n \r\n            \x05\"\"\"\"\"\x01)\x01,\x05 help\x04help0appearance={\n    \"detail\": \"(.csv, .xlsx)\"\n    }\x06detail\r(.csv, .xlsx)\thelp_text\x10placeholder_text\tdataframe\n. Likeley \x01T\x05e.g. \x02ki\x01*\x01*\x02**\x02**\x05\n    jSelect the dataframe that you would like to remove outliers for (likely delta_ct_df or delta_delta_ct_df).\x05\n    \x02  \x02er\x01y\x02  \x02  \x02  /Select the metric outliers will be removed for.\x01n\x08group by\x01c\x01 \x01g\x03\n  \x03\n  \x02  \x05False\t\n  exit()\x01\n\x1boutlier_method = w_select()\x06label\"\x03=\"\"\x1eSelect outlier removal method:\x0c, options=\"\"\x07Grubb\'s\x01[\x01]\x01,\x04, \"\"\x12Standard Deviation\x02\n\n\x01\n$if outlier_method.value is None:\n  r\x06exit()\x04)\n  \xc3\x03\nstdev_distance = w_text_input(\n  label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n  default=2\n)\n\n# Set a boolean flag on whether the row should be removed\nmerged_df_with_avg[\'to_be_removed\'] = False\nmerged_df_with_avg.loc[(merged_df_with_avg[\'readout\'] - merged_df_with_avg[\'readout_mean\']) > float(stdev_distance.value) * merged_df_with_avg[\'readout_std\'], \'to_be_removed\'] = True\x08\nif outl\x1aoutlier_method.value == \"\"\x12Standard Deviation\x01:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02\n\n\rbefore_rempva\x12oval = delta_ct_df\x0ebefore_removal\x0ebefore_removal\x0ebefore_removal\x1bPercent Relative Expression\x03\n  \xb9\x01\n  average_by_oligo_type = (\n  merged_df.groupby([\"oligo_type\"])[\"readout\"]\n  .agg([\'mean\', \'std\'])\n   .reset_index()\n  .rename(columns={\"mean\": \"readout_mean\", \"std\": \"readout_std\"})\n)\x01.\x03\n  \t\n  print \x02()&before_removal.loc[df[\"Well\"] == name]\x14default_removed = []\x01#\x01#\x01 \x01#\x01#\x01#\x01#\x14default_removed.size\x0fdefault_removed\x03row\x02[]\x05row[]\x06\"Well\"\x01 \x03 {}\x05row[]$Filtered Percent Relative Expression\x01\"\x01\"\x03\n  \x05\n  pr\x02  \x02  \x01r\x07print()\x03row\x01.\nindex, row\x01$\x01$\x014\x013\x01#\x01#\x04test\x08\n  print\x02  \x02()\x03row\x03\n  \x01\n\x08\nprint()\x14default_removed.size\x01F\x04alse\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x03\n\n\n\xf6\x01\n    if num_outliers == 0:\n        w_text_output(content=\"No outliers found\", appearance={\"message_box\": \"info\"})\n    else:\n        w_text_output(\n            content=f\"{num_outliers} outliers found\", appearance={\"message_box\": \"info\"}\n        )\n\x02\n\n\xc3\x04w_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nw_text_output(content=\"\"\"\n\nThe ```before_removal``` table shows the results before removing any outliers and shows the ones to be removed in the ```to_be_removed``` column. \nThe ```after_removal``` table shows the same table with any checked outliers removed. You can take a closer look at the outliers found by inspecting the ```default_removed``` table.\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\x02# \x02# \x02# \x02# \x01\n\x01\n\x12Check the box to r\xea\x02\n\nw_text_output(content=\"\"\"\n\nThe ```before_removal``` table shows the results before removing any outliers and shows the ones to be removed in the ```to_be_removed``` column. \nThe ```after_removal``` table shows the same table with any checked outliers removed. You can take a closer look at the outliers found by inspecting the ```default_removed``` table.\n\"\"\")I\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\n\x01\"\x04\"\"\"\"\x04\"\"\"\"\x04\"\"\"\"\x03\"\"\"\x08\n  const\nwell_id = \x15row[\"Well\"]\n  fpre = +row[\"Filtered Percent Relative Expression\"]\x07well_id\x04fpre\x01(\x01)\x04\nprt\x02in\x02  \x03t()\x10override_removal\x06.value\x07well_id\x01T\x03rue\x04len(\x01)\x0ebefore_removal\x0ebefore_removal\x02\"\"\x0fcondition_colum\x90\x12from typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\n\"\"\")\n\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nif sample_column.value is None:\n  exit()\n\nprint(delta_ct_df)\noutlier_df = delta_ct_df\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\n  group[\"\xf0\x9d\x9a\xabCt Fold Change\"] = 2**(-group[\'\xf0\x9d\x9a\xabCt\'])\n  group[\'\xf0\x9d\x9a\xabCt Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"\xf0\x9d\x9a\xabCt Fold Change\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  before_removal = (\n  before_removal.groupby([condition_colu])[\"readout\"]\n  .agg([\'mean\', \'std\'])\n   .reset_index()\n  .rename(columns={\"mean\": \"readout_mean\", \"std\": \"readout_std\"})\n)\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - merged_df_with_avg[\'readout_mean\']) > float(stdev_distance.value) * merged_df_with_avg[\'readout_std\'], \'to_be_removed\'] = True\n\n\noutlier_df = outlier_df.groupby(\"Condition\", as_index=False, group_keys=False).apply(grubbs_transform)\n\noutlier_df[\"Condition\"] = outlier_df[\"Condition\"].astype(str)\noutlier_df.sort_values(\"Condition\", inplace=True)\x07n.value\x01.\x01c\nontrol_con\x04lumn\x05value\x1bPercent Relative Expression\x1bPercent Relative Expression\x1bPercent Relative Expression\x15target_column.value, \x0ebefore_removal\x0ebefore_removal\x02RE\x02RE\x08PRE_mean\x08PRE_mean\x03std\x02# \x02# \x02# \x0e\n      print()\x03arr\x01\"\x01\"\x02hi\x18\n  df.at[\'C\', \'x\'] = 10\n\x0ebefore_removal\x011\x1bPercent Relative Expression\x01\'\x0ebefore_removal\x0ebefore_removal\x03\n\n\nddefault_removed = before_removal[before_removal[\"to_be_removed\"] == True][\"Well\"].tolist()\n\nif len()\x0fdefault_removed\x04 > 0\x0e== 0:\n  exit()\x03arr\x06result\x14\n      print(result)\x02# \x05, ind/, group[\'Filtered Percent Relative Expression\']\rto_be_removedQ\n  group[\'to_be_removed\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\x05_bool\x02\n\n\xb2\x04def outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      print(result, ind)\n      np.put(arr, ind, None)\n      return arr\n    else:\n      # print(result)\n      return arr\x03_id\x04bool\rreturn result\x06result\n\n  print()Agroup, outliers_grubbs_bool(group[\"Percent Relative Expression\"])\x03000\x14default_removed = []\x01]\x0bnp.ndarray,\x01 \x02# \x01 \x08\nprint()\x11control_val.value\x01\n\x10after_removal = \x17after_removal = before_\x0ebefore_removal\x01\nrw_text_output(\n  content=f\"Below are the well IDs to be removed based on standard deviations: {default_removed}\"\n)\x01\n\x05False\x04True\tFiltered \x02# \xb5\x01\n  before_removal.at[65, \'Percent Relative Expression\'] = 1000\n\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\x03 = i\n\noutliers_removed = df = merged_df_with_avg[~merged_df_with_avg[\'well_id\'].isin(points_to_remove.value)]\x02# \x03\n  *\n  before_removal[\'to_be_removed\'] = False\x0ebefore_removal\x0ebefore_removal\x04Well\x04Well\x0ebefore_removal\rafter_removal\x0ebefore_removal\x0ebefore_removal\x04Well\x01\n\x07\nSelect3Check the box to remove outliers with Grubb\'s or st with a standard deviation cutodd\x03ff.\x12 or control_column\x0bval is None\x06columnF\nif sample_column.value is None or control_column is None:\n  exit()\n  \x02vo\x0bcontrol_val \noutlier_df = delta_delta_ct_df\n\rafter_removal\xe8\x02w_text_output(content=\"\"\"\n\nThe ```before_removal``` table shows the results before removing any outliers and shows the ones to be removed in the ```to_be_removed``` column. \nThe ```after_removal``` table shows the same table with any checked outliers removed. You can take a closer look at the outliers found by inspecting the ```default_removed``` table.\n\"\"\")\x02# \x0bOptionally,\x1f\nafter_removal = before_removal\x1fafter_removal = before_removal\n\x01\n\x1eafter_removal = before_removal\x06\nafter\x17after_removal = before_\x0ebefore_removal\x1fafter_removal = before_removal\n\x1eafter_removal = before_removal\x04\\\n  \x02\\\n\x02  \x01\n\x14```before_removal```kthe results before removing any outliers and shows the ones to be removed in the ```to_be_removed``` column\x13```after_removal```\x1fthe same table with any checked_You can take a closer look at the outliers found by inspecting the ```default_removed``` table.\x02  \x02  \x02  \x02  \x01f\x02f\"\x01\"\x01`\x16remove_outliers_signal\x08 Percent\x03\n  \x02  \x02  \x19res[\'is_outlier\'] = mask\n\x12{df_picker.key}_no\x10es.loc[~mask, :]\x01d\x06metric\x01e\x06.value\x03\n\n\n\x1adelta_delta_ct_df_signal()\x02\n\n\x19def outlier_removal():\n  \x02\n\n+before_removal = delta_delta_ct_df_signal()\x0eoutlier_method\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x10before_removal, /outlier_removal(before_removal, outlier_method)\x02\n\n[before_removal = delta_delta_ct_df_signal()\noutlier_removal(before_removal, outlier_method)\x06before before_removal, after_removal = \n\n  return \xda\"from typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\n\n# Check that the widgets exist first\nif \"control_val\" not in globals():\n  exit(0)\n\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Expression\'] = outliers_grubbs(group[\"Percent Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\ndef outlier_removal(before_removal, outlier_method):\n  \n  if outlier_method.value == \"Standard Deviation\":\n    stdev_distance = w_text_input(\n      label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n      default=2\n    )\n  \n    avg_df = (\n      before_removal.groupby(grouping_columns)[\"Percent Expression\"]\n      .agg([\'mean\', \'std\'])\n       .reset_index()\n      .rename(columns={\"mean\": \"PE_mean\", \"std\": \"PE_std\"})\n    )\n    before_removal = before_removal.merge(\n    avg_df,\n    how=\"inner\",\n    on=grouping_columns\n    )\n    \n    # Set a boolean flag on whether the row should be removed\n    before_removal[\'to_be_removed\'] = False\n    before_removal.loc[(before_removal[\'Percent Expression\'] - before_removal[\'PE_mean\']) > float(stdev_distance.value) * before_removal[\'PE_std\'], \'to_be_removed\'] = True\n  \n  \n  if outlier_method.value == \"Grubb\'s\":\n    # before_removal.at[65, \'Percent Expression\'] = 1000\n    before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n    before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Expression\'].isnull(),False,True)\n  \n  if \"Well\" in before_removal.columns:\n    \n    row_index = \"Well\"\n  else:\n    print(\"Here\")\n    before_removal[\"Identifier\"] = before_removal.index.astype(str) + \" - \" + before_removal[\"Condition\"]\n    row_index = \"Identifier\"\n  \n  before_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n  \n  default_removed = before_removal[before_removal[\"to_be_removed\"] == True]\n  after_removal = before_removal\n  \n  if len(default_removed) == 0:\n    w_text_output(\n      content=\"No outliers found.\",\n      appearance={\n        \"message_box\": \"info\"\n      }\n    )\n    exit()\n  \n  w_text_output(\n    content=f\"Below are the rows we suggest should be removed based on your selected method. Check the boxes to remove them from your data:\"\n  )\n  \n  override_removal = {}\n  print(default_removed)\n  \n  for index, row in default_removed.iterrows():\n  \n    well_id = row[row_index]\n    fpre = row[\"Percent Expression\"]\n    override_removal[well_id] = w_checkbox(\n      label=f\"{well_id} ({fpre})\"\n    ).value\n  \n  \n  print(override_removal)\n  \n  points_to_remove = {k:v for (k,v) in override_removal.items() if v}\n  after_removal = before_removal[~before_removal[row_index].isin(points_to_remove)]\n  \n  delta_delta_ct_outliers_removed = after_removal\n  return\n\nbefore_removal = delta_delta_ct_df_signal()\nbefore_removal, after_removal = outlier_removal(before_removal, outlier_method)\n\nw_text_output(content=\"\"\"\n\nThe ```before_removal``` table shows the results before removing any outliers and shows the ones to be removed in the ```to_be_removed``` column. \nThe ```after_removal``` table shows the same table with any checked outliers removed. You can take a closer look at the outliers found by inspecting the ```default_removed``` table.\n\"\"\")\n\x07 before\x15before_removal, after\rafter_removal\x01\nWif \"delta_delta_ct_df_signal\" not in globals():\n  delta_delta_ct_df_signal = Signal([])\x0foutlier_removal\x16outlier_removal_signal\x1e\n  outlier_removal_signal = ou\x02()\rafter_removal\x01\n\x01\n)if control_column.value is None:\n  exit()\x010\x06.value\x010\x01\n\x03\nif\x02if\x02if\x0eif control_val\x02\"\"\x0bcontrol_val\x03 or\x02or\x05or \"\"\x0esample_columnm\xde\x19from typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nif \"control_val\" or \"sample_columnm\"\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\n\nif outlier_method.value == \"Grubb\'s\":\n  before_removal.at[65, \'Percent Relative Expression\'] = 1000\n\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n  before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Relative Expression\'].isnull(),False,True)\n\ndefault_removed = []\ndefault_removed = before_removal[before_removal[\"to_be_removed\"] == True][\"Well\"].tolist()\n\nif len(default_removed) == 0:\n  w_text_output(content=\"No outliers found.\")\n  exit()\n\nafter_removal = before_removal\n\nw_text_output(\n  content=f\"Below are the well IDs to be removed based on standard deviations: {default_removed}\"\n)\n\npoints_to_remove = w_multi_select(\n  label=\"The following well IDs will be removed:\",\n  options=before_removal[\"Well\"].tolist(),\n  default=default_removed\n)\n\nbefore_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n\nafter_removal = before_removal[~before_removal[\'Well\'].isin(points_to_remove.value)]\n\n\n\n# Check w\x1cthat the widgets exist first\x01 \x0eif control_val\x02\"\"\x0bcontrol_val\x08 not in \xf6\x19from typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\n# Check that the widgets exist first\nif \"control_val\" not in\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\n\nif outlier_method.value == \"Grubb\'s\":\n  before_removal.at[65, \'Percent Relative Expression\'] = 1000\n\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n  before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Relative Expression\'].isnull(),False,True)\n\ndefault_removed = []\ndefault_removed = before_removal[before_removal[\"to_be_removed\"] == True][\"Well\"].tolist()\n\nif len(default_removed) == 0:\n  w_text_output(content=\"No outliers found.\")\n  exit()\n\nafter_removal = before_removal\n\nw_text_output(\n  content=f\"Below are the well IDs to be removed based on standard deviations: {default_removed}\"\n)\n\npoints_to_remove = w_multi_select(\n  label=\"The following well IDs will be removed:\",\n  options=before_removal[\"Well\"].tolist(),\n  default=default_removed\n)\n\nbefore_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n\nafter_removal = before_removal[~before_removal[\'Well\'].isin(points_to_remove.value)]\n\n\x02gl\n globals()\x0b):\n  exit()\x010\x01)\x01\n\x08\nprint()\x02\"\"\x05hello\x01\n\x08\nprint()\x06remove\x15remove_outliers.value\x01\n!delta_delta_ct_df = after_removal\x01d\x05elta_\x11delta_delta_ct_df\x11delta_delta_ct_df\n\n  print()\x0ebefore_removald\n  merged_df_with_avg = merged_df.merge(\n  average_by_oligo_type,\n  how=\"inner\",\n  on=\"oligo_type\"\n)\x02  \x0ebefore_removal\tmerged_dff\n  merged_df_with_avg = merged_df.merge(\n  average_by_oligo_type,\n  how=\"inner\",\n  on=\"oligo_type\"\n  )\x02  \x02  \x02  \x02  \x02  #\n\nif len(grouping_columns) == 3:\n  \x02# \x10grouping_columns\x01[\x01]\x10grouping_columns\x06avg_df\x06avg_df\x0ebefore_removal\x0ebefore_removal\x01 \x01#& TO DO: HANDLE DF AND GROUPING COLUMNS\x03\n  1if outlier_method.value == \"Standard Deviation\":\n\x07Grubb\'s\x02  \x89\x14from typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\n\"\"\")\n\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nif sample_column.value is None:\n  exit()\n\nprint(delta_delta_ct_df)\noutlier_df = delta_delta_ct_df\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n        np.put(arr, ind, None)\n        return arr\n    else:\n        return arr\n            \ndef grubbs_transform(group):\n  group[\"\xf0\x9d\x9a\xabCt Fold Change\"] = 2**(-group[\'\xf0\x9d\x9a\xabCt\'])\n  group[\'\xf0\x9d\x9a\xabCt Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"\xf0\x9d\x9a\xabCt Fold Change\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\n# if len(grouping_columns) == 3:\n  \n# TO DO: HANDLE DF AND GROUPING COLUMNS\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  print(before_removal)\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\nif outlier_method.value == \"Grubb\'s\":\noutlier_df = outlier_df.groupby(\"Condition\", as_index=False, group_keys=False).apply(grubbs_transform)\n\n# outlier_df[\"Condition\"] = outlier_df[\"Condition\"].astype(str)\n# outlier_df.sort_values(\"Condition\", inplace=True)\x02  \x02  \x02  \x02  \x01\n\x1boutlier_removal_signal = ()\x1adelta_delta_ct_df_signal()\x01)\x1adelta_delta_ct_df_signal()\x03\n  2outlier_removal_signal(delta_delta_ct_df_signal())\x0eafter_removal)\x11remove_outliers()\x04True\x03\n  \x03\n  \x16\nremove_outliers(True)\x1c\n\nfor before_removal[\"Well\"]\x04 wel\xe6\x1afrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nprint(remove_outliers.value)\n\n# Check that the widgets exist first\nif \"control_val\" not in globals():\n  exit(0)\n\nprint(\"hello\")\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\n\nif outlier_method.value == \"Grubb\'s\":\n  before_removal.at[65, \'Percent Relative Expression\'] = 1000\n\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n  before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Relative Expression\'].isnull(),False,True)\n\ndefault_removed = []\ndefault_removed = before_removal[before_removal[\"to_be_removed\"] == True][\"Well\"].tolist()\n\nif len(default_removed) == 0:\n  w_text_output(content=\"No outliers found.\")\n  exit()\n\nafter_removal = before_removal\n\nw_text_output(\n  content=f\"Below are the well IDs to be removed based on standard deviations:\"\n)\n\nfor  before_removal[\"Well\"]\n\npoints_to_remove = w_multi_select(\n  label=\"The following well IDs will be removed:\",\n  options=before_removal[\"Well\"].tolist(),\n  default=default_removed\n)\n\nbefore_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n\nafter_removal = before_removal[~before_removal[\'Well\'].isin(points_to_remove.value)]\n\ndelta_delta_ct_df = after_removal\n\x01#\xe9\x1afrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nprint(remove_outliers.value)\n\n# Check that the widgets exist first\nif \"control_val\" not in globals():\n  exit(0)\n\nprint(\"hello\")\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\n\nif outlier_method.value == \"Grubb\'s\":\n  before_removal.at[65, \'Percent Relative Expression\'] = 1000\n\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n  before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Relative Expression\'].isnull(),False,True)\n\ndefault_removed = []\ndefault_removed = before_removal[before_removal[\"to_be_removed\"] == True][\"Well\"].tolist()\n\nif len(default_removed) == 0:\n  w_text_output(content=\"No outliers found.\")\n  exit()\n\nafter_removal = before_removal\n\nw_text_output(\n  content=f\"Below are the well IDs to be removed based on standard deviations:\"\n)\n\nfor wel before_removal[\"Well\"]\n\npoints_to_remove = w_multi_select(\n  label=\"The following well IDs will be removed:\",\n  options=before_removal[\"Well\"].tolist(),\n  default=default_removed\n)\n\nbefore_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n\nafter_removal = before_removal[~before_removal[\'Well\'].isin(points_to_remove.value)]\n\ndelta_delta_ct_df = after_removal\n\x12 {default_removed}\x06\n\nfor \x02fo\x1afor name in collection:\n  \x0fdefault_removed\x03\n  \x03\n  \x08\n\nconst \x01r\x03onv\x08verrideR\x02+r\r_removal = {}\x02  \x15\n  override_removal[]\x04name\x0b = w_checkb\x05box()\x01c\ntitle=nameioverride_removal = {}\n\nfor name in default_removed:\n\n  override_removal[name] = w_checkbox(title=name)\n  \x01l\x04abel\x05\n    \x03\n  \x04f\"${\x01{\x03} \"\x02{}\'df.loc[df[\'column_name\'] == some_value]\x0ebefore_removal\x02\"\"\x03Wll\x03ell\x04name`\nif sample_column.value is None or control_column is None or control_val.value is None:\n  exit()\x02\n\nFremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\x0fdefault_removed\x06print(\x01)\x02\n\nM#before_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\x0fselected method\x07print()\x10points_to_remove\x0fdefault_removed\x10override_removal\x08\nprint()\x10override_removal\x01 \x04Well\x0frows we select \x0esuggest should\x05your \r. Select them-Check the boxes to remove them from your data\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02\n\n\x06\nif \"\"\x04Well\x1f in before_removal.columns:\n  r\x06index_\x03ro_\x0bw_index = W\x02\"\"\x04Well\x03\n  \x18else:\n  before_removal[]\x02\"\"\nIdentifier\x15 = before_removal.inx#dex + before_removal[\"Identifier\"] \x01 \tCondition\x04str(\x01)\n.to_string^before_removal[\"Identifier\"] = before_removal.index.astype(str) + before_removal[\"Condition\"]\n\x02\"\"\x02- \x01 \x03 + +\nbefore_removal[\"Identifier\"].reset_index()\x11before_removal = \rin_place=True\x01\n\x11\n  row_index = \"\"\nIdentifier\x99\x1efrom typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nprint(remove_outliers.value)\n\n# Check that the widgets exist first\nif \"control_val\" not in globals():\n  exit(0)\n\nprint(\"hello\")\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\n\nif outlier_method.value == \"Grubb\'s\":\n  before_removal.at[65, \'Percent Relative Expression\'] = 1000\n\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n  before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Relative Expression\'].isnull(),False,True)\n\nbefore_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n\ndefault_removed = before_removal[before_removal[\"to_be_removed\"] == True]\n\n\nif len(default_removed) == 0:\n  w_text_output(\n    content=\"No outliers found.\",\n    appearance={\n      \"message_box\": \"info\"\n    }\n  )\n  exit()\n\n\nafter_removal = before_removal\n\nw_text_output(\n  content=f\"Below are the rows we suggest should be removed based on your selected method. Check the boxes to remove them from your data:\"\n)\n\noverride_removal = {}\nprint(default_removed)\n\nif \"Well\" in before_removal.columns:\n  row_index = \"Well\"\nelse:\n  before_removal[\"Identifier\"] = before_removal.index.astype(str) + \" - \" + before_removal[\"Condition\"]\n  row_index = \"Identifier\"\n\nfor index, row in default_removed.iterrows():\n\n  well_id = row[\"]\n  fpre = row[\"Percent Relative Expression\"]\n  override_removal[well_id] = w_checkbox(\n    label=f\"{well_id} ({fpre})\"\n  ).value\n\n\nprint(override_removal)\n\npoints_to_remove = {k:v for (k,v) in override_removal.items() if v}\nafter_removal = before_removal[~before_removal[\'Well\'].isin(points_to_remove)]\n\ndelta_delta_ct_outliers_removed = after_removal\n\trow_index\trow_index\n\n  print()\x01:\x02\"\"\x04Here\nIdentifier\x02\n\n\x02\n\n\xd2\x01if \"Well\" in before_removal.columns:\n  row_index = \"Well\"\nelse:\n  print(\"Here\")\n  before_removal[\"Identifier\"] = before_removal.index.astype(str) + \" - \" + before_removal[\"Condition\"]\n  row_index = \"Identifier\"\x10grouping_columns\x1bPercent Relative Expression\x02\n\n\x03\n  \xd2\x03# List for manual inspection\nfrom lplots.widgets.multiselect import w_multi_select\n\nw_text_output(\n  content=f\"Below are the well IDs to be removed based on standard deviations: {default_removed}\"\n)\n\ndefault_removed = merged_df_with_avg[merged_df_with_avg[\"to_be_removed\"] == True][\"well_id\"].tolist()\n\npoints_to_remove = w_multi_select(\n  label=\"The following well IDs will be removed:\",\n  options=merged_df_with_avg[\"well_id\"].tolist(),\n  default=default_removed\n)\x01\n3\nprint(control_val.value)\nprint(delta_delta_ct_df)\n\x03\n  \x07print()\x02\"\"\x12No outliers found.\rw_text_output\x08content=\x01\n\x01\n\x06before\x17before_removal = before\x14before_removal.sort)\t_values()\x02\'\'\rto_be_removed\x04, de\x08ascend==\x10,descending=True\tascending\x05False\xf5\x06def outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      print(result, ind)\n      np.put(arr, ind, None)\n      return arr\n    else:\n      # print(result)\n      return arr\n            \ndef grubbs_transform(group):\n  print(group, outliers_grubbs_bool(group[\"Percent Relative Expression\"]))\n  group[\'to_be_removed\'] = outliers_grubbs_bool(group[\"Percent Relative Expression\"])\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\x04 or \x02# \x0265\x0e\n      print()\x03arr\x02# \x06result\x02# \x02# W\n  group[\'to_be_removed\']df[\'v_5\'] = np.where(~df[\'pfv\'].isnull(),df[\'pfv\'],df[\'v_5\'])\n\x0ebefore_removal\x0ebefore_removal$Filtered Percent Relative Expression\x01#\x01.\n\n  print()\x04fpre$Filtered Percent Relative Expression\x01\nC\nfiltered_dict = {k:v for (k,v) in d.items() if filter_string in k}\x10points_to_remove\x10override_removal\x05not k\x01v\x01\n\x01\n\x02 v\nappearance\x05\n    \x05\n    \x03\n  \x03={}\n\n    \n    \x02  \x02\"\"\x0bmessage_box\x04: \"\"\x04info\x01,\x11_outliers_removed\x01\n\x94\x01\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\x0cYou can see \x08the outl\x0bput of each\x1fBy toggling between the before \x1a_removal and after_removal\x03```\x03```\x03```\x07``` dat\x07tables,\x01Tctable shows the results before removing any outliers and shows the ones to be removed in the ``````\rto_be_removed\x0e column. \nThe ?table reflects the changes of any of the outliers that you have\nshows the \tthe table\x93 from typing import Union, List\nimport numpy as np\nfrom scipy.stats import t\n\n\nw_text_output(content=\"\"\"\n## _(Optional)_ Outlier Removal\n\nCheck the box to remove outliers with Grubb\'s or with a standard deviation cutoff.\n\n\"\"\")\nremove_outliers = w_checkbox(label=\"Remove outliers\", default = False)\n\nprint(remove_outliers.value)\n\n# Check that the widgets exist first\nif \"control_val\" not in globals():\n  exit(0)\n\nprint(\"hello\")\n\nif sample_column.value is None or control_column.value is None or control_val.value is None:\n  exit(0)\n\n\n# https://github.com/maximtrp/scikit-posthocs/blob/3403b677fbdfad1f46c6470260b229e27f63c4af/scikit_posthocs/_outliers.py#L69\n\ndef outliers_grubbs(\n    x: Union[List, np.ndarray],\n    alpha: float = 0.05) -> Union[np.ndarray, bool]:\n    arr = np.copy(x)\n    val = np.max(np.abs(arr - np.mean(arr)))\n    ind = np.argmax(np.abs(arr - np.mean(arr)))\n    G = val / np.std(arr, ddof=1)\n    N = len(arr)\n    result = G > (N-1) / np.sqrt(N) *\\\n        np.sqrt(\n            (t.ppf(1-alpha/(2*N), N-2) ** 2) /\n            (N - 2 + t.ppf(1-alpha/(2*N), N-2) ** 2))\n    if result:\n      np.put(arr, ind, None)\n      return arr\n    else:\n      return arr\n            \ndef grubbs_transform(group):\n  group[\'Filtered Percent Relative Expression\'] = outliers_grubbs(group[\"Percent Relative Expression\"])\n  return group\n\nif remove_outliers.value is False:\n  exit()\n  \noutlier_method = w_select(label=\"Select outlier removal method:\", options=[\"Grubb\'s\", \"Standard Deviation\"])\n\nif outlier_method.value is None:\n  exit()\n\nbefore_removal = delta_delta_ct_df\n\nif outlier_method.value == \"Standard Deviation\":\n  stdev_distance = w_text_input(\n    label=\"Remove outliers that are ____ standard deviations away. Type below the number you want to fill in the blank:\",\n    default=2\n  )\n\n  avg_df = (\n    before_removal.groupby(grouping_columns)[\"Percent Relative Expression\"]\n    .agg([\'mean\', \'std\'])\n     .reset_index()\n    .rename(columns={\"mean\": \"PRE_mean\", \"std\": \"PRE_std\"})\n  )\n  before_removal = before_removal.merge(\n  avg_df,\n  how=\"inner\",\n  on=grouping_columns\n  )\n  \n  # Set a boolean flag on whether the row should be removed\n  before_removal[\'to_be_removed\'] = False\n  before_removal.loc[(before_removal[\'Percent Relative Expression\'] - before_removal[\'PRE_mean\']) > float(stdev_distance.value) * before_removal[\'PRE_std\'], \'to_be_removed\'] = True\n\n\nif outlier_method.value == \"Grubb\'s\":\n  # before_removal.at[65, \'Percent Relative Expression\'] = 1000\n  before_removal = before_removal.groupby(grouping_columns, as_index=False, group_keys=False).apply(grubbs_transform)\n  before_removal[\'to_be_removed\'] = np.where(~before_removal[\'Filtered Percent Relative Expression\'].isnull(),False,True)\n\nif \"Well\" in before_removal.columns:\n  row_index = \"Well\"\nelse:\n  print(\"Here\")\n  before_removal[\"Identifier\"] = before_removal.index.astype(str) + \" - \" + before_removal[\"Condition\"]\n  row_index = \"Identifier\"\n\nbefore_removal = before_removal.sort_values(\'to_be_removed\',ascending=False)\n\ndefault_removed = before_removal[before_removal[\"to_be_removed\"] == True]\nafter_removal = before_removal\n\nif len(default_removed) == 0:\n  w_text_output(\n    content=\"No outliers found.\",\n    appearance={\n      \"message_box\": \"info\"\n    }\n  )\n  exit()\n\nw_text_output(\n  content=f\"Below are the rows we suggest should be removed based on your selected method. Check the boxes to remove them from your data:\"\n)\n\noverride_removal = {}\nprint(default_removed)\n\nfor index, row in default_removed.iterrows():\n\n  well_id = row[row_index]\n  fpre = row[\"Percent Relative Expression\"]\n  override_removal[well_id] = w_checkbox(\n    label=f\"{well_id} ({fpre})\"\n  ).value\n\n\nprint(override_removal)\n\npoints_to_remove = {k:v for (k,v) in override_removal.items() if v}\nafter_removal = before_removal[~before_removal[row_index].isin(points_to_remove)]\n\ndelta_delta_ct_outliers_removed = after_removal\n\nw_text_output(content=\"\"\"\n\nThe ```before_removal``` table shows the results before removing any outliers and shows the ones to be removed in the ```to_be_removed``` column. \nThe ```after_removal``` table shows the tabl\n\"\"\")\n\x01 #e with any checked outliers removed\x05 same9. You can take a closer look at the outliers found by cli\x15inspecting the ``````\x0fdefault_removed\x07 table.\x01T\x03rue\x05False\t\n  pring \x03t()\x0fdefault_removed\x03row\x0b.iterrows()\x07index, \x02{)\x01}\x01)\x10    label=f\"{}\"\n\x03row\x02[]\x01]\x05\"Well\x01 \x01\"\x03row\'${Filtered Percent Relative Expression}\x05row[]&\"Filtered Percent Relative Expression\"\x01 \x02# \x02# \x04tech _replicates = w_checkbox(label=\"\x08Includes\x01 \ntechnical !replicates\", default=False).value\x02\n\n\x02# \x03bio)_replicates = w_checkbox(label=\"Includes \nbiological\" replicates\", default=False).value\x01\n\x01\n\x02# \x03if \x0ebio_replicates\x02:\n\x02# \x9d\x01  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns, default=\"Biological Replicate\")\x02\n\n\x02# ftech_replicate_average = w_checkbox(label=\"Average across technical replicates\", default=False).value\n\x01\n\x02# \x06final_\x03cq_\x07column \x03= \"\x02Cq\x01\"\x01\n\x01\n\x02# \x1aif tech_replicate_average:\x01\n\x02# *  final_cq_column = \'Technical Cq Average\'\x01\n\x02# \x1c  final_cq_column_target = \'\x14Technical Cq Average\x01\'\x01\n\x02# \x05  if \x0fbio_replicates:\x01\n\x02# %    main_df[\'Technical Cq Average\'] =\x01 tmain_df.groupby([target_column.value, sample_column.value, bio_rep_column.value])[cq_column.value].transform(\'mean\')\x01\n\x02# \x02  \x04else\x01:\x01\n\x02# _    main_df[\'Technical Cq Average\'] = main_df.groupby([target_column.value, sample_column.value%])[cq_column.value].transform(\'mean\')\x01\n\x01\n\x02# \x03bio6_replicate_average = w_checkbox(label=\"Average across \nbiological\" replicates\", default=False).value\x01\n\x01\n\x02# \x03if \x15bio_replicate_average\x01:\x01\n\x02# \x11  final_cq_column\r_housekeeping\x04 = \'\x0bCq Average\'\x01\n\x02# \x12  final_cq_column_\ttarget = \x01\'\x0fTechnical Cq Av\x05erage\x01\'\x01\n\x02# \x1c  if tech_replicate_average:\x01\n\x02# \r    main_df[\'HCq Average\'] = main_df.groupby([target_column.value, sample_column.value\x03])[\x16\'Technical Cq Average\'\x13].transform(\'mean\')\x01\n\x02# \x02  \x05else:\x01\n\x02# X    main_df[\'Cq Average\'] = main_df.groupby([target_column.value, sample_column.value])[\x0fcq_column.value\x13].transform(\'mean\')\x01\n\x02  \x04    \x01\n\x01\n\x02  \x01\n\x01\n\x02# \x02# Nuse_replicates = w_checkbox(label=\"Include replicates\", default=False).value\n\n\x02# \x02# \x13if use_replicates:\n\x02# \x02# \x9d\x01  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns, default=\"Biological Replicate\")\x01\n\x01\n\x02# \x02# \x13  if bio_rep_column\x01.\x05value\r is not None:\x01\n\x02# \x02# \x02  \x02  \x02# \x0enum_bio_rep = \x14w_text_input(label=\"\tNumber of\x0c replicates\"\x0b, default=\"\x013\x08\").value\x01\n\x02# \x02# \x04    \x03bio6_replicate_average = w_checkbox(label=\"Average across \nbiological\" replicates\", default=False).value\x05\n    \x01\n\x01\n\x05\n    \x01\n\x01\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x01\n\x14empty_well_string = +Input the string that denotes empty wells:\"\x08Sample 1\x01r\x02  \xa6\x04\n  target_df[\'Replicate\'] = target_df.groupby([\'Target\',\'Sample Name\']).cumcount() + 1\n\n# Pivot the DataFrame to get triplicate values as separate columns\ntarget_df = target_df.pivot_table(index=[\'Target\', \'Sample\',\'Sample Name\'], columns=\'Replicate\', values=\'Cq\', aggfunc=\'first\').reset_index()\n\n# # # Rename columns to reflect the triplicate\ntarget_df.columns = [\'Target\', \'Sample\', \'Sample Name\'] + [f\' Technical Replicate Cq {i}\' for i in range(1, target_df.shape[1] - 2)]\n\ntarget_df[\'Cq Average\'] = target_df.iloc[:, 3:].apply(safe_mean, axis=1)\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x07main_df\x06.value\x0ebio_rep_column\x07main_df\x0ftarget_column.b\x05value\x05 samo\x13sample_column.value\treplicate\x07main_df\x07main_dfN  use_replicates = w_checkbox(label=\"Include replicates\", default=False).value\x11replicate_average\x02Ae\x07verage \x03\n  \x15\n  if use_replicates:\treplicate\x11replicate_averageh\n    df[\'Cq average\'] = df.groupby([\'Sample\', \'Target\', \'Biological Replicate\'])[\'Cq\'].transform(\'mean\')\x07main_df\x07main_df\x0ebio_rep_column\x06target\x13target_column.value\x13target_column.value\x06sample\x0fcq_column.value\x02_2\x13target_column.value\x07_column\x05\n    \x02# \x02# \x0c\n    print()\x13target_column.value\x05\n    \x06sample\x05\n    \x0ebio_rep_column\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01c\"\n      print(bio_rep_column.value)\x06.value\rtarget_column\"\n      print(bio_rep_column.value)\rsample_column!\n      print(sample_column.value)\tcq_column\x07main_df\x01A\x02\n_\x05tech_\x11 across technical\x16tech_replicate_average\nTechnical \x04tech\ttechnical\x03\n  \x02# \x02# \x02# \x01\n\x05# use\x07Include\x04tech\ttechnical\x02# \x02  \x02# \x03\n  \x02# \x01 \x03   \x01 \x03bio\x02# \x0euse_replicates\x02# \x04    \x04    \x16, bio_rep_column.value\x04tech\ttechnical\x16tech_replicate_average\nTechnical \x16, bio_rep_column.value\x0fcq_column.value\x04  el\x16\'Technical Cq Average\'\x01\"-\n    final_cq_column = \'Technical Cq Average\'\nTechnical \x0chousekeeping\x02\"\"\x01\"\x01\'\x03Cq \x01a\x01\'\x02# 0from lplots.widgets.checkbox import w_checkbox\n\n\x02# \x02# \x05targe\x01ti_column = w_select(label=\"Select the column that contains the housekeeping gene\", options=main_df.columns\x03)\n\n\x02# \x02# \x03if \rtarget_column\x14.value is not None:\n\x02# \x02# U  housekeeping_gene = w_select(label=\"Select the housekeeping gene\", options=main_df[\rtarget_column\x18.value].unique()).value\n\x01\n\x02# \x02# \x06sample-_column = w_select(label=\"Select column with \x0esample group /\x15 condition\", options=\x07main_df\t.columns)\x02\n\n\x02# \x02# #bio_replicates = w_checkbox(label=\"\x01B\x14iological replicates\x06 exist\x0b\", default=\x04True\x07).value\x02\n\n\x02# \x02# \x03if \x18bio_replicates is True:\n\x02# \x02# |  bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns\x01)\x06.value\x01\n\x02# \x02# \x06else:\n\x02# \x02# \n  main_df[\x01\"\rBio Replicate\x01\"\x01]\x04 = 1\x01\n\x02# \x02# \x10  bio_rep_column\x04 = \"\x07Bio Rep\x06licate\x01\"\x01\n\x01\n\x02# \x02# \x07dosage_\x04info\x15 = w_checkbox(label=\"\x1aInclude dosage information\x18\", default=False).value\n\x01\n\x02# \x02# \x03if \x0bdosage_info\n is True:\n\x02# \x02# \x02  \x06dosage>_column = w_select(label=\"Select the column that contains the \x06dosage\x01 \x0binformation\x1a\", options=main_df.columns\x01)\x01\n\x01\n\x11housekeeping_gene\x12, default=\"Target\"\x18housekeeping_gene_column\x18housekeeping_gene_columny\n\n# main_df[\'Sample Name\'] = main_df[\'Sample\'].astype(str) + \"-\" + main_df[bio_rep_column.value].astype(int).astype(str)\n\x0fvehicle_control\x0fvehicle control\x0ewell_result_df\xcf\x01\nif vehicle_control_column.value is not None:\n  print(vehicle_control_column.value)\n  vehicle_control = w_select(label=\"Select vehicle control condition\", options=set(main_df[vehicle_control_column.value]))\n\rsample_column\rsample_column\x02# \x02# \x02# \x06.value\x01r\x02# \nIncludes b\x05False\x03bio , default=\"Biological Replicate\"\x02  \x01]\x01\"\x06.value\x01\"\x02ic\x0ebio_replicates\x1bBiological replicates exist\x01c\x02in\x0ebio_replicates\x07bio_rep\nbiological\x10replicate number , default=\"Biological Replicate\"N\nelse:\n  main_df[\"Bio Replicate\"] = 1\n  bio_rep_column.value = \"Bio Replicate\"\x01\nZ# tech_replicates = w_checkbox(label=\"Includes technical replicates\", default=False).value\x03\n\n\n\x91\x02# bio_replicates = w_checkbox(label=\"Includes biological replicates\", default=False).value\n\n# if bio_replicates:\n#   bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns, default=\"Biological Replicate\")\n\x02# \x02# \x02# \x01\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xa1\x01from lplots.widgets.text import w_text_input, w_text_output\n\nif \"delta_ct_signal\" not in globals():\n  delta_ct_signal = Signal([])\n\nw_text_output(content=\"\"\"\n## \x06\xf0\x9d\x9a\xabCq9 Calculation\n\nWe are now going to calculate Delta Ct (```\x06\xf0\x9d\x9a\xabCq\xf4\x01```) by subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\"\"\")\n\nw_text_output(content=\"\"\"\n\n\nThe ```Cq``` value of the housekeeping gene is subtracted from the ```Cq``` value of the target genes.\n\nThe ```\x06\xf0\x9d\x9a\xabCq5``` value for each target gene can be defined as:\n\n$$\x01 \x01\\\x08Delta {C\x01q4}_{target} = {Cq}_{{target}} - {Cq}_{{housekeeping}}\x01 \xa1\x02$$\n\nHit the ```Run``` button to generate results, after removing wells above that cause errors.\n\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndef calculate_delta_ct(\x0bdelta_cq_dfr, delta_ct_option, housekeeping_gene):\n  import pandas as pd\n  from pathlib import Path\n  import os\n  import glob\n\x03\n  \x12delta_ct_option = \x04len(\x0bdelta_cq_df\x01[\x0bdelta_cq_df\x17[well_column.value] == \x0bdelta_cq_df@[well_column.value].iloc[0]][target_column.value].unique()) > 1\n\x12\n  targets = list(\x0bdelta_cq_dfC[target_col_signal()].unique())\n  if delta_ct_option is False:\n    \x0bdelta_cq_df\x03 = \x0bdelta_cq_dfc.drop(well_col_signal(), axis=1)\n\n  targets = [t for t in targets if t not in housekeeping_gene]\n  \x0bdelta_cq_df\"[cq_col_signal()] = pd.to_numeric(\x0bdelta_cq_dfq[cq_col_signal()])\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    for hk_gene in housekeeping_gene:\x01\n\x12      df_name = f\'\x06\xf0\x9d\x9a\xabCq\x14_{target}_{hk_gene}\'\x01\n\r      data = \x0bdelta_cq_df\x02[(\x0bdelta_cq_df![target_col_signal()] == target) \x01|\x02 (\x0bdelta_cq_df#[target_col_signal()] == hk_gene)]\n\x06      4data = data[data[cq_col_signal()] != \"Undetermined\"]\r\n      print(\x04data\x01)\x07\n      \x06print(\x05data[\x01\'\tdrug_name\x01\'\x01]\x07.values\x01)\x01\n\xec\x01      data = data.pivot_table(\n        index=[col for col in data.columns if col not in set([target_col_signal(), cq_col_signal()])],\n        columns=target_col_signal(),\n        values=cq_col_signal()\n      ).reset_index()\n      data[\'\x06\xf0\x9d\x9a\xabCq\xae\x03\'] = data[target] - data[hk_gene]\n      data = df_column_switch(data, target, hk_gene)\n    \n      _ct_df[df_name] = pd.DataFrame(data)\n  \n      data_T = data.drop(hk_gene, axis=1)\n      data_T[cq_col_signal()] = data_T[target]\n      data_T[target_col_signal()] = target\n      data_T[\"Housekeeping Gene\"] = hk_gene\n  \n      _ct_df_T[df_name] = pd.DataFrame(data_T)\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n    \n  \x0bdelta_cq_df5 = pd.concat(_ct_df_T.values(), ignore_index=True)\n  \x0bdelta_cq_df\x14 = df_column_switch(\x0bdelta_cq_df\t, \"Cq\", \"\x06\xf0\x9d\x9a\xabCq\x05\")\n  \x0bdelta_cq_df\x03 = \x0bdelta_cq_df].drop(targets, axis=1)\n\n  bullet_points = [gene for gene in _ct_df.keys()]\n\n  return _ct_df, \x0bdelta_cq_df\x0f, bullet_points\r\n\ntry:\n  pre_\x0bdelta_cq_df\x11 = globals()[\'df_\x041834\x02\']\t\n  print(\x01\"\x04HIII\x01\"\x01)@\nexcept:\n  print(\"Skipping filtered dataframe retrieval\")\n  pre_\x0bdelta_cq_df\x16 = qpcr_data_signal()\n\x01\n\x03if \x04pre_\x0bdelta_cq_df\x08 is None):\n  w_text_output(\ncontent=f\"\"\"\nWarning: \x10Import your data;.\n\"\"\",\nappearance={\n\"message_box\": \"warning\",\n  })\n  exit()\x01\n!\nif hk_signal() is None:\n  exit()\x01\n\x08\nif pre_\x0bdelta_cq_df0.isnull().values.any():\n  missing_indices = pre_\x0bdelta_cq_df\x05[pre_\x0bdelta_cq_df5.isnull().any(axis=1)].index\n  missing_indices = pre_\x0bdelta_cq_df\x16.loc[missing_indices, \x04well\x01_\x04col_\x07signal(\x01)\xa9\x02].tolist()\n  missing_indices = \'\\n\'.join(missing_indices)\n  w_text_output(\ncontent=f\"\"\"\nError in input data, Cq values are null in wells: \n{missing_indices}. Filter out null rows in the cell above and re-run this cell. \n\"\"\",\nappearance={\n\"message_box\": \"danger\",\n  })\n  try:\n    del locals()[\'pre_\x0bdelta_cq_df\'\']\n  except KeyError:\n    pass\n  exit()\x01\n\x10\nresult_tables, \x0bdelta_cq_df), bullet_points = calculate_delta_ct(pre_\x0bdelta_cq_df\x1c, delta_ct_option_signal(), \nhk_signal(\x01)\x12)\ndelta_ct_signal(\x0bdelta_cq_df\xcf\x05)\n\nexport_results = w_checkbox(label=\"Output intermediate results tables\", default=False)\n\nif export_results.value is True:\n  for name, df in result_tables.items():\n    locals()[name] = df\n    try:\n      del locals()[\'df\']\n    except KeyError:\n      pass\n\nbullet_points = [name.split(\'_\')[1:] for name in bullet_points]\n\n# Create markdown table\ntable_md = \"| Target | Housekeeping Gene |\\n| --- | --- |\\n\"\nfor target, hk_gene in bullet_points:\n    table_md += f\"| {target} | {hk_gene} |\\n\"\n\nw_text_output(content=f\"\"\"\n### Results\nGreat! If you look below, you will see that a table containing the groups created:\n  {table_md} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```\x0bdelta_cq_df\x18``` table below.\n  \"\"\") \x04data\x02  \x02  \x06data[]Mdelta_ct_df[\'_Ct\'] = delta_ct_df[targets[0]] - delta_ct_df[housekeeping_gene]\x04data\x04data\x01]\x04data\x0c\n    print()\x04data\x01|\x06_ct_df\x04_ct_\x04long\x06delta_\x0edelta_ct_df = \x04\n\n\n\n\x02# \x03\n  \xdc\x04\n\n  _ct_df = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct\'\n    data = delta_ct_df[(delta_ct_df[target_column.value] == target) | (delta_ct_df[target_column.value] == housekeeping_gene)]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([target_column.value, cq_column.value])],\n      columns=target_column.value,\n      values=cq_column.value\n    ).reset_index()\n    data[\'_Ct\'] = data[target] - data[housekeeping_gene]\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n\n  for name, df in _ct_df.items():\n    print(f\"{name}:\\n{df}\\n\")\n    locals()[name] = df\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x0e# Remove wells\x07\n    df\x0e\n  _ct_df = {}\x02_T;\n    _ct_df_T = {}\n    _ct_df[df_name] = pd.DataFrame(data)\x08_ct_df_T\x05\n    \x14\n    data_T = data[]\x06target\x02[]\x01]\x13target_column.valueA target\n    delta_ct_df = main_df.drop(well_column.value, axis=1)\x02  \x02  \x12\n    data_T = data\x06data_T\x06data_T\x11housekeeping_gene;combined_df = pd.concat(_ct_df.values(), ignore_index=True)\x08_ct_df_T\x06target\x06data_T .drop(housekeeping_gene, axis=1))\n    data_T[target_column.value] = target\tcq_column\x06data[]\x08data_T[]\x06target-\n    data_T[cq_column.value] = data_T[target]\x0c\n    print()\x02# \x02# \x08_ct_df_T\x10_ct_df_T[target]\x10_ct_df_T[target]2\n    data_T = data.drop(housekeeping_gene, axis=1)\x06target\x06data_T\x12\n    print(data_T)\x02# \x12\n    print(data_T)\x02# \x12\n    print(data_T)\x12\n    print(data_T)\x12\n    print(data_T),\n    _ct_df_T[target] = pd.DataFrame(data_T)\x02# \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xa5%import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\n# DON\'T DELETE THE PRINT STATEMENTS BELOW, OTHERWISE THIS CELL WILL NOT REACT\nprint(delta_ct_group.value)\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control \xf0\x9d\x9a\xabCt\'] = df_group[(df_group[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n  df_group[\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\"] = df_group[\"\xf0\x9d\x9a\xabCt\"] - df_group[\"Mean Control \xf0\x9d\x9a\xabCt\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"\"\"\n## _(Optional)_ \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt Calculation\n\nNow we are going to calculate \xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt. First, you need to select what your control condition is. This is likely a sample type or a drug concentration.\n\"\"\")\n\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\ngroups_done = False\nif control_column.value is None:\n  exit()\n  \ncontrol_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\nif control_val.value is None:\n  exit()\n  \n\nif (control_column.value != \"Condition\") & (control_column.value != \"Target\"):\n  grouping_columns = [\"Target\", \"Condition\", control_column.value]\nelif (control_column.value == \"Condition\"):\n  grouping_columns = [\"Target\", control_column.value]\nelif (control_column.value == \"Target\"):\n  w_text_output(content=\"Error, target column cannot be the control condition.\")\n  exit()\nelse:\n  w_text_output(content=\"Error.\")\n  exit()\n\n\ngroups = []\ngroup_text = []\nis_tuple = False\n\n# Create Groups\nif len(grouping_columns) == 3:\n  for i in delta_ct_df[\"Target\"].unique():\n    for j in delta_ct_df[\"Condition\"].unique():\n      groups.append((i, j))\n      group_text.append(f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n  is_tuple = True\nelse:\n  for i in delta_ct_df[\"Target\"].unique():\n    groups.append(i)\n    group_text.append(f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\nprint(groups, \"Target\", \"Condition\")\n\n\n# Create control dataframes\nif len(groups) > 0:\n  ctrl_dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      df_name = f\"ctrl_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i][0]}_{groups[i][1]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"Ct\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n      \n    else:\n      df_name = f\'ctrl_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = delta_ct_df[(delta_ct_df[control_column.value] == control_val.value)]\n      data[\"Group\"] = f\"{groups[i]}\"\n      data[\'Mean Control \xf0\x9d\x9a\xabCt\'] = data[(data[control_column.value] == control_val.value)][\"\xf0\x9d\x9a\xabCt\"].mean()\n      ctrl_dataframes[df_name] = pd.DataFrame(data)\n  # Example usage of the created dataframes\n  for name, df in ctrl_dataframes.items():\n      locals()[name] = df\n  control_df = pd.concat(ctrl_dataframes.values(), ignore_index=True)\n\n  # Create delta delta cf dataframe\n  dataframes = {}\n\n  for i in range(len(groups)):\n    if is_tuple:\n      df_name = f\"\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i][0]}_{groups[i][1]}\"\n      data = delta_ct_df[(delta_ct_df[\"Target\"] == groups[i][0]) & (delta_ct_df[\"Condition\"] == groups[i][1])]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n    else:\n      df_name = f\'\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt_{groups[i]}\'\n      data = delta_ct_df[delta_ct_df[\"Target\"] == groups[i]]\n      data = calc_delta_delta_ct(data)\n      dataframes[df_name] = pd.DataFrame(data)\n  \n  # Example usage of the created dataframes\n  for name, df in dataframes.items():\n      locals()[name] = df\n\n  delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n\nw_text_output(content=f\"\"\"\n### Groups\n\n\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt will be calculated in the following groups:\n{\', \'.join([f\'* ```{g}```\' for g in group_text])}\n\n### Controls\n\nWe start by getting the average \xf0\x9d\x9a\xabCt value of the control condition in every group. You can navigate to the ```control_table``` to see all the replicates that will be used as controls.\n\n\n### Results\n\nThe ```Mean Control \xf0\x9d\x9a\xabCt``` column for each group will be subtracted from the \xf0\x9d\x9a\xabCt of each biological replicate. You can see the new ```\xf0\x9d\x9a\xab\xf0\x9d\x9a\xabCt``` column below in the dataframe created for each group: \n{\', \'.join([f\'* ```{g}```\' for g in list(dataframes.keys())])}\n\n\"\"\")\n\n\x06\xf0\x9d\x9a\xabCt\x01_\xb6\x19w_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xabCt Calculation\n\nWe are now going to calculate Delta Ct (```\xf0\x9d\x9a\xabCt```)by grouping our technical replicates and subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndelta_ct_df = qpcr_data_cleaned\n\ndelta_ct_group = w_select(label=\"Group technical replicates by:\", options=[\"Well\", \"Sample\"])\n\nif target_column.value is None:\n  exit()\n\nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  delta_ct_df = qpcr_data_cleaned\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = qpcr_data_cleaned.drop(\"Well\", axis=1)\n\n  targets = list(qpcr_data_cleaned[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'\xf0\x9d\x9a\xabCt{_target}_ct_table\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'\xf0\x9d\x9a\xabCt\'] = data[target] - data[housekeeping_gene]\n    data = df_column_switch(data, target, housekeeping_gene)\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {\', \'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\n\n\n  # if delta_ct_group.value == \"Well\":\n    \n  #   w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {list(_ct_df.keys())}\")\n  #   w_text_output(content=f\"Each well has its own row and the Cq values for each target are in their respective columns.\")\n\n  # else:\n    \n  #   w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data: {list(_ct_df.keys())}\")\n  #   w_text_output(content=f\"The Cq values for technical replicates have been averaged, so each biological replicate has its own row. The Cq values for each gene are in their respective columns.\")\n\n\n# w_text_output(content=f\"Now, we just subtract the housekeeping gene from the target to get the _Ct column.\")\n\n\x01_\x02# \x02# \x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x08delta_ct\x01t\x01q\x01q\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x01u\x01l\xfb\x01# React to delta_ct_df.columns\nfrom lplots.reactive import Signal\n\nif \"seq\" not in globals():\n  print(\"defined seq\")\n\n  try: \n    seq = Signal(delta_ct_df.columns)\n\n  except: \n    seq = Signal([])\n  \nelse:\n  print(\"seq already defined:\", seq.sample())\x08\npritn()\x04nt()\x0fdelta_ct_option!delta_ct_option_signal().sample()\x02()\x01\n\x04\nout\xc9\x18w_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xabCt Calculation\n\nWe are now going to calculate Delta Ct (```\xf0\x9d\x9a\xabCt```)by grouping our technical replicates and subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndelta_ct_df = qpcr_data_cleaned\n\ndelta_ct_group = w_select(label=\"Group technical replicates by:\", options=[\"Well\", \"Sample\"])\n  \nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  delta_ct_df = qpcr_data_cleaned\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = qpcr_data_cleaned.drop(\"Well\", axis=1)\n\n  targets = list(qpcr_data_cleaned[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct_table\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'\xf0\x9d\x9a\xabCt\'] = data[target] - data[housekeeping_gene]\n    data = df_column_switch(data, target, housekeeping_gene)\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {\', \'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\n\n\n  # if delta_ct_group.value == \"Well\":\n    \n  #   w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {list(_ct_df.keys())}\")\n  #   w_text_output(content=f\"Each well has its own row and the Cq values for each target are in their respective columns.\")\n\n  # else:\n    \n  #   w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data: {list(_ct_df.keys())}\")\n  #   w_text_output(content=f\"The Cq values for technical replicates have been averaged, so each biological replicate has its own row. The Cq values for each gene are in their respective columns.\")\n\n\n# w_text_output(content=f\"Now, we just subtract the housekeeping gene from the target to get the _Ct column.\")\n\n\x08_table_1\x01x\x04df-S\x0c_simple = []\x01]\tmain_df[]\x02[](target_column.value, sample_column.value\x01\n\x07w_tex_o\x05t_oup\x06tput()\x02\"\"\x08content=\x01T\x1dWe are now going to group by \x0ecalculate deltCDelta Ct by grouping our technical replicates and subtracting the t\x02ho\x11Cq values of our %the housekeeping gene from our target\x07that ou\x13f the target genes.\xc1\x01\n  w_text_output(content=\"We are now going to calculate Delta Ct by grouping our technical replicates and subtracting the Cq values of the housekeeping gene from our that of the target genes.\")*If you have multiple genes in the same wek\x02ll\x1cyour target and housekeeping\x1f, select the Well option below.z\n  w_text_output(content=\"If you have your target and housekeeping genes in the same well, select the Well option below.\")\x0fdifferent wells\x06Sample\x01 .\n  # Get average Cq across tehnical replicates\x03\n  \x02  \x02  \x03\n  \x03\n  \n\n  print()\x0caverage_dict\n\n  pritn()\x01)\x04nt()\x0fhousekeeping_df\x9f\x01\n  average_df = housekeeping_df.groupby(sample_column)[cq_column].mean()\n\n# Convert the resulting Series into a dictionary.\naverage_dict = average_df.to_dict()\x07groupby\x07.mean()\x02# \n.to_dict()\x01)\x03\n  \x12\n  # Get housekeep/average per sample for the housekeeping gene df\x07.mean()\x01)\x07.mean()\x01)\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x06\xf0\x9d\x9a\xabCt\x02\n\\\x01t\x01\n\x0bdelta_ct_df\x02  \x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x01\n\x06\xf0\x9d\x9a\xabCt\x01\n\x0bdelta_ct_df\x0bdelta_ct_df\x01&\x0bdelta_ct_df\x06      \x01\n\x06\xf0\x9d\x9a\xabCt\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x06\xf0\x9d\x9a\xabCt\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_dfL\n\nif delta_ct_option_signal() is None or housekeeping_gene is None:\n  exit()\x0bdelta_ct_df\x03858\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x06\'Well\'\x0bdelta_ct_df\x01\n\x0bdelta_ct_df\x0bdelta_ct_df\x11housekeeping_gene\x0bdelta_ct_df\x0bdelta_ct_df\x01)\x01\n\x07print()\x01:\x02\"\"\x02HI\x0cprint(\"HI\")\n\x01k\nhk_signla9\x05nal()\x01)\x04well\x11well_column.value\x04)sig\x01)\x07\n      \r      print()\x04data\x07\n      \x0bprint(data)\x11      print(data)\x0bdelta_ct_df\r      print()\ntargets, j\x04hous\x11housekeeping_gene\x01\n\x07print()\x04daya\x02ta9delta_ct_df[(delta_ct_df[target_col_signal()] == target)],delta_ct_df[target_col_signal()] == hk_gene)\x0cdelta_ct_df[\x01]\x05delta\'target_and_housekeeping_in_same_well = \tqpcr_data\tqpcr_data\tqpcr_data\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x01 \x0ecan be defined\x01a\x02==\x0c\n    print()\x06target\x0btarget_gene\x17\n    print(target_gene)\x05group\x17\n    print(target_gene)\x07hk_gene\x11housekeeping_gene\x05group\x0btarget_gene\x11housekeeping_gene\x0c\n    print()\x05group\x05group\x1agroup[target_column.value]\x9a\x08delta_ct_df = cleaned_df\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = cleaned_df.drop(\"Well\", axis=1)\n\n  targets = list(cleaned_df[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct_table_2\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'_Ct\'] = data[target] - data[housekeeping_gene]\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\xfb\x01  w_text_output(content=f\"Now, we just subtract the housekeeping gene from the target to get the _Ct column.\")\n\n  w_text_output(content=f\"You can view a merged table with all non-housekeeping gene targets by checking out the delta_ct_df table below.\")\x01\n\x01\n\x1bimported_qpcr_data_signal()\x13cleaned_data_signal\x04\xf0\x9d\x9a\xab\x03\n  \x03\n  \x01\n\x03\n  \x03dis\x0breadonly={}\x17delta_ct_df is not None\x01,\x10\n  appearance={}\x06\n  \n  \x02  \x02\"\"\x03rea\x0bplaceholder\x04: \"\"\x08Select p\nblah blah.\x04blah\x03\xe2\x80\xa6\x01,X\n  if \'dose_name\' in data.columns:\n    data[\'dose_name\'] = data[\'dose_name\'].astype(str)\x0bdelta_ct_df\x0bdelta_ct_df\x0bdelta_ct_df\x02;;\x01\'#if target_column.value is not None:\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \t\n        \x03\n  \x02  \x02  \xe9\x02else:\n        if delta_ct_group.value == \"Well\":\n        \n        w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {list(_ct_df.keys())}\")\n        w_text_output(content=f\"Each well has its own row and the Cq values for each target are in their respective columns.\")\n  \x08our data\x1bTechnical replicates have b\x17The Cq values for techi\x06nical *een averaged, so each biological replicate\x01.\x03The\x04gene\x02  \x0ctargets = []\x02[]\x0e\n      print()\x07targets\ncleaned_df;\nif removal_method is not None:\n    cleaned_df = renamed_df\x01\n\x05delta\x02  \x01\n\x02dd\x0belta_ct_df \x13[] = pd.to_numeric(\x01\n!  delta_ct_df[] = pd.to_numeric(\n\x02  \x0cdelta_ct_df[\x12] = pd.to_numeric(\x01\n\x04\"Cq\"\x12delta_ct_df[\"Cq\"])\x03\n  \x02  \x05print\x02# \x0f\n  delta_ct_df \x0e  delta_ct_df\n\x03 = $data.drop(housekeeping_gene, axis=1)\x0bdelta_ct_df\x01[\x01]\x07targets! | delta_ct_group.value == \"Well\"\x06Sample`\n  if delta_ct_group.value == \"Sample\":\n\n  delta_ct_df = main_df.drop(well_column.value, axis=1)\x02  \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x05\n    \x01\n\x02  \x8b\x08\n  delta_ct_df = main_df.drop(well_column.value, axis=1)\n  targets = list(main_df[target_column.value].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct\'\n    data = delta_ct_df[(delta_ct_df[target_column.value] == target) | (delta_ct_df[target_column.value] == housekeeping_gene)]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([target_column.value, cq_column.value])],\n      columns=target_column.value,\n      values=cq_column.value\n    ).reset_index()\n    data[\'_Ct\'] = data[target] - data[housekeeping_gene]\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[cq_column.value] = data_T[target]\n    data_T[target_column.value] = target\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n\x02or\x01(\x01)\x01(\x01)\x08if len()\x01\n\x05\n    \x11_ct_df_T.values()\x01\n\x02  \x07print()\x11housekeeping_gene\x03 or\x03 if\x1a housekeeping_gene is None\x01\n\x03\n\n\n\x05## Op\x19Select Calculation option\x01c\x06Here a)Below is more information on how the samp-the ```\xf0\x9d\x9a\xabCt``` values are calculated using.\x1c for each calculation method\x13\n\n#### Well\n\nThe de\x06``````\r```\xf0\x9d\x9a\xabCt``` \x02Cq)value of the housekeeping gene in each ew\x17well is subtracted form%rom the target gene in the same well.\x16```Cq``` value of the \x01s\x11\n\nFor each well:\n\x1aThe ```\xf0\x9d\x9a\xabCt``` value for*value for each target gene in each well is\x10\n```\xf0\x9d\x9a\xabCt``` = \x05$$\n$$o\n\\[\n\\Delta \\text{Ct}_{\\text{well}} = \\text{Ct}_{\\text{target, well}} - \\text{Ct}_{\\text{housekeeping, well}}\n\\]\x01%\x01\\i\\Delta \\text{Ct}_{\\text{well}} = \\text{Ct}_{\\text{target, well}} - \\text{Ct}_{\\text{housekeeping, well}}\n\x08target, \x01q\x01q\x0c\n\n#### Well\n\x08Sample\n\n\x01\n@The well column is removed and samples are merged on any similar\x1athe Cq values for columns \x17rows that are the same \x14are averaged across \x1cwith the same column values.\x03```\x02``\xf3\x18w_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xabCt Calculation\n\nWe are now going to calculate Delta Ct (```\xf0\x9d\x9a\xabCt```)by grouping our technical replicates and subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\nBelow is more information on how the ```\xf0\x9d\x9a\xabCt``` values are calculated for each calculation method.\n\n#### Well\n\nThe ```Cq``` value of the housekeeping gene in each well is subtracted from the ```Cq``` value of the target genes in the same well.\n\nThe ```\xf0\x9d\x9a\xabCt``` value for each target gene in each well is:\n\n$$\n\\Delta {Ct}_{target, well} = {Cq}_{{target, well}} - {Cq}_{{housekeeping, well}}\n$$\n\n#### Sample\n\nThe well column is removed and the ```Cq` values are averaged across rows with the same column values.\n\n\n\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndelta_ct_df = qpcr_data_cleaned\ndelta_ct_group = w_select(\n  label=\"Select calculation option:\", \n  options=[\"Well\", \"Sample\"],\n  readonly=delta_ct_df is None,\n  appearance={\n    \"placeholder\": \"Select\xe2\x80\xa6\"\n  }\n)\n\nif target_column.value is None or delta_ct_group is None:\n  exit()\n\nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  # Update reactive signal for delta_ct_df\n  seq(list(delta_ct_df.columns))\n  print(\"set seq\", list(delta_ct_df.columns))\n  \n  delta_ct_df = qpcr_data_cleaned\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = qpcr_data_cleaned.drop(\"Well\", axis=1)\n\n  targets = list(qpcr_data_cleaned[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'\xf0\x9d\x9a\xabCt_{target}\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'\xf0\x9d\x9a\xabCt\'] = data[target] - data[housekeeping_gene]\n    data = df_column_switch(data, target, housekeeping_gene)\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n  bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\n\x01`\x02``\r This means w\x18rows with the same Bio R\x12for the same confi\x16dition, target, biolog\xab\x19w_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xabCt Calculation\n\nWe are now going to calculate Delta Ct (```\xf0\x9d\x9a\xabCt```)by grouping our technical replicates and subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\nBelow is more information on how the ```\xf0\x9d\x9a\xabCt``` values are calculated for each calculation method.\n\n#### Well\n\nThe ```Cq``` value of the housekeeping gene in each well is subtracted from the ```Cq``` value of the target genes in the same well.\n\nThe ```\xf0\x9d\x9a\xabCt``` value for each target gene in each well is:\n\n$$\n\\Delta {Ct}_{target, well} = {Cq}_{{target, well}} - {Cq}_{{housekeeping, well}}\n$$\n\n#### Sample\n\nThe well column is removed and the ```Cq``` values are averaged across rows with the same column values. This means rows for the same condition, target, biolo\n\n\n\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndelta_ct_df = qpcr_data_cleaned\ndelta_ct_group = w_select(\n  label=\"Select calculation option:\", \n  options=[\"Well\", \"Sample\"],\n  readonly=delta_ct_df is None,\n  appearance={\n    \"placeholder\": \"Select\xe2\x80\xa6\"\n  }\n)\n\nif target_column.value is None or delta_ct_group is None:\n  exit()\n\nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  # Update reactive signal for delta_ct_df\n  seq(list(delta_ct_df.columns))\n  print(\"set seq\", list(delta_ct_df.columns))\n  \n  delta_ct_df = qpcr_data_cleaned\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = qpcr_data_cleaned.drop(\"Well\", axis=1)\n\n  targets = list(qpcr_data_cleaned[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'\xf0\x9d\x9a\xabCt_{target}\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'\xf0\x9d\x9a\xabCt\'] = data[target] - data[housekeeping_gene]\n    data = df_column_switch(data, target, housekeeping_gene)\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n  bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\n\x04ical\rand optional \x08gical, r* replicate, dosage, or additional columns.\x06with t\x04 and\x07 values\x1eas well as the same values for\x0ccolumns for \x04like\x03for\x01,\x0badditional \x11, including those\x05s and\xb8\x1aw_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xabCt Calculation\n\nWe are now going to calculate Delta Ct (```\xf0\x9d\x9a\xabCt```)by grouping our technical replicates and subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\nBelow is more information on how the ```\xf0\x9d\x9a\xabCt``` values are calculated for each calculation method.\n\n#### Well\n\nThe ```Cq``` value of the housekeeping gene in each well is subtracted from the ```Cq``` value of the target genes in the same well.\n\nThe ```\xf0\x9d\x9a\xabCt``` value for each target gene in each well is:\n\n$$\n\\Delta {Ct}_{target, well} = {Cq}_{{target, well}} - {Cq}_{{housekeeping, well}}\n$$\n\n#### Sample\n\nThe well column is removed and the ```Cq``` values are averaged across rows with the same column values. This means rows with the same condition and target values, as well as the same values for optional additional columns, including those for biological replicates an dosage, or additional columns.\n\n\n\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndelta_ct_df = qpcr_data_cleaned\ndelta_ct_group = w_select(\n  label=\"Select calculation option:\", \n  options=[\"Well\", \"Sample\"],\n  readonly=delta_ct_df is None,\n  appearance={\n    \"placeholder\": \"Select\xe2\x80\xa6\"\n  }\n)\n\nif target_column.value is None or delta_ct_group is None:\n  exit()\n\nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  # Update reactive signal for delta_ct_df\n  seq(list(delta_ct_df.columns))\n  print(\"set seq\", list(delta_ct_df.columns))\n  \n  delta_ct_df = qpcr_data_cleaned\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = qpcr_data_cleaned.drop(\"Well\", axis=1)\n\n  targets = list(qpcr_data_cleaned[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'\xf0\x9d\x9a\xabCt_{target}\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'\xf0\x9d\x9a\xabCt\'] = data[target] - data[housekeeping_gene]\n    data = df_column_switch(data, target, housekeeping_gene)\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n  bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\n\x01d\x0fwill be merged \x04The \x15Once rows are merged,\x0c and the avr\x0cerage ```Cq`fw_text_output(content=\"\"\"\n## \xf0\x9d\x9a\xabCt Calculation\n\nWe are now going to calculate Delta Ct (```\xf0\x9d\x9a\xabCt```)(by grouping our technical replicates and\\ subtracting the ```Cq``` values of the housekeeping gene from our that of the target genes.\xbb\x07\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\nBelow is more information on how the ```\xf0\x9d\x9a\xabCt``` values are calculated for each calculation method.\n\n#### Well\n\nThe ```Cq``` value of the housekeeping gene in each well is subtracted from the ```Cq``` value of the target genes in the same well.\n\nThe ```\xf0\x9d\x9a\xabCt``` value for each target gene in each well is:\n\n$$\n\\Delta {Ct}_{target, well} = {Cq}_{{target, well}} - {Cq}_{{housekeeping, well}}\n$$\n\n#### Sample\n\nThe well column is removed and the ```Cq``` values are averaged across rows with the same column values. This means rows with the same condition and target values, as well as the same values for optional additional columns, including those for biological replicates and dosage, will be merged.\n\nOnce rows are merged and the average ```Cq\n\n\"\"\")\xa4\x01\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\x01\n\rdelta_ct_df =\xd3\x03 qpcr_data_cleaned\ndelta_ct_group = w_select(\n  label=\"Select calculation option:\", \n  options=[\"Well\", \"Sample\"],\n  readonly=delta_ct_df is None,\n  appearance={\n    \"placeholder\": \"Select\xe2\x80\xa6\"\n  }\n)\n\nif target_column.value is None or delta_ct_group is None:\n  exit()\n\nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  # Update reactive signal for delta_ct_df\n  seq(list(delta_ct_df.columns))\n  print(\"set seq\", list(delta_ct_df.columns))\n  \x01\n$  delta_ct_df = qpcr_data_cleaned\n  \x03if \x14delta_ct_group.value\x01 \x02==\x01 \x08\"Sample\"\x02:\n\x02  \x02  \x0edelta_ct_df = \x11qpcr_data_cleaned\x17.drop(\"Well\", axis=1)\n\n\x02  \x0ftargets = list(\x11qpcr_data_cleaned\x14[\"Target\"].unique())\x03\n  !targets.remove(housekeeping_gene)\x02\n\n\x02  \x0c_ct_df = {}\n\x02  \x0f_ct_df_T = {}\n\n\x02  \x17for target in targets:\n\x02  \x02  \x1ddf_name = f\'\xf0\x9d\x9a\xabCt_{target}\'\n\x02  \x02  edata = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n\x02  \x02  *data = data[data[\"Cq\"] != \"Undetermined\"]\n\x02  \x02  \x19data = data.pivot_table(\n\x04    \x02  Iindex=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n\x04    \x02  \x12columns=\"Target\",\n\x04    \x02  \x0cvalues=\"Cq\"\n\x02  \x02  \x10).reset_index()\n\x02  \x02  8data[\'\xf0\x9d\x9a\xabCt\'] = data[target] - data[housekeeping_gene]\n\x02  \x02  9data = df_column_switch(data, target, housekeeping_gene)\n\x02  \x02  \x01\n\x02  \x02  &_ct_df[df_name] = pd.DataFrame(data)\n\n\x02  \x02  .data_T = data.drop(housekeeping_gene, axis=1)\n\x02  \x02  \x1edata_T[\"Cq\"] = data_T[target]\n\x02  \x02  \x1bdata_T[\"Target\"] = target\n\n\x02  \x02  (_ct_df_T[target] = pd.DataFrame(data_T)\n\x01\n\x01\n\x02   for name, df in _ct_df.items():\n\x02  \x02  \x13locals()[name] = df\x01\n\x01\n\xb3\x04  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n  bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\n\n  w_text_output(content=f\"\"\"\n  ### Results\n  \n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\x01\n\x02``\x1d``` value is calculated, the \" for a given target, the row equiv\x01 \x1c, the housekeeping gene for \x01i.for each group is subtracted from each target \x03the\xd2\x05. Here is a sample set of tables showing this transformation:\n\n| Well | Target      | Condition   | Biological Replicate | Cq  |\n|------|-------------|-------------|----------------------|-----|\n| A1   | Target 1    | Condition A | 1                    | 30  |\n| A2   | Target 1    | Condition A | 1                    | 40  |\n| A3   | Target 1    | Condition A | 2                    | 35  |\n| A4   | Target 1    | Condition A | 2                    | 45  |\n| A5   | Housekeeping| Condition A | 1                    | 20  |\n| A6   | Housekeeping| Condition A | 1                    | 30  |\n| A7   | Housekeeping| Condition A | 2                    | 25  |\n| A8   | Housekeeping| Condition A | 2                    | 35  |\x10\n\nStarting Table\x02**\x02**\x02\n\n\x04****\x0cResult Table\xbb\x02\n\n| Condition   | Biological Replicate | Target 1 Cq | Housekeeping Cq | Ct  |\n|-------------|----------------------|-------------|-----------------|-----|\n| Condition A | 1                    | 35          | 25              | 10  |\n| Condition A | 2                    | 40          | 30              | 10  |\n\n\n\n\n\n\x02\n\n\xd2\x05<details>\n  <summary>Table 1: Well Data</summary>\n\n| Well | Target      | Condition   | Biological Replicate | Cq  |\n|------|-------------|-------------|----------------------|-----|\n| A1   | Target 1    | Condition A | 1                    | 30  |\n| A2   | Target 1    | Condition A | 1                    | 40  |\n| A3   | Target 1    | Condition A | 2                    | 35  |\n| A4   | Target 1    | Condition A | 2                    | 45  |\n| A5   | Housekeeping| Condition A | 1                    | 20  |\n| A6   | Housekeeping| Condition A | 1                    | 30  |\n| A7   | Housekeeping| Condition A | 2                    | 25  |\n| A8   | Housekeeping| Condition A | 2                    | 35  |\n\n</details>\xd2\x05<details>\n  <summary>Table 1: Well Data</summary>\n\n| Well | Target      | Condition   | Biological Replicate | Cq  |\n|------|-------------|-------------|----------------------|-----|\n| A1   | Target 1    | Condition A | 1                    | 30  |\n| A2   | Target 1    | Condition A | 1                    | 40  |\n| A3   | Target 1    | Condition A | 2                    | 35  |\n| A4   | Target 1    | Condition A | 2                    | 45  |\n| A5   | Housekeeping| Condition A | 1                    | 20  |\n| A6   | Housekeeping| Condition A | 1                    | 30  |\n| A7   | Housekeeping| Condition A | 2                    | 25  |\n| A8   | Housekeeping| Condition A | 2                    | 35  |\n\n</details>\xfe\x05<!-- Markdown Preview Enhanced -->\n???+ note \"Table 1: Well Data\"\n\n    | Well | Target      | Condition   | Biological Replicate | Cq  |\n    |------|-------------|-------------|----------------------|-----|\n    | A1   | Target 1    | Condition A | 1                    | 30  |\n    | A2   | Target 1    | Condition A | 1                    | 40  |\n    | A3   | Target 1    | Condition A | 2                    | 35  |\n    | A4   | Target 1    | Condition A | 2                    | 45  |\n    | A5   | Housekeeping| Condition A | 1                    | 20  |\n    | A6   | Housekeeping| Condition A | 1                    | 30  |\n    | A7   | Housekeeping| Condition A | 2                    | 25  |\n    | A8   | Housekeeping| Condition A | 2                    | 35  |\x02# \x01 \x02# +if \'df\' in locals():\n    del locals()[\'df\']\x01\n\x0c\n  try:\n    \x04    \x15del locals()[\'df\']\n  \x02  \x15except KeyError:\n    \x04    \x04pass\x02# \x02# \x03\n  8data = df_column_switch(data, target, housekeeping_gene)\x0bdelta_ct_df\x0bdelta_ct_df\x01C\x02\"\"\x02Cq\x02\"\"\x06\xf0\x9d\x9a\xabCt\x03\n\n\n\x08pivoted \xdd\x03_view = Well Position\nTarget\nreplicate_id\ndrug_name\nCq\nconcentration\n1\n0\n\"A1\"\n\"GeneX\"\n1\n\"Compound 1\"\n32.386312694\n\"8.0\"\n2\n1\n\"A1\"\n\"B2M\"\n1\n\"Compound 1\"\n32.390667261\n\"8.0\"\n3\n2\n\"A2\"\n\"GeneX\"\n1\n\"Compound 1\"\n28.0117554758\n\"2.5\"\n4\n3\n\"A2\"\n\"B2M\"\n1\n\"Compound 1\"\n27.0565160455\n\"2.5\"\n5\n4\n\"A3\"\n\"GeneX\"\n1\n\"Compound 1\"\n26.9094864867\n\"0.8\"\n6\n5\n\"A3\"\n\"B2M\"\n1\n\"Compound 1\"\n25.7772161561\n\"0.8\"\n7\n6\n\"A4\"\n\"GeneX\"\n1\n\"Compound 1\"\n27.0995267061\n\"0.25\"\n8\n7\n\"A4\"\n\"B2M\"\n1\n\"Compound 1\"\n25.9198632649\n\"0.25\"\n\xc7\x01pivot_df = df.pivot_table(\n    index=[\"Well Position\", \"Target\", \"replicate_id\", \"drug_name\"],\n    values=[\"Cq\", \"concentration\"],\n    aggfunc={\"Cq\": \"mean\", \"concentration\": \"first\"}\n).reset_index()\x07main_df\x01\n\x0ftemp = main_df\n\x14technical replicates\xfc\x01\n\npivot_df = df.pivot_table(\n    index=[\'Well Position\', \'replicate_id\', \'drug_name\', \'concentration\'],\n    columns=\'Target\',\n    values=\'Cq\'\n).reset_index()\n\n# Flatten the columns to remove the multi-index created by pivot\npivot_df.columns.name = None\x02# \x02# \x02# \x02# \x02# \x01\n\x07main_df\x02# \x01t\x012\x011\x02# \x02# \xe6\x01w_text_output(content=\"\"\"\n## _(Optional)_ Well Removal\n\nIf there are any wells that you wish to remove, you can do that here by selecting them from the dropdown. We automatically filter wells with **Undetermined** Cq values.\n\n\"\"\")\x02\n\n\nDelta Ct A\x05Caulc\x07lcation\xa5\x01We are now going to calculate Delta Ct by grouping our technical replicates and subtracting the Cq values of the housekeeping gene from our that of the target genes.\xc2\x01\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\x05</br?\x01>\x05Group\x03 by\x01\n\x18delta_ct_df = cleaned_df\x11qpcr_data_cleaned\x11qpcr_data_cleaned\x11qpcr_data_cleaned\x11qpcr_data_cleaned\x02# \x02# \x02# \x02# \x02# \x02# \x02\n\n\xa3\x03w_text_output(content=\"\"\"\n## Delta Ct Calcation\n\nWe are now going to calculate Delta Ct by grouping our technical replicates and subtracting the Cq values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\"\"\")\t# Results\x8b\x01Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {list(_ct_df.keys())}\x8b\x01Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data: {list(_ct_df.keys())}\x02# \x02# \xad\x01\n\ndef df_column_switch(df, column1, column2):\n    i = list(df.columns)\n    a, b = i.index(column1), i.index(column2)\n    i[b], i[a] = i[a], i[b]\n    df = df[i]\n    return df\x02# \x02# \x02# \x02# \x02# \x05\n    +\n    df_column_switch(df, column1, column2)\tdata_T = \x06data_T\x02df,\n     df_column_switch(df, column1, column2),     df_column_switch(df, column1, column2)\n\x07data = \x04data\x06target\x11housekeeping_gene\x01f6- {\', \'.join([f\'* {gene}\' for gene in _ct_df.keys()])}\x01\n\x02<>\x03\\brMwe just subtract the housekeeping gene from the target to get the _Ct column.\x16To get _Ct for each ge\x03tar\x8f\x19w_text_output(content=\"\"\"\n## Delta Ct Calcation\n\nWe are now going to calculate Delta Ct by grouping our technical replicates and subtracting the Cq values of the housekeeping gene from our that of the target genes.\n</br>\nIf you have your target and housekeeping genes in the same well, select the Well option below. If you have your target and housekeeping genes in different wells, select the Sample option below.\n\"\"\")\n\ndef df_column_switch(df, column1, column2):\n  i = list(df.columns)\n  a, b = i.index(column1), i.index(column2)\n  i[b], i[a] = i[a], i[b]\n  df = df[i]\n  return df\n\ndelta_ct_df = qpcr_data_cleaned\n\ndelta_ct_group = w_select(label=\"Group technical replicates by:\", options=[\"Well\", \"Sample\"])\n  \nif (delta_ct_group.value == \"Well\") or (delta_ct_group.value == \"Sample\"):\n  delta_ct_df = qpcr_data_cleaned\n  if delta_ct_group.value == \"Sample\":\n    delta_ct_df = qpcr_data_cleaned.drop(\"Well\", axis=1)\n\n  targets = list(qpcr_data_cleaned[\"Target\"].unique())\n  targets.remove(housekeeping_gene)\n\n  _ct_df = {}\n  _ct_df_T = {}\n\n  for target in targets:\n    df_name = f\'{target}_ct_table\'\n    data = delta_ct_df[(delta_ct_df[\"Target\"] == target) | (delta_ct_df[\"Target\"] == housekeeping_gene)]\n    data = data[data[\"Cq\"] != \"Undetermined\"]\n    data = data.pivot_table(\n      index=[col for col in data.columns if col not in set([\"Target\", \"Cq\"])],\n      columns=\"Target\",\n      values=\"Cq\"\n    ).reset_index()\n    data[\'_Ct\'] = data[target] - data[housekeeping_gene]\n    data = df_column_switch(data, target, housekeeping_gene)\n    \n    _ct_df[df_name] = pd.DataFrame(data)\n\n    data_T = data.drop(housekeeping_gene, axis=1)\n    data_T[\"Cq\"] = data_T[target]\n    data_T[\"Target\"] = target\n\n    _ct_df_T[target] = pd.DataFrame(data_T)\n\n\n  for name, df in _ct_df.items():\n    locals()[name] = df\n\n  delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n\nw_text_output(content=f\"\"\"\n### Results\n\nGreat! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n{\', \'.join([f\'* {gene}\' for gene in _ct_df.keys()])}\nTo get _Ct for each ta subtract the housekeeping gene from the target to get the _Ct column.\n\"\"\")\n\n\n  # if delta_ct_group.value == \"Well\":\n    \n  #   w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {list(_ct_df.keys())}\")\n  #   w_text_output(content=f\"Each well has its own row and the Cq values for each target are in their respective columns.\")\n\n  # else:\n    \n  #   w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data: {list(_ct_df.keys())}\")\n  #   w_text_output(content=f\"The Cq values for technical replicates have been averaged, so each biological replicate has its own row. The Cq values for each gene are in their respective columns.\")\n\n\n# w_text_output(content=f\"Now, we just subtract the housekeeping gene from the target to get the _Ct column.\")\n\n# w_text_output(content=f\"You can view a merged table with all non-housekeeping gene targets by checking out the delta_ct_df table below.\")\x03get\x08rget, we\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x03\n  \x03\n  \x02  \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x03\n  \x9f\x01\n  pivot_df = df.pivot_table(\n    index=[\'Well Position\', \'replicate_id\', \'drug_name\', \'concentration\'],\n    columns=\'Target\',\n    values=\'Cq\'\n).reset_index()\n\x02  \x0bdelta_ct_df\x07main_df\x02  \x03\n  Ifruits = [fruit for fruit in fruits if fruit.name not in set(to_remove)]\n\x0emain_dfcolumns\x01.\x03col\x03col\x0fmain_df.columns\x03col\x01[\x01]\x03df.\x15target_value.column, \xc3\x0ftemp = main_df\n\n# pivoted_view = main_df.pivot_table(\n#     index=[\"Well Position\", \"Target\", \"replicate_id\", \"drug_name\"],\n#     values=[\"Cq\", \"concentration\"],\n#     aggfunc={\"Cq\": \"mean\", \"concentration\": \"first\"}\n# ).reset_index()\n\n\n\n\nif housekeeping_gene is not None:\n  delta_ct_group = w_select(label=\"To calculate Delta Ct, group technical replicates:\", options=[\"Well\", \"Sample\"])\n\nif delta_ct_group.value == \"Well\":\n  # def delta_ct(group):\n  #   hk_gene = group[group[target_column.value] == housekeeping_gene][cq_column.value].mean()\n  #   ct_list = []\n  #   for target in group[target_column.value].unique():\n  #     if target != housekeeping_gene:\n  #       target_gene = group[group[target_column.value] == target][cq_column.value].mean()\n  #       ct_list.append(target_gene - hk_gene)\n  #     else:\n  #       ct_list.append(0.0)\n  #   group[\'_Ct\'] = ct_list\n  #   return group\n    \n  # delta_ct_df = main_df.groupby(well_column.value, as_index=False, group_keys=False).apply(delta_ct)\n  # delta_ct_df = delta_ct_df[delta_ct_df[target_column.value]!=housekeeping_gene]\n\n  \n  delta_ct_df = main_df.pivot_table(\n    index=[col for col in main_df.columns if col not in set([target_value.column, ])],\n    columns=\'Target\',\n    values=\'Cq\'\n  ).reset_index()\n\n\nif delta_ct_group.value == \"Sample\":\n  # Get average Cq across tehnical replicates\n  cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column])[cq_column.value].mean().reset_index()\n  target_df = cq_df[cq_df[target_column.value]!=housekeeping_gene]\n\n  # Get average per sample for the housekeeping gene df\n  housekeeping_df = cq_df[cq_df[target_column.value]==housekeeping_gene]\n  average_dict = housekeeping_df.groupby(sample_column.value)[cq_column.value].mean().to_dict()\n  \n  # Map averages to df1 and subtract to create _Ct\n  target_df[\'_Ct\'] = target_df[sample_column.value].map(average_dict)\n  target_df[\'_Ct\'] = target_df[cq_column.value] - target_df[\'_Ct\']\n  delta_ct_df = target_df\n\n\x07column,\x0ctarget_value\x0ctarget_clumn\x0column.value,\x08 cq_clum\x0bolumn.value\x13target_column.value\x0fcq_column.value\x03\n  \x03\n  \x10targets = targer\tmain_df[]\x02\'\'\x03tar\x13target_column.value\t.unique()\x17)\n  target_column.value\x1d\n  targets = targets.remove()\x11housekeeping_gene\n\n  print()\x07targets\x05list(\x01)\x02# \x03\n  \x10\n  delta_ct_df[]\x01]\x02\'\'\x03_Ct\x02 -\x0f= delta_ct_df[]\ttargets[]\x010\x1a - delta_ct_df[targets[0]]\x06house_\x0ckeeping_gene\x03\n  \x02  \x08# TO DO \x10: Handle multile\x15ple targets for wells\x03\n  \x12\n  delta_ct_group \xd7\x11temp = main_df\n\n# pivoted_view = main_df.pivot_table(\n#     index=[\"Well Position\", \"Target\", \"replicate_id\", \"drug_name\"],\n#     values=[\"Cq\", \"concentration\"],\n#     aggfunc={\"Cq\": \"mean\", \"concentration\": \"first\"}\n# ).reset_index()\n\n\n\n\nif housekeeping_gene is not None:\n  delta_ct_group = w_select(label=\"To calculate Delta Ct, group technical replicates:\", options=[\"Well\", \"Sample\"])\n\nif delta_ct_group.value == \"Well\":\n  # def delta_ct(group):\n  #   hk_gene = group[group[target_column.value] == housekeeping_gene][cq_column.value].mean()\n  #   ct_list = []\n  #   for target in group[target_column.value].unique():\n  #     if target != housekeeping_gene:\n  #       target_gene = group[group[target_column.value] == target][cq_column.value].mean()\n  #       ct_list.append(target_gene - hk_gene)\n  #     else:\n  #       ct_list.append(0.0)\n  #   group[\'_Ct\'] = ct_list\n  #   return group\n    \n  # delta_ct_df = main_df.groupby(well_column.value, as_index=False, group_keys=False).apply(delta_ct)\n  # delta_ct_df = delta_ct_df[delta_ct_df[target_column.value]!=housekeeping_gene]\n\n  targets = list(main_df[target_column.value].unique())\n  targets.remove(housekeeping_gene)\n  \n  delta_ct_df = main_df.pivot_table(\n    index=[col for col in main_df.columns if col not in set([target_column.value, cq_column.value])],\n    columns=target_column.value,\n    values=cq_column.value\n  ).reset_index()\n\n  # TO DO: Handle multiple targets for wells\n  delta_ct_df[\'_Ct\'] = delta_ct_df[targets[0]] - delta_ct_df[housekeeping_gene]\n  \n\n\nif delta_ct_group.value == \"Sample\":\n\n  delta_ct_group\n  # Get average Cq across tehnical replicates\n  cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column])[cq_column.value].mean().reset_index()\n  target_df = cq_df[cq_df[target_column.value]!=housekeeping_gene]\n\n  # Get average per sample for the housekeeping gene df\n  housekeeping_df = cq_df[cq_df[target_column.value]==housekeeping_gene]\n  average_dict = housekeeping_df.groupby(sample_column.value)[cq_column.value].mean().to_dict()\n  \n  # Map averages to df1 and subtract to create _Ct\n  target_df[\'_Ct\'] = target_df[sample_column.value].map(average_dict)\n  target_df[\'_Ct\'] = target_df[cq_column.value] - target_df[\'_Ct\']\n  delta_ct_df = target_df\n\n\x17delta_ct_df = main_df[]\x04main\x17df.drop(\"City\", axis=1)\x07main_df\x10well_column.vale\x02ue\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x03\n  \x01\n\x02  \x03\n  \xd7\x01\ndelta_ct_df = main_df.pivot_table(\n    index=[col for col in main_df.columns if col not in set([target_column.value, cq_column.value])],\n    columns=target_column.value,\n    values=cq_column.value\n  ).reset_index()\x02  \x0bdelta_ct_df\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# |\n\n  cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column])[cq_column.value].mean().reset_index()\x0bdelta_ct_df\x0bdelta_ct_df\x02# \x0bdelta_ct_df\r\n  targets = \x11unique_targets = Ytargets = list(main_df[target_column.value].unique())\n  targets.remove(housekeeping_gene)\x19\n  for target in targets:\x02  \x02  \x02  \x02  \x02  \x05\n    \x02\n\n\xbf\x02  df_name = f\'df_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[target_column.value] == groups[i]]\n          dataframes[df_name] = pd.DataFrame(data)\n      \n      # Example usage of the created dataframes\n      for name, df in dataframes.items():\n          print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\x05\n    \x05\n     \n    df_name = f\'df_{groups[i]}\'\x06target\x03_ctF\n    data = delta_ct_df[delta_ct_df[target_column.value] == groups[i]]\x0bdelta_ct_df\x0bdelta_ct_df\x08target &\x01(\x01),(delta_ct_df[target_column.value] == target)\x01 \x11housekeeping_gene\x03\n  \x0e\n  _ct_df = {}\x01}-\n    dataframes[df_name] = pd.DataFrame(data)\x06_ct_df\x05\n    \x05\n    j\n    for name, df in dataframes.items():\n          print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\x05\n    \x05\n    \x02  \x02  \xe7\x01delta_ct_df = delta_ct_df.pivot_table(\n      index=[col for col in delta_ct_df.columns if col not in set([target_column.value, cq_column.value])],\n      columns=target_column.value,\n      values=cq_column.value\n    ).reset_index()\n\x04data\x04data\x01\"\x01\"\x04Well\x02\"\"\x06Target\x02\"\"\x06Target\x02\"\"\x02Cq\x02\"\"\x06Target\x01\"\x01\"\x01Y\x06Target\x01\"\x01\"\x02Cq\x02\"\"\x02Cq\x02\"\"\x06Target\x01\"\x01\"\x06Target\ncleaned_df\ncleaned_df\ncleaned_df\x02# \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x05\n    \x03\n  \x02  $if delta_ct_group.value == \"Sample\":\x04Well\x16\n      w_text_output()\ncontent=\"\"\x01\"/Great! If you look below, you will see that you\x01a!a new table has been created call\x08for each\x07\n      \x04 tar\x08Target i\x16non-housekeeping gene \ttarget in\x14gene in your well ()\x01f\x02{}\x01}\x08_ct_df_T\x01:\x07. We pi\xa1\x01\n      w_text_output(content=f\"Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your well: {_ct_df_T}\")\x08.names()\x11We are now going AEach well has its own row and the Cq values for each Target have \x04are \x01t\x04now \x1d in their respective columns.\x04keys\x04list\x05list(\x02)}\x01p\x06rint()\x17delta_ct_option_signal)\x02()\x01)\x01\n\x0c\n    print()\x05group\x06\n    f\x15target_vals = group[]\x01]\x02\"\"\x13target_column.value\t.unique()\x12)\n    print(group)\x0btarget_valsZ\n    target_gene = group[group[target_column.value] != housekeeping_gene][cq_column.value]\x0btarget_gene\x01]\x0ffor target in t\x0ctarget_vals:\x02  \x02df\ttarget_df\x02  \x01=\x06target\t\n    res_\r_ct_list = []\x01]\x16\n      ct_list.append \x02()\x15target_gene - hk_gene\x13ct_list\n    print()\x04ct+l\x01:\x05_list\x05\n    \x0eprint(ct_list)$group[group[target_column.value]].un\t.unique()\x01)&\n      if target != housekeeping_gene:\x02  \x02  \x02  \t\n        3else:\n        ct_list.append(target_gene - hk_gene)\x030.0]\n    hk_gene = group[group[target_column.value] == housekeeping_gene][cq_column.value].mean()\x13calculate_delta_ct(\x01)\x1aqpcr_data, delta_ct_option\t\n  return\x12 _ct_df_T.values()\xf8\x01delta_ct_df = pd.concat(_ct_df_T.values(), ignore_index=True)\n  delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n  delta_ct_df = delta_ct_df.drop(targets, axis=1)\n  bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\rresult_tables\x01:\x03\n  \x02  Himport pandas as pd\n  from pathlib import Path\n  import os\n  import glob>\n  from lplots.widgets.text import w_text_input, w_text_output\x03\n  \x01\n\x02  <from lplots.widgets.text import w_text_input, w_text_output\n\x01,\x12 housekeeping_gene\x13, housekeeping_geneB\nqpcr_data = qpcr_data_signal()\ndelta_ct_option, housekeeping_gene\x01\n\x05 = ()\x05 = ()\x07_signal\x07_signal\x13, housekeeping_gene\x03\n  \x02  \x18delta_ct_df = pd.concat(\rresult_tables\x15, ignore_index=True)\n<delta_ct_df = df_column_switch(delta_ct_df, \"Cq\", \"\xf0\x9d\x9a\xabCt\")\n/delta_ct_df = delta_ct_df.drop(targets, axis=1)\x02  \x02  \r, delta_ct_df\r, delta_ct_df\x01\n\x02  \x03\n  \rbullet_points; = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\xb6\x02\n\n  \nw_text_output(content=f\"\"\"\n### Results\n\n  Great! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x03\n  \x0bqpcr_data =\x13 qpcr_data_signal()\xae\x02w_text_output(content=f\"\"\"\n### Results\nGreat! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\xae\x02w_text_output(content=f\"\"\"\n### Results\nGreat! If you look below, you will see that a new table has been created for each non-housekeeping gene in your data:\n  {bullet_points} \\n\nYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\n  \"\"\")\rbullet_points\x0f, bullet_points\x0f, bullet_points\x01\n\x01\n\x04if \"\nqpcr_data_\x1csignal\" not in globals():\n  \x10qpcr_data_signal\x0e = Signal([])\n\tdelta_ct_\x0fdelta_ct_signal\x10delta_ct_signal(\x01)\x0bdelta_ct_df\x01\n\x01\n\x04# th\x01e\x05Updat\x0b Update the\x03sgi\x03ignareactive signal for delta_ct_df\n# React to delta_ct_df.columns\nfrom lplots.reactive import Signal\x05seq()\x03del\x13delta_ct_df.columns\x01\n\x01\n\x0ew_text_input()\x01)\x08label=\"\"\x01\"\x04test\x08, key=\"\"\x04test\x07test = \x05 + []\x01]\ntest.valuw\x01e\x02\n\n\x15test = w_text_input()\x05;labe\x05lbael\x07abel=\"\"\x04test\x08, key=\"\"\x02ye\x04test\x05 + []\x01]\ntest.value\x05list(\x01)\x01)\x01)\x01\n\x07print()\x02\"\"\x07set seq\x1b, list(delta_ct_df.columns)\x03 or\x02or\x02or\x08or delta\x16delta_ct_group is Nonev\n  # Update reactive signal for delta_ct_df\nseq(list(delta_ct_df.columns))\nprint(\"set seq\", list(delta_ct_df.columns))\x02  \x02  \x03\n  \x02\n\n(if target_column.value is None:\n  exit()\x16delta_ct_option_signal\x02()\x02()\x1aif delta_ct_option_signal(\x01)\x02) \x02==\x05 None\x02is\r:\n  exit()\n  \rtarget_column\x13target_column.value\x01e\x01e\x01 \x02by\x03\n  \x01\n\x02  \x03\n  \x03\n  \x05delta\rresult_tables\x03 = \x03 = \x01\n\x10\ndelta_ct_option\x0bdelta_ct_df\x02# \x01\n\x01\n\x1aw_text_output(content=\"\"\"\np\nBelow is more information on how the ```\xf0\x9d\x9a\xabCt``` values are calculated for each calculation method.\n\n#### Well-\n\nThe ```Cq``` value of the housekeeping gene\x0e in each well 9is subtracted from the ```Cq``` value of the target genes\x11 in the same well/.\n\nThe ```\xf0\x9d\x9a\xabCt``` value for each target gene \x0cin each well\x01 \x01i\x1as:\n\n$$\n\\Delta {Ct}_{target\x06, well\x11} = {Cq}_{{target\x06, well\x18}} - {Cq}_{{housekeeping\x06, well\x06}}\n$$\n\xbc\x03\n#### Sample\n\nThe well column is removed and the ```Cq``` values are averaged across rows with the same column values. This means rows with the same condition and target values, as well as the same values for optional additional columns, including those for biological replicates and dosage, will be merged.\n\nOnce rows are merged and the average ```Cq``` value is calculated, the housekeeping gene for each group is subtracted from the target.\n\x06\n\"\"\")\n\x01\n\x02\n\n\x17def calculate_delta_ct(\x01)\x19qpcr_data, delta_ct_group\x0fdelta_ct_option\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \tqpcr_data\x03\n  \x0fdelta_ct_option\x05False\x02is\x0fdelta_ct_option\x0bdelta_ct_df\x0fdelta_ct_option\tqpcr_data\x03```\x03```\x8f\x01w_text_output(content=f\"You can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\")\x03\n  uYou can view a merged table with all non-housekeeping gene targets by checking out the ```delta_ct_df``` table below.\x03\n  \x03 \\n\x03```\x03```\x17To calculate Delta Cq, \x01gC\n  target_df = cq_df[cq_df[target_column.value]!=housekeeping_gene]\x0bdelta_cq_df4cq_df[cq_df[target_column.value]!=housekeeping_gene]\x0bdelta_cq_df\x0bdelta_cq_df\x02\\n\x02==\x01 \x03 \\n\x02\\n8\'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])<{\', \'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()]) } 8\'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])<{\', \'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()]) } \x02\\n\x04, \\n\x04\'\\n\'K  bullet_points = \'\\n\'.join([f\'* ```{gene}```\' for gene in _ct_df.keys()])\n\rbullet_points\x02\\n\x02# \x07 _ct_df\x01\n\x0e\nfor df in reu\x02su\rresult_tables\x11\nfor name, df in \x06_ct_df\x0c.items():\n  \x02  \x13locals()[name] = df\rresult_tables\x03\n  \x05del()\x02df\x02  \x02  \x02# \x01\n\x07  del()\x02df<\n      delta_ct_df = main_df.drop(well_column.value, axis=1)\n\n  print()\x02\"\"\x04here\x12Cq values for the \x10Cq value of the \n, fpr each\x1bor each technical replicate\x03```\x03```\x01\n\x03```\x03```\x03```\x03```\x03```\x03```\x02()\x03_Ct\x03```\x03```\x01\n\xba\x01if len(delta_ct_df) == 0:\n  w_text_output(\ncontent=f\"\"\"\nWarning: Fix error in \xf0\x9d\x9a\xabCq calculation cell or complete earlier steps.\n\"\"\",\nappearance={\n\"message_box\": \"warning\",\n  })\n  exit()\x0fpre_delta_ct_df\x19len(pre_delta_ct_df) == 0>Fix error in \xf0\x9d\x9a\xabCq calculation cell or complete earlier steps\x02  \x04 or \x0bdelta_ct_df\x01C\x07Finish \x01\"\x01a\x0emain_df.head()\x02)\n\x06print(\x02)\n\xa0\x10if tech_replicates:\n  index\nWell\nWell Position\nOmit\nSample\nTarget\nBiological Replicate\nTask\nReporter\nQuencher\nAmp Status\nAmp Score\nCurve Quality\nResult Quality Issues\nCq\nCq Confidence\nCq Mean\nCq SD\nAuto Threshold\nThreshold\nAuto Baseline\nBaseline Start\nBaseline End\nTm1\nTm2\nTm3\nTm4\n1\n0\n34\n\"B10\"\nfalse\n\"mCherry\"\n\"GAPDH\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.4264094022\nnull\nnull\n15.9881093736\n0.9594848269\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n12\n86.3266525269\nnull\nnull\nnull\n2\n1\n35\n\"B11\"\nfalse\n\"mCherry\"\n\"GAPDH\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.4296639149\nnull\nnull\n15.9479788133\n0.9502418351\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n11\n86.3266525269\nnull\nnull\nnull\n3\n2\n36\n\"B12\"\nfalse\n\"mCherry\"\n\"GAPDH\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.4286719822\nnull\nnull\n15.9642250999\n0.9316242893\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n12\n86.3266525269\nnull\nnull\nnull\n4\n3\n25\n\"B1\"\nfalse\n\"mCherry\"\n\"NaV1.7\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.4221033947\nnull\nnull\n23.4951782095\n0.9198649006\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n20\n82.6113204956\nnull\nnull\nnull\n5\n4\n26\n\"B2\"\nfalse\n\"mCherry\"\n\"NaV1.7\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.4200412547\nnull\nnull\n23.3310528754\n0.9193300285\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n17\n82.6113204956\nnull\nnull\nnull\n6\n5\n27\n\"B3\"\nfalse\n\"mCherry\"\n\"NaV1.7\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.4143624361\nnull\nnull\n23.5053748441\n0.9453394095\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n20\n82.6113204956\nnull\nnull\nnull\n7\n6\n28\n\"B4\"\nfalse\n\"mCherry\"\n\"WPRE\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.3727636615\nnull\nnull\n14.6832315128\n0.9829634443\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n9\n87.2241897583\nnull\nnull\nnull\n8\n7\n29\n\"B5\"\nfalse\n\"mCherry\"\n\"WPRE\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.3716092445\nnull\nnull\n14.1498573435\n0.9434910755\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n8\n87.1022109985\nnull\nnull\nnull\n9\n8\n30\n\"B6\"\nfalse\n\"mCherry\"\n\"WPRE\"\n1\n\"UNKNOWN\"\n\"SYBR\"\nnull\n\"Amp\"\n1.3790610974\nnull\nnull\n14.998521144\n0.9368883824\n18.8240820744\n4.5624839692\ntrue\n0.1842098244\ntrue\n3\n11\n87.2146759033\nnull\nnull\nnull\xb2\x01average_cq = df.groupby([\'Sample\', \'Target\'])[\'Cq\'].mean().reset_index()\n\n# Rename the column to be more descriptive\naverage_cq.rename(columns={\'Cq\': \'Average_Cq\'}, inplace=True)\x02  \x13sample_column.value\x13target_column.value\x15\n  if bio_replicates:\x15,bio_rep_column.value\x02  \x02  \x0bcq_column.c\x05value\x0fcq_column.value\t\n    else\x06:\n    \xd0\x01\n    average_cq = df.groupby([sample_column.value, target_column.value,bio_rep_column.value])[cq_column.value].mean().reset_index()\n    average_cq.rename(columns={cq_column.value: \'Average_Cq\'}, inplace=True)\x07main_df\x07main_df\xe3\x0f\n\n\n\n\n\n\n# tech_replicates = w_checkbox(label=\"Includes technical replicates\", default=False).value\n\n# bio_replicates = w_checkbox(label=\"Includes biological replicates\", default=False).value\n\n# if bio_replicates:\n#   bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns, default=\"Biological Replicate\")\n\n# tech_replicate_average = w_checkbox(label=\"Average across technical replicates\", default=False).value\n\n# final_cq_column = \"Cq\"\n\n# if tech_replicate_average:\n#   final_cq_column = \'Technical Cq Average\'\n#   final_cq_column_target = \'Technical Cq Average\'\n#   if bio_replicates:\n#     main_df[\'Technical Cq Average\'] = main_df.groupby([target_column.value, sample_column.value, bio_rep_column.value])[cq_column.value].transform(\'mean\')\n#   else:\n#     main_df[\'Technical Cq Average\'] = main_df.groupby([target_column.value, sample_column.value])[cq_column.value].transform(\'mean\')\n\n# bio_replicate_average = w_checkbox(label=\"Average across biological replicates\", default=False).value\n\n# if bio_replicate_average:\n#   final_cq_column_housekeeping = \'Cq Average\'\n#   final_cq_column_target = \'Technical Cq Average\'\n#   if tech_replicate_average:\n#     main_df[\'Cq Average\'] = main_df.groupby([target_column.value, sample_column.value])[\'Technical Cq Average\'].transform(\'mean\')\n#   else:\n#     main_df[\'Cq Average\'] = main_df.groupby([target_column.value, sample_column.value])[cq_column.value].transform(\'mean\')\n      \n\n  \n\n# # use_replicates = w_checkbox(label=\"Include replicates\", default=False).value\n\n# # if use_replicates:\n# #   bio_rep_column = w_select(label=\"Select the column that contains the biological replicate number\", options=main_df.columns, default=\"Biological Replicate\")\n\n# #   if bio_rep_column.value is not None:\n# #     # num_bio_rep = w_text_input(label=\"Number of replicates\", default=\"3\").value\n# #     bio_replicate_average = w_checkbox(label=\"Average across biological replicates\", default=False).value\n    \n\n\n    \n\n\x03_df\x05cq_df\x05cq_df\x05cq_df\xb8\x08if housekeeping_gene is not None:\n  delta_cq_group = w_select(label=\"Group samples by:\", options=[\"Well\", \"Sample\"])\n\n  if delta_cq_group.value == \"Well\":\n    def delta_cq(group): \n      target_gene = group[group[housekeeping_gene_column.value] != housekeeping_gene.value][\'Cq\'].iloc[0]\n      hk_gene = group[group[housekeeping_gene_column.value] == housekeeping_gene.value][\'Cq\'].iloc[0]\n      group[\'_Cq\'] = target_gene - hk_gene\n      return group\n      \n    delta_cq_df = main_df.groupby(\'Well\', as_index=False, group_keys=False).apply(delta_cq)\n\n  if delta_cq_group.value == \"Sample\":\n\n    target_df = main_df[main_df[target_column.value]!=housekeeping_gene]\n    housekeeping_df = main_df[main_df[target_column.value]==housekeeping_gene]\n    average_dict = housekeeping_df.set_index(sample_column.value)[final_cq_column_housekeeping].to_dict()\n    # Map averages to df1 and subtract to create _Ct\n    target_df[\'_Ct\'] = target_df[sample_column.value].map(average_dict)\n    target_df[\'_Ct\'] = target_df[final_cq_column_target] - target_df[\'_Ct\']\n    delta_cq_df = target_df\n  \x03\n\n\ntif housekeeping_gene is not None:\n  delta_cq_group = w_select(label=\"Group samples by:\", options=[\"Well\", \"Sample\"])\x02\n\n\xa1\x07if delta_cq_group.value == \"Well\":\n  def delta_cq(group): \n    target_gene = group[group[housekeeping_gene_column.value] != housekeeping_gene.value][\'Cq\'].iloc[0]\n    hk_gene = group[group[housekeeping_gene_column.value] == housekeeping_gene.value][\'Cq\'].iloc[0]\n    group[\'_Cq\'] = target_gene - hk_gene\n    return group\n    \n  delta_cq_df = main_df.groupby(\'Well\', as_index=False, group_keys=False).apply(delta_cq)\n\nif delta_cq_group.value == \"Sample\":\n\n  target_df = main_df[main_df[target_column.value]!=housekeeping_gene]\n  housekeeping_df = main_df[main_df[target_column.value]==housekeeping_gene]\n  average_dict = housekeeping_df.set_index(sample_column.value)[final_cq_column_housekeeping].to_dict()\n  # Map averages to df1 and subtract to create _Ct\n  target_df[\'_Ct\'] = target_df[sample_column.value].map(average_dict)\n  target_df[\'_Ct\'] = target_df[final_cq_column_target] - target_df[\'_Ct\']\n  delta_cq_df = target_df\n\n\x0ecq_column.valu\x0ecq_column.valu\x11well_column.value\x0bdelta_cq_df\xb4\x03\n  if tech_replicates:\n  if bio_replicates:\n    cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column.value])[cq_column.value].mean().reset_index()\n    cq_df.rename(columns={cq_column.value: \'Average_Cq\'}, inplace=True)\n  else:\n    cq_df = main_df.groupby([sample_column.value, target_column.value])[cq_column.value].mean().reset_index()\n    cq_df.rename(columns={cq_column.value: \'Average_Cq\'}, inplace=True)\x02  \x02  \x02  \x02  \x02  \x02  \x07main_df\x07main_df\x01t\x03cq.\r_column.value\x0fcq_column.value\x05cq_df\x05cq_df\x05cq_df\x05cq_df\x05cq_df\x01]\x01]\x03\n  \x03\n  \x02  \x82\x01\n  cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column.value])[cq_column.value].mean().reset_index()\n\x02  \x02  \x82\x01\n  cq_df = main_df.groupby([sample_column.value, target_column.value,bio_rep_column.value])[cq_column.value].mean().reset_index()\n\x07\n      \rdata = data[]\x02\"\"\x01\"\x02Cq\x05data[\x06 != \"\"\x0cUndetermined\x01]\x04\xf0\x9d\x9a\xab\x02  \x04\xf0\x9d\x9a\xab\x01\n\x01\n\x01=\x05\"\"\")\n\x03\n\n\n\r\n\nw_text_inpu\x08output()\x04\n  \n\x02\"\"\x05\"\"\"\"\"\x03\n\n\n\xfa\x0eBelow is more information on how the ```\xf0\x9d\x9a\xabCt``` values are calculated for each calculation method.\n\n#### Well\n\nThe ```Cq``` value of the housekeeping gene in each well is subtracted from the ```Cq``` value of the target genes in the same well.\n\nThe ```\xf0\x9d\x9a\xabCt``` value for each target gene in each well is:\n\n$$\n\\Delta {Ct}_{target, well} = {Cq}_{{target, well}} - {Cq}_{{housekeeping, well}}\n$$\n\n#### Sample\n\nThe well column is removed and the ```Cq``` values are averaged across rows with the same column values. This means rows with the same condition and target values, as well as the same values for optional additional columns, including those for biological replicates and dosage, will be merged.\n\nOnce rows are merged and the average ```Cq``` value is calculated, the housekeeping gene for each group is subtracted from the target. Here is a sample set of tables showing this transformation:\n\n**Starting Table**\n\n| Well | Target      | Condition   | Biological Replicate | Cq  |\n|------|-------------|-------------|----------------------|-----|\n| A1   | Target 1    | Condition A | 1                    | 30  |\n| A2   | Target 1    | Condition A | 1                    | 40  |\n| A3   | Target 1    | Condition A | 2                    | 35  |\n| A4   | Target 1    | Condition A | 2                    | 45  |\n| A5   | Housekeeping| Condition A | 1                    | 20  |\n| A6   | Housekeeping| Condition A | 1                    | 30  |\n| A7   | Housekeeping| Condition A | 2                    | 25  |\n| A8   | Housekeeping| Condition A | 2                    | 35  |\n\n**Result Table**\n\n| Condition   | Biological Replicate | Target 1 Cq | Housekeeping Cq | Ct  |\n|-------------|----------------------|-------------|-----------------|-----|\n| Condition A | 1                    | 35          | 25              | 10  |\n| Condition A | 2                    | 40          | 30              | 10  |\n\n\n\"\"\")\x07content\x01=\x01tmfrom lplots.widgets.select import w_select\nimport numpy as np\nfrom lplots.widgets.text import w_text_output\n\n\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xfc\x07plotting_df = result_df.copy()\n\nplotting_df = plotting_df[[\"Target\", \"Sample\", \"Sample Name\", \"_Ct\", \"__Ct\", \"Fold Exp\", \"Percent Repression\"]]\n\nplotting_df[\"Average Fold Exp\"] = plotting_df.groupby([\'Target\', \'Sample\'])[\'Fold Exp\'].transform(\'mean\')\n\ngroup_averages = plotting_df.groupby([\'Target\',\'Sample\'])[\'Fold Exp\'].transform(\'mean\')\n\nfirst_occurrence_mask = ~plotting_df.duplicated(subset=[\'Target\', \'Sample\'], keep=\'first\')\n\n# Apply the average Fold Exp to only the first row of each group\nplotting_df[\'Average Fold Exp - De-Deuplicated\'] = np.where(first_occurrence_mask, group_averages, None)\n\nplotting_df[\'Std Dev Fold Exp\'] = plotting_df.groupby([\'Target\', \'Sample\'])[\'Fold Exp\'].transform(\'std\')\n\nmask = ~plotting_df.duplicated(subset=[\'Target\', \'Sample\'], keep=\'first\')\n\n# Select Target\nplot_target_options = plotting_df[\"Target\"].unique()\n\nplot_target = w_select(label=\"Select a Target to plot\", options=plot_target_options).value\n\ntarget_plotting_df = plotting_df[plotting_df[\"Target\"] == plot_target]\n\n\n\x06delta-\t_delta_cq\x11target_column.vlu\x04alue\x13target_column.value\rsample_column\x04Rela\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\xe5\x10from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\n\nprint(df_options)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nprint(df)\n\ndose_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + X / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys())\n)\n\nselected_equation = dose_response_eq.value\n\nequation =  dose_response_eq_options[selected_equation.value]\n    \n  \x03\nif\x02if\x07if dose\"dose_response_eq is None:\n  exit()\x010\x04)\n  \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x8f\x11from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\n\nprint(df_options)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nprint(df)\n\ndose_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + X / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys())\n)\n\nselected_equation = dose_response_eq.value\n\nif dose_response_eq is None:\n  exit(0)\n  \nequation =  dose_response_eq_options[selected_equation.value]\n    \n  \x01\n&if dose_response_eq is None:\n  exit(0)\x01\n\xd6!from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration (X axis):\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'Predicted Curve - X\': x_predicted, \'Predicted Curve - Y\': y_predicted})\n      \n      # Add group column\n      predicted_df[f\"Predicted Curve - {group}\"] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n      \n      # Add original observed data\n      predicted_df[\"Experimental Data - X\"] = pd.Series(x_data)\n      predicted_df[\"Experimental Data - Y\"] = pd.Series(y_data)\n      predicted_df[f\"Experimental Data - {group}\"] = group_df[group].iloc[0]\n\n      # # Group by concentration, calculate the mean and stdev\n      avg_per_group_df = group_df.groupby(x).agg({y: [\'mean\', \'std\']}).reset_index()\n      avg_per_group_df[f\"avg {group}\"] = group_df[group].iloc[0]\n\n      avg_per_group_df.columns = [f\"Aggregate Data - {x}\", f\"Aggregate Data - Mean {y} per {group}\", f\"Aggregate Data - STDEV {y} per {group}\", f\"Aggregate Data - {group}\"]\n\n      result_df = pd.concat([predicted_df, avg_per_group_df], axis=1)\n\n      return result_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\n# Generate a unique variable name\n\tresult_df\' = predicted_dfs.reset_index(drop=True)\x01\n\x90\x04We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.\xca\x02We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.We will generate the underlying dataset to create the chart below.\x02x_\x08x_column\x10\n\nx_observed the\rx_observed = \x05# the\x0cGenerate the\rone curve the\x07per the\x03per\x04per \x0b per oliogo\x06go gru\x06group\n\x16dose_response_eq.value\x0cselected_euq\x04quat\xcf\x11from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\n\nprint(df_options)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nprint(df)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + X / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq is None:\n  exit(0)\n  \nselected_equa =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n\n    \n\x03ion\x0bselected_eq\xb7\x05# Function to fit curve for each group\ndef fit_curve(group_df):\n    # Extract x and y values from the group\n    x_data = group_df[\'x\'].values\n    y_data = group_df[\'y\'].values\n    \n    # Perform curve fitting\n    popt, pcov = curve_fit(model_function, x_data, y_data, p0=initial_guess)\n    \n    # Predict y values based on the fitted curve\n    y_predicted = model_function(x_data, *popt)\n    \n    # Create a DataFrame for the predicted values\n    predicted_df = pd.DataFrame({\'x_predicted\': x_data, \'y_predicted\': y_predicted})\n    \n    # Add group column\n    predicted_df[\'group\'] = group_df[\'group\'].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n    \n    return predicted_df\x03, x\x01x\x05 x, y\x01x\x01y\x1f, model_function, initial_guess\x07 group,\x05group\x05group5\npredicted_dfs = df.groupby(\'group\').apply(fit_curve)\x04drug\x11drug_column.value\x03\nif\x05if de\x02fi\x07if drug\x0cdrug_column.\t is not N\x0eNone:\n  exit()\x010\x01)\x01\n$result_df = pd.concat(predicted_dfs)\x02# \x02# \x03\n  \x03\n  \x1ddf.groupby(drug_column.value)\x06print(\x01)\x03for\x01f\x03for\x03for\x06\n  for\x03for\nfor group \x03\n  \x01\n.,\n  x, y, group, model_function, initial_guess\x03\n  \x04=the\x04x_co\x17x_column.value,\n  y=y_v\rcolumn.value,\x06=drug_\x11drug_column.value\x03\n  \x01s\t=selected\x0bselected_eq\x03\n  \x01=\x02[]\x01]\x04data\x04Y0da\x06y_data\ty_data.am\x06max*()\x01,\x02()\x0c), y_data.mi\xa1\x19from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\n\nprint(df_options)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nprint(df)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + X / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    # Extract x and y values from the group\n    x_data = group_df[x].values\n    y_data = group_df[y].values\n    \n    # Perform curve fitting\n    popt, pcov = curve_fit(model_function, x_data, y_data, p0=[y_data.ma(), y_data.m])\n    \n    # Predict y values based on the fitted curve\n    y_predicted = model_function(x_data, *popt)\n    \n    # Create a DataFrame for the predicted values\n    predicted_df = pd.DataFrame({\'x_predicted\': x_data, \'y_predicted\': y_predicted})\n    \n    # Add group column\n    predicted_df[group] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n    \n    return predicted_df\n\nif drug_column is None:\n  exit(0)\n\n\n  \npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq, \n  initial_guess=\n)\nresult_df = pd.concat(predicted_dfs)\x03n()\x01x\x04in()\x07), 0.05\x07\n      \x07\n      \x07\n      \x07\n      \x07\n      \x05\n    \x03\n  \x03\n  \x02  \x05print\x07print()\x04popt\x14,\n      maxfev=5000,\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x05\n\nfor\x03for\x0efor groups in \x03for\x03for\x0cforgroup in \x15for group in df.grpup\tgroupby()\x07drug_\'.\x0ccolumn.value\x08:\n  fitc\x04)cur\x08_curve()\x05grup,\x01o\tgroup, x.\x04_col\x15x_column.value, y_col\x14y_column.value, drug\x1edrug_column.value, selected_eq\x02# \x04ame,\x01s\x03 gr\x0bname, group\x07\n\nprint\x07print()\x04df_o\ndf_options\x02\n\n\x08\nprint()\x02df\ndf_options\x03\n  \x03\n  \x01\n\x01)\x01\n\x06,\n  de\x02de\x02de\x02df\x02de\x08default \x06defalt\x03ult\ndefault=df\x0fdf_options.illc\x04oc[]\x01]\x02-1\x07\n      \x0c\n      # the\x10Add original the\x0cobserved the\x0edata\n      the\x08predicte\x0epredicted_df[]\x01]\x02\"\"\x04obsv\x04ered\x05ved x\x03 = \x18 = \n      predicted_df[]\x01]\x02\"\"\x01\"\nobserved y\x03the\x01x\x06x_data\x07 = y_da\x15y_data\n      predicte\x0epredicted_df[]\x86\x1dfrom scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'x_predicted\': x_predicted, \'y_predicted\': y_predicted})\n      \n      # Add group column\n      predicted_df[group] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n\n      # Add original observed data\n      predicted_df[\"observed x\"] = x_data\n      predicted_df[\"observed y\"] = y_data\n      predicted_df\n      \n      return predicted_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\nresult_df = predicted_dfs.reset_index(drop=True)\x01\"\x02[]\x01]\x02\"\"\x01\"\x01b\x02ob\x05obser\x05obser\x02ob\x0eobserved group\x06 = the\x01f\x01{\x01}\x01}\x05group\x17group_df[group].iloc[0]\x07\n      \x17group_df[group].iloc[0]\x02# \x02# \x02# \x07\n      \x0c\n      print\x01r\x05print\x07print()\x01x\x06x_data\x0e\n      print*y\x02()\x01y\x06y_data\x04len(\x01)\x04len(\x01)\npd.Series*\x01(\x01)\x02pd\x02pd\npd.Series(\x01)\x07\n      \x0c\n      # the\x0cAdd average \x99\x1efrom scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'x_predicted\': x_predicted, \'y_predicted\': y_predicted})\n      \n      # Add group column\n      predicted_df[group] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n\n      print(len(x_data))\n      print(len(y_data))\n      \n      # Add original observed data\n      predicted_df[\"observed x\"] = pd.Series(x_data)\n      predicted_df[\"observed y\"] = pd.Series(y_data)\n      predicted_df[f\"observed {group}\"] = group_df[group].iloc[0]\n\n      # Add average\n      \n      return predicted_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\nresult_df = predicted_dfs.reset_index(drop=True)\x03the\x04 +dt\x06 sdtev\x16tdev data\n      predic\x0epredicted_df[]\x02\"\"\x01\"\naverage th\x01x\x02 x\x06 = the\x01+\x01_\x03the\x04 fjr\x04 per\x0baverage the\x03per\x06per {}\x05group\x01f.\n      predicted_df[f\"average per {group}\"] = \x05stdev\x08\n      v;predicted_df[f\"observed {group}\"] = group_df[group].iloc[0]\x04aevr\x07average\x06np.the\n np.mean()\x02x_\x04 the\x07\n      \x02Gr\x02Gr\x08Group by\x04Grou\x0cGroup by the\x10concentration + \x06 -> Ca , calculate the mean and avergae\x11stdev\n      avgdePavg_per_group_df = group_df.groupby(\'concentration\').agg({\'y\': [\'mean\', \'std\']})\x03dru\x11drug_column.value\x01y\x04grop\x02up\x0e\n      print()\x1eavg_per_group_df.reset_index()\x01)\x07\n      \x02by\x07print()\x03avg\x10avg_per_group_df\x01x\x05type(\x01)\x02pr\x01p\x0fresult_df = the\x10\n      predicted\x0cpredicted_df\x0cresult_df = \tresult_df\x0cpd.concate()\x02()\x02[]\x01p\x01]\x01]\tpredicted\x11predicted_df, avg\x10avg_per_group_df\x05, aix\x05xis=1\n\n      the\x06result\tresult_df\x9d\x1ffrom scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'x_predicted\': x_predicted, \'y_predicted\': y_predicted})\n      \n      # Add group column\n      predicted_df[group] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n      \n      # Add original observed data\n      predicted_df[\"observed x\"] = pd.Series(x_data)\n      predicted_df[\"observed y\"] = pd.Series(y_data)\n      predicted_df[f\"observed {group}\"] = group_df[group].iloc[0]\n\n      # Group by concentration, calculate the mean and stdev\n      avg_per_group_df = group_df.groupby(x).agg({y: [\'mean\', \'std\']})\n\n      result_df = pd.concat([predicted_df, avg_per_group_df], axis=1)\n    \n    \n      return result_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\nresult_df = predicted_dfs.reset_index(drop=True)\x07.reset+\x08_index()\x01)\n)\n      ri\x0c\n      print\x05pritn\x07print()\x04avg_\x16avg_per_group_df.index\x0e.reset_index()\t).columns\rreset_index()\x01.\x06.index\x1c.reset_index().reset_index()\x1c.reset_index().reset_index()\x07\n      \x0e\n      print()\x06result\tresult_df\x02# \x02# \x02# \x02rp\tpredicted\x0cpredicted_df\x0e.reset_index()\x08)\n      \x08\n      r\x07print()\x02av\x14avg_per_group_df./co\x07columns\x05index\x07columns\x07\n      \x0e\n      print()\x06result\tresult_df\tresult_df\tresult_df\x19\n      avg_per_group_df[]\x01]\x03f\"\"\x01\"\x03the\x05obser\x04grou\x0bavg {group}\x01 \xe7\x1ffrom scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'x_predicted\': x_predicted, \'y_predicted\': y_predicted})\n      \n      # Add group column\n      predicted_df[group] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n      \n      # Add original observed data\n      predicted_df[\"observed x\"] = pd.Series(x_data)\n      predicted_df[\"observed y\"] = pd.Series(y_data)\n      predicted_df[f\"observed {group}\"] = group_df[group].iloc[0]\n\n      # # Group by concentration, calculate the mean and stdev\n      avg_per_group_df = group_df.groupby(x).agg({y: [\'mean\', \'std\']}).reset_index()\n      avg_per_group_df[f\"avg {group}\"]\n\n      result_df = pd.concat([predicted_df, avg_per_group_df], axis=1)\n\n      print(result_df)\n    \n      return result_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\nresult_df = predicted_dfs.reset_index(drop=True)\x05= the\x1a = group_df[group].iloc[0]\x07\n      \n\n      the\x06avg_er\x1davg_per_group_df.columns = []\x01]\x02\"\"\x01\"\x0bGrouped the\x02{}\x01x\x01f\x04. \"\"\x01\"\x04, \"\"\x02Me\x03mea\x03Mea\x07Mean {}\x01y\x01f\x05, f\"\"\x01\"\x05Stdev\x07TDEV {f\x02y}\x02, \tAggregate\x01f\x03f\"\"\x01\"\x0cAggregate {}\x04drug\x05group\x10Predicted Cruve \x06urve _\x03- X\x0ePredicted Cure\x06ve - Y\x02f\"\x01\"\x05Predc\x0ficted Curve - {\x01}\x12Experimental Data \x03- X\x15Experimental Data - U\x01Y\x16Experimental Data - {}\x05group\x07Data - \x11Aggregate Data - \x11Aggregate Data - \x10Aggregate Data -\x0c per {group}\t per Pgro\x06{grouo\x02p}\x01\n\x04\nhte\x01s\x02wt\x0e_text_output()\x04\n  \n\tcontent=f\x03f\"\"\x01\"\x02\n\n\rresult_table_\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x8f\x11from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\nselected_df_name = w_select(options = df_options, label=\"Select a result from a previous data transformation:\")\n\nprint(df_options)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nprint(df)\n\ndose_column = w_select(\n  label=\"Select the column for dose concentration:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - X) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + X / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys())\n)\n\nif dose_response_eq is None:\n  exit(0)\n\nselected_equation = dose_response_eq.value\n  \nequation =  dose_response_eq_options[selected_equation.value]\n    \n  \x04\n  d\x08default \x03defBdefault=\"log(inhibitor) vs. normalized response -- Variable slope\"\x01,\x05pront\x02# \x07\n      \x0e\n      print()\x07predict\x0cpredicted_df\x02# \x02\n\n\x07print()\x06type()\x05prexi\x02di\rpredicted_dfs\x05list(\x01)\x01 \x0b\n\nprint*pre\x02()\x07predict\rpredicted_dfs\x01#\x06.index\x02\n\n\x07print()\x05predi\'predicted_dfs.df.reset_index(drop=True)\r\nresult_df = $predicted_dfs.reset_index(drop=True)B\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\tx_predict\x0bx_predicted\x07\n      \t\n      en\x05len()\x01x\x0bx_predicted\x01\n\x02\n\n\x06w_text\x0fw_text_output()\ncontent=\"\"\x05\"\"\"\"\"\x02\n\n\x02##\n heading 1\x07### the\nDose curve\x13Curve Fitting\nBelowR\n![Alt text](https://assets.digitalocean.com/articles/alligator/boo.svg \"a title\")\x9e\x01[![App Platorm](https://doimages.nyc3.cdn.digitaloceanspaces.com/002Blog/0-BLOG-BANNERS/app_platform.png)](https://www.digitalocean.com/products/app-platform)\x9e\x01[![App Platorm](https://doimages.nyc3.cdn.digitaloceanspaces.com/002Blog/0-BLOG-BANNERS/app_platform.png)](https://www.digitalocean.com/products/app-platform)G![Alt text](https://assets.digitalocean.com/articles/alligator/boo.svg)\xb1\x01https://www.researchgate.net/publication/335367232/figure/fig3/AS:941901985349633@1601578341546/Non-linear-curve-fitting-for-dose-response-curves-to-determine-IC50-values-of.png\x04\n\nte\x01\n\x03The\x03The(We will generate the underlying data to \x17set to create the curve\r chart below.\x08\nprint()\x03cur\x07nt(cur)\x01[\x01]\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x04\n\nif\x07if drug\rdrug_columnis\x04 is \x07print()\x02dr\x11drug_column.value\x06.value\x06.value\x04\n\nif\x02if\x04if x\x1cx_column.value is None or y_\x1ey_column.value is None or drug!drug_column.value is None:\n  exut\x04it()\x010\x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x02# \x01x\x01x\x03\n  \x03\n  \t    # the\x05Dopr \x01r\x01d\x08Drop alu\x17values from array where\x06x and \x03\n  \x04\n   \x03\n  \x03\n  \x03pri\x07print()\x05group\x08group_df\x06grou[]\x0cp_df = group*group_df.replace[np.inf, -np.inf], np.nan)\x01(\x1b..dropna(subset=[\'x\', \'y\'])\x01x\x01y\x03\n  \x07\n    fi\x02if\x02if\x02if\x02if\x02if\x02if\x02if\x0bif group_df\x08group_df\x08\n  print\t  print()\x05group\x08group_df\x02if\x14if not not df.empty:\x08group_df\x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x02  \x0e\n      print()\x08group_df\x03 ()\x06X axis\x01)\x03 ()\x06X axis\x02\n\nXy_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)Z\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\x02\n\nXy_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)Z\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)k\n\nx_column = w_select(\n  label=\"Select the column for dose concentration (X axis):\",\n  options=df.columns\n)k\n\nx_column = w_select(\n  label=\"Select the column for dose concentration (X axis):\",\n  options=df.columns\n)\x06\n# the\x0cGenerate the\x0ca unique the\'variable name and assign result to that\xf3\x01\n\n# Generate a unique variable name\nunique_variable_name = \"unique_df_\" + str(hash(predicted_dfs))\n\n# Assign the right-hand side to the unique variable in the globals space\nglobals()[unique_variable_name] = predicted_dfs.reset_index(drop=True)\x14 in the globals spac\xdf#from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration (X axis):\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized.htm\n# Y=100/(1+10^(X-LogIC50))\ndef log_inhibitor_vs_normalized_response(x, LogIC50):\n  return 100 / (1 + 10**(x - LogIC50))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable.htm\ndef log_inhibitor_vs_normalized_response_variable(x, LogIC50, HillSlope):\n  return 100 / (1 + 10**((LogIC50 - x) * HillSlope))\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_2.htm\ndef inhibitor_vs_normalized_response(x, IC50):\n  return 100 / (1 + x / IC50)\n\n# https://www.graphpad.com/guides/prism/latest/curve-fitting/reg_dr_inhibit_normalized_variable_2.htm\ndef inhibitor_vs_normalized_response_variable(x, IC50, HillSlope):\n  return 100 / (1 + (IC50 / x) ** HillSlope)\n\ndose_response_eq_options = {\n  \"log(inhibitor) vs. normalized response\": log_inhibitor_vs_normalized_response,\n  \"log(inhibitor) vs. normalized response -- Variable slope\": log_inhibitor_vs_normalized_response_variable,\n  \"[Inhibitor] vs. normalized response\": inhibitor_vs_normalized_response,\n  \"[Inhibitor] vs. normalized response -- Variable slope\": inhibitor_vs_normalized_response_variable\n}\n\ndose_response_eq = w_select(\n  label=\"Choose the curve fitting equation:\",\n  options=list(dose_response_eq_options.keys()),\n  default=\"log(inhibitor) vs. normalized response -- Variable slope\"\n)\n\nif dose_response_eq.value is None:\n  exit(0)\n  \nselected_eq =  dose_response_eq_options[dose_response_eq.value]\n\n# Generate one curve per oligo group\n# Function to fit curve for each group\ndef fit_curve(group_df, x, y, group, model_function):\n    group_df = group_df.replace([np.inf, -np.inf], np.nan).dropna(subset=[x, y])\n    # Extract x and y values from the group\n    if not group_df.empty:\n      x_data = group_df[x].values\n      y_data = group_df[y].values\n      \n      # Perform curve fitting\n      popt, pcov = curve_fit(\n        model_function, \n        x_data, \n        y_data, \n        # p0=[y_data.max(), y_data.min(), 0.05],\n        # maxfev=5000\n      )\n\n      x_predicted = np.linspace(x_data.min(), x_data.max(), 1000)\n      # Predict y values based on the fitted curve\n      y_predicted = model_function(x_predicted, *popt)\n      \n      # Create a DataFrame for the predicted values\n      predicted_df = pd.DataFrame({\'Predicted Curve - X\': x_predicted, \'Predicted Curve - Y\': y_predicted})\n      \n      # Add group column\n      predicted_df[f\"Predicted Curve - {group}\"] = group_df[group].iloc[0]  # Assumes \'group\' is the same for all rows in the group\n      \n      # Add original observed data\n      predicted_df[\"Experimental Data - X\"] = pd.Series(x_data)\n      predicted_df[\"Experimental Data - Y\"] = pd.Series(y_data)\n      predicted_df[f\"Experimental Data - {group}\"] = group_df[group].iloc[0]\n\n      # # Group by concentration, calculate the mean and stdev\n      avg_per_group_df = group_df.groupby(x).agg({y: [\'mean\', \'std\']}).reset_index()\n      avg_per_group_df[f\"avg {group}\"] = group_df[group].iloc[0]\n\n      avg_per_group_df.columns = [f\"Aggregate Data - {x}\", f\"Aggregate Data - Mean {y} per {group}\", f\"Aggregate Data - STDEV {y} per {group}\", f\"Aggregate Data - {group}\"]\n\n      result_df = pd.concat([predicted_df, avg_per_group_df], axis=1)\n\n      print(result_df)\n    \n      return result_df\n\npredicted_dfs = df.groupby(drug_column.value).apply(\n  fit_curve,\n  x=x_column.value,\n  y=y_column.value,\n  group=drug_column.value,\n  model_function=selected_eq\n)\n\n# Generate a unique variable name\nresult_df = predicted_dfs.reset_index(drop=True)\n\n# Generate a unique variable name in the globals spa\nunique_variable_name = \"unique_df_\" + str(hash(predicted_dfs))\n\nglobals()[unique_variable_name] = predicted_dfs.reset_index(drop=True)\x01e\x01v\x02ce\x05table\x0ctable_result\x05print\x88\x01unique_variable_name = \"table_result\" + str(hash(predicted_dfs))\n\nglobals()[unique_variable_name] = predicted_dfs.reset_index(drop=True)\x07print()\x07glaobsl\x05globa\tglobals()\x05print\x07print()\ndf_options\x02\n\n\xcc\x05\n\n# Function to extract integers from a string\ndef extract_integers(s):\n    return [int(x) for x in re.findall(r\'\\d+\', s)]\n\n# Check if any item contains \'table_result\'\ncontains_table_result = any(\'table_result\' in item for item in df_options)\n\nif not contains_table_result:\n    # If \'table_result\' doesn\'t exist, generate \'table_result_1\'\n    new_string = \'table_result_1\'\nelse:\n    # If \'table_result\' exists, find the largest integer ending\n    largest_integer = max([max(extract_integers(item), default=0) for item in df_options if \'table_result\' in item])\n    # Generate a new string with \'table_result\' followed by largest integer plus 1\n    new_string = f\'table_result_{largest_integer + 1}\'\n\nprint(new_string)\tresult_df\x96\x06\n\n# Generate a unique variable name in the globals space\nprint(df_options)\n\n# Function to extract integers from a string\ndef extract_integers(s):\n    return [int(x) for x in re.findall(r\'\\d+\', s)]\n\n# Check if any item contains \'table_result\'\ncontains_table_result = any(\'table_result\' in item for item in df_options)\n\nif not contains_table_result:\n    # If \'table_result\' doesn\'t exist, generate \'table_result_1\'\n    new_string = \'table_result_1\'\nelse:\n    # If \'table_result\' exists, find the largest integer ending\n    largest_integer = max([max(extract_integers(item), default=0) for item in df_options if \'table_result\' in item])\n    # Generate a new string with \'table_result\' followed by largest integer plus 1\n    new_string = f\'table_result_{largest_integer + 1}\'\n\nprint(new_string)\x01[\x01]\x02# \x02# \x03\n  \x03\n  \x05print\x03\n  \x05oriun\x07print()\x04drug\x11drug_column.value\x1fdf.groupby(drug_column.value)[]\x010\x01]\x01)\x05\n\nfor4for n, g in df.groupby(drug_column.value):\n  print n\x0bn\n  print g\x02()\x01n\x01)\x02()\x02g0\x02[]\x01]\x02x.\x04_vol\x02co\x0fx_column.values\x03\n  3print(g[x_column.value])\n  print(g[x_column.value])\x04y_vo\x03col\x08y_column\x03\n  \n\n  t = the\x0cparams, __ =\x06 = the\x05curbe\x03ve_\ncurve_fit9\x02()\x03log-log_inhibitor_vs_normalized_response_variable\x05\n    \x03\n  \\,\n    x_data, \n      y_data, \n      p0=[y_data.max(), y_data.min(), 0.05],\n      maxfev=5000\x01\\\x02  \x04x_co\x0ex_column.value\x01t\x02y_\x0ey_column.value\x02# \x02# \x02# \x0ey_column.value\x0ey_column.value\x11g[x_column.value]\x11g[x_column.value]\x11g[x_column.value]\x11g[x_column.value]\x06np.ara\x04ray(\x01)\tnp.array(\x01)\x01y\x01y\x01y\x9b\x01import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\x01\n\x18w_text_output(content=f\"\x13The final dataframe\x01s\x0f for each group\x1f contains some final statistics$, including Fold Change and Percent \x0bRepression.5 To see all results, check out the delta_delta_ct_df.\x02\")\x01\n\xe8\x01\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold \x06Changeb\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\x15\n  df_group[\"Percent \x13Relative Expression\x05\"] = \x1d(df_group[\"Fold Change\"]*100)\x01\n\xdc\x01  return df_group\n\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"\x06resultH_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\x01\"\x06Target\x01\"\"] == groups[i][0]) & (delta_ct_df[\x01\"\tCondition\x01\"\x8e\x01] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'\x06result5_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\x01\"\x06Target\x01\"\xce\x02] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\x03\n  \nRepression\x04100-\x1d  2 ** (-delta_cq_df[\'__Cq\'])\x03 * \x07result_\x02Ex\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x06Change\x01\n\x02df\x13target_column.value\x13sample_column.value\x02df\x13target_column.value\xf4\x01\n    w_text_output(content=f\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\")\xd5\x01Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see the new __Ct column below in the dataframe created for each group: {list(dataframes.keys())}\x0c and overall\x01.\x01P\xc1\x01import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  \x86\x03df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  df_group[\"Percent Relative Expression\"] = (df_group[\"Fold Change\"]*100)\n  return df_group\x01\n\x94\x02\n\nif control_column.value is not None and groups_done:\n  \n  # Create tabbed dataframes\n  if len(groups) > 0:\n    dataframes = {}\n\n    for i in range(len(groups)):\n      if is_tuple:\n        df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n        data = delta_ct_df[(delta_ct_df[\x01\"\x06Target\x01\"\"] == groups[i][0]) & (delta_ct_df[\x01\"\tCondition\x01\"\xc5\x01] == groups[i][1])]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n      else:\n        df_name = f\'df_{groups[i]}\'\n        data = delta_ct_df[delta_ct_df[\x01\"\x06Target\x01\"\x84\x02] == groups[i]]\n        data = calc_delta_delta_ct(data)\n        dataframes[df_name] = pd.DataFrame(data)\n    \n    # Example usage of the created dataframes\n    for name, df in dataframes.items():\n        # print(f\"{name}:\\n{df}\\n\")\n        locals()[name] = df\x01\nJ\n    delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\x05\n    \x02# Edelta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\x1b\n    w_text_output(content=\x01fz\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see \x13the new __Ct column0 below in the dataframe created for each group: \x01{\x05list(\x11dataframes.keys()\x01)\x01}\x02\")\x03\n  \x06      \xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x1bwe are going to select the \x12ubtract the delta &Mean Control _Ct for each group from a\x1bevery biological replicate.\x18\n  grouping_columns = []\x01]\x1a\n    grouping_columns = []\n and len()\x15grouping_columns = []\x04 > 0\x03\n  \x02  \x12groups_done = True\x0f This involves \x0bthe _Ct of \x1f. You can see this below in the\xbc\x02df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\xa3\x01\nw_text_output(content=\"Now we are going to subtract the Mean Control _Ct for each group from the _Ct of every biological replicate. You can see this below in th\")\x13target_column.value\x13sample_column.value\x13target_column.value\x01 \x04e dt ataframe created for each group.\x07, which\x02: \x04this\x8d\x19import warnings\n\nwarnings.filterwarnings(\'ignore\', category=pd.errors.SettingWithCopyWarning)\n\nfrom lplots.widgets.text import w_text_input, w_text_output\n\ndef calc_delta_delta_ct(df_group):\n  df_group[\'Mean Control _Ct\'] = df_group[(df_group[control_column.value] == control_val.value)][\"_Ct\"].mean()\n  df_group[\"__Ct\"] = df_group[\"_Ct\"] - df_group[\"Mean Control _Ct\"]\n  df_group[\'Fold Change\'] = 2 ** (-df_group[\'__Ct\'])\n  df_group[\"Percent Repression\"] = 100-(df_group[\"Fold Change\"]*100)\n  return df_group\n\nw_text_output(content=\"Now we are going to calculate Delta Delta Ct. First, you need to select what your control condition is. This is likely a sample type or a drug concentration. \")\ncontrol_column = w_select(label=\"Select the column that contains the control condition\", options=delta_ct_df.columns)\n\n\nif control_column.value is not None:\n  control_val = w_select(label=\"Select control condition\", options=set(delta_ct_df[control_column.value]))\n  if control_val.value is not None:\n    if (control_column.value != sample_column.value) & (control_column.value != target_column.value):\n      grouping_columns = [target_column.value, sample_column.value, control_column.value]\n    elif (control_column.value == sample_column.value):\n      grouping_columns = [target_column.value, control_column.value]\n    elif (control_column.value == target_column.value):\n      w_text_output(content=\"Error, target column cannot be the control condition.\")\n      exit()\n    else:\n      w_text_output(content=\"Error.\")\n      exit()\n      \n\n    w_text_output(content=f\"Delta delta Ct will be calculated in the following groups:\")\n    groups = []\n    is_tuple = False\n\n    # Create Groups\n    if len(grouping_columns) == 3:\n      for i in delta_ct_df[target_column.value].unique():\n        for j in delta_ct_df[sample_column.value].unique():\n          groups.append((i, j))\n          w_text_output(content=f\"Group: {(i, j)}. Control: {control_column.value} = {control_val.value}\")\n      is_tuple = True\n    else:\n      for i in delta_ct_df[target_column.value].unique():\n        groups.append(i)\n        w_text_output(content=f\"Group: {i}. Control: {control_column.value} = {control_val.value}\")\n    print(groups, target_column.value, sample_column.value)\n\n\n    # Create tabbed dataframes\n    if len(groups) > 0:\n      dataframes = {}\n\n      w_text_output(content=\"We start by getting the avera\")\n      control_df\n\n      for i in range(len(groups)):\n        if is_tuple:\n          df_name = f\"df_{groups[i][0]}_{groups[i][1]}\"\n          data = delta_ct_df[(delta_ct_df[target_column.value] == groups[i][0]) & (delta_ct_df[sample_column.value] == groups[i][1])]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n        else:\n          df_name = f\'df_{groups[i]}\'\n          data = delta_ct_df[delta_ct_df[target_column.value] == groups[i]]\n          data = calc_delta_delta_ct(data)\n          dataframes[df_name] = pd.DataFrame(data)\n      \n      # Example usage of the created dataframes\n      for name, df in dataframes.items():\n          # print(f\"{name}:\\n{df}\\n\")\n          locals()[name] = df\n      delta_delta_ct_df = pd.concat(dataframes.values(), ignore_index=True)\n  (from lplots.reactive import Signal\nfrom \x1blplots.widgets.text import \rw_text_output\x02\n\n\x01\n\x04if \"\x03seq\x01\"\x10 not in globals(\x02):\x01\n\x02  \rseq = Signal(\x010\x01)\x01\n\x01\n\x0ew_text_output(\x06conten\x04t=f\"\x01{\x03seq\x01(\x01)\x01}\x01\"\x01)\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")3from lplots.reactive import Signal\n\nseq = Signal(0)\t\n\nprint()\x01s\tseq.value\x01\\\x08sample()\x01)\x03\n\nw\x02\n\n\x10from w_text_outp\nw_text_out\x010\x15\n\nprint(seq.sample())\x01t\x01l\x06w_text\x01t\x01\"\x07.sample\x01)\x01)\x01:Pfrom lplots.reactive import Signal\nfrom lplots.widgets.text import w_text_output\x01\n\x01\n\x03seq\x01(\x016\x01)\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")P\n\nseq = Signal(0)\n\nprint(seq.sample())\n\nw_text_output(content=f\"{seq.sample()}\")\x01\n\x04 = 2\x03)2_\x01)\x012\x05\n\nori\x07print()\x0cseq.sample()\x01)\x013\x014\x012\xde\x01w_text_output(content=\"\"\"\n \n## Well Removal\n\nIf there are any wells that you wish to remove, you can do that here by selecting them from the dropdown. \n\nWells with **Undetermined** Cq values are automatically removed.\n\"\"\")\x01\n\x05\nif \"\x13cleaned_data_signal\x16\" not in globals():\n  \x13cleaned_data_signal( = Signal(list(pd.DataFrame().columns))\nV\n\nskip_well_removal = w_checkbox(label=\"Check this box to skip well removal\", default=\x01F\x04alse\x1a)\n\nif skip_well_removal.va\x0blue is True\":\n  qpcr_data_cleaned = qpcr_data \x03\n  \x03\n  \x1bw_text_output(\n    content=\x01\"\x02\"\"\x01\n\x01S\x0buccessfully\x17 skipping well removal.\x01\n\x02  \x02  \x05    \"\x02\"\"\x02,\n\x02  \x02  \x11    appearance={\n\x02  \x02         \"message_box\": \"success\",\n\x02  \x02  \x07    },\n\x02  \x02  \x03  )\t\n  exit()\x01\n\xa5\x05\nexperiment_setup_completed = None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]\n\nremove_wells_placeholder = \"Select wells\xe2\x80\xa6\" if experiment_setup_completed else \"Provide experimental data first\xe2\x80\xa6\" \n\ntry: \n  well_opts = qpcr_data[\"Well\"].unique()\n\nexcept: \n  well_opts = []\n\n\nqpcr_data_cleaned = qpcr_data \n\nremove_wells = w_multi_select(\n    label=\"Select wells to remove\", \n    options=well_opts,\n    readonly=not experiment_setup_completed,\n    appearance={\n      \"placeholder\": remove_wells_placeholder,\n    },\n  )\n  \nif remove_wells.value is not None:\n    qpcr_data_cleaned = qpcr_data[~qpcr_data[\"Well\"].isin(remove_wells.value)]\n\x01\n\x07try:\n  \x19cleaned_data_signal(list(\x11qpcr_data_cleaned\n.columns))\x01\n\x06except\n:\n  print(\x01\"\x0fSkipping signal\x01\"\x01)\x01\n\x01\n\x02# \x02# \x13\n  w_text_output=()\ncontent=\"\"\x01W\x03Sel8If there are any wells that you wish to remove, you cand\x10 do that here. S\x10If there is a fe\riller text tp\x06o file\rter on, e.g. \x03 ()\re.g. Sample q\x01q\x011 You can either remove wells by e-searching for wells with a default text value\x15 or by selecting them\xd8\x08if well_column.value is not None:\n  # remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  # if remove_empty_wells is True:\n  w_text_output=(content=\"If there are any wells that you wish to remove, you can do that here. You can either remove wells by searching for wells with a default text value (e.g. Sample 1) or by selecting the\")\n  removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n\n  if removal_method is not None:\n\n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n  \n    if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\n\n\x02 f\x11m from the dropdo\xe8\x08if well_column.value is not None:\n  # remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  # if remove_empty_wells is True:\n  w_text_output=(content=\"If there are any wells that you wish to remove, you can do that here. You can either remove wells by searching for wells with a default text value (e.g. Sample 1) or by selecting them from the dropd\")\n  removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n\n  if removal_method is not None:\n\n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n  \n    if removal_method == \"List wells\":\n      remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n      if remove_wells.value is not None:\n        print(remove_wells.value)\n        main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\n\n\x02wn\x04own.\x01\nF\n# Set empty well default for zero state\nremove_wells = w_multi_selectWw_multi_select(label=\"Select the wells to remove:\", options=qpcr_data[\"Well\"].unique())\x02[]\x01]\x04else\xf1\x04w_text_output(content=\"\"\"\n## _(Optional)_ Well Removal\n\nIf there are any wells that you wish to remove, you can do that here by selecting them from the dropdown. We automatically filter wells with **Undetermined** Cq values.\n\n\"\"\")\n\nqpcr_data_cleaned = qpcr_data\n\n# Set empty well default for zero state\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  remove_wells = w_multi_select(label=\"Select the wells to remove:\", options=qpcr_data[\"Well\"].unique())\n  if remove_wells.value is not None:\n    qpcr_data_cleaned = qpcr_data[~qpcr_data[\"Well\"].isin(remove_wells.value)]\nels\n\n\x01:\x01:\xee\x04w_text_output(content=\"\"\"\n## _(Optional)_ Well Removal\n\nIf there are any wells that you wish to remove, you can do that here by selecting them from the dropdown. We automatically filter wells with **Undetermined** Cq values.\n\n\"\"\")\n\nqpcr_data_cleaned = qpcr_data\n\n# Set empty well default for zero state\n\nif None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\n  remove_wells = w_multi_select(label=\"Select the wells to remove:\", options=qpcr_data[\"Well\"].unique())\n  if remove_wells.value is not None:\n    qpcr_data_cleaned = qpcr_data[~qpcr_data[\"Well\"].isin(remove_wells.value)]\n\n\nO\nremove_wells = w_multi_select(label=\"Select the wells to remove:\", options=[])~else:\n  # Set empty well default for zero state\nremove_wells = w_multi_select(label=\"Select the wells to remove:\", options=[])\x02  \x1eqpcr_data_cleaned = qpcr_data\n\x01 \x11if qpcr_data not \x02i \x0es not None ele\x06se pd.\x02\n\n\x01d\x0bDataFrame()\x03\n  \x01s\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x05\n    \x05\n    \x03\n  \x02 \n\x04##  \x0e _(Optional)_ \x01 \x02 0\x01-\x07\n    di\x05ready\x1aonly=qpcr_data is not None\x02\n\n\x07\nwellOp\x01-O_opts = qpcr_data[\"Well\"].unique() if qpcr_data is not None else pd.DataFrame()\x02[]\nwell_opts,\x02,m\x03\nty\x04ry: \x02  \x03\n  \x07\nexcpet\rept: \n  wellP\n_opts = []- filter wells with **Undetermined** Cq values\x01F\x02\n\n\x01W\x19are automatically removed\x01\n\x06print \x02()\tqpcr_data\x02\n\n\x07\n\nprev_\x04prev\x05expecteriment_setup_completed = None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]\x1aexperiment_setup_completed\x04not \x03\n  \x0c\n\nremove_ewl\x06wells-)_placeholder = experiment_setup_completed\x02\"\"\x0cSelect wells\x07\xe2\x80\xa6 if \x01\"# experiment_setup_completed else \"\"%Provide experimental data above frist\x08first\xe2\x80\xa6\x05\n  ap\x02  \rappearance={}\x0c\n      \n    \x02\"\"\x0bplaceholder\x1a: remove_wells_placeholder\x19remove_wells_placeholder,\x01,\x11qpcr_data_cleaned\x02  \x02  \x02  \x02  \x02  \x02  !  if removal_method is not None:\n\x02  \x02  \x02  \x02  \'    if removal_method == \"List wells\":\n\x9d\x02\n    if removal_method == \"Search for text\":\n      empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n      cleaned_df = renamed_df[~renamed_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\x19imported_qpcr_data_signal\x19imported_qpcr_data_signal<imported_qpcr_data_signal(list(imported_qpcr_data.columns))\n\x01\n\x13cleaned_data_signal\tqpcr_data\tqpcr_data\x02  \x02?\n\x16\nqpcr_data_cleaned = n\x05None\n\x02\n\n\xb9\x02w_text_output(content=\"\"\"\n## _(Optional)_ Use Metadata Template\n\nIf you want to merge your qPCR machine results file with a plate map Excel that stores additional metadata, you can add your plate map here. \n</br>\nPlease ensure that your plate map matches the format provided in the Excel template [here](). \n\"\"\")\n\x0cWell RemovaliIf there are any wells that you wish to remove, you can do that here by selecting them from the dropdown.\x01:\x01t\x1c\n    cleaned_df = renamed_df\x02\n\n&\nqpcr_data_cleaned = qpcr_data_cleaned\x03\n  \x11qpcr_data_cleaned\tqpcr_data\tqpcr_data& We automatically filter wells with Un\x01_\x19*Undetermined* Cq values.\x01*\x01*\x02  \nrenamed_df\nrenamed_df\nrenamed_df\nrenamed_df\nrenamed_df\x02\"\"\x04Well\x02\"\"\x04Well\ncleaned_df\ncleaned_df\x0b, default=L\x02\"\"\nList wells^if None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]:\x01\n\x15\nqpcr_data_cleaned = \x15qpcr_data_cleaned = \n\rimported_data\x03qpc\tqpcr_data\x99\x07if well_column.value is not None:\n  remove_empty_wells = w_checkbox(label=\"Remove empty wells\", default=False).value\n  \n  if remove_empty_wells is True:\n    removal_method = w_select(label=\"Select removal method\", options=[\"Search for text\", \"List wells\"]).value\n\n    if removal_method is not None:\n  \n      if removal_method == \"Search for text\":\n        empty_well_string = w_text_input(label=\"Input the string that denotes empty wells:\", default=\"Sample 1\").value\n        main_df = main_df[~main_df.apply(lambda row: row.astype(str).str.contains(empty_well_string).any(), axis=1)]\n    \n      if removal_method == \"List wells\":\n        remove_wells = w_multi_select(label=\"Select the wells you want to remove\", options=main_df[well_column.value].unique())\n        if remove_wells.value is not None:\n          print(remove_wells.value)\n          main_df = main_df[~main_df[well_column.value].isin(remove_wells.value)]\n\n\n\x01 \tqpcr_data\x01\n\x01\n\x94\x07w_text_output(content=\"\"\"\n \n## Well Removal _(Optional)_ \n\nIf there are any wells that you wish to remove, you can do that here by selecting them from the dropdown. \n\nWells with **Undetermined** Cq values are automatically removed.\n\"\"\")\n\n\nexperiment_setup_completed = None not in [well_column.value, cq_column.value, sample_column.value, target_column.value]\n\nremove_wells_placeholder = \"Select wells\xe2\x80\xa6\" if experiment_setup_completed else \"Provide experimental data first\xe2\x80\xa6\" \n\ntry: \n  well_opts = qpcr_data[\"Well\"].unique()\n\nexcept: \n  well_opts = []\n\n\nqpcr_data_cleaned = qpcr_data \n\nremove_wells = w_multi_select(\n    label=\"Select wells to remove\", \n    options=well_opts,\n    readonly=not experiment_setup_completed,\n    appearance={\n      \"placeholder\": remove_wells_placeholder,\n    },\n  )\n  \nif remove_wells.value is not None:\n    qpcr_data_cleaned = qpcr_data[~qpcr_data[\"Well\"].isin(remove_wells.value)]\n\n\x0b\nw_checkbox\x14skip_well_removal = \x02()\x02\"\"\x06label=\x02Ch\x18Do you want to remove we\x06wells?\t before b\x13 before beginnging \x06(e.g. \x0c if you noti\t, options\x08Check rh\x06this m\x07box to \x11skip well removal\r\", default = \x04=Tru\x05False\x04True\t\n\nif skip3skip_well_removal:\n  qpcr_data_cleaned = qpcr_data \x05False\x03\n  \x08else:\n  \x04.val\x05False\x01\n\x02ue\x01\n\x03\n  \x01\n\x04True\x01f\x02\"\"\x17Machine data imported s\x02.\n\x17{sheets_added_display}\n\x02\"\"\x02  \x02  \x02  \x02  \x02# %from scipy.optimize import curve_fit\n\x07import \x0cpandas as pd\xe8\x05\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ngroup_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or group_column.value is None:\n  exit(0)\n\n# Add replicate column\n\x16grouped = df.groupby([\x0ex_column.value\x02, \x12group_column.value\x02])\x8c\x01\n\ndef assign_replicates(group):\n    group[\'Replicate\'] = range(1, len(group) + 1)\n    return group\n\n# Applying the function to each group\ndf\x01_\x0fwith_replicates: = grouped.apply(assign_replicates).reset_index(drop=True)\x01\n\x01\n\x06print(\x12df_with_replicates\x01)\x01\n\x89\x02\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the average dataset for every \"Group\"\n# Find min and max of average dataframe\n# Apply normalization to each group\x01\n\x04\nthe\x03imp\x02im\x01\n\x06ort ht\x03the\x03\'x\'\x07\'group\'\x01\n\x02xx\x04grup\x07group_c\x03rep\x13vdf_with_replicates\xa7\x01from lplots.widgets.text import w_text_input, w_text_output\n\nname = w_text_input(label=\"Your name:\", default=\"John Doe\").value\nw_text_output(content=f\"Hello, {name}!\")\x91\x06from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for dose concentration (X axis):\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\x01S\relect the X a\x0ethe columnf or\x0b for the X-\x05 aixs\x04xis:k\n\ndrug_column = w_select(\n  label=\"Select a column for the therapeutic candidate:\",\n  options=df.columns\n)\n\x0b the group:\x03\n  \\\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n  \x01\n\x06\n# the\x0bFor each \"\"\x05Group\x05, the\tdefine re\'all replicate datasets\n# Calculayte the\x04the \x02e \x01e\x0cGenerate the\x8d\x07from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate the\x8c\x07from scipy.optimize import curve_fit\n\n# Select a dataframe\ndf_options = [k for k, v in globals().items() if hasattr(v, \"iloc\")]\n\nselected_df_name = w_select(\n  options = df_options,\n  label=\"Select a result from a previous data transformation:\",\n  default=df_options[-1]\n)\n\nif selected_df_name is None:\n  exit(0)\n\ndf = globals().get(selected_df_name.value, None)\n\nif df is None: \n  exit(0)\n\nx_column = w_select(\n  label=\"Select the column for the X axis:\",\n  options=df.columns\n)\n\ny_column = w_select(\n  label=\"Select the column for the Y axis:\",\n  options=df.columns\n)\n\ndrug_column = w_select(\n  label=\"Select a column for the group:\",\n  options=df.columns\n)\n\n\nif x_column.value is None or y_column.value is None or drug_column.value is None:\n  exit(0)\n\ndef normalization(data):\n    return(data - np.min(data)) / (np.max(data) - np.min(data))\n\n# For each \"Group\", define all replicate datasets\n# Generate th\x03the9the average data frame\n# Find min of average dataframe\n# \x18 dataset for every group\x02\"\"\x05Group\x1eFind min and max of avergae \"\"\rage dataframe!Apply normalization to each group\x02\n\n\x05# the\x03the\x07Add the\x15Add replicate column\n\x05group\x0cgroup_column\x03gro\x0cgroup_column\x04plot\x041131\x041113\x03978\x041014\x041007\x01\x06\x07\x041745\x06python\x04code\x03\x02\x07\x01\x06\x07\x041194\x01\x06\x07\x041026\x02\x07\x02\x06\x07\x041194\x02\x07\x01\x06\x07\x041194\x02\x07\x02\x06\x07\x041194\x02\x07\x01\x06\x07\x041194\x02\x07\x02\x06\x07\x041194\x02\x07\x01\x06\x07\x041194\x02\x07\x02\x06\x07\x041194\x01\x06\x07\x041347\x01\x06\x07\x041194\x01\x06\x07\x041327\x02\x07\x02\x06\x07\x041347\x02\x07\x01\x06\x07\x042859\x06python\x04code\x03\x01\x06\x07\x042859\x01\x06\x07\x041223\x06python\x04code\x03\x02\x07\x02\x06\x07\x041302\x06python\x04code\x03\x02\x07\x01\x06\x07\x041302\x02\x07\x02\x06\x07\x041302\x02\x07\x01\x06\x07\x041302\x02\x07\x02\x06\x07\x041302\x02\x07\x01\x06\x07\x041302\x02\x07\x02\x06\x07\x041302\x02\x07\x01\x06\x07\x041302\x08markdown\x03\x08markdown\x03\x04plot\x041765\x041721\x01\x06\x07\x041055\x06python\x04code\x03\x01\x06\x07\x03941\x06python\x04code\x03\x01\x06\x07\x03941\x06python\x04code\x03\x02\x07\x02\x06\x07\x03941\x06python\x04code\x03\x01\x06\x07\x03941\x02\x07\x01\x06\x07\x03941\x02\x07\x01\x06\x07\x03941\x02\x07\x02\x06\x07\x03941\x02\x07\x01\x06\x07\x03941\x02\x07\x02\x06\x07\x03941\x01\x06\x07\x03942\x06python\x04code\x03\x0cvalue_viewer\x03150\x0cvalue_viewer\x03150\x0cvalue_viewer\x03150\x02\x07\x01\x06\x07\x041195\x06python\x04code\x03\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x01\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x04plot\x048189\x02\x08\x00\t\x00\x02\x07\x01\x06\x07\x041201\x06python\x04code\x03\x02\x07\x01\x06\x07\x041201\x01\x06\x07\x041201\x01\x06\x07\x041022\x02\x07\x02\x06\x07\x041201\x01\x06\x07\x03882\x06python\x04code\x03\x01\x06\x07\x03883\x06python\x04code\x03\x02\x07\x02\x06\x07\x047406\x06python\x04code\x03\x01\x06\x07\x047406\x02\x07\x01\x06\x07\x047406\x02\x07\x02\x06\x07\x047406\x02\x07\x01\x06\x07\x047406\x02\x07\x02\x06\x07\x047406\x02\x07\x01\x06\x07\x047406\x01\x06\x07\x047407\x06python\x04code\x03\x02\x07\x02\x06\x07\x047408\x06python\x04code\x03\x01\x06\x07\x047408\x02\x07\x01\x06\x07\x047408\x04plot\x03841\x0cvalue_viewer\x03202\x03102\x03134\x02\x07\x01\x06\x07\x042450\x06python\x04code\x03\x01\x06\x07\x041738\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x01\x06\x07\x041785\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x01\x06\x07\x03790\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x02\x06\x07\x041738\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x01\x06\x07\x03877\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x041325\x02\x07\x02\x06\x07\x041325\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x041785\x02\x07\x01\x06\x07\x042450\x02\x07\x02\x06\x07\x042450\x01\x06\x07\x041952\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x01\x06\x07\x041204\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x01\x06\x07\x041325\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x041785\x02\x07\x02\x06\x07\x041785\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x01\x06\x07\x042070\x02\x07\x02\x06\x07\x042070\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x01\x06\x07\x041952\x02\x07\x02\x06\x07\x041952\x02\x07\x02\x06\x07\x041204\x02\x07\x01\x06\x07\x041204\x02\x07\x01\x06\x07\x041785\x01\x06\x07\x042450\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x02\x07\x01\x06\x07\x041341\x02\x07\x02\x06\x07\x041341\x0cvalue_viewer\x03205\x03103\x03135\x01\x06\x07\x03791\x06python\x04code\x03\x04plot\x03842\x01\x06\x07\x03792\x06python\x04code\x03\x01\x06\x07\x03878\x06python\x04code\x03\x01\x06\x07\x03793\x04plot\x03843\x0cvalue_viewer\x03104\x0cvalue_viewer\x03105\x01\x06\x07\x03797\x06python\x04code\x03\x02\x07\x02\x06\x07\x041098\x06python\x04code\x03\x02\x07\x02\x06\x07\x041098\x02\x07\x01\x06\x07\x041098\x02\x07\x02\x06\x07\x041098\x02\x07\x01\x06\x07\x041098\x02\x07\x02\x06\x07\x041098\x01\x06\x07\x041098\x02\x07\x01\x06\x07\x041098\x04plot\x03963\x0cvalue_viewer\x03230\x01\x06\x07\x047075\x06python\x04code\x03\x01\x06\x07\x041743\x02\x07\x02\x06\x07\x043361\x02\x07\x02\x06\x07\x042818\x01\x06\x07\x042737\x01\x06\x07\x042839\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042737\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x01\x06\x07\x043202\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x041787\x02\x07\x02\x06\x07\x041253\x02\x07\x02\x06\x07\x042688\x01\x06\x07\x041787\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042844\x02\x07\x02\x06\x07\x042449\x02\x07\x02\x06\x07\x041324\x02\x07\x01\x06\x07\x041324\x02\x07\x02\x06\x07\x041324\x02\x07\x01\x06\x07\x041787\x02\x07\x02\x06\x07\x041787\x02\x07\x02\x06\x07\x042601\x01\x06\x07\x043374\x02\x07\x01\x06\x07\x042688\x02\x07\x02\x06\x07\x042688\x02\x07\x01\x06\x07\x042688\x02\x07\x01\x06\x07\x041324\x01\x06\x07\x041253\x02\x07\x02\x06\x07\x043005\x01\x06\x07\x043189\x02\x07\x02\x06\x07\x041955\x02\x07\x02\x06\x07\x041743\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x01\x06\x07\x042941\x01\x06\x07\x043005\x01\x06\x07\x042818\x01\x06\x07\x042946\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x01\x06\x07\x042601\x02\x07\x01\x06\x07\x042688\x02\x07\x02\x06\x07\x042688\x02\x07\x01\x06\x07\x042688\x02\x07\x02\x06\x07\x042688\x02\x07\x01\x06\x07\x042688\x02\x07\x02\x06\x07\x042688\x02\x07\x02\x06\x07\x042449\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x043189\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x01\x06\x07\x041955\x02\x07\x01\x06\x07\x042449\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x02\x06\x07\x042688\x02\x07\x01\x06\x07\x042688\x01\x06\x07\x042576\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x01\x06\x07\x042688\x01\x06\x07\x043361\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x02\x07\x02\x06\x07\x041344\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042601\x02\x07\x01\x06\x07\x042601\x02\x07\x02\x06\x07\x042576\x02\x07\x01\x06\x07\x042576\x01\x06\x07\x042688\x01\x06\x07\x042788\x02\x07\x01\x06\x07\x042818\x02\x07\x02\x06\x07\x042818\x02\x07\x01\x06\x07\x042818\x02\x07\x02\x06\x07\x042818\x02\x07\x01\x06\x07\x042818\x02\x07\x02\x06\x07\x042818\x02\x07\x01\x06\x07\x042818\x02\x07\x02\x06\x07\x042818\x01\x06\x07\x042936\x02\x07\x01\x06\x07\x041324\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x01\x06\x07\x041324\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x042737\x02\x07\x02\x06\x07\x042737\x02\x07\x01\x06\x07\x041253\x02\x07\x01\x06\x07\x041253\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x02\x07\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x01\x06\x07\x042065\x02\x07\x02\x06\x07\x042065\x01\x06\x07\x042931\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041955\x02\x07\x01\x06\x07\x041955\x02\x07\x02\x06\x07\x041253\x02\x07\x01\x06\x07\x041253\x01\x06\x07\x043030\x02\x07\x02\x06\x07\x042946\x01\x06\x07\x042449\x02\x07\x02\x06\x07\x041344\x02\x07\x01\x06\x07\x041344\x01\x06\x07\x042844\x01\x06\x07\x041195\x06python\x04code\x03\x01\x06\x07\x03823\x01\x06\x07\x03876\x01\x06\x07\x041736\x06python\x04code\x03\x02\x07\x02\x06\x07\x041345\x01\x06\x07\x03824\x02\x07\x02\x06\x07\x041200\x02\x07\x01\x06\x07\x041200\x02\x07\x01\x06\x07\x041326\x02\x07\x02\x06\x07\x041200\x02\x07\x01\x06\x07\x041200\x02\x07\x02\x06\x07\x041200\x01\x06\x07\x03874\x01\x06\x07\x041345\x02\x07\x01\x06\x07\x041345\x01\x06\x07\x041200\x01\x06\x07\x041326\x02\x07\x02\x06\x07\x041326\x02\x07\x01\x06\x07\x041326\x02\x07\x02\x06\x07\x041326\x02\x07\x01\x06\x07\x041326\x02\x07\x02\x06\x07\x041326\x02\x07\x02\x06\x07\x041345\x02\x07\x01\x06\x07\x041345\x02\x07\x02\x06\x07\x041345\x04plot\x03900\x04plot\x03901\x04plot\x03904\x04plot\x03905\x04plot\x046987\x041890\x042365\x041794\x042595\x042347\x042009\x042086\x041863\x042015\x042575\x041832\x042004\x041999\x042118\x041894\x04plot\x046986\x041764\x041888\x042364\x042594\x042346\x042008\x042087\x041860\x042014\x041720\x042574\x041829\x042002\x041996\x042117\x041893\x04plot\x041130\x041112\x041017\x041013\x02\x07\x01\x06\x07\x03876\x06python\x04code\x03\x01\x06\x07\x03876\x04plot\x03963\x03910\x01\x06\x07\x041744\x06python\x04code\x03\x01\x06\x07\x041301\x01\x06\x07\x041346\x02\x07\x01\x06\x07\x041301\x01\x06\x07\x041319\x02\x07\x02\x06\x07\x041319\x02\x07\x02\x06\x07\x041301\x02\x07\x02\x06\x07\x041346\x04plot\x041195\x01\x06\x07\x03881\x06python\x04code\x03\x08markdown\x03\x02\x08\x00\t\x00\x048160\x04plot\x02\x08\x00\t\x00\x02\x08\x07\x041830\t\x07\x041831\x0cvalue_viewer\x041832\x0cvalue_viewer\x041833\x0cvalue_viewer\x041834\x04plot\x03909\x02\x07\x01\x06\x07\x041199\x06python\x04code\x03\x01\x06\x07\x041199\x01\x06\x07\x041062\x0cvalue_viewer\x03203\x03162\x01\x06\x07\x041193\x06python\x04code\x03\x01\x06\x07\x041063\x01\x06\x07\x041202\x06python\x04code\x03\x01\x06\x07\x041064\x01\x06\x07\x041036\x06python\x04code\x03\x02\x07\x02\x06\x07\x047074\x06python\x04code\x03\x01\x06\x07\x041737\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x01\x06\x07\x042734\x01\x06\x07\x042838\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x01\x06\x07\x043200\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041782\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042068\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x01\x06\x07\x043375\x02\x07\x01\x06\x07\x042734\x02\x07\x01\x06\x07\x041322\x02\x07\x02\x06\x07\x041322\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x02\x07\x01\x06\x07\x043001\x02\x07\x02\x06\x07\x043001\x01\x06\x07\x043185\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x041322\x02\x07\x01\x06\x07\x041322\x02\x07\x02\x06\x07\x041322\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x041205\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x02\x06\x07\x041737\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x01\x06\x07\x042937\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x01\x06\x07\x043001\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x01\x06\x07\x042816\x01\x06\x07\x042945\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x02\x06\x07\x042843\x01\x06\x07\x042598\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x01\x06\x07\x03879\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x047074\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x01\x06\x07\x043185\x02\x07\x02\x06\x07\x043185\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x042453\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x02\x06\x07\x041340\x01\x06\x07\x042577\x01\x06\x07\x041205\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x043185\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x02\x07\x01\x06\x07\x042068\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x02\x07\x02\x06\x07\x042577\x02\x07\x01\x06\x07\x042577\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x041782\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x042453\x02\x07\x01\x06\x07\x042453\x01\x06\x07\x042789\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x02\x07\x01\x06\x07\x042816\x02\x07\x02\x06\x07\x042816\x01\x06\x07\x042935\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x01\x06\x07\x041322\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x02\x06\x07\x042734\x02\x07\x01\x06\x07\x042734\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x01\x06\x07\x042598\x02\x07\x02\x06\x07\x042598\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042689\x02\x07\x01\x06\x07\x042689\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x02\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x042843\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x01\x06\x07\x043358\x02\x07\x02\x06\x07\x043358\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x01\x06\x07\x047074\x02\x07\x02\x06\x07\x047074\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x01\x06\x07\x042068\x02\x07\x02\x06\x07\x042068\x01\x06\x07\x042927\x01\x06\x07\x03786\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x02\x07\x01\x06\x07\x043358\x01\x06\x07\x047074\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x01\x06\x07\x041951\x02\x07\x02\x06\x07\x041951\x02\x07\x02\x06\x07\x041205\x02\x07\x01\x06\x07\x041205\x02\x07\x01\x06\x07\x041782\x02\x07\x02\x06\x07\x041782\x01\x06\x07\x043027\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x02\x07\x01\x06\x07\x042945\x02\x07\x02\x06\x07\x042945\x01\x06\x07\x042453\x02\x07\x02\x06\x07\x041340\x02\x07\x01\x06\x07\x041340\x01\x06\x07\x042843\x01\x06\x07\x03882\x06python\x04code\x03\x02\x07\x02\x06\x07\x047071\x06python\x04code\x03\x01\x06\x07\x041741\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042814\x01\x06\x07\x042735\x01\x06\x07\x042835\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x042599\x02\x07\x02\x06\x07\x042599\x02\x07\x01\x06\x07\x042599\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x01\x06\x07\x043201\x02\x07\x01\x06\x07\x043357\x02\x07\x02\x06\x07\x043357\x02\x07\x01\x06\x07\x043357\x02\x07\x02\x06\x07\x043357\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x02\x06\x07\x042685\x01\x06\x07\x041784\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x042840\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x02\x06\x07\x042447\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x02\x06\x07\x042599\x01\x06\x07\x043371\x02\x07\x01\x06\x07\x042599\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x043002\x01\x06\x07\x043186\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041741\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x01\x06\x07\x042939\x01\x06\x07\x043002\x02\x07\x01\x06\x07\x047071\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x01\x06\x07\x041784\x02\x07\x01\x06\x07\x047071\x01\x06\x07\x042814\x01\x06\x07\x042942\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x01\x06\x07\x042599\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x02\x06\x07\x042447\x02\x07\x02\x06\x07\x042599\x02\x07\x01\x06\x07\x042599\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x043186\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x041323\x02\x07\x01\x06\x07\x041323\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x01\x06\x07\x041950\x02\x07\x01\x06\x07\x042447\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x02\x07\x02\x06\x07\x047071\x02\x07\x01\x06\x07\x047071\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x01\x06\x07\x042575\x01\x06\x07\x041206\x02\x07\x01\x06\x07\x042685\x01\x06\x07\x043357\x02\x07\x01\x06\x07\x042447\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x02\x06\x07\x042599\x02\x07\x02\x06\x07\x041206\x02\x07\x02\x06\x07\x042575\x02\x07\x01\x06\x07\x042575\x01\x06\x07\x042685\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x01\x06\x07\x042785\x01\x06\x07\x03882\x01\x06\x07\x042932\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x01\x06\x07\x041323\x02\x07\x02\x06\x07\x042735\x02\x07\x02\x06\x07\x042599\x02\x07\x01\x06\x07\x042599\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x02\x06\x07\x041206\x02\x07\x01\x06\x07\x041206\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x041784\x02\x07\x02\x06\x07\x041784\x02\x07\x01\x06\x07\x043357\x02\x07\x02\x06\x07\x043357\x02\x07\x01\x06\x07\x043357\x02\x07\x02\x06\x07\x043357\x02\x07\x01\x06\x07\x043357\x02\x07\x02\x06\x07\x047071\x02\x07\x01\x06\x07\x047071\x02\x07\x02\x06\x07\x047071\x02\x07\x01\x06\x07\x047071\x02\x07\x02\x06\x07\x047071\x01\x06\x07\x042066\x02\x07\x02\x06\x07\x042066\x01\x06\x07\x042929\x02\x07\x02\x06\x07\x043357\x01\x06\x07\x047071\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041206\x01\x06\x07\x043028\x02\x07\x02\x06\x07\x042942\x01\x06\x07\x042447\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041338\x02\x07\x01\x06\x07\x041338\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x02\x07\x02\x06\x07\x041950\x02\x07\x01\x06\x07\x041950\x01\x06\x07\x042840\x02\x07\x02\x06\x07\x041323\x01\x06\x07\x041022\x06python\x04code\x03\x0cvalue_viewer\x03337\x04plot\x041110\x03940\x041015\x03964\x041009\x0cvalue_viewer\x03514\x02\x07\x01\x06\x07\x042824\x06python\x04code\x03\x01\x06\x07\x042824\x08markdown\x03\x08markdown\x03\x08markdown\x03\x08markdown\x03\x0cvalue_viewer\x03155\x04plot\x03908\x04plot\x046991\x01\n\x0b\x01\x0b\x06@\x81c\xd0\x00\x00\x00\x00\x041763\x041887\x042369\x042593\x042348\x041355\x042012\x042089\x041861\x042018\x041623\x041603\x042577\x041717\x041830\x042005\x042000\x042121\x041497\x041896\x01\n\x0b\x01\x0b\x06@\x80E0\x00\x00\x00\x00\x041213\x04plot\x01\n\x0b\x01\x0b\x06@\x80\xa9\xa0\x00\x00\x00\x00\x041194\x02\x07\x02\x06\x07\x047073\x06python\x04code\x03\x01\x06\x07\x041742\x02\x07\x02\x06\x07\x043360\x02\x07\x02\x06\x07\x042815\x02\x07\x01\x06\x07\x041195\x01\x06\x07\x042733\x01\x06\x07\x042836\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042733\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x047073\x02\x07\x02\x06\x07\x042600\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x01\x06\x07\x042600\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x01\x06\x07\x043203\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x02\x06\x07\x042687\x01\x06\x07\x041786\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x02\x06\x07\x042841\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x042448\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x01\x06\x07\x043373\x02\x07\x01\x06\x07\x042841\x02\x07\x02\x06\x07\x042841\x02\x07\x01\x06\x07\x043004\x02\x07\x02\x06\x07\x043004\x02\x07\x01\x06\x07\x043004\x02\x07\x02\x06\x07\x043004\x01\x06\x07\x043188\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x02\x06\x07\x041742\x01\x06\x07\x042940\x01\x06\x07\x043004\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041956\x01\x06\x07\x042815\x01\x06\x07\x042943\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x01\x06\x07\x042600\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042600\x02\x07\x01\x06\x07\x042600\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x043188\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x02\x07\x02\x06\x07\x042687\x02\x07\x01\x06\x07\x042687\x01\x06\x07\x041956\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x042448\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x01\x06\x07\x042573\x01\x06\x07\x043360\x02\x07\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x042448\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x02\x06\x07\x042600\x02\x07\x01\x06\x07\x042600\x02\x07\x02\x06\x07\x042600\x02\x07\x01\x06\x07\x042600\x02\x07\x02\x06\x07\x042600\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x02\x07\x02\x06\x07\x042573\x02\x07\x01\x06\x07\x042573\x01\x06\x07\x042687\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x01\x06\x07\x042787\x02\x07\x01\x06\x07\x042815\x02\x07\x02\x06\x07\x042815\x02\x07\x01\x06\x07\x042815\x02\x07\x02\x06\x07\x042815\x02\x07\x01\x06\x07\x042815\x02\x07\x02\x06\x07\x042815\x01\x06\x07\x042933\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x01\x06\x07\x042733\x02\x07\x02\x06\x07\x042733\x02\x07\x02\x06\x07\x041195\x02\x07\x01\x06\x07\x041195\x02\x07\x01\x06\x07\x042600\x02\x07\x02\x06\x07\x042600\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x02\x06\x07\x041318\x02\x07\x01\x06\x07\x041318\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x01\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x01\x06\x07\x042067\x02\x07\x02\x06\x07\x042067\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x02\x07\x02\x06\x07\x041786\x02\x07\x01\x06\x07\x041786\x01\x06\x07\x042930\x01\x06\x07\x047073\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x02\x07\x01\x06\x07\x041956\x02\x07\x02\x06\x07\x041956\x01\x06\x07\x043029\x02\x07\x02\x06\x07\x042943\x01\x06\x07\x042448\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x02\x07\x01\x06\x07\x041339\x02\x07\x02\x06\x07\x041339\x01\x06\x07\x042841\x02\x07\x01\x06\x07\x041318\x04plot\x041196\x04plot\x041196\x04plot\x041624\x041196\x041211\x041604\x041266\x041499\x03\x08\x00\t\x00\n\x0b\x01\x0b\x06@\x81e@\x00\x00\x00\x00\x046990\x04plot\x01\t\x07\x03475\x02\t\x00\n\x0b\x01\x0b\x06@\x82\x9d@\x00\x00\x00\x00\x02\t\x00\n\x0b\x01\x0b\x06@\x81e@\x00\x00\x00\x00\x01\t\x00\x041761\x041886\x042368\x042592\x042350\x042013\x042088\x041862\x042019\x041631\x042578\x041716\x041831\x042007\x042001\x042122\x041892\x04plot\x041129\x041111\x03842\x03889\x041016\x03962\x041008\x01\x06\x07\x03792\x06python\x04code\x03\x01\x06\x07\x03880\x06python\x04code\x03\x01\x06\x07\x03791\x0cvalue_viewer\x03104\x0cvalue_viewer\x03104\x01\x06\x07\x03797\x06python\x04code\x03\x02\x07\x02\x06\x07\x047072\x06python\x04code\x03\x01\x06\x07\x041740\x02\x07\x02\x06\x07\x043359\x02\x07\x02\x06\x07\x042817\x01\x06\x07\x03797\x01\x06\x07\x042736\x01\x06\x07\x042837\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x02\x06\x07\x041321\x02\x07\x01\x06\x07\x041321\x02\x07\x02\x06\x07\x041321\x02\x07\x01\x06\x07\x041321\x02\x07\x02\x06\x07\x041321\x02\x07\x01\x06\x07\x041321\x02\x07\x02\x06\x07\x041321\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x01\x06\x07\x043204\x02\x07\x02\x06\x07\x041203\x02\x07\x01\x06\x07\x041203\x02\x07\x02\x06\x07\x042686\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041203\x02\x07\x02\x06\x07\x042842\x02\x07\x01\x06\x07\x041203\x02\x07\x02\x06\x07\x041203\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x02\x06\x07\x042597\x01\x06\x07\x043372\x02\x07\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x047072\x02\x07\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x047072\x02\x07\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x047072\x02\x07\x01\x06\x07\x047072\x02\x07\x01\x06\x07\x042597\x02\x07\x02\x06\x07\x043003\x01\x06\x07\x043187\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x02\x06\x07\x041740\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x01\x06\x07\x042938\x01\x06\x07\x043003\x02\x07\x02\x06\x07\x047072\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x047072\x02\x07\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x047072\x01\x06\x07\x042817\x01\x06\x07\x042944\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x01\x06\x07\x042597\x01\x06\x07\x03875\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x02\x07\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x042452\x02\x07\x02\x06\x07\x042597\x02\x07\x01\x06\x07\x042597\x02\x07\x02\x06\x07\x042597\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x043187\x02\x07\x01\x06\x07\x041321\x02\x07\x02\x06\x07\x041321\x02\x07\x01\x06\x07\x041321\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x01\x06\x07\x041953\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x02\x07\x02\x06\x07\x041203\x02\x07\x01\x06\x07\x041203\x02\x07\x02\x06\x07\x041343\x01\x06\x07\x042574\x01\x06\x07\x041203\x02\x07\x01\x06\x07\x042944\x02\x07\x02\x06\x07\x042944\x01\x06\x07\x043359\x02\x07\x02\x06\x07\x042452\x02\x07\x01\x06\x07\x042452\x02\x07\x02\x06\x07\x042452\x02\x07\x01\x06\x07\x042452\x02\x07\x02\x06\x07\x042452\x02\x07\x01\x06\x07\x042452\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041203\x02\x07\x02\x06\x07\x041203\x02\x07\x01\x06\x07\x041203\x02\x07\x02\x06\x07\x042574\x02\x07\x01\x06\x07\x042574\x02\x07\x02\x06\x07\x042574\x01\x06\x07\x042686\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x042452\x02\x07\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x01\x06\x07\x042786\x02\x07\x02\x06\x07\x041203\x02\x07\x01\x06\x07\x041203\x01\x06\x07\x042934\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x01\x06\x07\x041321\x02\x07\x02\x06\x07\x042736\x02\x07\x01\x06\x07\x042597\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x041781\x02\x07\x02\x06\x07\x041781\x02\x07\x01\x06\x07\x042071\x02\x07\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x047072\x02\x07\x02\x06\x07\x047072\x02\x07\x01\x06\x07\x047072\x01\x06\x07\x042071\x02\x07\x02\x06\x07\x042071\x01\x06\x07\x042928\x01\x06\x07\x047072\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x01\x06\x07\x041953\x02\x07\x02\x06\x07\x041953\x02\x07\x02\x06\x07\x041203\x02\x07\x01\x06\x07\x041203\x01\x06\x07\x043026\x02\x07\x02\x06\x07\x042944\x01\x06\x07\x042452\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x02\x07\x02\x06\x07\x041343\x02\x07\x01\x06\x07\x041343\x01\x06\x07\x042842\x04plot\x03910\x04plot\x041621\x041602\x041268\x041234\x041498\x01\n\x0b\x01\x0b\x06@\x82\xc1\xb0\x00\x00\x00\x00\x041622\x04plot\x041212\x041601\x041200\x041267\x041496\x04plot\x03854\x01\x06\x07\x03822\x06python\x04code\x03\x01\x06\x07\x03937\x06python\x04code\x03\x01\x06\x07\x03938\x06python\x04code\x03\x02\x07\x02\x06\x07\x03939\x06python\x04code\x03\x02\x07\x02\x06\x07\x03939\x02\x07\x01\x06\x07\x03939\x02\x07\x02\x06\x07\x03939\x01\x06\x07\x03939\x02\x07\x01\x06\x07\x03939\x0cvalue_viewer\x03204\x03163\x04plot\x03919\x01\x06\x07\x041198\x06python\x04code\x03\x01\x06\x07\x041065\x02\x07\x02\x06\x07\x041197\x06python\x04code\x03\x01\x06\x07\x041066\x01\x06\x07\x041197\x02\x07\x01\x06\x07\x041303\x06python\x04code\x03\x01\x06\x07\x041303\x02\x07\x01\x06\x07\x041303\x02\x07\x02\x06\x07\x041303\x02\x07\x01\x06\x07\x041303\x02\x07\x02\x06\x07\x041303\x02\x07\x01\x06\x07\x041304\x06python\x04code\x03\x01\x06\x07\x041304\x02\x07\x01\x06\x07\x041304\x02\x07\x02\x06\x07\x041304\x01\x06\x07\x042451\x06python\x04code\x03\x01\x06\x07\x041739\x02\x07\x02\x06\x07\x041342\x02\x07\x01\x06\x07\x041342\x02\x07\x02\x06\x07\x041342\x02\x07\x01\x06\x07\x041342\x02\x07\x02\x06\x07\x041783\x02\x07\x01\x06\x07\x041783\x02\x07\x01\x06\x07\x041783\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x01\x06\x07\x041036\x02\x07\x02\x06\x07\x041783\x02\x07\x02\x06\x07\x041783\x02\x07\x01\x06\x07\x041783\x02\x07\x02\x06\x07\x041783\x02\x07\x01\x06\x07\x041783\x01\x06\x07\x041783\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x02\x06\x07\x041739\x02\x07\x01\x06\x07\x042069\x02\x07\x02\x06\x07\x042069\x02\x07\x01\x06\x07\x042069\x02\x07\x02\x06\x07\x042069\x02\x07\x01\x06\x07\x042069\x02\x07\x01\x06\x07\x042069\x02\x07\x02\x06\x07\x042069\x01\x06\x07\x041342\x02\x07\x02\x06\x07\x042069\x01\x06\x07\x041954\x02\x07\x01\x06\x07\x042069\x02\x07\x02\x06\x07\x042069\x02\x07\x02\x06\x07\x041196\x02\x07\x01\x06\x07\x041196\x01\x06\x07\x041196\x02\x07\x02\x06\x07\x041342\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x02\x06\x07\x041783\x02\x07\x02\x06\x07\x041954\x01\x06\x07\x041320\x02\x07\x01\x06\x07\x041783\x01\x06\x07\x042069\x02\x07\x02\x06\x07\x042069\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x02\x06\x07\x041196\x02\x07\x01\x06\x07\x041196\x02\x07\x02\x06\x07\x041342\x02\x07\x01\x06\x07\x041342\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x02\x07\x02\x06\x07\x041954\x02\x07\x01\x06\x07\x041954\x0cvalue_viewer\x03114\x02\x07\x01\x06\x07\x041302\x06python\x04code\x03\x02\x07\x02\x06\x07\x041302\x01\x06\x07\x041302\x02\x07\x01\x06\x07\x041302\x02\x07\x02\x06\x07\x041302\x02\x07\x01\x06\x07\x041302\x02\x07\x02\x06\x07\x041302\x02\x07\x01\x06\x07\x041302\x0cvalue_viewer\x03158\x04plot\x03914\x0cvalue_viewer\x03114\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\x01\x05\x01\xfd+\xba\x15\xd7\x022t\t\xfc\xce<\xf6\xf4\x91$i\x9a,\x0e%\xe8\x9fAs\xf6M\xf1\xfe\xa5\x1c\xb9\xa2\x8b\"\xacl\xdcq\xad\x8c\x11Q\xb5\xc8\xdc\xc8\xbf/\xd2\xc4&PV\x08y\x82\x9a\nd\x87\xd0\xff\x0c\x9c\r\\\xbd]J\xcf@\x05\xcd(\xf8&\x07\xde\xe2\x93\x93\x1b\x16x>\x9e]`\xcc\xb5:\xc4\xfb\x1f\xfe\x9e\xa4\x7f\xd9\xe6u4l!:,f\xe32;N.a\xdd\xb4\xf9i\xe9Mu\x88]\x03\xf8\xe3\xac\xe6\xe0d\t\x0c\xae]\x91\xe6bq\xf9S*]\xf8\x87\xb7\xb4\x03q\xc2\x94\x85\xe3O\x866\xb1B\x0e\xc7\xde\xbe,4X\x12\xcb\xc1\xe3\xcfe\t\x12\xe2\x0e\r\xb3%\x01\xc9\xd1\xd7\x88g\x9aF#yOy\x02\xa1\xdd\xb2\x85\t\x1do\xbfUz\xd5{Wz3\x02\xc1\xcd\xba\xec\xa4;\xcc\xb3\x0b\xaa\x97\xf8\xbd\x8e\xfa-\xcc`hG.!`d`\x80\xacs\x08\xdb5!\xa8\x80p\xde~\xf0\xb9!+}\xe4{\xa0\xeb\xc5XK\xc7z\xca\xe1\xa6MX\xf2\xd4\x93\xa7\x17\xab\xdfX:\xcc\x8aH\x03\xf7~\xd2\x17\xb6)*\x8a\xbc\xa6\x83\xb7\xcef\xfeH\x1d;@\xed\xf2\xc2\xa2V\xabF\x83\xc8\xf2\xd5]\xf4.$\x83\x8d]l\x89\x93)\xd1@\xe1\xd4\xfe\x1c\xd3\xd1W\xfd\xfcR\xc0\x88Y?\xa3\xae\xac\x0e\x19\xdd^2>k\xc8\x89A*\xc1\x9a\x03(\xe2\x0f\xaa\xd4\xefd\xe5\xe5,\xc5\x85\xcek\xd3\xef(\xc6\xcd\xd5\x82\x84\xd6%_\x1a\xa1B5\xdf\xacv\x1c\x19\xa6Lx\xcbx\xde\x1c\xd1\xb8\xd8\xb0\xd7d\xc8\x1c\x1c\xf4u{\x9bN\xd4S\x1f\xf7\xb3I\xe4\xc9(S\xeb\xd3\xe0\x1fU<\xdd\xcd{8\x90\xccehR\x8a\xa1\x8f\x95\xb9\xcb=\xcfG\xd9~\xaa<(\xf8\x82\x04*\xf0\x12\xe6S\xd7\t\x10\xff\n!\x91\x908+~)\xfc\x81J9\xe2\x8e;UQ1}enr\xf8\xdca\x06\xf0\xc3\x85\x8f\xb5\xf6Of\xc4\x1c\xb4\x0er\xb3\xe3\x14\xd5\x13\x145/\xc3\xc4p\xfe\xba\xfd?f\xad\xbc5\x03qg\xc2\xe0K6&\xafg%TZhoj\xd2s|:Z\xab\xa3\xb4\x1f#\x02\xa9\xd4\xaa7\xcf\xe8\x03g\xf2\x91\x08\xbb\xc0\xd3\x81`?N68\xe1\xb2{\xbe_N\x86\xc6\xb9&\x89\xf4F\xc8\x10\xb6\xbe\xa0\xff\x8c\xa6\xc8\n\x82\xc0\x90\x99\x16\xfaBBY\x08\xd2\x1b\xaa\xa36\xd0{\xb1P7D\xd7\xf3n\x80\x8c\x94F\x17\xb7\xf3Y\xa3?!N\x0b\xe5m\xc3\x0be*\x83\x82\x01\xa4\'\x94\xb2\x13OT\xe2a\x94a+\x14\xe3\xef\x1f\x1e\xb8\x15[\xec\t\xdc{\x1e_)\xc0\xd3A7m\x8c9\xb9\x18#\xef\xf1\xfb\xc3$\n\xa8w\xfb+\x81\xc3;\x19c(<C\xc3=\xa8\x1f\xa0\x9aXS\xd1\xfa\xf53s\x9f\x99$8\xb7T\xe6fv\xb1\xee^\xb7\xccHl\x9e\x14\x11\x86\xee\xc6\x05\xc7\xfaj\x911\xabx\xdb\xf6&\xb5\xf1Q%;\xea5\xeb\x9a\xdc\xa3\xe2\xe3\xd1N\xc6\xda\xd4\xc5\\\xff,a\xca\xb4\xa6\x9e\x19\x81\x81u\xdb\xa6\xf2(\xd6>0\t\xee\xfc\xe9\x9e\xd655\xf8\xc2\xe7&&P\xf5\xe4]h\xa6zLP\xc0\xd2\x9d8\x14K\x7f\r\x12\xe7~\xc0\xcd\xd6\x19\r@s\x9f\xd6\x13\x85SD\xc4\xe2a\xe3\xac\xd8\xb2\x01@O/\xddi\xc5<8P\xd4\xb4teip\xf52\xae\x01\n\xb1\xc3\xc3\xb2\xcb\x14}b\xc4{\xb1,\xe6\x88\xdc\x01\xef\xbd\xa3,\x7fM\xd5\x7f,dz\xa6\xe6LX\xa7\xae\xe3C,\xaf\xc7\xbf\x0f\x97\xf4\xdc\xdd8\x807j\xb6%#\x14\x92T/L\xde\xaa\xb0\x8e\t\xfd\xd0\xc2\xa7\xcaoK\xf4\x98\xa7*\xc6\xb9\x14\x08\x08>\xe4\xe9\x8f\x83\x8d\xb93\xc5\xf4\x83\xa7\xc9[3\x02$j\x0b9\xd7\xf1\xa1A3\x053^\x05\x08^\xcb\r\x92\t\xa7<\xb5\xd8\xba\xaa\xac+S\xb06\x95\xd0\xda\x933\x1d_\x03\xd8\\8\x1b\xfd\xf4\x17\xe4\x0f\x06\xd5\xd8\xadso<\x95+z\x13\x87\x14\xd2\xaf\x89\xa6\xa6\xcfF;\xbe@F*\xbfL\xbfX\xb4\xeaF%\xfd\x88\x871\xd73\xc0\xbf\x91\xc3\xb3\xf6\xcc\xe2F*\xfd`ns\xa5\xf0F6\xb5\xdf\x035\xc0\xa7\xf72e\x10.$\x84\xc4\xb4J|\n\xcf\xc3\xb3\n\xb4\x94u\xc8\x0e\x7fD\xe3q\xd3\xa4\xbbL\xcc\x14&\x0fG\x9b\xad\xc5\x81&w\xa8M\xff\xbe\x01\xb7\x8a`e\x0e\xcbQJJ^\'\xdf\xd6oD\xdb\rS\x19Y\xe4}@xS\xfd\x8b\x90eM\xc9\x19C3\x89\x90\"\xa6\x9a\xe4\x9d\'_\x90u\x05\xfb\xe2?\xe0\x17\xc7\xfb\x13\xc8&\x82\x16\xdc\x84\"w\xee[\x16\xe7\x1fA<.IR\x9a!?\xfe\xb6\x1e\xbct\xec\xf21\x90\x8a\xbc -\xa0oax3\xaa\xc4\xb2\xeaDl5\xb5\xec\x0c\xb6\xa8\xba\xda5#b]\xc6\xa8\xc3R5p\xdb\xc5\x12\xcf\xe1\x05)}\xc0\x054\xaf\x8es)\xff\xa2\xd5\xf4\xf28\x1e\xa3\xf5,\xc4\xe0*\xcc\xda\xa3\xf4\xad\x11\xee\x93P\xdf`9\xa0\r\xd3\xe7E\xc5`\xdby\xc2\xea\xaa\xe8\xdb\x97H\x99Ok\x1f\x04\xdf\x97\x00\x81>%\x89l\xf4Twk\xf16C\xf9\\TL@jj&\x8b\xe2\x8bBqv\xf0LS\x0bH\xb9K?i\x00OQ`\x7f}\xde\xaez\x15@\x05\xd9\x9f\xaf\xcd\xda\x8a\x8eT\xa5\xc7\xe4T\xb3wv\xc2z]\x9c\xb3\xc0\\\x12\xf9\xa2V\x1bm`\xe5\xae\xc2>]\x86p\xe8\x82\x93`,\xf8\xa9\xe31vo`W\x90e\x8d\x05]\xe5\xed\xf1g`\x19\xad\x923\xed\x0f\xf9\xce+\x9c\xfc \xaa\x01\xc2\xc4\xc4\x94J\xda\xe1~\x06\xdf\xbbn%\x12\xe1\x1e\xe4\xbbD\xb7R\x8b\x9eT\xd9\xfcM4\x1c\x1d\x18\xaf\xc2\xd5\xde\xaaY\x01\xd5\xa5\x98}lEo\xc4\x0c\xef\xc3\x07\x1c\x12Uv\xc9\xd7\xe4\x83\xb5\xfe(\xcf\x86]\xdc\xb0@\xf8\xd2}\x86\xadckh\xa5\xa6\x81\x00\x01u\x93\x0c\x06.\x8ez6\"\x88\xa0-\x92o7\xd6\x8edt\xb9\x03\xc9n\xeb\xacO\x92^i\xff\xa5\xdag\xfc\xf5q\xd43\x1fuu\x9f\x1eK|\xa5\xdc&L\xc6\xbe\xec\"H\x99\xdc\xba\xd2uu\xe2[\x8d\x00\xa6\xf2\x03\x9e)a\x07\xb9@\xc0\x90\n\x06{\xc4\"\x18\xad\x8f3\xb9.\x81AFHE\xe7\xa0\xa6\xb8$\xab\x06\xb4\x83\xc3)u%\x1f\x065\xee\x81\x0fu\x8d\xfbf\x85z\xad<\xef[\x9d$\x08\x93?]\xac\xd5=x\xd0\x8a{\xaei\xaa?0\r\xe6\xef\x93\xe3\x13[\xa4\x91\xf8\x84;]p,\x83\xa8`o\xbe\x1a\xd4-\xb4\x97u\x84=]\xc5\xd8\xef9x@6\xd7y\x01\x04\xbf\xb2Q\x8cQ\x0c\x8et\xc8\xfaF\xab]\xf1g\xf3\xe9\xd1\x1e\x84\x88\xd0\x1e{\xdc\x05\xbe\x04\xbf\xe1c\x16\xc4\x95U\xdb|Em\x90\xe6\x04$d9\x1d\x84\x8a\xa3\x97\xe6\xf5|p\xbcb\xbf\xc1\xd5\xeb\xb3\xaf2\xa7&\x8f\x89\xa7\xb3\xba\xe4R\x9c1\x07J\xa7\xce\xf0\x0e\x8c\xae\xdb\x9e\xde\x00\x84\xe5\x00\xb7}%\xd2\xe5z\xac\xf7}\xa4\xefL2\"V\xc9Z\xee\x00\t\xe7\xc8\xa8\xb4k8\xac\tj\xc5}E\xb4\xe4\xa0\t\xe9YCk6\xe6\x8d\xbaB\x1d\x15\xc6/\n\nw\xec1q\xfa\x85c\x054I\xcb\xf0\xb5\xa4\'Nws?+\xdfw\xd4\x9fk\xe0\xa7\xc4j\xf1\x8b\xa6(\x9d\xf1\xb3\xb3I\xc0D(\xfdT\xd5\x1a\x0c\xa7W\xa2j\xdc\xa1\xbc\xca\xba\xb8_sq\xcb\x91\x05p\x81\xd97@/\xdcz\xf1x\x96>v|c>M\xc0\x96bL\x06\xc4\x0by\xce\x10\xe8\xb8\x9bJ\xd5a<\x10{\x8d-o\x97\x8cY\x8a\xc0\x90\xc0\xdd\xdf\x1aTG\xde9SZ\xc2\xe85\x8a\x84\x0e\xa3\xf8\xe1V;\xc1\x16\xfdTD\x96$\xb6~\x92\xb8n\xf1p\r\xd5;\xd9\xa0\\`Eog;j0\x07wv\x19\x17;\x07\xa1_\xedJ\x17\xfcG\xb0x\xed\xce\x1f\x8b(/o\xe8\x84\xd51.\n/\xb7\xfdQ\xfd*\xe6g\xa9\x9d\xf5\x83\x8b!X\xb8/\xf4\xb9G\xfc0\x84\xdb#\xf3=\xc4\x82\xf9\xb0\x7f#\xcc\xefW\xdd\xea\x10\x9b\xe0\x8fR:\\[\xbf\x84\x9d\xf5!\xff\"\x01\'>\x17t\xc6\t\xd5\xad\xb8\x16\xd4\xb0\xc4\xb8\x12(G\x08\xd4\xf2\x96p\xfeS\x14\xb8NQ\x98\xa0\x8a\x9d\x9d\xff\x0b\xebB\xdc\xe8\x10K\xbc\x17l\x1c\x03\xa0!HJN\x8b\xd2\xc3\x9ex\xd3UB\x01\xefW\xe6\xb6P\x7f\xff#\x9ca\xcf\x92\xb9I\xffB\xdb_\x03T\xd5\xe2N~\xd99\xb5\x03\x13<\xf3j\x93%\xb7\x80\xbb\xd9\xb0\x0f\x93\xcb\xaf~P\xc7\xb0/\xee[\xc3I\xa5\xd5*\xd8\x8f8\x18\xa2\x00\x82mP\xfb\xaf-`5\x84\xa4\xd3\xf3\xff$>\xa9\xcb\x98\xfa6\xae\xfeF\xfa\x10U\xd0!\x91V\x1b\xb9\xe5\xcf\xa5\xd4r(\x03\x9b\xe6\x8c4\xb0i\xbe(I\xc9I\x1b\xc7c\x18\xba\xd0T\x06\xaaD\xf4\x18\x971\xb2\xc3\xba\x18\xc6.\xf8\xb6\xe8\xc3\x96\xa0bZ\'\xfb\xd8=\xd7\x99W\xb5h,\xc8\xfa\xfd\n\x1b#1\x00\xdf\xb7jbLk \x19\x85\xee\xf9b\xf9\xf30\xf4\"\xaba\x83\xd1\xb5\xcf\xc3d%\'gu(/2>\xe2\x1b8\xf4m\x0c`\xf4\\&\x0b\xdb\x8c\xd5q\xb7\x19\x15\x88\xc4\xd1\xd09\xc2\xca\xf9\x1b\xf9\xeb\xf9\xd1\xd7\x872M\xb2\xb6\xe3\x92\xb9\x01[N\x0b\x11?\xcb)8+F\xe9\xfe\xe3\x87U\xf5\x92M\xb5|\xd0\x9bN\xb2\x84\xe8L|*\xec\x08\xb2\xde\xe9\xe4\x97\xbe\xb2\\\xb2\x9a~0\xe7G\xc5\xd8\xe9\xab=[\xe0\x06\x99\"\xe9\x07-\xc7\x80\x17\x87\x96,:\x17\x00\x06\xcb\x00+\xdd|\xfa\x84\xc4\xff!\xde\x9a\xc8/\x0e\xb6\xa9\xb7\xbe\x14<?\xac%t\x9eF\xd1W\x03X_v\xc3\xeaK\x9e\xf9ZDpZ\xdc\x82\x94\xe0&=\xc0p\xab?q\xba\t\xca\xcc\x19`\x82\x8ci\xc5\xa1R<\x19?\xaaA\xf0\x99\xab\xda\x92\xf0\xcd\xb3\xb2\xd4y\x91m\xad\xa7\xaa\xb1\x87\xb0\xa3\xc3\xad8\xabZ\xf5\xab\xdd\xc9\xe4\xed\xf0`\xe5vNF\x1b\x8b\t.\xe0^\xfe\xaaRGo\xbfl\xb0\xa8/\x0f0\xaf\xeb\x96\x9b\x10QF\x91uj[\xef*)F\xb6\xe0\xf7\xb9^t\xd3F\x85s\xc66\x84(\x13F\xae1O\xe7<(\xc6\xf7R\x0fU\\\xfe\x97_.\xe1?\xa0\x89\x15L\xbd\xebU\xc4\xbd\xd7N\xb3\x83\xebK\x12b\x8f\xd6\x955\xd3\x8d8\x11\x87\xe6\x81\x93\xd3\xa28zx\xd6\x17\xe2AYa\x95\xa3\xbc\xec\x98\xfes\x8a\x1d\xfe\xeb+\x12\xfe\xc8\xd5/\x88\xa4&\xc8\xfe\x9d\x8b\x906g\x83\xa2\xe6\xc9\xc0\x99X(\xd4\xff\xa3\x1e\x1c=\x05\x99\xd1\x11\x1dp$\xf5Dg\xc9V\xce\x9e\x1a\xa6\xda1\t\xcd\x8b\xbe\x02\xc5\xde\xe4\xfe\xc9\xc2\x0f]\x82hJ3\x1fs\xfdH\xe6\xeb\xf5G@\xed\xb7@\xdc\xd1\xc8\xcfs\xaa\x82\x9a\\\x0b\xd9\x8c\xe5$\x9bqh\xeeyg\xd2\x9e\x92\xeb;\x8d\x8c\x01\x00\x18BU5\xe0\xda<\x81\x92)\xe3\xf1\xb1+\x00\x13\x92\x94\xf8v)\x90~\xeb\x92\xd5\x92\xf8\x05\xe8_\x9dC\xbb\x08\xad\x01\x04\x00\x03r\x04\x04\x00\x03D\x06\x04\x00\x03p\xe8\x05\x04\x00\x03H\xea\'\x04\x00\x03\xce\x01\x04\x04\x00\x03\xce\x01\xa6\x07\x04\x00\x03\xc3\x01\x04\x04\x00\x039\x04\x04\x00\x039\xde\x02\x04\x00\x039\xb8\x05\x04\x00\x039\xc6\x1c\x04\x00\x03}\x06\x04\x00\x03\xb9\x02\x06\x04\x00\x03\x0c\x04\x04\x00\x03\x0c\xb0\n\x04\x00\x03E\x04\x04\x00\x03E\xd2;\x04\x00\x03E\x92w\x04\x00\x03n\xbc\x05\x04\x00\x03n\xbcH\x04\x00\x03n\xb6\x9d\x01\x04\x00\x03n\x9c\xc8\x01\x04\x00\x03n\xda\xd3\x02\x04\x00\x03d\x90\n\x04\x00\x03\x87\x01\xde\x18\x04\x00\x03L\x90\x08\x04\x00\x03L\x8c&\x04\x00\x03\xfd\x01\x06\x04\x00\x03\x97\x01\xb2\x07\x04\x00\x03k\x06\x04\x00\x03\xb7\x02\xac\x15\x04\x00\x03\xf0\x01\x96\x03\x04\x00\x03\xf0\x01\x9c(\x04\x00\x03\xf0\x01\xc8/\x04\x00\x03\xae\x02\xd4r\x04\x00\x03\xc3\x02\x04\x04\x00\x03\x90\x02\x06\x04\x00\x03\x90\x02\xe0\x02\x04\x00\x03|\xec\x14\x04\x00\x03\x0f\xbc\x02\x04\x00\x03m\x04\x04\x00\x03m\xfc\x01\x04\x00\x03m\xf4\x03\x04\x00\x03m\xec\x05\x04\x00\x03\x14\x06\x04\x00\x03\x13\x0e\x04\x00\x03\x13\xe8\x02\x04\x00\x03\x13\xdc\n\x04\x00\x03\x13\xb6\r\x04\x00\x03\x96\x02\xea\x1e\x04\x00\x03\x9c\x01\xfaq\x04\x00\x03\x9c\x01\x82\xbc\x01\x04\x00\x03\x9c\x01\x86\x87\x02\x04\x00\x03\xe2\x01\xf4<\x04\x00\x03\xe2\x01\xcc?\x04\x00\x03\x0e\x04\x04\x00\x03\x0e\xd6\x0b\x04\x00\x033\x06\x04\x00\x03a\xd8\x01\x04\x00\x01\xad\x01\xe8_\x04\x00\x01r\x00\x04\x00\x01D\x02\x04\x00\x01p\xe4\x05\x04\x00\x01H\xe6\'\x04\x00\x01\xce\x01\x00\x04\x00\x01\xce\x01\xa2\x07\x04\x00\x01\xc1\x01\x8e\x12\x04\x00\x01\xc3\x01\x00\x04\x00\x019\x00\x04\x00\x019\xda\x02\x04\x00\x019\xb4\x05\x04\x00\x019\xc2\x1c\x04\x00\x019\xac\xb9\x04\x04\x00\x019\xb4\xb9\x04\x04\x00\x019\xbc\xb9\x04\x04\x00\x01}\x02\x04\x00\x01\xa9\x01\xc4\xcd\x04\x04\x00\x01\xb9\x02\x02\x04\x00\x01\x0c\x00\x04\x00\x01\x0c\xac\n\x04\x00\x01E\x00\x04\x00\x01E\xce;\x04\x00\x01E\x8ew\x04\x00\x01n\xaa\x05\x04\x00\x01n\xb2\x05\x04\x00\x01n\xb8\x05\x04\x00\x01n\xb2H\x04\x00\x01n\xb8H\x04\x00\x01n\x84_\x04\x00\x01n\xb2\x9d\x01\x04\x00\x01n\x98\xc8\x01\x04\x00\x01n\xd0\xde\x01\x04\x00\x01n\xd8\xde\x01\x04\x00\x01n\xf8\xce\x02\x04\x00\x01n\xd6\xd3\x02\x04\x00\x01d\x8c\n\x04\x00\x01\xde\x01\x02\x04\x00\x01\xd3\x02,\x04\x00\x01\x87\x01\xda\x18\x04\x00\x01L\x8c\x08\x04\x00\x01L\x88&\x04\x00\x01\xc6\x01\x80\n\x04\x00\x01\xc6\x01\xd8\x0c\x04\x00\x01y\x00\x04\x00\x01y\x08\x04\x00\x01A\xc6\x02\x04\x00\x01\xdc\x01\xe2O\x04\x00\x01\xb0\x02\xb6\x11\x04\x00\x01\xfd\x01\x02\x04\x00\x01\xaa\x02\x02\x04\x00\x01\x97\x01\xae\x07\x04\x00\x01\x87\x02\xc2\xd8\x01\x04\x00\x01k\x02\x04\x00\x01\xb7\x02\xa8\x15\x04\x00\x01\xb7\x02\x84\'\x04\x00\x01\xb7\x02\xc0A\x04\x00\x01\xb7\x02\xc8A\x04\x00\x01\xb7\x02\xd0A\x04\x00\x01\xa3\x02\xf4\x05\x04\x00\x01\xf0\x01\x92\x03\x04\x00\x01\xf0\x01\xd8\n\x04\x00\x01\xf0\x01\x98(\x04\x00\x01\xf0\x01\xc4/\x04\x00\x01\xae\x02\xd0r\x04\x00\x01\xc3\x02\x00\x04\x00\x01\x90\x02\x02\x04\x00\x01\x90\x02\xdc\x02\x04\x00\x01|\xe8\x14\x04\x00\x01\x1d\xec\x01\x04\x00\x01B\xf8\x02\x04\x00\x01\x0f\x00\x04\x00\x01\x0f\xb8\x02\x04\x00\x01m\x00\x04\x00\x01m\xf8\x01\x04\x00\x01m\xf0\x03\x04\x00\x01m\xe8\x05\x04\x00\x01\xbb\x02\xb2\x12\x04\x00\x01\xbb\x02\xb8\x12\x04\x00\x01\xa2\x01\xf4\x02\x04\x00\x01b\x00\x04\x00\x01\x14\x02\x04\x00\x01M\xc6\x04\x04\x00\x01M\xce\x04\x04\x00\x01M\xd6\x04\x04\x00\x01\xcc\x01\x8a\xef\x02\x04\x00\x01\x13\x02\x04\x00\x01\x13\n\x04\x00\x01\x13\xe4\x02\x04\x00\x01\x13\xc8\n\x04\x00\x01\x13\xd0\n\x04\x00\x01\x13\xd8\n\x04\x00\x01\x13\xb2\r\x04\x00\x01\x05\xb4f\x04\x00\x01\xc8\x02\xa0\x16\x04\x00\x01\xb3\x02\x92\x06\x04\x00\x01\x96\x02\xde\x1e\x04\x00\x01\x96\x02\xe6\x1e\x04\x00\x01\x9c\x01\xf6q\x04\x00\x01\x9c\x01\xfe\xbb\x01\x04\x00\x01\x9c\x01\x82\x87\x02\x04\x00\x01\xe2\x01\xd6<\x04\x00\x01\xe2\x01\xdc<\x04\x00\x01\xe2\x01\xf0<\x04\x00\x01\xe2\x01\xc8?\x04\x00\x01\x0e\x00\x04\x00\x01\x0e\xd2\x0b\x04\x00\x013\x02\x04\x00\x01\xff\x01\x02\x04\x00\x01a\xd4\x01\x04\x00\x01\x07\xd4\x15\x04\x00\x01\x07\xda\x15\x04\x00\x01\x98\x01\xb2\x03\x04\x01\x02\x00\x18s\r\x08cellType\x06source\x08metadata\x08language\x06plotId\x04dbId\x0btransformId\x05stale\x13controllingViewerId\x08viewerId\x07display\x06height\x05cells\x8d\r\x01\x02\xd9\x05S\xc3\x02`;\x1en\x13n\x13n\x13n\x13n\x13n\x9d\x02\xb8\x02\xeb\x015\x88\x02\xbf\x02~\x96\x02\x90\x01\x98\x01\xff\x01\x98\x01L\xda\x01\xa1\x01\xc2\x01h^\x11V\xad\x02t\xba\x02\xbd\x01\xb6\x01\xf8\x01\x8a\x01\x04@\xc7\x01\xc0\x01\x0c\x90\x02\x0c\x90\x02\x0c6k\x95\x02-\xd8\x01\xe6\x01\x9c\x01\x02\xca\x01|\xb9\x02#r\x12\xcd\x02\xac\x02\xc6\x01\xae\x023\xae\x02\xa3\x02s\x05\xaa\x02\x05\xc3\x01i9y\xf0\x01\xe2\x01\xe9\x01\xbb\x02\xd2\x01\x07d\xe4\x01\xb0\x01_\x96\x01\xaa\x01\x03\xb2\x01\xc0\x02N\xef\x01\xfd\x01\x82\x01\xc0\x02w\xc0\x02\x81\x01a\xa6\x02\xd4\x01\x19\xb4\x01\xbb\x01\x99\x01B\xee\x01\x9a\x01Z:H\xcf\x02\xf1\x01uC\"\xec\x01)\xcb\x021p\x9d\x01\x87\x01\xad\x01\xde\x01\xad\x01\xe5\x01\xaf\x02Q}Q\xab\x01\x97\x01\xa0\x02<\xc9\x02\x8d\x02]v\xbc\x02\x04v\x0b\xbc\x02v\xbc\x02v\xbc\x02v\x04\xbc\x02\x06R\x04\x1b\x06R\x05\x1bR\x1b\x04R\x03\x1bR\x04\x1b\x0fR\x1bR\x1b\xf4\x01\x1b\xed\x01\xca\x02\x04\xed\x01\x07\xca\x02\xed\x01\xca\x02\xed\x01\x04\xbf\x01\x04\xca\x02\x01\xbf\x01\x04\xca\x02\x07\xbf\x01\xca\x02\xbf\x01\xca\x02\x04\xbf\x01\x04\xca\x02\x01\xbf\x01\x04\xca\x02\x05\xbf\x01\xca\x02\xbf\x01\x04\x1fi\xbf\x01\x1f\x06\x9e\x01\x06\x9e\x01\x06\x9e\x01\x06\x9e\x01\x0e\xb8\x01\xf2\x01\xb8\x01\xf2\x01\xb8\x01\x14J*[\x83\x02\xa2\x02\x92\x01j\x84\x02\x91\x02\x89\x01\x9a\x02\x93\x01\x83\x01g\xd6\x01e\xd6\x02.\xb0\x02q\x98\x02\xd1\x01\xd3\x02\xe7\x01\x1c\xfc\x01\x00\x9f\x01T$+?\xac\x01U=\x1d\x06b\xc5\x02\x9b\x01\x15\xc4\x02\xdb\x01\xc9\x01\x87\x02,\xc1\x02MO\xb3\x028\xcc\x02\xa0\x01x/I\xdf\x01\x99\x02\xb7\x01\xcd\x01\xd4\x022\xc8\x02\xb1\x01\xfe\x01\x8f\x01\xbd\x02\xb5\x02X\xbe\x02\xb4\x024\x8a\x02\xbe\x01\r\xe1\x01\xa2\x01\x8e\x01\xd9\x01\xc5\x01\x80\x02\xd1\x02\xdd\x01\x8d\x01\x89\x02\xf9\x01\xcb\x01\xe0\x01\x81\x02l\xea\x01\x85\x02\xbc\x01\xcc\x01\x82\x02\x88\x01Yz%\x9f\x02\xf3\x01\x97\x02F7&\x9e\x02\xd3\x01\xa4\x02\x86\x02\xdc\x01K\xa3\x01\xc1\x01\x7f\xa4\x01\xe8\x01\x8e\x02\xd2\x02S\xba\x01\xd7\x01\xa1\x02\t\x16\xf6\x01\x93\x02\x17(\x1a\x94\x02\x9b\x02om\x94\x01\xc8\x01\x80\x01AW\x8b\x02\xb3\x01\x0f\'\x8f\x02\x18\xd5\x02\\\x10\x95\x01c0\xfa\x01D\xc4\x01\x08\x8c\x02\xa9\x02\xa6\x01\x84\x01\xab\x02\x86\x01\xa7\x02\xa5\x02\x0b\xa5\x02\x9c\x02\xb9\x01\xc2\x02\x92\x02\xa5\x01\xb5\x01\xd0\x02\xf5\x01\xa7\x01f\x8b\x01\xce\x02\x8c\x01\x01\xb2\x02\xd5\x01\xfb\x01>\xf7\x01\x91\x01G\x04\xcf\x01\xb1\x02\xb6\x02\xc5\x02{\xc7\x02\xa8\x01EP\n\xc6\x02\x85\x01\xae\x01\xe3\x01 \xb7\x02\x04\xc7\x01\x05\xb7\x02\xc7\x01\xb7\x02\x04\xc7\x01\x04\xb7\x02\x07\xc7\x01\xb7\x02\xc7\x01\xb7\x02\x04\xc7\x01\x0f\xb7\x02\xc7\x01\xb7\x02\xd0\x01!\xaf\x01\xce\x01\xa8\x02\xae\x07\x8f\x06\xd2\x14\x86\x08\xa3\x1c\xa8!\xac=\x81_\x82\xa0\x01\xa7\x9d\x01\x88\xb1\x01\xa3\xa9\x01\x98\xd4\x01\x87\xd4\x01\xd8\xcb\x02\xa3\xc6\x02\x8a\xca\x02\x8f\xda\x02\xf2\xcb\x02\xe9\xad\x02\xf5\x03\xbd\x18\xbb\x01\x0b\xa2S\xefH\x89\x07\xaf\x03\xbc\t\x84&\xad\x08\xc8\x1b\xcd8\xfd\x03\xe0\xab\x03\xef\x95\x03\xa1\x19\xd5\x01\x80V\x81$\x87\x1e\xe5\x13\xa8Y\xc1Y\x0b\x00c\xc4\x02\x02\x00\xda\x02\xa2\x10\x97\x13\x86]\xec\x0f\xd3c\xda\x0f\xe6\x9f\x01\x8au\xd3\xee\x01\xbe\x02\xcf,\xe5\x14\xa2\xcb\x01\xdb~\xe9K\xf4\t\xc4\x06\x8f\x07\xcah\xcdr\x90\x9c\x01\xef\x98\x01\xa2\x15\x9eK\xb1f\xb6\xb2\x01\xa5\x91\x01\xce\x9e\x01\xfc\x82\x03\xd1\xc2\x04\xc0]\x98J\xfbG\xee\x89\x02\xfb\xd4\x02\x82\x01\xfa%\xda\x99\x01\xe7\xcf\x01\x97\x05\xd28\x819\x10\xa2\xa3\x01\xaf\x92\x01\xab\x0f\x1d\xda\x13\xb1\x14\x8a\x11\x9a:\xa1/:\xa8<\xbfX\xb2i\xf1i\xce\x0b\xb1\n\xf2\x01U\xd5\x02J\xe6\x06\x86\x06\xb4\xce\x01\xabI\xc1V\xcc\x9a\x02\xe7\x80\x02\xffM\xcd\x03\xdcb\xe7%\xff@\xb4\x11\xdeD\xbb,\xe85\xe5_\xa8\x82\x01\xe29\xb3\xa1\x01\xed\x16\xfe\x10\xf6B\xd1S\xf4\x05\xf0\x12\x80\x8c\x01\xdc&\xe2\xcb\x07\x95\xa5\x08\xe2u\xfb\xeb\x01\xd6\xed\x01\xa8\x02\x9b\xef\x01\xb8\xf1\x01\xa9\xf1\x01\xda\xf4\x01\x81\xf4\x01\xc2\xf7\x01\x8fY\x1e\xb9\x93\x01\x04\xc8\x05\xf9\x11\x1c\xfe \xec\x01\x14\xbf\x1f\xc4\x1f\x8b\x1f\xb4\x1f\x02\x93\x1f\xda\x1f\xfb\x1e\x14\x9e\x1f\xe9\x1e\xac\x1f\xe1\x1c\x9f\x02\x9e\xa6\x01\x12\xe1\xac\x01\xec\xac\x01\x02\xa5k\xe8r\x95p\xe4q\xff\xb5\x01~\xcab \xcd]\xc6^N\xa9^\xc8^\x81^\xce_\xbb_B\x80d4\xafd\x80f\x1c\x95d\x9ad\x87b\xba\'\xf0\x02\xcb)\xdc-\x97/\xdb\x0b\xa8 \x81\x1f\x82 \xed\x1f\xbc!\xb7!\xca\x15\xd5\n\xea\x14\xcf\x12\xd6\x12\x95\t\x83\x02\x85\x16\xf2\x10\xdcG\xa0\x04\xa1R`\xf6\r\xb1\x15\xa9\x03\xb4\x01\xe5\x01(\xd0\x02\xfc\x01<\x9e\x11\xb3\x16\x8e\xae\x04\xa7\xfb\x03\x9b\x11\xf5\x1b\xeb\x05\xc60\xd1+\xa8\xbc\x01\xb2\xf4\x03\xcd\xb5\x05\x04\x0b\xf2\xdf\x01\xa7\xbe\x01\xea\x97\x01\xad\xab\x01\xa1\n\xa4\r\xa9\x0f\xeb\x01\x02\x1e\x1f\x03\xe6+\xe7%\xf5\x04\xd8\xdf\x01\x9b\xd7\x01\xdf\x04\"\x9b\x04\xac\x05\xef\x05\x8a\x90\x01\xa2\x13\xd1\xa2\x01\xf8\x05\xaf\x065\x8c\xd0\x01\xdf\xc3\x01\xe2\xfe\x03\xa1\xdd\x02\xef\xad\x01\xdel\xcbc\xed\x07e9\xc8\x10\x8c\x0b\xacr\x90B\x93\xd0\x01\x0b\x8c\x02\xfc\xb4\x01\x86*\xbd\xd0\x01\xcf\x10\xea\x05\x96\xff\x02\xcf\xb5\x01\x9d\xcf\x01\xecw\xfbw\x88\xab\x01\x80k\xb7\xd4\x01\xc6x\xf7\xb5\x01\xb0\xe7\x02\xc1\xeb\x02\x82\xc0\x01\x81\xc0\x01\xae\xfa\x02\xcf\xf9\x02\x9a\x0c\xe1\t%\x85\x02\n\x84\x13\xe4\x17\x8d+\x88>\xa9=\x8e\x02\xab\x01\xb9\x01W\xf6P\xad5\xdb\x0f\x9c\x06\xe7\x01\xa9\x04\xc8\x08\xa5\x0ci\xcc\xf9\x02\xd3\xf8\x02\x95\x01=\x90\x05\xea\x05\xaf\x0e\xcc\x01\xe3\x04\xc4\x17\xbb\x03\x8f\x14\xde\x03\xb3\x03\xd0\x0c\xb9\x06\xb3\x04\xba\x03\x81\x03\x8d\x02-\x00\x9e\xc7\x16\xe3\xc2\x16\xe0\xdd\x06\x99\xe2\x06\x00\x8c\x0c\xfd\x08\xaa\xbc\x03\xaf\xbf\x03\xe0\xc2\x03\xe7\xb8\x03\x96\x18\xad \xe0\x05\xa7\x06\x90\x06\xae\xd6\x03\xe1\xdc\x03\xf81\xd7#\x91\x0eG\x8c\x0e\xdb\x0c\xdc\x04\xdd\x06\x10\x06\x00m\xdc\x13\xf5\x03\xe5\x0f\xf8\xe4\x04\x8d\xe4\x04i\x00\x9e\x04\xab\x04\x88\x05\xf1\x04\x07\x00\xdc\x0b\x82F\xb3K\x90\x0e\x9f\x14\xe4\r\x89\x0e\x0c\x00&\x92\xc6\x01\xb1\xaf\x01\xf7\x06\xa7\x06\x9aw\xdfz\xb4\xd4\x01\xb7\xd7\x01\xde#\x89\'\x06\x8a\'\x85\'\x88\'\x85\'\x02\xe0\'\x8a\x01\xd3(\xf8(\xdd(\x9c)\x97)\x02\xf4)\xef)\xe0A\xe93\xa4\x04\xf5\x10\xb8\x06\xd6\x08\x00";
